ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"command_processing.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	EEPROM_ADDR
  20              		.data
  21              		.align	2
  22              		.type	EEPROM_ADDR, %object
  23              		.size	EEPROM_ADDR, 4
  24              	EEPROM_ADDR:
  25 0000 00800040 		.word	1073774592
  26              		.global	__aeabi_i2f
  27              		.global	__aeabi_fdiv
  28              		.global	__aeabi_f2uiz
  29              		.section	.text.commProcess,"ax",%progbits
  30              		.align	2
  31              		.global	commProcess
  32              		.thumb
  33              		.thumb_func
  34              		.type	commProcess, %function
  35              	commProcess:
  36              	.LFB64:
  37              		.file 1 "..\\src\\command_processing.c"
   1:..\src/command_processing.c **** // ----------------------------------------------------------------------------
   2:..\src/command_processing.c **** // BSD 3-Clause License
   3:..\src/command_processing.c **** 
   4:..\src/command_processing.c **** // Copyright (c) 2016, qbrobotics
   5:..\src/command_processing.c **** // Copyright (c) 2017-2020, Centro "E.Piaggio"
   6:..\src/command_processing.c **** // All rights reserved.
   7:..\src/command_processing.c **** 
   8:..\src/command_processing.c **** // Redistribution and use in source and binary forms, with or without
   9:..\src/command_processing.c **** // modification, are permitted provided that the following conditions are met:
  10:..\src/command_processing.c **** 
  11:..\src/command_processing.c **** // * Redistributions of source code must retain the above copyright notice, this
  12:..\src/command_processing.c **** //   list of conditions and the following disclaimer.
  13:..\src/command_processing.c **** 
  14:..\src/command_processing.c **** // * Redistributions in binary form must reproduce the above copyright notice,
  15:..\src/command_processing.c **** //   this list of conditions and the following disclaimer in the documentation
  16:..\src/command_processing.c **** //   and/or other materials provided with the distribution.
  17:..\src/command_processing.c **** 
  18:..\src/command_processing.c **** // * Neither the name of the copyright holder nor the names of its
  19:..\src/command_processing.c **** //   contributors may be used to endorse or promote products derived from
  20:..\src/command_processing.c **** //   this software without specific prior written permission.
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 2


  21:..\src/command_processing.c **** 
  22:..\src/command_processing.c **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  23:..\src/command_processing.c **** // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  24:..\src/command_processing.c **** // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  25:..\src/command_processing.c **** // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  26:..\src/command_processing.c **** // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  27:..\src/command_processing.c **** // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  28:..\src/command_processing.c **** // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  29:..\src/command_processing.c **** // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  30:..\src/command_processing.c **** // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  31:..\src/command_processing.c **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:..\src/command_processing.c **** // POSSIBILITY OF SUCH DAMAGE.
  33:..\src/command_processing.c **** // ----------------------------------------------------------------------------
  34:..\src/command_processing.c **** 
  35:..\src/command_processing.c **** 
  36:..\src/command_processing.c **** /**
  37:..\src/command_processing.c **** * \file         command_processing.c
  38:..\src/command_processing.c **** *
  39:..\src/command_processing.c **** 
  40:..\src/command_processing.c **** * \brief        Command processing functions.
  41:..\src/command_processing.c **** * \date         March 20th, 2020
  42:..\src/command_processing.c **** * \author       _Centro "E.Piaggio"_
  43:..\src/command_processing.c **** * \copyright    (C) 2012-2016 qbrobotics. All rights reserved.
  44:..\src/command_processing.c **** * \copyright    (C) 2017-2020 Centro "E.Piaggio". All rights reserved.
  45:..\src/command_processing.c **** */
  46:..\src/command_processing.c **** //=================================================================     includes
  47:..\src/command_processing.c **** #include "command_processing.h"
  48:..\src/command_processing.c **** 
  49:..\src/command_processing.c **** 
  50:..\src/command_processing.c **** //================================================================     variables
  51:..\src/command_processing.c **** 
  52:..\src/command_processing.c **** reg8 * EEPROM_ADDR = (reg8 *) CYDEV_EE_BASE;
  53:..\src/command_processing.c **** 
  54:..\src/command_processing.c **** //==============================================================================
  55:..\src/command_processing.c **** //                                                            RX DATA PROCESSING
  56:..\src/command_processing.c **** //==============================================================================
  57:..\src/command_processing.c **** //  This function checks for the availability of a data packet and process it:
  58:..\src/command_processing.c **** //      - Verify checksum;
  59:..\src/command_processing.c **** //      - Process commands;
  60:..\src/command_processing.c **** //==============================================================================
  61:..\src/command_processing.c **** 
  62:..\src/command_processing.c **** void commProcess(void){
  38              		.loc 1 62 0
  39              		.cfi_startproc
  40              		@ args = 0, pretend = 0, frame = 48
  41              		@ frame_needed = 1, uses_anonymous_args = 0
  42 0000 80B5     		push	{r7, lr}
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 7, -8
  45              		.cfi_offset 14, -4
  46 0002 8CB0     		sub	sp, sp, #48
  47              		.cfi_def_cfa_offset 56
  48 0004 00AF     		add	r7, sp, #0
  49              		.cfi_def_cfa_register 7
  63:..\src/command_processing.c **** 
  64:..\src/command_processing.c ****     uint8 CYDATA rx_cmd;
  65:..\src/command_processing.c ****     rx_cmd = g_rx.buffer[0];
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 3


  50              		.loc 1 65 0
  51 0006 E44B     		ldr	r3, .L53
  52 0008 1B78     		ldrb	r3, [r3]
  53 000a 87F82F30 		strb	r3, [r7, #47]
  66:..\src/command_processing.c **** 
  67:..\src/command_processing.c **** //==========================================================     verify checksum
  68:..\src/command_processing.c **** 
  69:..\src/command_processing.c ****     if (!(LCRChecksum(g_rx.buffer, g_rx.length - 1) == g_rx.buffer[g_rx.length - 1])){
  54              		.loc 1 69 0
  55 000e E24B     		ldr	r3, .L53
  56 0010 B3F98030 		ldrsh	r3, [r3, #128]
  57 0014 DBB2     		uxtb	r3, r3
  58 0016 013B     		subs	r3, r3, #1
  59 0018 DBB2     		uxtb	r3, r3
  60 001a 1946     		mov	r1, r3
  61 001c DE48     		ldr	r0, .L53
  62 001e FFF7FEFF 		bl	LCRChecksum
  63 0022 0346     		mov	r3, r0
  64 0024 1946     		mov	r1, r3
  65 0026 DC4B     		ldr	r3, .L53
  66 0028 B3F98030 		ldrsh	r3, [r3, #128]
  67 002c 013B     		subs	r3, r3, #1
  68 002e DA4A     		ldr	r2, .L53
  69 0030 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
  70 0032 9942     		cmp	r1, r3
  71 0034 04D0     		beq	.L2
  70:..\src/command_processing.c ****         // Wrong checksum
  71:..\src/command_processing.c ****         g_rx.ready = 0;
  72              		.loc 1 71 0
  73 0036 D84B     		ldr	r3, .L53
  74 0038 0022     		movs	r2, #0
  75 003a 83F88420 		strb	r2, [r3, #132]
  72:..\src/command_processing.c ****         return;
  76              		.loc 1 72 0
  77 003e 89E2     		b	.L1
  78              	.L2:
  73:..\src/command_processing.c ****     }
  74:..\src/command_processing.c **** 
  75:..\src/command_processing.c ****     switch(rx_cmd) {
  79              		.loc 1 75 0
  80 0040 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
  81 0044 A82B     		cmp	r3, #168
  82 0046 00F28482 		bhi	.L52
  83 004a 01A2     		adr	r2, .L6
  84 004c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
  85              		.p2align 2
  86              	.L6:
  87 0050 79030000 		.word	.L5+1
  88 0054 5B030000 		.word	.L7+1
  89 0058 53050000 		.word	.L52+1
  90 005c 7F030000 		.word	.L8+1
  91 0060 85030000 		.word	.L9+1
  92 0064 A9030000 		.word	.L10+1
  93 0068 43030000 		.word	.L11+1
  94 006c 53050000 		.word	.L52+1
  95 0070 53050000 		.word	.L52+1
  96 0074 DD030000 		.word	.L12+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 4


  97 0078 C3030000 		.word	.L13+1
  98 007c 53050000 		.word	.L52+1
  99 0080 61030000 		.word	.L14+1
 100 0084 FF030000 		.word	.L15+1
 101 0088 53050000 		.word	.L52+1
 102 008c 53050000 		.word	.L52+1
 103 0090 53050000 		.word	.L52+1
 104 0094 53050000 		.word	.L52+1
 105 0098 53050000 		.word	.L52+1
 106 009c 53050000 		.word	.L52+1
 107 00a0 53050000 		.word	.L52+1
 108 00a4 53050000 		.word	.L52+1
 109 00a8 53050000 		.word	.L52+1
 110 00ac 53050000 		.word	.L52+1
 111 00b0 53050000 		.word	.L52+1
 112 00b4 53050000 		.word	.L52+1
 113 00b8 53050000 		.word	.L52+1
 114 00bc 53050000 		.word	.L52+1
 115 00c0 53050000 		.word	.L52+1
 116 00c4 53050000 		.word	.L52+1
 117 00c8 53050000 		.word	.L52+1
 118 00cc 53050000 		.word	.L52+1
 119 00d0 53050000 		.word	.L52+1
 120 00d4 53050000 		.word	.L52+1
 121 00d8 53050000 		.word	.L52+1
 122 00dc 53050000 		.word	.L52+1
 123 00e0 53050000 		.word	.L52+1
 124 00e4 53050000 		.word	.L52+1
 125 00e8 53050000 		.word	.L52+1
 126 00ec 53050000 		.word	.L52+1
 127 00f0 53050000 		.word	.L52+1
 128 00f4 53050000 		.word	.L52+1
 129 00f8 53050000 		.word	.L52+1
 130 00fc 53050000 		.word	.L52+1
 131 0100 53050000 		.word	.L52+1
 132 0104 53050000 		.word	.L52+1
 133 0108 53050000 		.word	.L52+1
 134 010c 53050000 		.word	.L52+1
 135 0110 53050000 		.word	.L52+1
 136 0114 53050000 		.word	.L52+1
 137 0118 53050000 		.word	.L52+1
 138 011c 53050000 		.word	.L52+1
 139 0120 53050000 		.word	.L52+1
 140 0124 53050000 		.word	.L52+1
 141 0128 53050000 		.word	.L52+1
 142 012c 53050000 		.word	.L52+1
 143 0130 53050000 		.word	.L52+1
 144 0134 53050000 		.word	.L52+1
 145 0138 53050000 		.word	.L52+1
 146 013c 53050000 		.word	.L52+1
 147 0140 53050000 		.word	.L52+1
 148 0144 53050000 		.word	.L52+1
 149 0148 53050000 		.word	.L52+1
 150 014c 53050000 		.word	.L52+1
 151 0150 53050000 		.word	.L52+1
 152 0154 53050000 		.word	.L52+1
 153 0158 53050000 		.word	.L52+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 5


 154 015c 53050000 		.word	.L52+1
 155 0160 53050000 		.word	.L52+1
 156 0164 53050000 		.word	.L52+1
 157 0168 53050000 		.word	.L52+1
 158 016c 53050000 		.word	.L52+1
 159 0170 53050000 		.word	.L52+1
 160 0174 53050000 		.word	.L52+1
 161 0178 53050000 		.word	.L52+1
 162 017c 53050000 		.word	.L52+1
 163 0180 53050000 		.word	.L52+1
 164 0184 53050000 		.word	.L52+1
 165 0188 53050000 		.word	.L52+1
 166 018c 53050000 		.word	.L52+1
 167 0190 53050000 		.word	.L52+1
 168 0194 53050000 		.word	.L52+1
 169 0198 53050000 		.word	.L52+1
 170 019c 53050000 		.word	.L52+1
 171 01a0 53050000 		.word	.L52+1
 172 01a4 53050000 		.word	.L52+1
 173 01a8 53050000 		.word	.L52+1
 174 01ac 53050000 		.word	.L52+1
 175 01b0 53050000 		.word	.L52+1
 176 01b4 53050000 		.word	.L52+1
 177 01b8 53050000 		.word	.L52+1
 178 01bc 53050000 		.word	.L52+1
 179 01c0 53050000 		.word	.L52+1
 180 01c4 53050000 		.word	.L52+1
 181 01c8 53050000 		.word	.L52+1
 182 01cc 53050000 		.word	.L52+1
 183 01d0 53050000 		.word	.L52+1
 184 01d4 53050000 		.word	.L52+1
 185 01d8 53050000 		.word	.L52+1
 186 01dc 53050000 		.word	.L52+1
 187 01e0 53050000 		.word	.L52+1
 188 01e4 53050000 		.word	.L52+1
 189 01e8 53050000 		.word	.L52+1
 190 01ec 53050000 		.word	.L52+1
 191 01f0 53050000 		.word	.L52+1
 192 01f4 53050000 		.word	.L52+1
 193 01f8 53050000 		.word	.L52+1
 194 01fc 53050000 		.word	.L52+1
 195 0200 53050000 		.word	.L52+1
 196 0204 53050000 		.word	.L52+1
 197 0208 53050000 		.word	.L52+1
 198 020c 53050000 		.word	.L52+1
 199 0210 53050000 		.word	.L52+1
 200 0214 53050000 		.word	.L52+1
 201 0218 53050000 		.word	.L52+1
 202 021c 53050000 		.word	.L52+1
 203 0220 53050000 		.word	.L52+1
 204 0224 53050000 		.word	.L52+1
 205 0228 53050000 		.word	.L52+1
 206 022c 53050000 		.word	.L52+1
 207 0230 53050000 		.word	.L52+1
 208 0234 53050000 		.word	.L52+1
 209 0238 53050000 		.word	.L52+1
 210 023c 53050000 		.word	.L52+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 6


 211 0240 53050000 		.word	.L52+1
 212 0244 53050000 		.word	.L52+1
 213 0248 53050000 		.word	.L52+1
 214 024c 53050000 		.word	.L52+1
 215 0250 F5020000 		.word	.L16+1
 216 0254 31030000 		.word	.L17+1
 217 0258 FB020000 		.word	.L18+1
 218 025c 3D030000 		.word	.L19+1
 219 0260 01030000 		.word	.L20+1
 220 0264 0D030000 		.word	.L21+1
 221 0268 07030000 		.word	.L22+1
 222 026c 53050000 		.word	.L52+1
 223 0270 2B030000 		.word	.L23+1
 224 0274 19030000 		.word	.L24+1
 225 0278 53050000 		.word	.L52+1
 226 027c 1F030000 		.word	.L25+1
 227 0280 13030000 		.word	.L26+1
 228 0284 53050000 		.word	.L52+1
 229 0288 53050000 		.word	.L52+1
 230 028c 53050000 		.word	.L52+1
 231 0290 37030000 		.word	.L27+1
 232 0294 53050000 		.word	.L52+1
 233 0298 25030000 		.word	.L28+1
 234 029c 53050000 		.word	.L52+1
 235 02a0 53050000 		.word	.L52+1
 236 02a4 53050000 		.word	.L52+1
 237 02a8 53050000 		.word	.L52+1
 238 02ac 53050000 		.word	.L52+1
 239 02b0 53050000 		.word	.L52+1
 240 02b4 53050000 		.word	.L52+1
 241 02b8 53050000 		.word	.L52+1
 242 02bc 53050000 		.word	.L52+1
 243 02c0 53050000 		.word	.L52+1
 244 02c4 53050000 		.word	.L52+1
 245 02c8 53050000 		.word	.L52+1
 246 02cc 53050000 		.word	.L52+1
 247 02d0 53050000 		.word	.L52+1
 248 02d4 9D040000 		.word	.L29+1
 249 02d8 F3040000 		.word	.L30+1
 250 02dc 0B050000 		.word	.L31+1
 251 02e0 11050000 		.word	.L32+1
 252 02e4 17050000 		.word	.L33+1
 253 02e8 1D050000 		.word	.L34+1
 254 02ec 23050000 		.word	.L35+1
 255 02f0 3B050000 		.word	.L36+1
 256              		.p2align 1
 257              	.L16:
  76:..\src/command_processing.c **** 
  77:..\src/command_processing.c **** //=============================================================     CMD_ACTIVATE
  78:..\src/command_processing.c ****         case CMD_ACTIVATE:
  79:..\src/command_processing.c ****             cmd_activate();
 258              		.loc 1 79 0
 259 02f4 FFF7FEFF 		bl	cmd_activate
  80:..\src/command_processing.c ****             break;
 260              		.loc 1 80 0
 261 02f8 2CE1     		b	.L1
 262              	.L18:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 7


  81:..\src/command_processing.c **** 
  82:..\src/command_processing.c **** //===========================================================     CMD_SET_INPUTS
  83:..\src/command_processing.c **** 
  84:..\src/command_processing.c ****         case CMD_SET_INPUTS:
  85:..\src/command_processing.c ****             cmd_set_inputs();
 263              		.loc 1 85 0
 264 02fa FFF7FEFF 		bl	cmd_set_inputs
  86:..\src/command_processing.c ****             break;
 265              		.loc 1 86 0
 266 02fe 29E1     		b	.L1
 267              	.L20:
  87:..\src/command_processing.c **** 
  88:..\src/command_processing.c **** //=====================================================     CMD_GET_MEASUREMENTS
  89:..\src/command_processing.c **** 
  90:..\src/command_processing.c ****         case CMD_GET_MEASUREMENTS:
  91:..\src/command_processing.c ****             cmd_get_measurements();
 268              		.loc 1 91 0
 269 0300 FFF7FEFF 		bl	cmd_get_measurements
  92:..\src/command_processing.c ****             break;
 270              		.loc 1 92 0
 271 0304 26E1     		b	.L1
 272              	.L22:
  93:..\src/command_processing.c **** 
  94:..\src/command_processing.c **** //=====================================================     CMD_GET_CURR_AND_MEAS
  95:..\src/command_processing.c **** 
  96:..\src/command_processing.c ****         case CMD_GET_CURR_AND_MEAS:
  97:..\src/command_processing.c ****             cmd_get_curr_and_meas();
 273              		.loc 1 97 0
 274 0306 FFF7FEFF 		bl	cmd_get_curr_and_meas
  98:..\src/command_processing.c ****             break;
 275              		.loc 1 98 0
 276 030a 23E1     		b	.L1
 277              	.L21:
  99:..\src/command_processing.c ****             
 100:..\src/command_processing.c **** //=========================================================     CMD_GET_CURRENTS
 101:..\src/command_processing.c **** 
 102:..\src/command_processing.c ****         case CMD_GET_CURRENTS:
 103:..\src/command_processing.c ****                        
 104:..\src/command_processing.c ****             cmd_get_currents();
 278              		.loc 1 104 0
 279 030c FFF7FEFF 		bl	cmd_get_currents
 105:..\src/command_processing.c ****            
 106:..\src/command_processing.c ****    
 107:..\src/command_processing.c ****             break;
 280              		.loc 1 107 0
 281 0310 20E1     		b	.L1
 282              	.L26:
 108:..\src/command_processing.c **** 
 109:..\src/command_processing.c **** //=========================================================     CMD_GET_CURR_DIFF
 110:..\src/command_processing.c ****          
 111:..\src/command_processing.c ****         case CMD_GET_CURR_DIFF:
 112:..\src/command_processing.c ****             cmd_get_currents_for_cuff();
 283              		.loc 1 112 0
 284 0312 FFF7FEFF 		bl	cmd_get_currents_for_cuff
 113:..\src/command_processing.c ****             break;
 285              		.loc 1 113 0
 286 0316 1DE1     		b	.L1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 8


 287              	.L24:
 114:..\src/command_processing.c ****             
 115:..\src/command_processing.c **** //=========================================================     CMD_GET_CURR_DIFF
 116:..\src/command_processing.c ****         
 117:..\src/command_processing.c ****         case CMD_GET_VELOCITIES:
 118:..\src/command_processing.c ****             cmd_get_velocities();
 288              		.loc 1 118 0
 289 0318 FFF7FEFF 		bl	cmd_get_velocities
 119:..\src/command_processing.c ****             break;
 290              		.loc 1 119 0
 291 031c 1AE1     		b	.L1
 292              	.L25:
 120:..\src/command_processing.c ****             
 121:..\src/command_processing.c **** //=========================================================     CMD_GET_CURR_DIFF
 122:..\src/command_processing.c **** 
 123:..\src/command_processing.c ****         case CMD_GET_ACCEL:
 124:..\src/command_processing.c ****             cmd_get_accelerations();
 293              		.loc 1 124 0
 294 031e FFF7FEFF 		bl	cmd_get_accelerations
 125:..\src/command_processing.c ****             break;
 295              		.loc 1 125 0
 296 0322 17E1     		b	.L1
 297              	.L28:
 126:..\src/command_processing.c **** 
 127:..\src/command_processing.c **** //=========================================================     CMD_GET_JOYSTICK
 128:..\src/command_processing.c **** 
 129:..\src/command_processing.c ****         case CMD_GET_JOYSTICK:
 130:..\src/command_processing.c ****             cmd_get_joystick();
 298              		.loc 1 130 0
 299 0324 FFF7FEFF 		bl	cmd_get_joystick
 131:..\src/command_processing.c ****         break;
 300              		.loc 1 131 0
 301 0328 14E1     		b	.L1
 302              	.L23:
 132:..\src/command_processing.c ****             
 133:..\src/command_processing.c **** //=========================================================     CMD_GET_EMG
 134:..\src/command_processing.c **** 
 135:..\src/command_processing.c ****         case CMD_GET_EMG:
 136:..\src/command_processing.c ****             cmd_get_emg();
 303              		.loc 1 136 0
 304 032a FFF7FEFF 		bl	cmd_get_emg
 137:..\src/command_processing.c ****             break;
 305              		.loc 1 137 0
 306 032e 11E1     		b	.L1
 307              	.L17:
 138:..\src/command_processing.c ****             
 139:..\src/command_processing.c **** //=========================================================     CMD_GET_ACTIVATE
 140:..\src/command_processing.c ****             
 141:..\src/command_processing.c ****         case CMD_GET_ACTIVATE:
 142:..\src/command_processing.c ****             cmd_get_activate();
 308              		.loc 1 142 0
 309 0330 FFF7FEFF 		bl	cmd_get_activate
 143:..\src/command_processing.c ****             break;
 310              		.loc 1 143 0
 311 0334 0EE1     		b	.L1
 312              	.L27:
 144:..\src/command_processing.c ****             
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 9


 145:..\src/command_processing.c **** //=========================================================     CMD_SET_BAUDRATE
 146:..\src/command_processing.c ****             
 147:..\src/command_processing.c ****         case CMD_SET_BAUDRATE:
 148:..\src/command_processing.c ****             cmd_set_baudrate();
 313              		.loc 1 148 0
 314 0336 FFF7FEFF 		bl	cmd_set_baudrate
 149:..\src/command_processing.c ****             break;  
 315              		.loc 1 149 0
 316 033a 0BE1     		b	.L1
 317              	.L19:
 150:..\src/command_processing.c ****             
 151:..\src/command_processing.c **** //============================================================     CMD_GET_INPUT
 152:..\src/command_processing.c **** 
 153:..\src/command_processing.c ****         case CMD_GET_INPUTS:
 154:..\src/command_processing.c ****             cmd_get_inputs();
 318              		.loc 1 154 0
 319 033c FFF7FEFF 		bl	cmd_get_inputs
 155:..\src/command_processing.c ****             break;
 320              		.loc 1 155 0
 321 0340 08E1     		b	.L1
 322              	.L11:
 156:..\src/command_processing.c **** 
 157:..\src/command_processing.c **** //=============================================================     CMD_GET_INFO
 158:..\src/command_processing.c **** 
 159:..\src/command_processing.c ****         case CMD_GET_INFO:
 160:..\src/command_processing.c ****             infoGet(  __REV16(*((uint16 *) &g_rx.buffer[1])) );
 323              		.loc 1 160 0
 324 0342 164B     		ldr	r3, .L53+4
 325 0344 1B88     		ldrh	r3, [r3]
 326 0346 BB61     		str	r3, [r7, #24]
 327              	.LBB12:
 328              	.LBB13:
 329              		.file 2 "Generated_Source\\PSoC5/cmsis_gcc.h"
   1:Generated_Source\PSoC5/cmsis_gcc.h **** /**************************************************************************//**
   2:Generated_Source\PSoC5/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Generated_Source\PSoC5/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Generated_Source\PSoC5/cmsis_gcc.h ****  * @version  V5.00
   5:Generated_Source\PSoC5/cmsis_gcc.h ****  * @date     28. October 2016
   6:Generated_Source\PSoC5/cmsis_gcc.h ****  ******************************************************************************/
   7:Generated_Source\PSoC5/cmsis_gcc.h **** /*
   8:Generated_Source\PSoC5/cmsis_gcc.h ****  * Copyright (c) 2009-2016 ARM Limited. All rights reserved.
   9:Generated_Source\PSoC5/cmsis_gcc.h ****  *
  10:Generated_Source\PSoC5/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Generated_Source\PSoC5/cmsis_gcc.h ****  *
  12:Generated_Source\PSoC5/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Generated_Source\PSoC5/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Generated_Source\PSoC5/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Generated_Source\PSoC5/cmsis_gcc.h ****  *
  16:Generated_Source\PSoC5/cmsis_gcc.h ****  * http://www.apache.org/licenses/LICENSE-2.0
  17:Generated_Source\PSoC5/cmsis_gcc.h ****  *
  18:Generated_Source\PSoC5/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Generated_Source\PSoC5/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Generated_Source\PSoC5/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Generated_Source\PSoC5/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Generated_Source\PSoC5/cmsis_gcc.h ****  * limitations under the License.
  23:Generated_Source\PSoC5/cmsis_gcc.h ****  */
  24:Generated_Source\PSoC5/cmsis_gcc.h **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 10


  25:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Generated_Source\PSoC5/cmsis_gcc.h **** 
  28:Generated_Source\PSoC5/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Generated_Source\PSoC5/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Generated_Source\PSoC5/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Generated_Source\PSoC5/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Generated_Source\PSoC5/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Generated_Source\PSoC5/cmsis_gcc.h **** 
  34:Generated_Source\PSoC5/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  35:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __ASM
  36:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __ASM                     __asm
  37:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  38:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __INLINE
  39:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __INLINE                  inline
  40:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  41:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  42:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __STATIC_INLINE           static inline
  43:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  44:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __NO_RETURN
  45:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __NO_RETURN               __attribute__((noreturn))
  46:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  47:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __USED
  48:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __USED                    __attribute__((used))
  49:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  50:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   _WEAK
  51:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __WEAK                    __attribute__((weak))
  52:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  53:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32
  54:Generated_Source\PSoC5/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  55:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)     (((struct T_UINT32 *)(x))->v)
  56:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  57:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __ALIGNED
  58:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __ALIGNED(x)              __attribute__((aligned(x)))
  59:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  60:Generated_Source\PSoC5/cmsis_gcc.h **** #ifndef   __PACKED
  61:Generated_Source\PSoC5/cmsis_gcc.h ****   #define __PACKED                  __attribute__((packed, aligned(1)))
  62:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
  63:Generated_Source\PSoC5/cmsis_gcc.h **** 
  64:Generated_Source\PSoC5/cmsis_gcc.h **** 
  65:Generated_Source\PSoC5/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  66:Generated_Source\PSoC5/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  67:Generated_Source\PSoC5/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  68:Generated_Source\PSoC5/cmsis_gcc.h ****   @{
  69:Generated_Source\PSoC5/cmsis_gcc.h ****  */
  70:Generated_Source\PSoC5/cmsis_gcc.h **** 
  71:Generated_Source\PSoC5/cmsis_gcc.h **** /**
  72:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  73:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  74:Generated_Source\PSoC5/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  75:Generated_Source\PSoC5/cmsis_gcc.h ****  */
  76:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
  77:Generated_Source\PSoC5/cmsis_gcc.h **** {
  78:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  79:Generated_Source\PSoC5/cmsis_gcc.h **** }
  80:Generated_Source\PSoC5/cmsis_gcc.h **** 
  81:Generated_Source\PSoC5/cmsis_gcc.h **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 11


  82:Generated_Source\PSoC5/cmsis_gcc.h **** /**
  83:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  84:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  85:Generated_Source\PSoC5/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  86:Generated_Source\PSoC5/cmsis_gcc.h ****  */
  87:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
  88:Generated_Source\PSoC5/cmsis_gcc.h **** {
  89:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  90:Generated_Source\PSoC5/cmsis_gcc.h **** }
  91:Generated_Source\PSoC5/cmsis_gcc.h **** 
  92:Generated_Source\PSoC5/cmsis_gcc.h **** 
  93:Generated_Source\PSoC5/cmsis_gcc.h **** /**
  94:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Control Register
  95:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  96:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Control Register value
  97:Generated_Source\PSoC5/cmsis_gcc.h ****  */
  98:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_CONTROL(void)
  99:Generated_Source\PSoC5/cmsis_gcc.h **** {
 100:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 101:Generated_Source\PSoC5/cmsis_gcc.h **** 
 102:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 103:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 104:Generated_Source\PSoC5/cmsis_gcc.h **** }
 105:Generated_Source\PSoC5/cmsis_gcc.h **** 
 106:Generated_Source\PSoC5/cmsis_gcc.h **** 
 107:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 108:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 109:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 110:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 111:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               non-secure Control Register value
 112:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 113:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_CONTROL_NS(void)
 114:Generated_Source\PSoC5/cmsis_gcc.h **** {
 115:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 116:Generated_Source\PSoC5/cmsis_gcc.h **** 
 117:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 118:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 119:Generated_Source\PSoC5/cmsis_gcc.h **** }
 120:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 121:Generated_Source\PSoC5/cmsis_gcc.h **** 
 122:Generated_Source\PSoC5/cmsis_gcc.h **** 
 123:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 124:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Control Register
 125:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 126:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 127:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 128:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_CONTROL(uint32_t control)
 129:Generated_Source\PSoC5/cmsis_gcc.h **** {
 130:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 131:Generated_Source\PSoC5/cmsis_gcc.h **** }
 132:Generated_Source\PSoC5/cmsis_gcc.h **** 
 133:Generated_Source\PSoC5/cmsis_gcc.h **** 
 134:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 135:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 136:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 137:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 138:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 12


 139:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 140:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_CONTROL_NS(uint32_t control)
 141:Generated_Source\PSoC5/cmsis_gcc.h **** {
 142:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 143:Generated_Source\PSoC5/cmsis_gcc.h **** }
 144:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 145:Generated_Source\PSoC5/cmsis_gcc.h **** 
 146:Generated_Source\PSoC5/cmsis_gcc.h **** 
 147:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 148:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get IPSR Register
 149:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 150:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               IPSR Register value
 151:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 152:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_IPSR(void)
 153:Generated_Source\PSoC5/cmsis_gcc.h **** {
 154:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 155:Generated_Source\PSoC5/cmsis_gcc.h **** 
 156:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 157:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 158:Generated_Source\PSoC5/cmsis_gcc.h **** }
 159:Generated_Source\PSoC5/cmsis_gcc.h **** 
 160:Generated_Source\PSoC5/cmsis_gcc.h **** 
 161:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 162:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get APSR Register
 163:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 164:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               APSR Register value
 165:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 166:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_APSR(void)
 167:Generated_Source\PSoC5/cmsis_gcc.h **** {
 168:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 169:Generated_Source\PSoC5/cmsis_gcc.h **** 
 170:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 171:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 172:Generated_Source\PSoC5/cmsis_gcc.h **** }
 173:Generated_Source\PSoC5/cmsis_gcc.h **** 
 174:Generated_Source\PSoC5/cmsis_gcc.h **** 
 175:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 176:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get xPSR Register
 177:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 178:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               xPSR Register value
 179:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 180:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_xPSR(void)
 181:Generated_Source\PSoC5/cmsis_gcc.h **** {
 182:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 183:Generated_Source\PSoC5/cmsis_gcc.h **** 
 184:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 185:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 186:Generated_Source\PSoC5/cmsis_gcc.h **** }
 187:Generated_Source\PSoC5/cmsis_gcc.h **** 
 188:Generated_Source\PSoC5/cmsis_gcc.h **** 
 189:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 190:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 191:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 192:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               PSP Register value
 193:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 194:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSP(void)
 195:Generated_Source\PSoC5/cmsis_gcc.h **** {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 13


 196:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 197:Generated_Source\PSoC5/cmsis_gcc.h **** 
 198:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 199:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 200:Generated_Source\PSoC5/cmsis_gcc.h **** }
 201:Generated_Source\PSoC5/cmsis_gcc.h **** 
 202:Generated_Source\PSoC5/cmsis_gcc.h **** 
 203:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 204:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 205:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 206:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 207:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               PSP Register value
 208:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 209:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSP_NS(void)
 210:Generated_Source\PSoC5/cmsis_gcc.h **** {
 211:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 212:Generated_Source\PSoC5/cmsis_gcc.h **** 
 213:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 214:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 215:Generated_Source\PSoC5/cmsis_gcc.h **** }
 216:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 217:Generated_Source\PSoC5/cmsis_gcc.h **** 
 218:Generated_Source\PSoC5/cmsis_gcc.h **** 
 219:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 220:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 221:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 222:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 223:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 224:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 225:Generated_Source\PSoC5/cmsis_gcc.h **** {
 226:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : "sp");
 227:Generated_Source\PSoC5/cmsis_gcc.h **** }
 228:Generated_Source\PSoC5/cmsis_gcc.h **** 
 229:Generated_Source\PSoC5/cmsis_gcc.h **** 
 230:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 231:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 232:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 233:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 234:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 235:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 236:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 237:Generated_Source\PSoC5/cmsis_gcc.h **** {
 238:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : "sp");
 239:Generated_Source\PSoC5/cmsis_gcc.h **** }
 240:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 241:Generated_Source\PSoC5/cmsis_gcc.h **** 
 242:Generated_Source\PSoC5/cmsis_gcc.h **** 
 243:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 244:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 245:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 246:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               MSP Register value
 247:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 248:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSP(void)
 249:Generated_Source\PSoC5/cmsis_gcc.h **** {
 250:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 251:Generated_Source\PSoC5/cmsis_gcc.h **** 
 252:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 14


 253:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 254:Generated_Source\PSoC5/cmsis_gcc.h **** }
 255:Generated_Source\PSoC5/cmsis_gcc.h **** 
 256:Generated_Source\PSoC5/cmsis_gcc.h **** 
 257:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 258:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 259:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 260:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 261:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               MSP Register value
 262:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 263:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSP_NS(void)
 264:Generated_Source\PSoC5/cmsis_gcc.h **** {
 265:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 266:Generated_Source\PSoC5/cmsis_gcc.h **** 
 267:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 268:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 269:Generated_Source\PSoC5/cmsis_gcc.h **** }
 270:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 271:Generated_Source\PSoC5/cmsis_gcc.h **** 
 272:Generated_Source\PSoC5/cmsis_gcc.h **** 
 273:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 274:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 275:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 276:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 277:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 278:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 279:Generated_Source\PSoC5/cmsis_gcc.h **** {
 280:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
 281:Generated_Source\PSoC5/cmsis_gcc.h **** }
 282:Generated_Source\PSoC5/cmsis_gcc.h **** 
 283:Generated_Source\PSoC5/cmsis_gcc.h **** 
 284:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 285:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 286:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 287:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 288:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 289:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 290:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 291:Generated_Source\PSoC5/cmsis_gcc.h **** {
 292:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : "sp");
 293:Generated_Source\PSoC5/cmsis_gcc.h **** }
 294:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 295:Generated_Source\PSoC5/cmsis_gcc.h **** 
 296:Generated_Source\PSoC5/cmsis_gcc.h **** 
 297:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 298:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Priority Mask
 299:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 300:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Priority Mask value
 301:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 302:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 303:Generated_Source\PSoC5/cmsis_gcc.h **** {
 304:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 305:Generated_Source\PSoC5/cmsis_gcc.h **** 
 306:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 307:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 308:Generated_Source\PSoC5/cmsis_gcc.h **** }
 309:Generated_Source\PSoC5/cmsis_gcc.h **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 15


 310:Generated_Source\PSoC5/cmsis_gcc.h **** 
 311:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 312:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 313:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 314:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 315:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Priority Mask value
 316:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 317:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PRIMASK_NS(void)
 318:Generated_Source\PSoC5/cmsis_gcc.h **** {
 319:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 320:Generated_Source\PSoC5/cmsis_gcc.h **** 
 321:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) );
 322:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 323:Generated_Source\PSoC5/cmsis_gcc.h **** }
 324:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 325:Generated_Source\PSoC5/cmsis_gcc.h **** 
 326:Generated_Source\PSoC5/cmsis_gcc.h **** 
 327:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 328:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Priority Mask
 329:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 330:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 331:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 332:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 333:Generated_Source\PSoC5/cmsis_gcc.h **** {
 334:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 335:Generated_Source\PSoC5/cmsis_gcc.h **** }
 336:Generated_Source\PSoC5/cmsis_gcc.h **** 
 337:Generated_Source\PSoC5/cmsis_gcc.h **** 
 338:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 339:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 340:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 341:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 342:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 343:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 344:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 345:Generated_Source\PSoC5/cmsis_gcc.h **** {
 346:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 347:Generated_Source\PSoC5/cmsis_gcc.h **** }
 348:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 349:Generated_Source\PSoC5/cmsis_gcc.h **** 
 350:Generated_Source\PSoC5/cmsis_gcc.h **** 
 351:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 352:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 353:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 354:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 355:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Enable FIQ
 356:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 357:Generated_Source\PSoC5/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 358:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 359:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __enable_fault_irq(void)
 360:Generated_Source\PSoC5/cmsis_gcc.h **** {
 361:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 362:Generated_Source\PSoC5/cmsis_gcc.h **** }
 363:Generated_Source\PSoC5/cmsis_gcc.h **** 
 364:Generated_Source\PSoC5/cmsis_gcc.h **** 
 365:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 366:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Disable FIQ
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 16


 367:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 368:Generated_Source\PSoC5/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 369:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 370:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __disable_fault_irq(void)
 371:Generated_Source\PSoC5/cmsis_gcc.h **** {
 372:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 373:Generated_Source\PSoC5/cmsis_gcc.h **** }
 374:Generated_Source\PSoC5/cmsis_gcc.h **** 
 375:Generated_Source\PSoC5/cmsis_gcc.h **** 
 376:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 377:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Base Priority
 378:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 379:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Base Priority register value
 380:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 381:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 382:Generated_Source\PSoC5/cmsis_gcc.h **** {
 383:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 384:Generated_Source\PSoC5/cmsis_gcc.h **** 
 385:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 386:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 387:Generated_Source\PSoC5/cmsis_gcc.h **** }
 388:Generated_Source\PSoC5/cmsis_gcc.h **** 
 389:Generated_Source\PSoC5/cmsis_gcc.h **** 
 390:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 391:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 392:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 393:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 394:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Base Priority register value
 395:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 396:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_BASEPRI_NS(void)
 397:Generated_Source\PSoC5/cmsis_gcc.h **** {
 398:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 399:Generated_Source\PSoC5/cmsis_gcc.h **** 
 400:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 401:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 402:Generated_Source\PSoC5/cmsis_gcc.h **** }
 403:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 404:Generated_Source\PSoC5/cmsis_gcc.h **** 
 405:Generated_Source\PSoC5/cmsis_gcc.h **** 
 406:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 407:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Base Priority
 408:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 409:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 410:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 411:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 412:Generated_Source\PSoC5/cmsis_gcc.h **** {
 413:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 414:Generated_Source\PSoC5/cmsis_gcc.h **** }
 415:Generated_Source\PSoC5/cmsis_gcc.h **** 
 416:Generated_Source\PSoC5/cmsis_gcc.h **** 
 417:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 419:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 420:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 421:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 422:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 423:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 17


 424:Generated_Source\PSoC5/cmsis_gcc.h **** {
 425:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 426:Generated_Source\PSoC5/cmsis_gcc.h **** }
 427:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 428:Generated_Source\PSoC5/cmsis_gcc.h **** 
 429:Generated_Source\PSoC5/cmsis_gcc.h **** 
 430:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 431:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 432:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 433:Generated_Source\PSoC5/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 434:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 435:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 436:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
 437:Generated_Source\PSoC5/cmsis_gcc.h **** {
 438:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 439:Generated_Source\PSoC5/cmsis_gcc.h **** }
 440:Generated_Source\PSoC5/cmsis_gcc.h **** 
 441:Generated_Source\PSoC5/cmsis_gcc.h **** 
 442:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 443:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Fault Mask
 444:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 445:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Fault Mask register value
 446:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 447:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 448:Generated_Source\PSoC5/cmsis_gcc.h **** {
 449:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 450:Generated_Source\PSoC5/cmsis_gcc.h **** 
 451:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 452:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 453:Generated_Source\PSoC5/cmsis_gcc.h **** }
 454:Generated_Source\PSoC5/cmsis_gcc.h **** 
 455:Generated_Source\PSoC5/cmsis_gcc.h **** 
 456:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 457:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 458:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 459:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 460:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Fault Mask register value
 461:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 462:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 463:Generated_Source\PSoC5/cmsis_gcc.h **** {
 464:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 465:Generated_Source\PSoC5/cmsis_gcc.h **** 
 466:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 467:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 468:Generated_Source\PSoC5/cmsis_gcc.h **** }
 469:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 470:Generated_Source\PSoC5/cmsis_gcc.h **** 
 471:Generated_Source\PSoC5/cmsis_gcc.h **** 
 472:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 473:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Fault Mask
 474:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 475:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 476:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 477:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 478:Generated_Source\PSoC5/cmsis_gcc.h **** {
 479:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 480:Generated_Source\PSoC5/cmsis_gcc.h **** }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 18


 481:Generated_Source\PSoC5/cmsis_gcc.h **** 
 482:Generated_Source\PSoC5/cmsis_gcc.h **** 
 483:Generated_Source\PSoC5/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 484:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 485:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 486:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 487:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 488:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 489:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 490:Generated_Source\PSoC5/cmsis_gcc.h **** {
 491:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 492:Generated_Source\PSoC5/cmsis_gcc.h **** }
 493:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 494:Generated_Source\PSoC5/cmsis_gcc.h **** 
 495:Generated_Source\PSoC5/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 496:Generated_Source\PSoC5/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 497:Generated_Source\PSoC5/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 498:Generated_Source\PSoC5/cmsis_gcc.h **** 
 499:Generated_Source\PSoC5/cmsis_gcc.h **** 
 500:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1U)) || \
 501:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1U))    )
 502:Generated_Source\PSoC5/cmsis_gcc.h **** 
 503:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 504:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 505:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 506:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               PSPLIM Register value
 507:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 508:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSPLIM(void)
 509:Generated_Source\PSoC5/cmsis_gcc.h **** {
 510:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 511:Generated_Source\PSoC5/cmsis_gcc.h **** 
 512:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 513:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 514:Generated_Source\PSoC5/cmsis_gcc.h **** }
 515:Generated_Source\PSoC5/cmsis_gcc.h **** 
 516:Generated_Source\PSoC5/cmsis_gcc.h **** 
 517:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 518:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 519:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 520:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 521:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 522:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               PSPLIM Register value
 523:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 524:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_PSPLIM_NS(void)
 525:Generated_Source\PSoC5/cmsis_gcc.h **** {
 526:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 527:Generated_Source\PSoC5/cmsis_gcc.h **** 
 528:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 529:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 530:Generated_Source\PSoC5/cmsis_gcc.h **** }
 531:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 532:Generated_Source\PSoC5/cmsis_gcc.h **** 
 533:Generated_Source\PSoC5/cmsis_gcc.h **** 
 534:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 535:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 536:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 537:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 19


 538:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 539:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 540:Generated_Source\PSoC5/cmsis_gcc.h **** {
 541:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 542:Generated_Source\PSoC5/cmsis_gcc.h **** }
 543:Generated_Source\PSoC5/cmsis_gcc.h **** 
 544:Generated_Source\PSoC5/cmsis_gcc.h **** 
 545:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 546:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 547:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 548:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 549:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 550:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 551:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 552:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 553:Generated_Source\PSoC5/cmsis_gcc.h **** {
 554:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 555:Generated_Source\PSoC5/cmsis_gcc.h **** }
 556:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 557:Generated_Source\PSoC5/cmsis_gcc.h **** 
 558:Generated_Source\PSoC5/cmsis_gcc.h **** 
 559:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 560:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 561:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 562:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               MSPLIM Register value
 563:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 564:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_MSPLIM(void)
 565:Generated_Source\PSoC5/cmsis_gcc.h **** {
 566:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 567:Generated_Source\PSoC5/cmsis_gcc.h **** 
 568:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 569:Generated_Source\PSoC5/cmsis_gcc.h **** 
 570:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 571:Generated_Source\PSoC5/cmsis_gcc.h **** }
 572:Generated_Source\PSoC5/cmsis_gcc.h **** 
 573:Generated_Source\PSoC5/cmsis_gcc.h **** 
 574:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 575:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 576:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 577:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 578:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 579:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               MSPLIM Register value
 580:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 581:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __TZ_get_MSPLIM_NS(void)
 582:Generated_Source\PSoC5/cmsis_gcc.h **** {
 583:Generated_Source\PSoC5/cmsis_gcc.h ****   register uint32_t result;
 584:Generated_Source\PSoC5/cmsis_gcc.h **** 
 585:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 586:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 587:Generated_Source\PSoC5/cmsis_gcc.h **** }
 588:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 589:Generated_Source\PSoC5/cmsis_gcc.h **** 
 590:Generated_Source\PSoC5/cmsis_gcc.h **** 
 591:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 592:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 593:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 594:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 20


 595:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 596:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 597:Generated_Source\PSoC5/cmsis_gcc.h **** {
 598:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 599:Generated_Source\PSoC5/cmsis_gcc.h **** }
 600:Generated_Source\PSoC5/cmsis_gcc.h **** 
 601:Generated_Source\PSoC5/cmsis_gcc.h **** 
 602:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3)) && \
 603:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 604:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 605:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 606:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 607:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 608:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 609:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 610:Generated_Source\PSoC5/cmsis_gcc.h **** {
 611:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 612:Generated_Source\PSoC5/cmsis_gcc.h **** }
 613:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 614:Generated_Source\PSoC5/cmsis_gcc.h **** 
 615:Generated_Source\PSoC5/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1U)) || \
 616:Generated_Source\PSoC5/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1U))    ) */
 617:Generated_Source\PSoC5/cmsis_gcc.h **** 
 618:Generated_Source\PSoC5/cmsis_gcc.h **** 
 619:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 620:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 621:Generated_Source\PSoC5/cmsis_gcc.h **** 
 622:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 623:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Get FPSCR
 624:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 625:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 626:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 627:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __get_FPSCR(void)
 628:Generated_Source\PSoC5/cmsis_gcc.h **** {
 629:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 630:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 631:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 632:Generated_Source\PSoC5/cmsis_gcc.h **** 
 633:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("");                                 /* Empty asm statement works as a scheduling
 634:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 635:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("");
 636:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 637:Generated_Source\PSoC5/cmsis_gcc.h **** #else
 638:Generated_Source\PSoC5/cmsis_gcc.h ****    return(0U);
 639:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 640:Generated_Source\PSoC5/cmsis_gcc.h **** }
 641:Generated_Source\PSoC5/cmsis_gcc.h **** 
 642:Generated_Source\PSoC5/cmsis_gcc.h **** 
 643:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 644:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Set FPSCR
 645:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 646:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 647:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 648:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 649:Generated_Source\PSoC5/cmsis_gcc.h **** {
 650:Generated_Source\PSoC5/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 651:Generated_Source\PSoC5/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 21


 652:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("");                                           /* Empty asm statement works as a 
 653:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 654:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("");
 655:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 656:Generated_Source\PSoC5/cmsis_gcc.h **** }
 657:Generated_Source\PSoC5/cmsis_gcc.h **** 
 658:Generated_Source\PSoC5/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 659:Generated_Source\PSoC5/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 660:Generated_Source\PSoC5/cmsis_gcc.h **** 
 661:Generated_Source\PSoC5/cmsis_gcc.h **** 
 662:Generated_Source\PSoC5/cmsis_gcc.h **** 
 663:Generated_Source\PSoC5/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 664:Generated_Source\PSoC5/cmsis_gcc.h **** 
 665:Generated_Source\PSoC5/cmsis_gcc.h **** 
 666:Generated_Source\PSoC5/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 667:Generated_Source\PSoC5/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 668:Generated_Source\PSoC5/cmsis_gcc.h ****   Access to dedicated instructions
 669:Generated_Source\PSoC5/cmsis_gcc.h ****   @{
 670:Generated_Source\PSoC5/cmsis_gcc.h **** */
 671:Generated_Source\PSoC5/cmsis_gcc.h **** 
 672:Generated_Source\PSoC5/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 673:Generated_Source\PSoC5/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 674:Generated_Source\PSoC5/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 675:Generated_Source\PSoC5/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 676:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 677:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 678:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 679:Generated_Source\PSoC5/cmsis_gcc.h **** #else
 680:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 681:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 682:Generated_Source\PSoC5/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 683:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 684:Generated_Source\PSoC5/cmsis_gcc.h **** 
 685:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 686:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   No Operation
 687:Generated_Source\PSoC5/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 688:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 689:Generated_Source\PSoC5/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 690:Generated_Source\PSoC5/cmsis_gcc.h **** //{
 691:Generated_Source\PSoC5/cmsis_gcc.h **** //  __ASM volatile ("nop");
 692:Generated_Source\PSoC5/cmsis_gcc.h **** //}
 693:Generated_Source\PSoC5/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")       /* This implementation gen
 694:Generated_Source\PSoC5/cmsis_gcc.h **** 
 695:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 696:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Wait For Interrupt
 697:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 698:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 699:Generated_Source\PSoC5/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 700:Generated_Source\PSoC5/cmsis_gcc.h **** //{
 701:Generated_Source\PSoC5/cmsis_gcc.h **** //  __ASM volatile ("wfi");
 702:Generated_Source\PSoC5/cmsis_gcc.h **** //}
 703:Generated_Source\PSoC5/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")       /* This implementation gen
 704:Generated_Source\PSoC5/cmsis_gcc.h **** 
 705:Generated_Source\PSoC5/cmsis_gcc.h **** 
 706:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 707:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Wait For Event
 708:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 22


 709:Generated_Source\PSoC5/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 710:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 711:Generated_Source\PSoC5/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 712:Generated_Source\PSoC5/cmsis_gcc.h **** //{
 713:Generated_Source\PSoC5/cmsis_gcc.h **** //  __ASM volatile ("wfe");
 714:Generated_Source\PSoC5/cmsis_gcc.h **** //}
 715:Generated_Source\PSoC5/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")       /* This implementation gen
 716:Generated_Source\PSoC5/cmsis_gcc.h **** 
 717:Generated_Source\PSoC5/cmsis_gcc.h **** 
 718:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 719:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Send Event
 720:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 721:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 722:Generated_Source\PSoC5/cmsis_gcc.h **** //__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 723:Generated_Source\PSoC5/cmsis_gcc.h **** //{
 724:Generated_Source\PSoC5/cmsis_gcc.h **** //  __ASM volatile ("sev");
 725:Generated_Source\PSoC5/cmsis_gcc.h **** //}
 726:Generated_Source\PSoC5/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")       /* This implementation gen
 727:Generated_Source\PSoC5/cmsis_gcc.h **** 
 728:Generated_Source\PSoC5/cmsis_gcc.h **** 
 729:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 730:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 731:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 732:Generated_Source\PSoC5/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 733:Generated_Source\PSoC5/cmsis_gcc.h ****            after the instruction has been completed.
 734:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 735:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 736:Generated_Source\PSoC5/cmsis_gcc.h **** {
 737:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 738:Generated_Source\PSoC5/cmsis_gcc.h **** }
 739:Generated_Source\PSoC5/cmsis_gcc.h **** 
 740:Generated_Source\PSoC5/cmsis_gcc.h **** 
 741:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 742:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 743:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 744:Generated_Source\PSoC5/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 745:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 746:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 747:Generated_Source\PSoC5/cmsis_gcc.h **** {
 748:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 749:Generated_Source\PSoC5/cmsis_gcc.h **** }
 750:Generated_Source\PSoC5/cmsis_gcc.h **** 
 751:Generated_Source\PSoC5/cmsis_gcc.h **** 
 752:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 753:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Data Memory Barrier
 754:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 755:Generated_Source\PSoC5/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 756:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 757:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 758:Generated_Source\PSoC5/cmsis_gcc.h **** {
 759:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 760:Generated_Source\PSoC5/cmsis_gcc.h **** }
 761:Generated_Source\PSoC5/cmsis_gcc.h **** 
 762:Generated_Source\PSoC5/cmsis_gcc.h **** 
 763:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 764:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 765:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 23


 766:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 767:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Reversed value
 768:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 769:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 770:Generated_Source\PSoC5/cmsis_gcc.h **** {
 771:Generated_Source\PSoC5/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 772:Generated_Source\PSoC5/cmsis_gcc.h ****   return __builtin_bswap32(value);
 773:Generated_Source\PSoC5/cmsis_gcc.h **** #else
 774:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 775:Generated_Source\PSoC5/cmsis_gcc.h **** 
 776:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 777:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 778:Generated_Source\PSoC5/cmsis_gcc.h **** #endif
 779:Generated_Source\PSoC5/cmsis_gcc.h **** }
 780:Generated_Source\PSoC5/cmsis_gcc.h **** 
 781:Generated_Source\PSoC5/cmsis_gcc.h **** 
 782:Generated_Source\PSoC5/cmsis_gcc.h **** /**
 783:Generated_Source\PSoC5/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 784:Generated_Source\PSoC5/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 785:Generated_Source\PSoC5/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 786:Generated_Source\PSoC5/cmsis_gcc.h ****   \return               Reversed value
 787:Generated_Source\PSoC5/cmsis_gcc.h ****  */
 788:Generated_Source\PSoC5/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 789:Generated_Source\PSoC5/cmsis_gcc.h **** {
 790:Generated_Source\PSoC5/cmsis_gcc.h ****   uint32_t result;
 791:Generated_Source\PSoC5/cmsis_gcc.h **** 
 792:Generated_Source\PSoC5/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 330              		.loc 2 792 0
 331 0348 BB69     		ldr	r3, [r7, #24]
 332              		.syntax unified
 333              	@ 792 "Generated_Source\PSoC5/cmsis_gcc.h" 1
 334 034a 5BBA     		rev16 r3, r3
 335              	@ 0 "" 2
 336              		.thumb
 337              		.syntax unified
 338 034c 7B61     		str	r3, [r7, #20]
 793:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 339              		.loc 2 793 0
 340 034e 7B69     		ldr	r3, [r7, #20]
 341              	.LBE13:
 342              	.LBE12:
 343              		.loc 1 160 0
 344 0350 9BB2     		uxth	r3, r3
 345 0352 1846     		mov	r0, r3
 346 0354 FFF7FEFF 		bl	infoGet
 161:..\src/command_processing.c ****             break;
 347              		.loc 1 161 0
 348 0358 FCE0     		b	.L1
 349              	.L7:
 162:..\src/command_processing.c **** 
 163:..\src/command_processing.c **** //============================================================     CMD_SET_PARAM
 164:..\src/command_processing.c **** 
 165:..\src/command_processing.c ****         case CMD_SET_ZEROS:
 166:..\src/command_processing.c ****             setZeros();
 350              		.loc 1 166 0
 351 035a FFF7FEFF 		bl	setZeros
 167:..\src/command_processing.c ****             break;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 24


 352              		.loc 1 167 0
 353 035e F9E0     		b	.L1
 354              	.L14:
 168:..\src/command_processing.c **** 
 169:..\src/command_processing.c **** //============================================================     CMD_GET_PARAM
 170:..\src/command_processing.c **** 
 171:..\src/command_processing.c ****         case CMD_GET_PARAM_LIST:
 172:..\src/command_processing.c ****             manage_param_list( __REV16(*((uint16 *) &g_rx.buffer[1])) );
 355              		.loc 1 172 0
 356 0360 0E4B     		ldr	r3, .L53+4
 357 0362 1B88     		ldrh	r3, [r3]
 358 0364 BB62     		str	r3, [r7, #40]
 359              	.LBB14:
 360              	.LBB15:
 792:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 361              		.loc 2 792 0
 362 0366 BB6A     		ldr	r3, [r7, #40]
 363              		.syntax unified
 364              	@ 792 "Generated_Source\PSoC5/cmsis_gcc.h" 1
 365 0368 5BBA     		rev16 r3, r3
 366              	@ 0 "" 2
 367              		.thumb
 368              		.syntax unified
 369 036a 3B61     		str	r3, [r7, #16]
 370              		.loc 2 793 0
 371 036c 3B69     		ldr	r3, [r7, #16]
 372              	.LBE15:
 373              	.LBE14:
 374              		.loc 1 172 0
 375 036e 9BB2     		uxth	r3, r3
 376 0370 1846     		mov	r0, r3
 377 0372 FFF7FEFF 		bl	manage_param_list
 173:..\src/command_processing.c ****             break;
 378              		.loc 1 173 0
 379 0376 EDE0     		b	.L1
 380              	.L5:
 174:..\src/command_processing.c **** 
 175:..\src/command_processing.c **** //=================================================================     CMD_PING
 176:..\src/command_processing.c ****             
 177:..\src/command_processing.c ****         case CMD_PING:
 178:..\src/command_processing.c ****             cmd_ping();
 381              		.loc 1 178 0
 382 0378 FFF7FEFF 		bl	cmd_ping
 179:..\src/command_processing.c ****             break;
 383              		.loc 1 179 0
 384 037c EAE0     		b	.L1
 385              	.L8:
 180:..\src/command_processing.c **** 
 181:..\src/command_processing.c **** //=========================================================     CMD_STORE_PARAMS
 182:..\src/command_processing.c ****             
 183:..\src/command_processing.c ****         case CMD_STORE_PARAMS:
 184:..\src/command_processing.c ****             cmd_store_params();
 386              		.loc 1 184 0
 387 037e FFF7FEFF 		bl	cmd_store_params
 185:..\src/command_processing.c ****             break;
 388              		.loc 1 185 0
 389 0382 E7E0     		b	.L1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 25


 390              	.L9:
 186:..\src/command_processing.c **** 
 187:..\src/command_processing.c **** //=================================================     CMD_STORE_DEFAULT_PARAMS
 188:..\src/command_processing.c **** 
 189:..\src/command_processing.c ****         case CMD_STORE_DEFAULT_PARAMS:
 190:..\src/command_processing.c ****             if(memStore(DEFAULT_EEPROM_DISPLACEMENT))
 391              		.loc 1 190 0
 392 0384 3220     		movs	r0, #50
 393 0386 FFF7FEFF 		bl	memStore
 394 038a 0346     		mov	r3, r0
 395 038c 002B     		cmp	r3, #0
 396 038e 07D0     		beq	.L39
 191:..\src/command_processing.c ****                 sendAcknowledgment(ACK_OK);
 397              		.loc 1 191 0
 398 0390 0120     		movs	r0, #1
 399 0392 FFF7FEFF 		bl	sendAcknowledgment
 192:..\src/command_processing.c ****             else
 193:..\src/command_processing.c ****                 sendAcknowledgment(ACK_ERROR);
 194:..\src/command_processing.c ****             break;
 400              		.loc 1 194 0
 401 0396 DDE0     		b	.L1
 402              	.L54:
 403              		.align	2
 404              	.L53:
 405 0398 00000000 		.word	g_rx
 406 039c 01000000 		.word	g_rx+1
 407              	.L39:
 193:..\src/command_processing.c ****             break;
 408              		.loc 1 193 0
 409 03a0 0020     		movs	r0, #0
 410 03a2 FFF7FEFF 		bl	sendAcknowledgment
 411              		.loc 1 194 0
 412 03a6 D5E0     		b	.L1
 413              	.L10:
 195:..\src/command_processing.c **** 
 196:..\src/command_processing.c **** //=======================================================     CMD_RESTORE_PARAMS
 197:..\src/command_processing.c **** 
 198:..\src/command_processing.c ****         case CMD_RESTORE_PARAMS:
 199:..\src/command_processing.c ****             if(memRestore())
 414              		.loc 1 199 0
 415 03a8 FFF7FEFF 		bl	memRestore
 416 03ac 0346     		mov	r3, r0
 417 03ae 002B     		cmp	r3, #0
 418 03b0 03D0     		beq	.L41
 200:..\src/command_processing.c ****                 sendAcknowledgment(ACK_OK);
 419              		.loc 1 200 0
 420 03b2 0120     		movs	r0, #1
 421 03b4 FFF7FEFF 		bl	sendAcknowledgment
 201:..\src/command_processing.c ****             else
 202:..\src/command_processing.c ****                 sendAcknowledgment(ACK_ERROR);
 203:..\src/command_processing.c ****             break;
 422              		.loc 1 203 0
 423 03b8 CCE0     		b	.L1
 424              	.L41:
 202:..\src/command_processing.c ****             break;
 425              		.loc 1 202 0
 426 03ba 0020     		movs	r0, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 26


 427 03bc FFF7FEFF 		bl	sendAcknowledgment
 428              		.loc 1 203 0
 429 03c0 C8E0     		b	.L1
 430              	.L13:
 204:..\src/command_processing.c **** 
 205:..\src/command_processing.c **** //=============================================================     CMD_INIT_MEM
 206:..\src/command_processing.c **** 
 207:..\src/command_processing.c ****         case CMD_INIT_MEM:            
 208:..\src/command_processing.c ****             if(memInit())
 431              		.loc 1 208 0
 432 03c2 FFF7FEFF 		bl	memInit
 433 03c6 0346     		mov	r3, r0
 434 03c8 002B     		cmp	r3, #0
 435 03ca 03D0     		beq	.L43
 209:..\src/command_processing.c ****                 sendAcknowledgment(ACK_OK);
 436              		.loc 1 209 0
 437 03cc 0120     		movs	r0, #1
 438 03ce FFF7FEFF 		bl	sendAcknowledgment
 210:..\src/command_processing.c ****             else
 211:..\src/command_processing.c ****                 sendAcknowledgment(ACK_ERROR);
 212:..\src/command_processing.c ****             break;
 439              		.loc 1 212 0
 440 03d2 BFE0     		b	.L1
 441              	.L43:
 211:..\src/command_processing.c ****             break;
 442              		.loc 1 211 0
 443 03d4 0020     		movs	r0, #0
 444 03d6 FFF7FEFF 		bl	sendAcknowledgment
 445              		.loc 1 212 0
 446 03da BBE0     		b	.L1
 447              	.L12:
 213:..\src/command_processing.c **** 
 214:..\src/command_processing.c **** //===========================================================     CMD_BOOTLOADER
 215:..\src/command_processing.c **** 
 216:..\src/command_processing.c ****         case CMD_BOOTLOADER:
 217:..\src/command_processing.c ****             //Not sure if ACK_OK is correct, should check
 218:..\src/command_processing.c ****             sendAcknowledgment(ACK_OK);
 448              		.loc 1 218 0
 449 03dc 0120     		movs	r0, #1
 450 03de FFF7FEFF 		bl	sendAcknowledgment
 219:..\src/command_processing.c ****             CyDelay(1000);
 451              		.loc 1 219 0
 452 03e2 4FF47A70 		mov	r0, #1000
 453 03e6 FFF7FEFF 		bl	CyDelay
 220:..\src/command_processing.c ****             FTDI_ENABLE_Write(0x00);
 454              		.loc 1 220 0
 455 03ea 0020     		movs	r0, #0
 456 03ec FFF7FEFF 		bl	FTDI_ENABLE_Write
 221:..\src/command_processing.c ****             CyDelay(1000);
 457              		.loc 1 221 0
 458 03f0 4FF47A70 		mov	r0, #1000
 459 03f4 FFF7FEFF 		bl	CyDelay
 222:..\src/command_processing.c ****             Bootloadable_Load();
 460              		.loc 1 222 0
 461 03f8 FFF7FEFF 		bl	Bootloadable_Load
 223:..\src/command_processing.c ****             break;
 462              		.loc 1 223 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 27


 463 03fc AAE0     		b	.L1
 464              	.L15:
 224:..\src/command_processing.c **** 
 225:..\src/command_processing.c **** //============================================================     CMD_HAND_CALIBRATE
 226:..\src/command_processing.c **** 
 227:..\src/command_processing.c ****         case CMD_HAND_CALIBRATE:
 228:..\src/command_processing.c ****             calib.speed = (int16)(g_rx.buffer[1]<<8 | g_rx.buffer[2]);
 465              		.loc 1 228 0
 466 03fe 574B     		ldr	r3, .L55
 467 0400 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 468 0402 1B02     		lsls	r3, r3, #8
 469 0404 1AB2     		sxth	r2, r3
 470 0406 554B     		ldr	r3, .L55
 471 0408 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 472 040a 1BB2     		sxth	r3, r3
 473 040c 1343     		orrs	r3, r3, r2
 474 040e 1AB2     		sxth	r2, r3
 475 0410 534B     		ldr	r3, .L55+4
 476 0412 5A80     		strh	r2, [r3, #2]	@ movhi
 229:..\src/command_processing.c ****             calib.repetitions = (int16)(g_rx.buffer[3]<<8 | g_rx.buffer[4]);
 477              		.loc 1 229 0
 478 0414 514B     		ldr	r3, .L55
 479 0416 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 480 0418 1B02     		lsls	r3, r3, #8
 481 041a 1AB2     		sxth	r2, r3
 482 041c 4F4B     		ldr	r3, .L55
 483 041e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 484 0420 1BB2     		sxth	r3, r3
 485 0422 1343     		orrs	r3, r3, r2
 486 0424 1AB2     		sxth	r2, r3
 487 0426 4E4B     		ldr	r3, .L55+4
 488 0428 9A80     		strh	r2, [r3, #4]	@ movhi
 230:..\src/command_processing.c ****             
 231:..\src/command_processing.c ****             if(calib.speed == -1 && calib.repetitions == -1) {
 489              		.loc 1 231 0
 490 042a 4D4B     		ldr	r3, .L55+4
 491 042c B3F90230 		ldrsh	r3, [r3, #2]
 492 0430 B3F1FF3F 		cmp	r3, #-1
 493 0434 0FD1     		bne	.L45
 494              		.loc 1 231 0 is_stmt 0 discriminator 1
 495 0436 4A4B     		ldr	r3, .L55+4
 496 0438 B3F90430 		ldrsh	r3, [r3, #4]
 497 043c B3F1FF3F 		cmp	r3, #-1
 498 0440 09D1     		bne	.L45
 232:..\src/command_processing.c ****                 calib.enabled = FALSE;
 499              		.loc 1 232 0 is_stmt 1
 500 0442 474B     		ldr	r3, .L55+4
 501 0444 0022     		movs	r2, #0
 502 0446 1A70     		strb	r2, [r3]
 233:..\src/command_processing.c ****                 calib.speed = 0;
 503              		.loc 1 233 0
 504 0448 454B     		ldr	r3, .L55+4
 505 044a 0022     		movs	r2, #0
 506 044c 5A80     		strh	r2, [r3, #2]	@ movhi
 234:..\src/command_processing.c ****                 calib.repetitions = 0;
 507              		.loc 1 234 0
 508 044e 444B     		ldr	r3, .L55+4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 28


 509 0450 0022     		movs	r2, #0
 510 0452 9A80     		strh	r2, [r3, #4]	@ movhi
 235:..\src/command_processing.c ****                 break;
 511              		.loc 1 235 0
 512 0454 7EE0     		b	.L1
 513              	.L45:
 236:..\src/command_processing.c ****             }
 237:..\src/command_processing.c ****             // Speed & repetitions saturations
 238:..\src/command_processing.c ****             if (calib.speed < 0) {
 514              		.loc 1 238 0
 515 0456 424B     		ldr	r3, .L55+4
 516 0458 B3F90230 		ldrsh	r3, [r3, #2]
 517 045c 002B     		cmp	r3, #0
 518 045e 03DA     		bge	.L46
 239:..\src/command_processing.c ****                 calib.speed = 0;
 519              		.loc 1 239 0
 520 0460 3F4B     		ldr	r3, .L55+4
 521 0462 0022     		movs	r2, #0
 522 0464 5A80     		strh	r2, [r3, #2]	@ movhi
 523 0466 07E0     		b	.L47
 524              	.L46:
 240:..\src/command_processing.c ****             } else if (calib.speed > 200) {
 525              		.loc 1 240 0
 526 0468 3D4B     		ldr	r3, .L55+4
 527 046a B3F90230 		ldrsh	r3, [r3, #2]
 528 046e C82B     		cmp	r3, #200
 529 0470 02DD     		ble	.L47
 241:..\src/command_processing.c ****                 calib.speed = 200;
 530              		.loc 1 241 0
 531 0472 3B4B     		ldr	r3, .L55+4
 532 0474 C822     		movs	r2, #200
 533 0476 5A80     		strh	r2, [r3, #2]	@ movhi
 534              	.L47:
 242:..\src/command_processing.c ****             }
 243:..\src/command_processing.c ****             if (calib.repetitions < 0) {
 535              		.loc 1 243 0
 536 0478 394B     		ldr	r3, .L55+4
 537 047a B3F90430 		ldrsh	r3, [r3, #4]
 538 047e 002B     		cmp	r3, #0
 539 0480 02DA     		bge	.L48
 244:..\src/command_processing.c ****                 calib.repetitions = 0;
 540              		.loc 1 244 0
 541 0482 374B     		ldr	r3, .L55+4
 542 0484 0022     		movs	r2, #0
 543 0486 9A80     		strh	r2, [r3, #4]	@ movhi
 544              	.L48:
 245:..\src/command_processing.c ****             } else if (calib.repetitions > 32767) {
 246:..\src/command_processing.c ****                 calib.repetitions = 32767;
 247:..\src/command_processing.c ****             }
 248:..\src/command_processing.c ****             
 249:..\src/command_processing.c ****             g_refNew[0].pos = 0;                    // SoftHand is on motor 1
 545              		.loc 1 249 0
 546 0488 364B     		ldr	r3, .L55+8
 547 048a 0022     		movs	r2, #0
 548 048c 1A60     		str	r2, [r3]
 250:..\src/command_processing.c ****             calib.enabled = TRUE;
 549              		.loc 1 250 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 29


 550 048e 344B     		ldr	r3, .L55+4
 551 0490 0122     		movs	r2, #1
 552 0492 1A70     		strb	r2, [r3]
 251:..\src/command_processing.c ****          
 252:..\src/command_processing.c ****             sendAcknowledgment(ACK_OK);
 553              		.loc 1 252 0
 554 0494 0120     		movs	r0, #1
 555 0496 FFF7FEFF 		bl	sendAcknowledgment
 253:..\src/command_processing.c ****             break;
 556              		.loc 1 253 0
 557 049a 5BE0     		b	.L1
 558              	.L29:
 254:..\src/command_processing.c ****             
 255:..\src/command_processing.c **** //=====================================================     CMD_GET_IMU_READINGS
 256:..\src/command_processing.c **** 
 257:..\src/command_processing.c ****         case CMD_GET_IMU_READINGS:
 258:..\src/command_processing.c ****           MY_TIMER_REG_Write(0x01); 
 559              		.loc 1 258 0
 560 049c 0120     		movs	r0, #1
 561 049e FFF7FEFF 		bl	MY_TIMER_REG_Write
 259:..\src/command_processing.c **** MY_TIMER_REG_Write(0x00);
 562              		.loc 1 259 0
 563 04a2 0020     		movs	r0, #0
 564 04a4 FFF7FEFF 		bl	MY_TIMER_REG_Write
 260:..\src/command_processing.c ****   t_before_data_send_to_PC = (uint16)MY_TIMER_ReadCounter();
 565              		.loc 1 260 0
 566 04a8 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 567 04ac 0346     		mov	r3, r0
 568 04ae 1A46     		mov	r2, r3
 569 04b0 2D4B     		ldr	r3, .L55+12
 570 04b2 1A80     		strh	r2, [r3]	@ movhi
 261:..\src/command_processing.c ****               cmd_get_imu_readings();
 571              		.loc 1 261 0
 572 04b4 FFF7FEFF 		bl	cmd_get_imu_readings
 262:..\src/command_processing.c ****              t_after_data_send_to_PC= (uint16)MY_TIMER_ReadCounter();
 573              		.loc 1 262 0
 574 04b8 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 575 04bc 0346     		mov	r3, r0
 576 04be 1A46     		mov	r2, r3
 577 04c0 2A4B     		ldr	r3, .L55+16
 578 04c2 1A80     		strh	r2, [r3]	@ movhi
 263:..\src/command_processing.c ****     time_to_send_data_to_PC = (float)(t_before_data_send_to_PC - t_after_data_send_to_PC)/48;
 579              		.loc 1 263 0
 580 04c4 284B     		ldr	r3, .L55+12
 581 04c6 1B88     		ldrh	r3, [r3]
 582 04c8 1A46     		mov	r2, r3
 583 04ca 284B     		ldr	r3, .L55+16
 584 04cc 1B88     		ldrh	r3, [r3]
 585 04ce D31A     		subs	r3, r2, r3
 586 04d0 1846     		mov	r0, r3
 587 04d2 FFF7FEFF 		bl	__aeabi_i2f
 588 04d6 0346     		mov	r3, r0
 589 04d8 2549     		ldr	r1, .L55+20
 590 04da 1846     		mov	r0, r3
 591 04dc FFF7FEFF 		bl	__aeabi_fdiv
 592 04e0 0346     		mov	r3, r0
 593 04e2 1846     		mov	r0, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 30


 594 04e4 FFF7FEFF 		bl	__aeabi_f2uiz
 595 04e8 0346     		mov	r3, r0
 596 04ea 9AB2     		uxth	r2, r3
 597 04ec 214B     		ldr	r3, .L55+24
 598 04ee 1A80     		strh	r2, [r3]	@ movhi
 264:..\src/command_processing.c ****           
 265:..\src/command_processing.c ****             break; 
 599              		.loc 1 265 0
 600 04f0 30E0     		b	.L1
 601              	.L30:
 266:..\src/command_processing.c ****             
 267:..\src/command_processing.c **** //=====================================================     CMD_GET_IMU_PARAM
 268:..\src/command_processing.c **** 
 269:..\src/command_processing.c ****         case CMD_GET_IMU_PARAM:
 270:..\src/command_processing.c ****             get_IMU_param_list( __REV16(*((uint16 *) &g_rx.buffer[1])) );
 602              		.loc 1 270 0
 603 04f2 214B     		ldr	r3, .L55+28
 604 04f4 1B88     		ldrh	r3, [r3]
 605 04f6 7B62     		str	r3, [r7, #36]
 606              	.LBB16:
 607              	.LBB17:
 792:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 608              		.loc 2 792 0
 609 04f8 7B6A     		ldr	r3, [r7, #36]
 610              		.syntax unified
 611              	@ 792 "Generated_Source\PSoC5/cmsis_gcc.h" 1
 612 04fa 5BBA     		rev16 r3, r3
 613              	@ 0 "" 2
 614              		.thumb
 615              		.syntax unified
 616 04fc FB60     		str	r3, [r7, #12]
 617              		.loc 2 793 0
 618 04fe FB68     		ldr	r3, [r7, #12]
 619              	.LBE17:
 620              	.LBE16:
 621              		.loc 1 270 0
 622 0500 9BB2     		uxth	r3, r3
 623 0502 1846     		mov	r0, r3
 624 0504 FFF7FEFF 		bl	get_IMU_param_list
 271:..\src/command_processing.c ****             break;             
 625              		.loc 1 271 0
 626 0508 24E0     		b	.L1
 627              	.L31:
 272:..\src/command_processing.c ****             
 273:..\src/command_processing.c **** //=====================================================     CMD_GET_ENCODER_CONF
 274:..\src/command_processing.c **** 
 275:..\src/command_processing.c ****         case CMD_GET_ENCODER_CONF:
 276:..\src/command_processing.c ****             cmd_get_encoder_map();
 628              		.loc 1 276 0
 629 050a FFF7FEFF 		bl	cmd_get_encoder_map
 277:..\src/command_processing.c ****             break; 
 630              		.loc 1 277 0
 631 050e 21E0     		b	.L1
 632              	.L32:
 278:..\src/command_processing.c **** 
 279:..\src/command_processing.c **** //=====================================================     CMD_GET_ENCODER_RAW
 280:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 31


 281:..\src/command_processing.c ****         case CMD_GET_ENCODER_RAW:
 282:..\src/command_processing.c ****             cmd_get_encoder_raw();
 633              		.loc 1 282 0
 634 0510 FFF7FEFF 		bl	cmd_get_encoder_raw
 283:..\src/command_processing.c ****             break; 
 635              		.loc 1 283 0
 636 0514 1EE0     		b	.L1
 637              	.L33:
 284:..\src/command_processing.c **** 
 285:..\src/command_processing.c **** //=====================================================     CMD_GET_ADC_CONF
 286:..\src/command_processing.c **** 
 287:..\src/command_processing.c ****         case CMD_GET_ADC_CONF:
 288:..\src/command_processing.c ****             cmd_get_ADC_map();
 638              		.loc 1 288 0
 639 0516 FFF7FEFF 		bl	cmd_get_ADC_map
 289:..\src/command_processing.c ****             break; 
 640              		.loc 1 289 0
 641 051a 1BE0     		b	.L1
 642              	.L34:
 290:..\src/command_processing.c ****             
 291:..\src/command_processing.c **** //=====================================================     CMD_GET_ADC_RAW
 292:..\src/command_processing.c **** 
 293:..\src/command_processing.c ****         case CMD_GET_ADC_RAW:
 294:..\src/command_processing.c ****             cmd_get_ADC_raw();
 643              		.loc 1 294 0
 644 051c FFF7FEFF 		bl	cmd_get_ADC_raw
 295:..\src/command_processing.c ****             break; 
 645              		.loc 1 295 0
 646 0520 18E0     		b	.L1
 647              	.L35:
 296:..\src/command_processing.c ****             
 297:..\src/command_processing.c **** //=====================================================     CMD_GET_SD_SINGLE_FILE
 298:..\src/command_processing.c **** 
 299:..\src/command_processing.c ****         case CMD_GET_SD_SINGLE_FILE:
 300:..\src/command_processing.c ****             cmd_get_SD_file( __REV16(*((uint16 *) &g_rx.buffer[1])) );
 648              		.loc 1 300 0
 649 0522 154B     		ldr	r3, .L55+28
 650 0524 1B88     		ldrh	r3, [r3]
 651 0526 3B62     		str	r3, [r7, #32]
 652              	.LBB18:
 653              	.LBB19:
 792:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 654              		.loc 2 792 0
 655 0528 3B6A     		ldr	r3, [r7, #32]
 656              		.syntax unified
 657              	@ 792 "Generated_Source\PSoC5/cmsis_gcc.h" 1
 658 052a 5BBA     		rev16 r3, r3
 659              	@ 0 "" 2
 660              		.thumb
 661              		.syntax unified
 662 052c BB60     		str	r3, [r7, #8]
 663              		.loc 2 793 0
 664 052e BB68     		ldr	r3, [r7, #8]
 665              	.LBE19:
 666              	.LBE18:
 667              		.loc 1 300 0
 668 0530 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 32


 669 0532 1846     		mov	r0, r3
 670 0534 FFF7FEFF 		bl	cmd_get_SD_file
 301:..\src/command_processing.c ****             break;   
 671              		.loc 1 301 0
 672 0538 0CE0     		b	.L1
 673              	.L36:
 302:..\src/command_processing.c ****             
 303:..\src/command_processing.c **** //=====================================================     CMD_REMOVE_SD_SINGLE_FILE
 304:..\src/command_processing.c **** 
 305:..\src/command_processing.c ****         case CMD_REMOVE_SD_SINGLE_FILE:
 306:..\src/command_processing.c ****             cmd_remove_SD_file( __REV16(*((uint16 *) &g_rx.buffer[1])) );
 674              		.loc 1 306 0
 675 053a 0F4B     		ldr	r3, .L55+28
 676 053c 1B88     		ldrh	r3, [r3]
 677 053e FB61     		str	r3, [r7, #28]
 678              	.LBB20:
 679              	.LBB21:
 792:Generated_Source\PSoC5/cmsis_gcc.h ****   return(result);
 680              		.loc 2 792 0
 681 0540 FB69     		ldr	r3, [r7, #28]
 682              		.syntax unified
 683              	@ 792 "Generated_Source\PSoC5/cmsis_gcc.h" 1
 684 0542 5BBA     		rev16 r3, r3
 685              	@ 0 "" 2
 686              		.thumb
 687              		.syntax unified
 688 0544 7B60     		str	r3, [r7, #4]
 689              		.loc 2 793 0
 690 0546 7B68     		ldr	r3, [r7, #4]
 691              	.LBE21:
 692              	.LBE20:
 693              		.loc 1 306 0
 694 0548 9BB2     		uxth	r3, r3
 695 054a 1846     		mov	r0, r3
 696 054c FFF7FEFF 		bl	cmd_remove_SD_file
 307:..\src/command_processing.c ****             break;               
 697              		.loc 1 307 0
 698 0550 00E0     		b	.L1
 699              	.L52:
 308:..\src/command_processing.c ****             
 309:..\src/command_processing.c **** //=========================================================== ALL OTHER COMMANDS
 310:..\src/command_processing.c ****         default:
 311:..\src/command_processing.c ****             break;
 700              		.loc 1 311 0
 701 0552 00BF     		nop
 702              	.L1:
 312:..\src/command_processing.c **** 
 313:..\src/command_processing.c ****     }
 314:..\src/command_processing.c **** }  
 703              		.loc 1 314 0
 704 0554 3037     		adds	r7, r7, #48
 705              		.cfi_def_cfa_offset 8
 706 0556 BD46     		mov	sp, r7
 707              		.cfi_def_cfa_register 13
 708              		@ sp needed
 709 0558 80BD     		pop	{r7, pc}
 710              	.L56:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 33


 711 055a 00BF     		.align	2
 712              	.L55:
 713 055c 00000000 		.word	g_rx
 714 0560 00000000 		.word	calib
 715 0564 00000000 		.word	g_refNew
 716 0568 00000000 		.word	t_before_data_send_to_PC
 717 056c 00000000 		.word	t_after_data_send_to_PC
 718 0570 00004042 		.word	1111490560
 719 0574 00000000 		.word	time_to_send_data_to_PC
 720 0578 01000000 		.word	g_rx+1
 721              		.cfi_endproc
 722              	.LFE64:
 723              		.size	commProcess, .-commProcess
 724              		.section	.text.infoSend,"ax",%progbits
 725              		.align	2
 726              		.global	infoSend
 727              		.thumb
 728              		.thumb_func
 729              		.type	infoSend, %function
 730              	infoSend:
 731              	.LFB65:
 315:..\src/command_processing.c **** 
 316:..\src/command_processing.c **** //==============================================================================
 317:..\src/command_processing.c **** //                                                                     INFO SEND
 318:..\src/command_processing.c **** //==============================================================================
 319:..\src/command_processing.c **** 
 320:..\src/command_processing.c **** void infoSend(void){
 732              		.loc 1 320 0
 733              		.cfi_startproc
 734              		@ args = 0, pretend = 0, frame = 1504
 735              		@ frame_needed = 1, uses_anonymous_args = 0
 736 0000 80B5     		push	{r7, lr}
 737              		.cfi_def_cfa_offset 8
 738              		.cfi_offset 7, -8
 739              		.cfi_offset 14, -4
 740 0002 ADF5BC6D 		sub	sp, sp, #1504
 741              		.cfi_def_cfa_offset 1512
 742 0006 00AF     		add	r7, sp, #0
 743              		.cfi_def_cfa_register 7
 321:..\src/command_processing.c ****     char packet_string[1500];
 322:..\src/command_processing.c ****     
 323:..\src/command_processing.c ****     prepare_generic_info(packet_string);
 744              		.loc 1 323 0
 745 0008 3B1D     		adds	r3, r7, #4
 746 000a 1846     		mov	r0, r3
 747 000c FFF7FEFF 		bl	prepare_generic_info
 324:..\src/command_processing.c ****     UART_RS485_PutString(packet_string);
 748              		.loc 1 324 0
 749 0010 3B1D     		adds	r3, r7, #4
 750 0012 1846     		mov	r0, r3
 751 0014 FFF7FEFF 		bl	UART_RS485_PutString
 325:..\src/command_processing.c **** }
 752              		.loc 1 325 0
 753 0018 00BF     		nop
 754 001a 07F5BC67 		add	r7, r7, #1504
 755              		.cfi_def_cfa_offset 8
 756 001e BD46     		mov	sp, r7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 34


 757              		.cfi_def_cfa_register 13
 758              		@ sp needed
 759 0020 80BD     		pop	{r7, pc}
 760              		.cfi_endproc
 761              	.LFE65:
 762              		.size	infoSend, .-infoSend
 763 0022 00BF     		.section	.text.infoGet,"ax",%progbits
 764              		.align	2
 765              		.global	infoGet
 766              		.thumb
 767              		.thumb_func
 768              		.type	infoGet, %function
 769              	infoGet:
 770              	.LFB66:
 326:..\src/command_processing.c **** 
 327:..\src/command_processing.c **** 
 328:..\src/command_processing.c **** //==============================================================================
 329:..\src/command_processing.c **** //                                                              COMMAND GET INFO
 330:..\src/command_processing.c **** //==============================================================================
 331:..\src/command_processing.c **** 
 332:..\src/command_processing.c **** void infoGet(uint16 info_type) {
 771              		.loc 1 332 0
 772              		.cfi_startproc
 773              		@ args = 0, pretend = 0, frame = 24008
 774              		@ frame_needed = 1, uses_anonymous_args = 0
 775 0000 80B5     		push	{r7, lr}
 776              		.cfi_def_cfa_offset 8
 777              		.cfi_offset 7, -8
 778              		.cfi_offset 14, -4
 779 0002 ADF5BB4D 		sub	sp, sp, #23936
 780              		.cfi_def_cfa_offset 23944
 781 0006 92B0     		sub	sp, sp, #72
 782              		.cfi_def_cfa_offset 24016
 783 0008 00AF     		add	r7, sp, #0
 784              		.cfi_def_cfa_register 7
 785 000a 0246     		mov	r2, r0
 786 000c 07F14803 		add	r3, r7, #72
 787 0010 423B     		subs	r3, r3, #66
 788 0012 1A80     		strh	r2, [r3]	@ movhi
 333:..\src/command_processing.c ****     char CYDATA packet_string[4000] = "";
 789              		.loc 1 333 0
 790 0014 07F59C43 		add	r3, r7, #19968
 791 0018 03F12803 		add	r3, r3, #40
 792 001c 0022     		movs	r2, #0
 793 001e 1A60     		str	r2, [r3]
 794 0020 0433     		adds	r3, r3, #4
 795 0022 40F69C72 		movw	r2, #3996
 796 0026 0021     		movs	r1, #0
 797 0028 1846     		mov	r0, r3
 798 002a FFF7FEFF 		bl	memset
 334:..\src/command_processing.c ****     char CYDATA str_sd_data[20000] = "";
 799              		.loc 1 334 0
 800 002e 07F14803 		add	r3, r7, #72
 801 0032 403B     		subs	r3, r3, #64
 802 0034 0022     		movs	r2, #0
 803 0036 1A60     		str	r2, [r3]
 804 0038 0433     		adds	r3, r3, #4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 35


 805 003a 44F61C62 		movw	r2, #19996
 806 003e 0021     		movs	r1, #0
 807 0040 1846     		mov	r0, r3
 808 0042 FFF7FEFF 		bl	memset
 335:..\src/command_processing.c ****     //==================================     choose info type and prepare string
 336:..\src/command_processing.c **** 
 337:..\src/command_processing.c ****     switch (info_type) {
 809              		.loc 1 337 0
 810 0046 07F14803 		add	r3, r7, #72
 811 004a 423B     		subs	r3, r3, #66
 812 004c 1B88     		ldrh	r3, [r3]
 813 004e 062B     		cmp	r3, #6
 814 0050 7DD8     		bhi	.L69
 815 0052 01A2     		adr	r2, .L61
 816 0054 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 817              		.p2align 2
 818              	.L61:
 819 0058 75000000 		.word	.L60+1
 820 005c 97000000 		.word	.L62+1
 821 0060 B9000000 		.word	.L63+1
 822 0064 E1000000 		.word	.L64+1
 823 0068 03010000 		.word	.L65+1
 824 006c 21010000 		.word	.L66+1
 825 0070 27010000 		.word	.L67+1
 826              		.p2align 1
 827              	.L60:
 338:..\src/command_processing.c ****         case INFO_ALL:
 339:..\src/command_processing.c ****             prepare_generic_info(packet_string);
 828              		.loc 1 339 0
 829 0074 07F59C43 		add	r3, r7, #19968
 830 0078 03F12803 		add	r3, r3, #40
 831 007c 1846     		mov	r0, r3
 832 007e FFF7FEFF 		bl	prepare_generic_info
 340:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer(); 
 833              		.loc 1 340 0
 834 0082 FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 341:..\src/command_processing.c ****             UART_RS485_PutString(packet_string);
 835              		.loc 1 341 0
 836 0086 07F59C43 		add	r3, r7, #19968
 837 008a 03F12803 		add	r3, r3, #40
 838 008e 1846     		mov	r0, r3
 839 0090 FFF7FEFF 		bl	UART_RS485_PutString
 342:..\src/command_processing.c ****             break;
 840              		.loc 1 342 0
 841 0094 5CE0     		b	.L68
 842              	.L62:
 343:..\src/command_processing.c ****         case CYCLES_INFO:
 344:..\src/command_processing.c ****             prepare_counter_info(packet_string);
 843              		.loc 1 344 0
 844 0096 07F59C43 		add	r3, r7, #19968
 845 009a 03F12803 		add	r3, r3, #40
 846 009e 1846     		mov	r0, r3
 847 00a0 FFF7FEFF 		bl	prepare_counter_info
 345:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 848              		.loc 1 345 0
 849 00a4 FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 346:..\src/command_processing.c ****             UART_RS485_PutString(packet_string);
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 36


 850              		.loc 1 346 0
 851 00a8 07F59C43 		add	r3, r7, #19968
 852 00ac 03F12803 		add	r3, r3, #40
 853 00b0 1846     		mov	r0, r3
 854 00b2 FFF7FEFF 		bl	UART_RS485_PutString
 347:..\src/command_processing.c ****             break;
 855              		.loc 1 347 0
 856 00b6 4BE0     		b	.L68
 857              	.L63:
 348:..\src/command_processing.c ****         case GET_SD_PARAM:
 349:..\src/command_processing.c ****             Read_SD_Closed_File(sdParam, packet_string, sizeof(packet_string));
 858              		.loc 1 349 0
 859 00b8 07F59C43 		add	r3, r7, #19968
 860 00bc 03F12803 		add	r3, r3, #40
 861 00c0 4FF47A62 		mov	r2, #4000
 862 00c4 1946     		mov	r1, r3
 863 00c6 2548     		ldr	r0, .L70
 864 00c8 FFF7FEFF 		bl	Read_SD_Closed_File
 350:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 865              		.loc 1 350 0
 866 00cc FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 351:..\src/command_processing.c ****             UART_RS485_PutString(packet_string);
 867              		.loc 1 351 0
 868 00d0 07F59C43 		add	r3, r7, #19968
 869 00d4 03F12803 		add	r3, r3, #40
 870 00d8 1846     		mov	r0, r3
 871 00da FFF7FEFF 		bl	UART_RS485_PutString
 352:..\src/command_processing.c ****             break;
 872              		.loc 1 352 0
 873 00de 37E0     		b	.L68
 874              	.L64:
 353:..\src/command_processing.c ****         case GET_SD_DATA:
 354:..\src/command_processing.c ****             Read_SD_Current_Data(str_sd_data, sizeof(str_sd_data));
 875              		.loc 1 354 0
 876 00e0 07F14803 		add	r3, r7, #72
 877 00e4 403B     		subs	r3, r3, #64
 878 00e6 44F62061 		movw	r1, #20000
 879 00ea 1846     		mov	r0, r3
 880 00ec FFF7FEFF 		bl	Read_SD_Current_Data
 355:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 881              		.loc 1 355 0
 882 00f0 FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 356:..\src/command_processing.c ****             UART_RS485_PutString(str_sd_data);
 883              		.loc 1 356 0
 884 00f4 07F14803 		add	r3, r7, #72
 885 00f8 403B     		subs	r3, r3, #64
 886 00fa 1846     		mov	r0, r3
 887 00fc FFF7FEFF 		bl	UART_RS485_PutString
 357:..\src/command_processing.c ****             break;
 888              		.loc 1 357 0
 889 0100 26E0     		b	.L68
 890              	.L65:
 358:..\src/command_processing.c ****         case GET_SD_FS_TREE:
 359:..\src/command_processing.c ****             Get_SD_FS(str_sd_data);
 891              		.loc 1 359 0
 892 0102 07F14803 		add	r3, r7, #72
 893 0106 403B     		subs	r3, r3, #64
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 37


 894 0108 1846     		mov	r0, r3
 895 010a FFF7FEFF 		bl	Get_SD_FS
 360:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 896              		.loc 1 360 0
 897 010e FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 361:..\src/command_processing.c ****             UART_RS485_PutString(str_sd_data);
 898              		.loc 1 361 0
 899 0112 07F14803 		add	r3, r7, #72
 900 0116 403B     		subs	r3, r3, #64
 901 0118 1846     		mov	r0, r3
 902 011a FFF7FEFF 		bl	UART_RS485_PutString
 362:..\src/command_processing.c ****             break;
 903              		.loc 1 362 0
 904 011e 17E0     		b	.L68
 905              	.L66:
 363:..\src/command_processing.c ****         case GET_SD_EMG_HIST:
 364:..\src/command_processing.c ****             // Send every single byte inside the function, since it could be a large file to send
 365:..\src/command_processing.c ****             Read_SD_EMG_History_Data();
 906              		.loc 1 365 0
 907 0120 FFF7FEFF 		bl	Read_SD_EMG_History_Data
 366:..\src/command_processing.c ****             break;
 908              		.loc 1 366 0
 909 0124 14E0     		b	.L68
 910              	.L67:
 367:..\src/command_processing.c ****         case GET_SD_R01_SUMM:
 368:..\src/command_processing.c ****             Read_SD_Closed_File(sdR01File, packet_string, sizeof(packet_string));
 911              		.loc 1 368 0
 912 0126 07F59C43 		add	r3, r7, #19968
 913 012a 03F12803 		add	r3, r3, #40
 914 012e 4FF47A62 		mov	r2, #4000
 915 0132 1946     		mov	r1, r3
 916 0134 0A48     		ldr	r0, .L70+4
 917 0136 FFF7FEFF 		bl	Read_SD_Closed_File
 369:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 918              		.loc 1 369 0
 919 013a FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
 370:..\src/command_processing.c ****             UART_RS485_PutString(packet_string);
 920              		.loc 1 370 0
 921 013e 07F59C43 		add	r3, r7, #19968
 922 0142 03F12803 		add	r3, r3, #40
 923 0146 1846     		mov	r0, r3
 924 0148 FFF7FEFF 		bl	UART_RS485_PutString
 371:..\src/command_processing.c ****             break;            
 925              		.loc 1 371 0
 926 014c 00E0     		b	.L68
 927              	.L69:
 372:..\src/command_processing.c ****         default:
 373:..\src/command_processing.c ****             break;
 928              		.loc 1 373 0
 929 014e 00BF     		nop
 930              	.L68:
 374:..\src/command_processing.c ****     }
 375:..\src/command_processing.c **** }
 931              		.loc 1 375 0 discriminator 1
 932 0150 00BF     		nop
 933 0152 07F5BB47 		add	r7, r7, #23936
 934 0156 4837     		adds	r7, r7, #72
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 38


 935              		.cfi_def_cfa_offset 8
 936 0158 BD46     		mov	sp, r7
 937              		.cfi_def_cfa_register 13
 938              		@ sp needed
 939 015a 80BD     		pop	{r7, pc}
 940              	.L71:
 941              		.align	2
 942              	.L70:
 943 015c 00000000 		.word	sdParam
 944 0160 00000000 		.word	sdR01File
 945              		.cfi_endproc
 946              	.LFE66:
 947              		.size	infoGet, .-infoGet
 948              		.section	.rodata
 949              		.align	2
 950              	.LC88:
 951 0000 20557362 		.ascii	" Usb\000"
 951      00
 952 0005 000000   		.align	2
 953              	.LC89:
 954 0008 2048616E 		.ascii	" Handle\000"
 954      646C6500 
 955              		.align	2
 956              	.LC90:
 957 0010 20454D47 		.ascii	" EMG proportional\000"
 957      2070726F 
 957      706F7274 
 957      696F6E61 
 957      6C00
 958 0022 0000     		.align	2
 959              	.LC91:
 960 0024 20454D47 		.ascii	" EMG integral\000"
 960      20696E74 
 960      65677261 
 960      6C00
 961 0032 0000     		.align	2
 962              	.LC92:
 963 0034 20454D47 		.ascii	" EMG FCFS\000"
 963      20464346 
 963      5300
 964 003e 0000     		.align	2
 965              	.LC93:
 966 0040 20454D47 		.ascii	" EMG FCFS Advanced\000"
 966      20464346 
 966      53204164 
 966      76616E63 
 966      656400
 967 0053 00       		.align	2
 968              	.LC94:
 969 0054 204A6F79 		.ascii	" Joystick\000"
 969      73746963 
 969      6B00
 970 005e 0000     		.align	2
 971              	.LC95:
 972 0060 20454D47 		.ascii	" EMG proportional Normally Closed\000"
 972      2070726F 
 972      706F7274 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 39


 972      696F6E61 
 972      6C204E6F 
 973 0082 0000     		.align	2
 974              	.LC96:
 975 0084 20506F73 		.ascii	" Position\000"
 975      6974696F 
 975      6E00
 976 008e 0000     		.align	2
 977              	.LC97:
 978 0090 2050574D 		.ascii	" PWM\000"
 978      00
 979 0095 000000   		.align	2
 980              	.LC98:
 981 0098 20437572 		.ascii	" Current\000"
 981      72656E74 
 981      00
 982 00a1 000000   		.align	2
 983              	.LC99:
 984 00a4 20506F73 		.ascii	" Position and Current\000"
 984      6974696F 
 984      6E20616E 
 984      64204375 
 984      7272656E 
 985 00ba 0000     		.align	2
 986              	.LC100:
 987 00bc 20594553 		.ascii	" YES\000\000"
 987      0000
 988 00c2 0000     		.align	2
 989              	.LC101:
 990 00c4 204E4F00 		.ascii	" NO\000\000"
 990      00
 991 00c9 000000   		.align	2
 992              	.LC102:
 993 00cc 20526967 		.ascii	" Right\000\000"
 993      68740000 
 994              		.align	2
 995              	.LC103:
 996 00d4 204C6566 		.ascii	" Left\000\000"
 996      740000
 997 00db 00       		.align	2
 998              	.LC104:
 999 00dc 204F4646 		.ascii	" OFF\000\000"
 999      0000
 1000 00e2 0000     		.align	2
 1001              	.LC105:
 1002 00e4 204F4E00 		.ascii	" ON\000\000"
 1002      00
 1003 00e9 000000   		.align	2
 1004              	.LC106:
 1005 00ec 204E6F6E 		.ascii	" None\000\000"
 1005      650000
 1006 00f3 00       		.align	2
 1007              	.LC107:
 1008 00f4 2053442F 		.ascii	" SD/RTC board\000\000"
 1008      52544320 
 1008      626F6172 
 1008      640000
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 40


 1009 0103 00       		.align	2
 1010              	.LC108:
 1011 0104 20576946 		.ascii	" WiFi board [N/A]\000\000"
 1011      6920626F 
 1011      61726420 
 1011      5B4E2F41 
 1011      5D0000
 1012 0117 00       		.align	2
 1013              	.LC109:
 1014 0118 204F7468 		.ascii	" Other [N/A]\000\000"
 1014      6572205B 
 1014      4E2F415D 
 1014      0000
 1015 0126 0000     		.align	2
 1016              	.LC110:
 1017 0128 204C6F77 		.ascii	" Low\000\000"
 1017      0000
 1018 012e 0000     		.align	2
 1019              	.LC111:
 1020 0130 20486967 		.ascii	" High\000\000"
 1020      680000
 1021 0137 00       		.align	2
 1022              	.LC112:
 1023 0138 2047454E 		.ascii	" GENERIC USER\000\000"
 1023      45524943 
 1023      20555345 
 1023      520000
 1024 0147 00       		.align	2
 1025              	.LC113:
 1026 0148 204D4152 		.ascii	" MARIA\000\000"
 1026      49410000 
 1027              		.align	2
 1028              	.LC114:
 1029 0150 20523031 		.ascii	" R01\000\000"
 1029      0000
 1030 0156 0000     		.align	2
 1031              	.LC115:
 1032 0158 204D4333 		.ascii	" MC33887 (Standard)\000\000"
 1032      33383837 
 1032      20285374 
 1032      616E6461 
 1032      72642900 
 1033 016d 000000   		.align	2
 1034              	.LC116:
 1035 0170 20564E48 		.ascii	" VNH5019 (High power)\000\000"
 1035      35303139 
 1035      20284869 
 1035      67682070 
 1035      6F776572 
 1036 0187 00       		.align	2
 1037              	.LC117:
 1038 0188 20455343 		.ascii	" ESC (Brushless)\000\000"
 1038      20284272 
 1038      7573686C 
 1038      65737329 
 1038      0000
 1039 019a 0000     		.align	2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 41


 1040              	.LC118:
 1041 019c 20534F46 		.ascii	" SOFTHAND PRO\000\000"
 1041      5448414E 
 1041      44205052 
 1041      4F0000
 1042 01ab 00       		.align	2
 1043              	.LC119:
 1044 01ac 2047454E 		.ascii	" GENERIC 2 MOTORS\000\000"
 1044      45524943 
 1044      2032204D 
 1044      4F544F52 
 1044      530000
 1045 01bf 00       		.align	2
 1046              	.LC120:
 1047 01c0 20414952 		.ascii	" AIR CHAMBERS\000\000"
 1047      20434841 
 1047      4D424552 
 1047      530000
 1048 01cf 00       		.align	2
 1049              	.LC121:
 1050 01d0 204F5454 		.ascii	" OTTOBOCK WRIST\000\000"
 1050      4F424F43 
 1050      4B205752 
 1050      49535400 
 1050      00
 1051 01e1 000000   		.align	2
 1052              	.LC122:
 1053 01e4 20534F46 		.ascii	" SOFTHAND 2 MOTORS\000\000"
 1053      5448414E 
 1053      44203220 
 1053      4D4F544F 
 1053      52530000 
 1054              		.align	2
 1055              	.LC123:
 1056 01f8 20466173 		.ascii	" Fast:syn2, Slow:syn1\000\000"
 1056      743A7379 
 1056      6E322C20 
 1056      536C6F77 
 1056      3A73796E 
 1057 020f 00       		.align	2
 1058              	.LC124:
 1059 0210 20466173 		.ascii	" Fast:wrist,Slow:hand\000\000"
 1059      743A7772 
 1059      6973742C 
 1059      536C6F77 
 1059      3A68616E 
 1060 0227 00       		.align	2
 1061              	.LC125:
 1062 0228 20536C6F 		.ascii	" Slow:syn2, Fast:syn1\000\000"
 1062      773A7379 
 1062      6E322C20 
 1062      46617374 
 1062      3A73796E 
 1063 023f 00       		.align	2
 1064              	.LC126:
 1065 0240 20536C6F 		.ascii	" Slow:wrist,Fast:hand\000\000"
 1065      773A7772 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 42


 1065      6973742C 
 1065      46617374 
 1065      3A68616E 
 1066 0257 00       		.align	2
 1067              	.LC127:
 1068 0258 20436C6F 		.ascii	" Close:CW, Open:CCW\000\000"
 1068      73653A43 
 1068      572C204F 
 1068      70656E3A 
 1068      43435700 
 1069 026d 000000   		.align	2
 1070              	.LC128:
 1071 0270 20436C6F 		.ascii	" Close:CCW, Open:CW\000\000"
 1071      73653A43 
 1071      43572C20 
 1071      4F70656E 
 1071      3A435700 
 1072              		.section	.text.get_param_list,"ax",%progbits
 1073              		.align	2
 1074              		.global	get_param_list
 1075              		.thumb
 1076              		.thumb_func
 1077              		.type	get_param_list, %function
 1078              	get_param_list:
 1079              	.LFB67:
 376:..\src/command_processing.c **** 
 377:..\src/command_processing.c **** 
 378:..\src/command_processing.c **** //==============================================================================
 379:..\src/command_processing.c **** //                                                                GET PARAM LIST
 380:..\src/command_processing.c **** //==============================================================================
 381:..\src/command_processing.c **** 
 382:..\src/command_processing.c **** void get_param_list (uint8* VAR_P[NUM_OF_PARAMS], uint8 TYPES[NUM_OF_PARAMS], 
 383:..\src/command_processing.c ****                      uint8 NUM_ITEMS[NUM_OF_PARAMS], uint8 NUM_STRUCT[NUM_OF_PARAMS],
 384:..\src/command_processing.c ****                      uint8* NUM_MENU, const char* PARAMS_STR[NUM_OF_PARAMS], 
 385:..\src/command_processing.c ****                      uint8 CUSTOM_PARAM_GET[NUM_OF_PARAMS], const char* MENU_STR[NUM_OF_PARAMS_MENU
 1080              		.loc 1 385 0
 1081              		.cfi_startproc
 1082              		@ args = 16, pretend = 0, frame = 5656
 1083              		@ frame_needed = 1, uses_anonymous_args = 0
 1084 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1085              		.cfi_def_cfa_offset 20
 1086              		.cfi_offset 4, -20
 1087              		.cfi_offset 5, -16
 1088              		.cfi_offset 6, -12
 1089              		.cfi_offset 7, -8
 1090              		.cfi_offset 14, -4
 1091 0002 ADF5B05D 		sub	sp, sp, #5632
 1092              		.cfi_def_cfa_offset 5652
 1093 0006 87B0     		sub	sp, sp, #28
 1094              		.cfi_def_cfa_offset 5680
 1095 0008 00AF     		add	r7, sp, #0
 1096              		.cfi_def_cfa_register 7
 1097 000a 07F11804 		add	r4, r7, #24
 1098 000e 0C3C     		subs	r4, r4, #12
 1099 0010 2060     		str	r0, [r4]
 1100 0012 07F11800 		add	r0, r7, #24
 1101 0016 1038     		subs	r0, r0, #16
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 43


 1102 0018 0160     		str	r1, [r0]
 1103 001a 07F11801 		add	r1, r7, #24
 1104 001e 1439     		subs	r1, r1, #20
 1105 0020 0A60     		str	r2, [r1]
 1106 0022 07F11802 		add	r2, r7, #24
 1107 0026 183A     		subs	r2, r2, #24
 1108 0028 1360     		str	r3, [r2]
 386:..\src/command_processing.c ****     
 387:..\src/command_processing.c ****     //Package to be sent variables
 388:..\src/command_processing.c ****     uint8 packet_data[PARAM_BYTE_SLOT*NUM_OF_DEV_PARAMS + PARAM_MENU_SLOT*NUM_OF_DEV_PARAM_MENUS + 
 1109              		.loc 1 388 0
 1110 002a 07F15803 		add	r3, r7, #88
 1111 002e 043B     		subs	r3, r3, #4
 1112 0030 0022     		movs	r2, #0
 1113 0032 1A60     		str	r2, [r3]
 1114 0034 0433     		adds	r3, r3, #4
 1115 0036 41F2AA52 		movw	r2, #5546
 1116 003a 0021     		movs	r1, #0
 1117 003c 1846     		mov	r0, r3
 1118 003e FFF7FEFF 		bl	memset
 389:..\src/command_processing.c ****     uint16 packet_lenght = PARAM_BYTE_SLOT*NUM_OF_DEV_PARAMS + PARAM_MENU_SLOT*NUM_OF_DEV_PARAM_MEN
 1119              		.loc 1 389 0
 1120 0042 41F2AE53 		movw	r3, #5550
 1121 0046 07F5B052 		add	r2, r7, #5632
 1122 004a 02F11002 		add	r2, r2, #16
 1123 004e 1380     		strh	r3, [r2]	@ movhi
 390:..\src/command_processing.c **** 
 391:..\src/command_processing.c ****     //Auxiliary variables
 392:..\src/command_processing.c ****     uint8 CYDATA i, j;
 393:..\src/command_processing.c ****     uint8 CYDATA idx = 0;       //Parameter number
 1124              		.loc 1 393 0
 1125 0050 0023     		movs	r3, #0
 1126 0052 07F5B052 		add	r2, r7, #5632
 1127 0056 02F11502 		add	r2, r2, #21
 1128 005a 1370     		strb	r3, [r2]
 394:..\src/command_processing.c ****     uint8 CYDATA idx_menu = 0;
 1129              		.loc 1 394 0
 1130 005c 0023     		movs	r3, #0
 1131 005e 07F5B052 		add	r2, r7, #5632
 1132 0062 02F11402 		add	r2, r2, #20
 1133 0066 1370     		strb	r3, [r2]
 395:..\src/command_processing.c ****     uint8 CYDATA sod = 0;       //sizeof data
 1134              		.loc 1 395 0
 1135 0068 0023     		movs	r3, #0
 1136 006a 07F5B052 		add	r2, r7, #5632
 1137 006e 02F11302 		add	r2, r2, #19
 1138 0072 1370     		strb	r3, [r2]
 396:..\src/command_processing.c ****     uint8 CYDATA string_lenght;
 397:..\src/command_processing.c ****     char CYDATA aux_str[50] = "";
 1139              		.loc 1 397 0
 1140 0074 07F13803 		add	r3, r7, #56
 1141 0078 183B     		subs	r3, r3, #24
 1142 007a 0022     		movs	r2, #0
 1143 007c 1A60     		str	r2, [r3]
 1144 007e 0433     		adds	r3, r3, #4
 1145 0080 2E22     		movs	r2, #46
 1146 0082 0021     		movs	r1, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 44


 1147 0084 1846     		mov	r0, r3
 1148 0086 FFF7FEFF 		bl	memset
 398:..\src/command_processing.c ****     float aux_float;
 399:..\src/command_processing.c ****     int16 aux_int16;
 400:..\src/command_processing.c ****     uint16 aux_uint16;
 401:..\src/command_processing.c ****     int32 aux_int32;
 402:..\src/command_processing.c ****     uint32 aux_uint32;
 403:..\src/command_processing.c **** 
 404:..\src/command_processing.c ****     uint8 MOTOR_IDX = 0;
 1149              		.loc 1 404 0
 1150 008a 0023     		movs	r3, #0
 1151 008c 07F5B052 		add	r2, r7, #5632
 1152 0090 02F10F02 		add	r2, r2, #15
 1153 0094 1370     		strb	r3, [r2]
 405:..\src/command_processing.c ****     uint8 SECOND_MOTOR_IDX = 1;
 1154              		.loc 1 405 0
 1155 0096 0123     		movs	r3, #1
 1156 0098 07F5B052 		add	r2, r7, #5632
 1157 009c 02F10E02 		add	r2, r2, #14
 1158 00a0 1370     		strb	r3, [r2]
 406:..\src/command_processing.c ****   
 407:..\src/command_processing.c ****     uint8* m_addr = (uint8*)VAR_P[0];
 1159              		.loc 1 407 0
 1160 00a2 07F11803 		add	r3, r7, #24
 1161 00a6 0C3B     		subs	r3, r3, #12
 1162 00a8 1B68     		ldr	r3, [r3]
 1163 00aa 1B68     		ldr	r3, [r3]
 1164 00ac 07F5B052 		add	r2, r7, #5632
 1165 00b0 02F10802 		add	r2, r2, #8
 1166 00b4 1360     		str	r3, [r2]
 408:..\src/command_processing.c ****     uint8* m_tmp = m_addr;
 1167              		.loc 1 408 0
 1168 00b6 07F5B053 		add	r3, r7, #5632
 1169 00ba 03F10803 		add	r3, r3, #8
 1170 00be 1B68     		ldr	r3, [r3]
 1171 00c0 07F5B052 		add	r2, r7, #5632
 1172 00c4 02F10402 		add	r2, r2, #4
 1173 00c8 1360     		str	r3, [r2]
 409:..\src/command_processing.c ****         
 410:..\src/command_processing.c ****     packet_data[0] = CMD_GET_PARAM_LIST;
 1174              		.loc 1 410 0
 1175 00ca 07F15803 		add	r3, r7, #88
 1176 00ce 043B     		subs	r3, r3, #4
 1177 00d0 0C22     		movs	r2, #12
 1178 00d2 1A70     		strb	r2, [r3]
 411:..\src/command_processing.c ****     packet_data[1] = NUM_OF_DEV_PARAMS;
 1179              		.loc 1 411 0
 1180 00d4 07F15803 		add	r3, r7, #88
 1181 00d8 043B     		subs	r3, r3, #4
 1182 00da 4D22     		movs	r2, #77
 1183 00dc 5A70     		strb	r2, [r3, #1]
 412:..\src/command_processing.c ****     
 413:..\src/command_processing.c ****     for (idx = 0; idx < NUM_OF_DEV_PARAMS; idx++) {
 1184              		.loc 1 413 0
 1185 00de 0023     		movs	r3, #0
 1186 00e0 07F5B052 		add	r2, r7, #5632
 1187 00e4 02F11502 		add	r2, r2, #21
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 45


 1188 00e8 1370     		strb	r3, [r2]
 1189 00ea 03F025B8 		b	.L73
 1190              	.L278:
 414:..\src/command_processing.c ****         
 415:..\src/command_processing.c ****         // Assign m_addr memory address
 416:..\src/command_processing.c ****         m_addr = (uint8*)VAR_P[idx];
 1191              		.loc 1 416 0
 1192 00ee 07F5B053 		add	r3, r7, #5632
 1193 00f2 03F11503 		add	r3, r3, #21
 1194 00f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1195 00f8 9A00     		lsls	r2, r3, #2
 1196 00fa 07F11803 		add	r3, r7, #24
 1197 00fe 0C3B     		subs	r3, r3, #12
 1198 0100 1B68     		ldr	r3, [r3]
 1199 0102 1344     		add	r3, r3, r2
 1200 0104 1B68     		ldr	r3, [r3]
 1201 0106 07F5B052 		add	r2, r7, #5632
 1202 010a 02F10802 		add	r2, r2, #8
 1203 010e 1360     		str	r3, [r2]
 417:..\src/command_processing.c ****         
 418:..\src/command_processing.c ****         // Add parameter type and size to packet
 419:..\src/command_processing.c ****         packet_data[2 + PARAM_BYTE_SLOT*idx] = TYPES[idx];
 1204              		.loc 1 419 0
 1205 0110 07F5B053 		add	r3, r7, #5632
 1206 0114 03F11503 		add	r3, r3, #21
 1207 0118 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1208 011a 3222     		movs	r2, #50
 1209 011c 02FB03F3 		mul	r3, r2, r3
 1210 0120 9A1C     		adds	r2, r3, #2
 1211 0122 07F5B053 		add	r3, r7, #5632
 1212 0126 03F11503 		add	r3, r3, #21
 1213 012a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1214 012c 07F11803 		add	r3, r7, #24
 1215 0130 103B     		subs	r3, r3, #16
 1216 0132 1B68     		ldr	r3, [r3]
 1217 0134 0B44     		add	r3, r3, r1
 1218 0136 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1219 0138 07F15803 		add	r3, r7, #88
 1220 013c 043B     		subs	r3, r3, #4
 1221 013e 9954     		strb	r1, [r3, r2]
 420:..\src/command_processing.c ****         packet_data[3 + PARAM_BYTE_SLOT*idx] = NUM_ITEMS[idx];
 1222              		.loc 1 420 0
 1223 0140 07F5B053 		add	r3, r7, #5632
 1224 0144 03F11503 		add	r3, r3, #21
 1225 0148 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1226 014a 3222     		movs	r2, #50
 1227 014c 02FB03F3 		mul	r3, r2, r3
 1228 0150 DA1C     		adds	r2, r3, #3
 1229 0152 07F5B053 		add	r3, r7, #5632
 1230 0156 03F11503 		add	r3, r3, #21
 1231 015a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1232 015c 07F11803 		add	r3, r7, #24
 1233 0160 143B     		subs	r3, r3, #20
 1234 0162 1B68     		ldr	r3, [r3]
 1235 0164 0B44     		add	r3, r3, r1
 1236 0166 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1237 0168 07F15803 		add	r3, r7, #88
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 46


 1238 016c 043B     		subs	r3, r3, #4
 1239 016e 9954     		strb	r1, [r3, r2]
 421:..\src/command_processing.c ****         
 422:..\src/command_processing.c ****         // Find size of data
 423:..\src/command_processing.c ****         switch (TYPES[idx]) {
 1240              		.loc 1 423 0
 1241 0170 07F5B053 		add	r3, r7, #5632
 1242 0174 03F11503 		add	r3, r3, #21
 1243 0178 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1244 017a 07F11803 		add	r3, r7, #24
 1245 017e 103B     		subs	r3, r3, #16
 1246 0180 1B68     		ldr	r3, [r3]
 1247 0182 1344     		add	r3, r3, r2
 1248 0184 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1249 0186 092B     		cmp	r3, #9
 1250 0188 2BD8     		bhi	.L74
 1251 018a 01A2     		adr	r2, .L76
 1252 018c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1253              		.p2align 2
 1254              	.L76:
 1255 0190 B9010000 		.word	.L75+1
 1256 0194 B9010000 		.word	.L75+1
 1257 0198 B9010000 		.word	.L75+1
 1258 019c C7010000 		.word	.L77+1
 1259 01a0 C7010000 		.word	.L77+1
 1260 01a4 D5010000 		.word	.L78+1
 1261 01a8 D5010000 		.word	.L78+1
 1262 01ac D5010000 		.word	.L78+1
 1263 01b0 E3010000 		.word	.L74+1
 1264 01b4 B9010000 		.word	.L75+1
 1265              		.p2align 1
 1266              	.L75:
 424:..\src/command_processing.c ****             case TYPE_FLAG: case TYPE_INT8: case TYPE_UINT8: case TYPE_STRING:
 425:..\src/command_processing.c ****                 sod = 1; break;
 1267              		.loc 1 425 0
 1268 01b8 0123     		movs	r3, #1
 1269 01ba 07F5B052 		add	r2, r7, #5632
 1270 01be 02F11302 		add	r2, r2, #19
 1271 01c2 1370     		strb	r3, [r2]
 1272 01c4 0DE0     		b	.L74
 1273              	.L77:
 426:..\src/command_processing.c ****             case TYPE_INT16: case TYPE_UINT16:
 427:..\src/command_processing.c ****                 sod = 2; break;
 1274              		.loc 1 427 0
 1275 01c6 0223     		movs	r3, #2
 1276 01c8 07F5B052 		add	r2, r7, #5632
 1277 01cc 02F11302 		add	r2, r2, #19
 1278 01d0 1370     		strb	r3, [r2]
 1279 01d2 06E0     		b	.L74
 1280              	.L78:
 428:..\src/command_processing.c ****             case TYPE_INT32: case TYPE_UINT32: case TYPE_FLOAT:
 429:..\src/command_processing.c ****                 sod = 4; break;
 1281              		.loc 1 429 0
 1282 01d4 0423     		movs	r3, #4
 1283 01d6 07F5B052 		add	r2, r7, #5632
 1284 01da 02F11302 		add	r2, r2, #19
 1285 01de 1370     		strb	r3, [r2]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 47


 1286 01e0 00BF     		nop
 1287              	.L74:
 430:..\src/command_processing.c ****         }
 431:..\src/command_processing.c ****             
 432:..\src/command_processing.c ****         if (!CUSTOM_PARAM_GET[idx]) {       // Default param get
 1288              		.loc 1 432 0
 1289 01e2 07F5B053 		add	r3, r7, #5632
 1290 01e6 03F11503 		add	r3, r3, #21
 1291 01ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1292 01ec 07F5B152 		add	r2, r7, #5664
 1293 01f0 02F11802 		add	r2, r2, #24
 1294 01f4 1268     		ldr	r2, [r2]
 1295 01f6 1344     		add	r3, r3, r2
 1296 01f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1297 01fa 002B     		cmp	r3, #0
 1298 01fc 40F0DA83 		bne	.L79
 433:..\src/command_processing.c ****             
 434:..\src/command_processing.c ****             // Add parameter data to packet
 435:..\src/command_processing.c ****             switch (TYPES[idx]) {
 1299              		.loc 1 435 0
 1300 0200 07F5B053 		add	r3, r7, #5632
 1301 0204 03F11503 		add	r3, r3, #21
 1302 0208 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1303 020a 07F11803 		add	r3, r7, #24
 1304 020e 103B     		subs	r3, r3, #16
 1305 0210 1B68     		ldr	r3, [r3]
 1306 0212 1344     		add	r3, r3, r2
 1307 0214 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1308 0216 092B     		cmp	r3, #9
 1309 0218 02F25781 		bhi	.L113
 1310 021c 01A2     		adr	r2, .L82
 1311 021e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1312 0222 00BF     		.p2align 2
 1313              	.L82:
 1314 0224 4D020000 		.word	.L81+1
 1315 0228 09030000 		.word	.L83+1
 1316 022c 4D020000 		.word	.L81+1
 1317 0230 C5030000 		.word	.L84+1
 1318 0234 F7040000 		.word	.L85+1
 1319 0238 23060000 		.word	.L86+1
 1320 023c 53070000 		.word	.L87+1
 1321 0240 83080000 		.word	.L88+1
 1322 0244 CB240000 		.word	.L113+1
 1323 0248 4D020000 		.word	.L81+1
 1324              		.p2align 1
 1325              	.L81:
 436:..\src/command_processing.c ****                 case TYPE_FLAG: case TYPE_UINT8: case TYPE_STRING:
 437:..\src/command_processing.c ****                     for (i=0; i<NUM_ITEMS[idx]; i++){
 1326              		.loc 1 437 0
 1327 024c 0023     		movs	r3, #0
 1328 024e 07F5B052 		add	r2, r7, #5632
 1329 0252 02F11702 		add	r2, r2, #23
 1330 0256 1370     		strb	r3, [r2]
 1331 0258 42E0     		b	.L89
 1332              	.L90:
 438:..\src/command_processing.c ****                         m_tmp = m_addr + i*sod;
 1333              		.loc 1 438 0 discriminator 3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 48


 1334 025a 07F5B053 		add	r3, r7, #5632
 1335 025e 03F11703 		add	r3, r3, #23
 1336 0262 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1337 0264 07F5B052 		add	r2, r7, #5632
 1338 0268 02F11302 		add	r2, r2, #19
 1339 026c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1340 026e 02FB03F3 		mul	r3, r2, r3
 1341 0272 1A46     		mov	r2, r3
 1342 0274 07F5B053 		add	r3, r7, #5632
 1343 0278 03F10803 		add	r3, r3, #8
 1344 027c 1B68     		ldr	r3, [r3]
 1345 027e 1344     		add	r3, r3, r2
 1346 0280 07F5B052 		add	r2, r7, #5632
 1347 0284 02F10402 		add	r2, r2, #4
 1348 0288 1360     		str	r3, [r2]
 439:..\src/command_processing.c ****                         packet_data[4 + PARAM_BYTE_SLOT*idx + i*sod] = *m_tmp;
 1349              		.loc 1 439 0 discriminator 3
 1350 028a 07F5B053 		add	r3, r7, #5632
 1351 028e 03F11503 		add	r3, r3, #21
 1352 0292 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1353 0294 3222     		movs	r2, #50
 1354 0296 02FB03F3 		mul	r3, r2, r3
 1355 029a 1A1D     		adds	r2, r3, #4
 1356 029c 07F5B053 		add	r3, r7, #5632
 1357 02a0 03F11703 		add	r3, r3, #23
 1358 02a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1359 02a6 07F5B051 		add	r1, r7, #5632
 1360 02aa 01F11301 		add	r1, r1, #19
 1361 02ae 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 1362 02b0 01FB03F3 		mul	r3, r1, r3
 1363 02b4 1A44     		add	r2, r2, r3
 1364 02b6 07F5B053 		add	r3, r7, #5632
 1365 02ba 03F10403 		add	r3, r3, #4
 1366 02be 1B68     		ldr	r3, [r3]
 1367 02c0 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1368 02c2 07F15803 		add	r3, r7, #88
 1369 02c6 043B     		subs	r3, r3, #4
 1370 02c8 9954     		strb	r1, [r3, r2]
 437:..\src/command_processing.c ****                         m_tmp = m_addr + i*sod;
 1371              		.loc 1 437 0 discriminator 3
 1372 02ca 07F5B053 		add	r3, r7, #5632
 1373 02ce 03F11703 		add	r3, r3, #23
 1374 02d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1375 02d4 0133     		adds	r3, r3, #1
 1376 02d6 07F5B052 		add	r2, r7, #5632
 1377 02da 02F11702 		add	r2, r2, #23
 1378 02de 1370     		strb	r3, [r2]
 1379              	.L89:
 437:..\src/command_processing.c ****                         m_tmp = m_addr + i*sod;
 1380              		.loc 1 437 0 is_stmt 0 discriminator 1
 1381 02e0 07F5B053 		add	r3, r7, #5632
 1382 02e4 03F11503 		add	r3, r3, #21
 1383 02e8 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1384 02ea 07F11803 		add	r3, r7, #24
 1385 02ee 143B     		subs	r3, r3, #20
 1386 02f0 1B68     		ldr	r3, [r3]
 1387 02f2 1344     		add	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 49


 1388 02f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1389 02f6 07F5B052 		add	r2, r7, #5632
 1390 02fa 02F11702 		add	r2, r2, #23
 1391 02fe 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1392 0300 9A42     		cmp	r2, r3
 1393 0302 AAD3     		bcc	.L90
 440:..\src/command_processing.c ****                     }
 441:..\src/command_processing.c ****                     break;                
 1394              		.loc 1 441 0 is_stmt 1
 1395 0304 02F0E1B8 		b	.L113
 1396              	.L83:
 442:..\src/command_processing.c ****                 case TYPE_INT8:
 443:..\src/command_processing.c ****                     for (i=0; i<NUM_ITEMS[idx]; i++){
 1397              		.loc 1 443 0
 1398 0308 0023     		movs	r3, #0
 1399 030a 07F5B052 		add	r2, r7, #5632
 1400 030e 02F11702 		add	r2, r2, #23
 1401 0312 1370     		strb	r3, [r2]
 1402 0314 42E0     		b	.L91
 1403              	.L92:
 444:..\src/command_processing.c ****                         m_tmp = m_addr + i*sod;
 1404              		.loc 1 444 0 discriminator 3
 1405 0316 07F5B053 		add	r3, r7, #5632
 1406 031a 03F11703 		add	r3, r3, #23
 1407 031e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1408 0320 07F5B052 		add	r2, r7, #5632
 1409 0324 02F11302 		add	r2, r2, #19
 1410 0328 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1411 032a 02FB03F3 		mul	r3, r2, r3
 1412 032e 1A46     		mov	r2, r3
 1413 0330 07F5B053 		add	r3, r7, #5632
 1414 0334 03F10803 		add	r3, r3, #8
 1415 0338 1B68     		ldr	r3, [r3]
 1416 033a 1344     		add	r3, r3, r2
 1417 033c 07F5B052 		add	r2, r7, #5632
 1418 0340 02F10402 		add	r2, r2, #4
 1419 0344 1360     		str	r3, [r2]
 445:..\src/command_processing.c ****                         packet_data[4 + PARAM_BYTE_SLOT*idx + i*sod] = *m_tmp;
 1420              		.loc 1 445 0 discriminator 3
 1421 0346 07F5B053 		add	r3, r7, #5632
 1422 034a 03F11503 		add	r3, r3, #21
 1423 034e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1424 0350 3222     		movs	r2, #50
 1425 0352 02FB03F3 		mul	r3, r2, r3
 1426 0356 1A1D     		adds	r2, r3, #4
 1427 0358 07F5B053 		add	r3, r7, #5632
 1428 035c 03F11703 		add	r3, r3, #23
 1429 0360 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1430 0362 07F5B051 		add	r1, r7, #5632
 1431 0366 01F11301 		add	r1, r1, #19
 1432 036a 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 1433 036c 01FB03F3 		mul	r3, r1, r3
 1434 0370 1A44     		add	r2, r2, r3
 1435 0372 07F5B053 		add	r3, r7, #5632
 1436 0376 03F10403 		add	r3, r3, #4
 1437 037a 1B68     		ldr	r3, [r3]
 1438 037c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 50


 1439 037e 07F15803 		add	r3, r7, #88
 1440 0382 043B     		subs	r3, r3, #4
 1441 0384 9954     		strb	r1, [r3, r2]
 443:..\src/command_processing.c ****                         m_tmp = m_addr + i*sod;
 1442              		.loc 1 443 0 discriminator 3
 1443 0386 07F5B053 		add	r3, r7, #5632
 1444 038a 03F11703 		add	r3, r3, #23
 1445 038e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1446 0390 0133     		adds	r3, r3, #1
 1447 0392 07F5B052 		add	r2, r7, #5632
 1448 0396 02F11702 		add	r2, r2, #23
 1449 039a 1370     		strb	r3, [r2]
 1450              	.L91:
 443:..\src/command_processing.c ****                         m_tmp = m_addr + i*sod;
 1451              		.loc 1 443 0 is_stmt 0 discriminator 1
 1452 039c 07F5B053 		add	r3, r7, #5632
 1453 03a0 03F11503 		add	r3, r3, #21
 1454 03a4 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1455 03a6 07F11803 		add	r3, r7, #24
 1456 03aa 143B     		subs	r3, r3, #20
 1457 03ac 1B68     		ldr	r3, [r3]
 1458 03ae 1344     		add	r3, r3, r2
 1459 03b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1460 03b2 07F5B052 		add	r2, r7, #5632
 1461 03b6 02F11702 		add	r2, r2, #23
 1462 03ba 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1463 03bc 9A42     		cmp	r2, r3
 1464 03be AAD3     		bcc	.L92
 446:..\src/command_processing.c ****                     }
 447:..\src/command_processing.c ****                     break;
 1465              		.loc 1 447 0 is_stmt 1
 1466 03c0 02F083B8 		b	.L113
 1467              	.L84:
 448:..\src/command_processing.c ****                 case TYPE_INT16:
 449:..\src/command_processing.c ****                     for (i=0; i<NUM_ITEMS[idx]; i++){
 1468              		.loc 1 449 0
 1469 03c4 0023     		movs	r3, #0
 1470 03c6 07F5B052 		add	r2, r7, #5632
 1471 03ca 02F11702 		add	r2, r2, #23
 1472 03ce 1370     		strb	r3, [r2]
 1473 03d0 7CE0     		b	.L93
 1474              	.L96:
 450:..\src/command_processing.c ****                         m_tmp = m_addr + i*sod;
 1475              		.loc 1 450 0
 1476 03d2 07F5B053 		add	r3, r7, #5632
 1477 03d6 03F11703 		add	r3, r3, #23
 1478 03da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1479 03dc 07F5B052 		add	r2, r7, #5632
 1480 03e0 02F11302 		add	r2, r2, #19
 1481 03e4 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1482 03e6 02FB03F3 		mul	r3, r2, r3
 1483 03ea 1A46     		mov	r2, r3
 1484 03ec 07F5B053 		add	r3, r7, #5632
 1485 03f0 03F10803 		add	r3, r3, #8
 1486 03f4 1B68     		ldr	r3, [r3]
 1487 03f6 1344     		add	r3, r3, r2
 1488 03f8 07F5B052 		add	r2, r7, #5632
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 51


 1489 03fc 02F10402 		add	r2, r2, #4
 1490 0400 1360     		str	r3, [r2]
 451:..\src/command_processing.c ****                         aux_int16 = *((int16*)m_tmp);
 1491              		.loc 1 451 0
 1492 0402 07F5B053 		add	r3, r7, #5632
 1493 0406 03F10403 		add	r3, r3, #4
 1494 040a 1B68     		ldr	r3, [r3]
 1495 040c B3F90020 		ldrsh	r2, [r3]
 1496 0410 07F13803 		add	r3, r7, #56
 1497 0414 1E3B     		subs	r3, r3, #30
 1498 0416 1A80     		strh	r2, [r3]	@ movhi
 452:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 1499              		.loc 1 452 0
 1500 0418 0023     		movs	r3, #0
 1501 041a 07F5B052 		add	r2, r7, #5632
 1502 041e 02F11602 		add	r2, r2, #22
 1503 0422 1370     		strb	r3, [r2]
 1504 0424 3BE0     		b	.L94
 1505              	.L95:
 453:..\src/command_processing.c ****                             packet_data[(4 + PARAM_BYTE_SLOT*idx + i*sod) + sod - j -1] = ((char*)(
 1506              		.loc 1 453 0 discriminator 3
 1507 0426 07F5B053 		add	r3, r7, #5632
 1508 042a 03F11503 		add	r3, r3, #21
 1509 042e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1510 0430 3222     		movs	r2, #50
 1511 0432 02FB03F3 		mul	r3, r2, r3
 1512 0436 1A1D     		adds	r2, r3, #4
 1513 0438 07F5B053 		add	r3, r7, #5632
 1514 043c 03F11703 		add	r3, r3, #23
 1515 0440 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1516 0442 07F5B051 		add	r1, r7, #5632
 1517 0446 01F11301 		add	r1, r1, #19
 1518 044a 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 1519 044c 01FB03F3 		mul	r3, r1, r3
 1520 0450 1A44     		add	r2, r2, r3
 1521 0452 07F5B053 		add	r3, r7, #5632
 1522 0456 03F11303 		add	r3, r3, #19
 1523 045a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1524 045c 1A44     		add	r2, r2, r3
 1525 045e 07F5B053 		add	r3, r7, #5632
 1526 0462 03F11603 		add	r3, r3, #22
 1527 0466 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1528 0468 D31A     		subs	r3, r2, r3
 1529 046a 5A1E     		subs	r2, r3, #1
 1530 046c 07F5B053 		add	r3, r7, #5632
 1531 0470 03F11603 		add	r3, r3, #22
 1532 0474 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1533 0476 07F13803 		add	r3, r7, #56
 1534 047a 1E3B     		subs	r3, r3, #30
 1535 047c 0B44     		add	r3, r3, r1
 1536 047e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1537 0480 07F15803 		add	r3, r7, #88
 1538 0484 043B     		subs	r3, r3, #4
 1539 0486 9954     		strb	r1, [r3, r2]
 452:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 1540              		.loc 1 452 0 discriminator 3
 1541 0488 07F5B053 		add	r3, r7, #5632
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 52


 1542 048c 03F11603 		add	r3, r3, #22
 1543 0490 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1544 0492 0133     		adds	r3, r3, #1
 1545 0494 07F5B052 		add	r2, r7, #5632
 1546 0498 02F11602 		add	r2, r2, #22
 1547 049c 1370     		strb	r3, [r2]
 1548              	.L94:
 452:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 1549              		.loc 1 452 0 is_stmt 0 discriminator 1
 1550 049e 07F5B053 		add	r3, r7, #5632
 1551 04a2 03F11603 		add	r3, r3, #22
 1552 04a6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1553 04a8 07F5B053 		add	r3, r7, #5632
 1554 04ac 03F11303 		add	r3, r3, #19
 1555 04b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1556 04b2 9A42     		cmp	r2, r3
 1557 04b4 B7D3     		bcc	.L95
 449:..\src/command_processing.c ****                         m_tmp = m_addr + i*sod;
 1558              		.loc 1 449 0 is_stmt 1 discriminator 2
 1559 04b6 07F5B053 		add	r3, r7, #5632
 1560 04ba 03F11703 		add	r3, r3, #23
 1561 04be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1562 04c0 0133     		adds	r3, r3, #1
 1563 04c2 07F5B052 		add	r2, r7, #5632
 1564 04c6 02F11702 		add	r2, r2, #23
 1565 04ca 1370     		strb	r3, [r2]
 1566              	.L93:
 449:..\src/command_processing.c ****                         m_tmp = m_addr + i*sod;
 1567              		.loc 1 449 0 is_stmt 0 discriminator 1
 1568 04cc 07F5B053 		add	r3, r7, #5632
 1569 04d0 03F11503 		add	r3, r3, #21
 1570 04d4 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1571 04d6 07F11803 		add	r3, r7, #24
 1572 04da 143B     		subs	r3, r3, #20
 1573 04dc 1B68     		ldr	r3, [r3]
 1574 04de 1344     		add	r3, r3, r2
 1575 04e0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1576 04e2 07F5B052 		add	r2, r7, #5632
 1577 04e6 02F11702 		add	r2, r2, #23
 1578 04ea 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1579 04ec 9A42     		cmp	r2, r3
 1580 04ee FFF470AF 		bcc	.L96
 454:..\src/command_processing.c ****                         }
 455:..\src/command_processing.c ****                     }
 456:..\src/command_processing.c ****                     break;
 1581              		.loc 1 456 0 is_stmt 1
 1582 04f2 01F0EABF 		b	.L113
 1583              	.L85:
 457:..\src/command_processing.c ****                 case TYPE_UINT16:
 458:..\src/command_processing.c ****                     for (i=0; i<NUM_ITEMS[idx]; i++){
 1584              		.loc 1 458 0
 1585 04f6 0023     		movs	r3, #0
 1586 04f8 07F5B052 		add	r2, r7, #5632
 1587 04fc 02F11702 		add	r2, r2, #23
 1588 0500 1370     		strb	r3, [r2]
 1589 0502 79E0     		b	.L97
 1590              	.L100:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 53


 459:..\src/command_processing.c ****                         m_tmp = m_addr + i*sod;
 1591              		.loc 1 459 0
 1592 0504 07F5B053 		add	r3, r7, #5632
 1593 0508 03F11703 		add	r3, r3, #23
 1594 050c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1595 050e 07F5B052 		add	r2, r7, #5632
 1596 0512 02F11302 		add	r2, r2, #19
 1597 0516 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1598 0518 02FB03F3 		mul	r3, r2, r3
 1599 051c 1A46     		mov	r2, r3
 1600 051e 07F5B053 		add	r3, r7, #5632
 1601 0522 03F10803 		add	r3, r3, #8
 1602 0526 1B68     		ldr	r3, [r3]
 1603 0528 1344     		add	r3, r3, r2
 1604 052a 07F5B052 		add	r2, r7, #5632
 1605 052e 02F10402 		add	r2, r2, #4
 1606 0532 1360     		str	r3, [r2]
 460:..\src/command_processing.c ****                         aux_uint16 = *((uint16*)m_tmp);
 1607              		.loc 1 460 0
 1608 0534 07F5B053 		add	r3, r7, #5632
 1609 0538 03F10403 		add	r3, r3, #4
 1610 053c 1B68     		ldr	r3, [r3]
 1611 053e 1A88     		ldrh	r2, [r3]
 1612 0540 07F11803 		add	r3, r7, #24
 1613 0544 1A80     		strh	r2, [r3]	@ movhi
 461:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 1614              		.loc 1 461 0
 1615 0546 0023     		movs	r3, #0
 1616 0548 07F5B052 		add	r2, r7, #5632
 1617 054c 02F11602 		add	r2, r2, #22
 1618 0550 1370     		strb	r3, [r2]
 1619 0552 3AE0     		b	.L98
 1620              	.L99:
 462:..\src/command_processing.c ****                             packet_data[(4 + PARAM_BYTE_SLOT*idx + i*sod) + sod - j -1] = ((char*)(
 1621              		.loc 1 462 0 discriminator 3
 1622 0554 07F5B053 		add	r3, r7, #5632
 1623 0558 03F11503 		add	r3, r3, #21
 1624 055c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1625 055e 3222     		movs	r2, #50
 1626 0560 02FB03F3 		mul	r3, r2, r3
 1627 0564 1A1D     		adds	r2, r3, #4
 1628 0566 07F5B053 		add	r3, r7, #5632
 1629 056a 03F11703 		add	r3, r3, #23
 1630 056e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1631 0570 07F5B051 		add	r1, r7, #5632
 1632 0574 01F11301 		add	r1, r1, #19
 1633 0578 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 1634 057a 01FB03F3 		mul	r3, r1, r3
 1635 057e 1A44     		add	r2, r2, r3
 1636 0580 07F5B053 		add	r3, r7, #5632
 1637 0584 03F11303 		add	r3, r3, #19
 1638 0588 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1639 058a 1A44     		add	r2, r2, r3
 1640 058c 07F5B053 		add	r3, r7, #5632
 1641 0590 03F11603 		add	r3, r3, #22
 1642 0594 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1643 0596 D31A     		subs	r3, r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 54


 1644 0598 5A1E     		subs	r2, r3, #1
 1645 059a 07F5B053 		add	r3, r7, #5632
 1646 059e 03F11603 		add	r3, r3, #22
 1647 05a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1648 05a4 07F11801 		add	r1, r7, #24
 1649 05a8 0B44     		add	r3, r3, r1
 1650 05aa 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1651 05ac 07F15803 		add	r3, r7, #88
 1652 05b0 043B     		subs	r3, r3, #4
 1653 05b2 9954     		strb	r1, [r3, r2]
 461:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 1654              		.loc 1 461 0 discriminator 3
 1655 05b4 07F5B053 		add	r3, r7, #5632
 1656 05b8 03F11603 		add	r3, r3, #22
 1657 05bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1658 05be 0133     		adds	r3, r3, #1
 1659 05c0 07F5B052 		add	r2, r7, #5632
 1660 05c4 02F11602 		add	r2, r2, #22
 1661 05c8 1370     		strb	r3, [r2]
 1662              	.L98:
 461:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 1663              		.loc 1 461 0 is_stmt 0 discriminator 1
 1664 05ca 07F5B053 		add	r3, r7, #5632
 1665 05ce 03F11603 		add	r3, r3, #22
 1666 05d2 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1667 05d4 07F5B053 		add	r3, r7, #5632
 1668 05d8 03F11303 		add	r3, r3, #19
 1669 05dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1670 05de 9A42     		cmp	r2, r3
 1671 05e0 B8D3     		bcc	.L99
 458:..\src/command_processing.c ****                         m_tmp = m_addr + i*sod;
 1672              		.loc 1 458 0 is_stmt 1 discriminator 2
 1673 05e2 07F5B053 		add	r3, r7, #5632
 1674 05e6 03F11703 		add	r3, r3, #23
 1675 05ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1676 05ec 0133     		adds	r3, r3, #1
 1677 05ee 07F5B052 		add	r2, r7, #5632
 1678 05f2 02F11702 		add	r2, r2, #23
 1679 05f6 1370     		strb	r3, [r2]
 1680              	.L97:
 458:..\src/command_processing.c ****                         m_tmp = m_addr + i*sod;
 1681              		.loc 1 458 0 is_stmt 0 discriminator 1
 1682 05f8 07F5B053 		add	r3, r7, #5632
 1683 05fc 03F11503 		add	r3, r3, #21
 1684 0600 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1685 0602 07F11803 		add	r3, r7, #24
 1686 0606 143B     		subs	r3, r3, #20
 1687 0608 1B68     		ldr	r3, [r3]
 1688 060a 1344     		add	r3, r3, r2
 1689 060c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1690 060e 07F5B052 		add	r2, r7, #5632
 1691 0612 02F11702 		add	r2, r2, #23
 1692 0616 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1693 0618 9A42     		cmp	r2, r3
 1694 061a FFF473AF 		bcc	.L100
 463:..\src/command_processing.c ****                         }
 464:..\src/command_processing.c ****                     }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 55


 465:..\src/command_processing.c ****                     break;
 1695              		.loc 1 465 0 is_stmt 1
 1696 061e 01F054BF 		b	.L113
 1697              	.L86:
 466:..\src/command_processing.c ****                 case TYPE_INT32: 
 467:..\src/command_processing.c ****                     for (i=0; i<NUM_ITEMS[idx]; i++){
 1698              		.loc 1 467 0
 1699 0622 0023     		movs	r3, #0
 1700 0624 07F5B052 		add	r2, r7, #5632
 1701 0628 02F11702 		add	r2, r2, #23
 1702 062c 1370     		strb	r3, [r2]
 1703 062e 7BE0     		b	.L101
 1704              	.L104:
 468:..\src/command_processing.c ****                         m_tmp = m_addr + i*sod;
 1705              		.loc 1 468 0
 1706 0630 07F5B053 		add	r3, r7, #5632
 1707 0634 03F11703 		add	r3, r3, #23
 1708 0638 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1709 063a 07F5B052 		add	r2, r7, #5632
 1710 063e 02F11302 		add	r2, r2, #19
 1711 0642 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1712 0644 02FB03F3 		mul	r3, r2, r3
 1713 0648 1A46     		mov	r2, r3
 1714 064a 07F5B053 		add	r3, r7, #5632
 1715 064e 03F10803 		add	r3, r3, #8
 1716 0652 1B68     		ldr	r3, [r3]
 1717 0654 1344     		add	r3, r3, r2
 1718 0656 07F5B052 		add	r2, r7, #5632
 1719 065a 02F10402 		add	r2, r2, #4
 1720 065e 1360     		str	r3, [r2]
 469:..\src/command_processing.c ****                         aux_int32 = *((int32*)m_tmp);
 1721              		.loc 1 469 0
 1722 0660 07F5B053 		add	r3, r7, #5632
 1723 0664 03F10403 		add	r3, r3, #4
 1724 0668 1B68     		ldr	r3, [r3]
 1725 066a 1A68     		ldr	r2, [r3]
 1726 066c 07F11803 		add	r3, r7, #24
 1727 0670 043B     		subs	r3, r3, #4
 1728 0672 1A60     		str	r2, [r3]
 470:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 1729              		.loc 1 470 0
 1730 0674 0023     		movs	r3, #0
 1731 0676 07F5B052 		add	r2, r7, #5632
 1732 067a 02F11602 		add	r2, r2, #22
 1733 067e 1370     		strb	r3, [r2]
 1734 0680 3BE0     		b	.L102
 1735              	.L103:
 471:..\src/command_processing.c ****                             packet_data[(4 + PARAM_BYTE_SLOT*idx + i*sod) + sod - j -1] = ((char*)(
 1736              		.loc 1 471 0 discriminator 3
 1737 0682 07F5B053 		add	r3, r7, #5632
 1738 0686 03F11503 		add	r3, r3, #21
 1739 068a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1740 068c 3222     		movs	r2, #50
 1741 068e 02FB03F3 		mul	r3, r2, r3
 1742 0692 1A1D     		adds	r2, r3, #4
 1743 0694 07F5B053 		add	r3, r7, #5632
 1744 0698 03F11703 		add	r3, r3, #23
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 56


 1745 069c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1746 069e 07F5B051 		add	r1, r7, #5632
 1747 06a2 01F11301 		add	r1, r1, #19
 1748 06a6 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 1749 06a8 01FB03F3 		mul	r3, r1, r3
 1750 06ac 1A44     		add	r2, r2, r3
 1751 06ae 07F5B053 		add	r3, r7, #5632
 1752 06b2 03F11303 		add	r3, r3, #19
 1753 06b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1754 06b8 1A44     		add	r2, r2, r3
 1755 06ba 07F5B053 		add	r3, r7, #5632
 1756 06be 03F11603 		add	r3, r3, #22
 1757 06c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1758 06c4 D31A     		subs	r3, r2, r3
 1759 06c6 5A1E     		subs	r2, r3, #1
 1760 06c8 07F5B053 		add	r3, r7, #5632
 1761 06cc 03F11603 		add	r3, r3, #22
 1762 06d0 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1763 06d2 07F11803 		add	r3, r7, #24
 1764 06d6 043B     		subs	r3, r3, #4
 1765 06d8 0B44     		add	r3, r3, r1
 1766 06da 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1767 06dc 07F15803 		add	r3, r7, #88
 1768 06e0 043B     		subs	r3, r3, #4
 1769 06e2 9954     		strb	r1, [r3, r2]
 470:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 1770              		.loc 1 470 0 discriminator 3
 1771 06e4 07F5B053 		add	r3, r7, #5632
 1772 06e8 03F11603 		add	r3, r3, #22
 1773 06ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1774 06ee 0133     		adds	r3, r3, #1
 1775 06f0 07F5B052 		add	r2, r7, #5632
 1776 06f4 02F11602 		add	r2, r2, #22
 1777 06f8 1370     		strb	r3, [r2]
 1778              	.L102:
 470:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 1779              		.loc 1 470 0 is_stmt 0 discriminator 1
 1780 06fa 07F5B053 		add	r3, r7, #5632
 1781 06fe 03F11603 		add	r3, r3, #22
 1782 0702 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1783 0704 07F5B053 		add	r3, r7, #5632
 1784 0708 03F11303 		add	r3, r3, #19
 1785 070c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1786 070e 9A42     		cmp	r2, r3
 1787 0710 B7D3     		bcc	.L103
 467:..\src/command_processing.c ****                         m_tmp = m_addr + i*sod;
 1788              		.loc 1 467 0 is_stmt 1 discriminator 2
 1789 0712 07F5B053 		add	r3, r7, #5632
 1790 0716 03F11703 		add	r3, r3, #23
 1791 071a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1792 071c 0133     		adds	r3, r3, #1
 1793 071e 07F5B052 		add	r2, r7, #5632
 1794 0722 02F11702 		add	r2, r2, #23
 1795 0726 1370     		strb	r3, [r2]
 1796              	.L101:
 467:..\src/command_processing.c ****                         m_tmp = m_addr + i*sod;
 1797              		.loc 1 467 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 57


 1798 0728 07F5B053 		add	r3, r7, #5632
 1799 072c 03F11503 		add	r3, r3, #21
 1800 0730 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1801 0732 07F11803 		add	r3, r7, #24
 1802 0736 143B     		subs	r3, r3, #20
 1803 0738 1B68     		ldr	r3, [r3]
 1804 073a 1344     		add	r3, r3, r2
 1805 073c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1806 073e 07F5B052 		add	r2, r7, #5632
 1807 0742 02F11702 		add	r2, r2, #23
 1808 0746 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1809 0748 9A42     		cmp	r2, r3
 1810 074a FFF471AF 		bcc	.L104
 472:..\src/command_processing.c ****                         }
 473:..\src/command_processing.c ****                     }
 474:..\src/command_processing.c ****                     break;
 1811              		.loc 1 474 0 is_stmt 1
 1812 074e 01F0BCBE 		b	.L113
 1813              	.L87:
 475:..\src/command_processing.c ****                 case TYPE_UINT32: 
 476:..\src/command_processing.c ****                     for (i=0; i<NUM_ITEMS[idx]; i++){
 1814              		.loc 1 476 0
 1815 0752 0023     		movs	r3, #0
 1816 0754 07F5B052 		add	r2, r7, #5632
 1817 0758 02F11702 		add	r2, r2, #23
 1818 075c 1370     		strb	r3, [r2]
 1819 075e 7BE0     		b	.L105
 1820              	.L108:
 477:..\src/command_processing.c ****                         m_tmp = m_addr + i*sod;
 1821              		.loc 1 477 0
 1822 0760 07F5B053 		add	r3, r7, #5632
 1823 0764 03F11703 		add	r3, r3, #23
 1824 0768 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1825 076a 07F5B052 		add	r2, r7, #5632
 1826 076e 02F11302 		add	r2, r2, #19
 1827 0772 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1828 0774 02FB03F3 		mul	r3, r2, r3
 1829 0778 1A46     		mov	r2, r3
 1830 077a 07F5B053 		add	r3, r7, #5632
 1831 077e 03F10803 		add	r3, r3, #8
 1832 0782 1B68     		ldr	r3, [r3]
 1833 0784 1344     		add	r3, r3, r2
 1834 0786 07F5B052 		add	r2, r7, #5632
 1835 078a 02F10402 		add	r2, r2, #4
 1836 078e 1360     		str	r3, [r2]
 478:..\src/command_processing.c ****                         aux_uint32 = *((uint32*)m_tmp);
 1837              		.loc 1 478 0
 1838 0790 07F5B053 		add	r3, r7, #5632
 1839 0794 03F10403 		add	r3, r3, #4
 1840 0798 1B68     		ldr	r3, [r3]
 1841 079a 1A68     		ldr	r2, [r3]
 1842 079c 07F11803 		add	r3, r7, #24
 1843 07a0 083B     		subs	r3, r3, #8
 1844 07a2 1A60     		str	r2, [r3]
 479:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 1845              		.loc 1 479 0
 1846 07a4 0023     		movs	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 58


 1847 07a6 07F5B052 		add	r2, r7, #5632
 1848 07aa 02F11602 		add	r2, r2, #22
 1849 07ae 1370     		strb	r3, [r2]
 1850 07b0 3BE0     		b	.L106
 1851              	.L107:
 480:..\src/command_processing.c ****                             packet_data[(4 + PARAM_BYTE_SLOT*idx + i*sod) + sod - j -1] = ((char*)(
 1852              		.loc 1 480 0 discriminator 3
 1853 07b2 07F5B053 		add	r3, r7, #5632
 1854 07b6 03F11503 		add	r3, r3, #21
 1855 07ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1856 07bc 3222     		movs	r2, #50
 1857 07be 02FB03F3 		mul	r3, r2, r3
 1858 07c2 1A1D     		adds	r2, r3, #4
 1859 07c4 07F5B053 		add	r3, r7, #5632
 1860 07c8 03F11703 		add	r3, r3, #23
 1861 07cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1862 07ce 07F5B051 		add	r1, r7, #5632
 1863 07d2 01F11301 		add	r1, r1, #19
 1864 07d6 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 1865 07d8 01FB03F3 		mul	r3, r1, r3
 1866 07dc 1A44     		add	r2, r2, r3
 1867 07de 07F5B053 		add	r3, r7, #5632
 1868 07e2 03F11303 		add	r3, r3, #19
 1869 07e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1870 07e8 1A44     		add	r2, r2, r3
 1871 07ea 07F5B053 		add	r3, r7, #5632
 1872 07ee 03F11603 		add	r3, r3, #22
 1873 07f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1874 07f4 D31A     		subs	r3, r2, r3
 1875 07f6 5A1E     		subs	r2, r3, #1
 1876 07f8 07F5B053 		add	r3, r7, #5632
 1877 07fc 03F11603 		add	r3, r3, #22
 1878 0800 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1879 0802 07F11803 		add	r3, r7, #24
 1880 0806 083B     		subs	r3, r3, #8
 1881 0808 0B44     		add	r3, r3, r1
 1882 080a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1883 080c 07F15803 		add	r3, r7, #88
 1884 0810 043B     		subs	r3, r3, #4
 1885 0812 9954     		strb	r1, [r3, r2]
 479:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 1886              		.loc 1 479 0 discriminator 3
 1887 0814 07F5B053 		add	r3, r7, #5632
 1888 0818 03F11603 		add	r3, r3, #22
 1889 081c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1890 081e 0133     		adds	r3, r3, #1
 1891 0820 07F5B052 		add	r2, r7, #5632
 1892 0824 02F11602 		add	r2, r2, #22
 1893 0828 1370     		strb	r3, [r2]
 1894              	.L106:
 479:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 1895              		.loc 1 479 0 is_stmt 0 discriminator 1
 1896 082a 07F5B053 		add	r3, r7, #5632
 1897 082e 03F11603 		add	r3, r3, #22
 1898 0832 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1899 0834 07F5B053 		add	r3, r7, #5632
 1900 0838 03F11303 		add	r3, r3, #19
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 59


 1901 083c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1902 083e 9A42     		cmp	r2, r3
 1903 0840 B7D3     		bcc	.L107
 476:..\src/command_processing.c ****                         m_tmp = m_addr + i*sod;
 1904              		.loc 1 476 0 is_stmt 1 discriminator 2
 1905 0842 07F5B053 		add	r3, r7, #5632
 1906 0846 03F11703 		add	r3, r3, #23
 1907 084a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1908 084c 0133     		adds	r3, r3, #1
 1909 084e 07F5B052 		add	r2, r7, #5632
 1910 0852 02F11702 		add	r2, r2, #23
 1911 0856 1370     		strb	r3, [r2]
 1912              	.L105:
 476:..\src/command_processing.c ****                         m_tmp = m_addr + i*sod;
 1913              		.loc 1 476 0 is_stmt 0 discriminator 1
 1914 0858 07F5B053 		add	r3, r7, #5632
 1915 085c 03F11503 		add	r3, r3, #21
 1916 0860 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1917 0862 07F11803 		add	r3, r7, #24
 1918 0866 143B     		subs	r3, r3, #20
 1919 0868 1B68     		ldr	r3, [r3]
 1920 086a 1344     		add	r3, r3, r2
 1921 086c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1922 086e 07F5B052 		add	r2, r7, #5632
 1923 0872 02F11702 		add	r2, r2, #23
 1924 0876 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1925 0878 9A42     		cmp	r2, r3
 1926 087a FFF471AF 		bcc	.L108
 481:..\src/command_processing.c ****                         }
 482:..\src/command_processing.c ****                     }
 483:..\src/command_processing.c ****                     break;
 1927              		.loc 1 483 0 is_stmt 1
 1928 087e 01F024BE 		b	.L113
 1929              	.L88:
 484:..\src/command_processing.c ****                     
 485:..\src/command_processing.c ****                 case TYPE_FLOAT:
 486:..\src/command_processing.c ****                     for (i=0; i<NUM_ITEMS[idx]; i++){
 1930              		.loc 1 486 0
 1931 0882 0023     		movs	r3, #0
 1932 0884 07F5B052 		add	r2, r7, #5632
 1933 0888 02F11702 		add	r2, r2, #23
 1934 088c 1370     		strb	r3, [r2]
 1935 088e 7BE0     		b	.L109
 1936              	.L112:
 487:..\src/command_processing.c ****                         m_tmp = m_addr + i*sod;
 1937              		.loc 1 487 0
 1938 0890 07F5B053 		add	r3, r7, #5632
 1939 0894 03F11703 		add	r3, r3, #23
 1940 0898 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1941 089a 07F5B052 		add	r2, r7, #5632
 1942 089e 02F11302 		add	r2, r2, #19
 1943 08a2 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1944 08a4 02FB03F3 		mul	r3, r2, r3
 1945 08a8 1A46     		mov	r2, r3
 1946 08aa 07F5B053 		add	r3, r7, #5632
 1947 08ae 03F10803 		add	r3, r3, #8
 1948 08b2 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 60


 1949 08b4 1344     		add	r3, r3, r2
 1950 08b6 07F5B052 		add	r2, r7, #5632
 1951 08ba 02F10402 		add	r2, r2, #4
 1952 08be 1360     		str	r3, [r2]
 488:..\src/command_processing.c ****                         aux_float = *((float*)m_tmp);
 1953              		.loc 1 488 0
 1954 08c0 07F5B053 		add	r3, r7, #5632
 1955 08c4 03F10403 		add	r3, r3, #4
 1956 08c8 1B68     		ldr	r3, [r3]
 1957 08ca 1A68     		ldr	r2, [r3]	@ float
 1958 08cc 07F13803 		add	r3, r7, #56
 1959 08d0 1C3B     		subs	r3, r3, #28
 1960 08d2 1A60     		str	r2, [r3]	@ float
 489:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 1961              		.loc 1 489 0
 1962 08d4 0023     		movs	r3, #0
 1963 08d6 07F5B052 		add	r2, r7, #5632
 1964 08da 02F11602 		add	r2, r2, #22
 1965 08de 1370     		strb	r3, [r2]
 1966 08e0 3BE0     		b	.L110
 1967              	.L111:
 490:..\src/command_processing.c ****                             packet_data[(4 + PARAM_BYTE_SLOT*idx + i*sod) + sod - j -1] = ((char*)(
 1968              		.loc 1 490 0 discriminator 3
 1969 08e2 07F5B053 		add	r3, r7, #5632
 1970 08e6 03F11503 		add	r3, r3, #21
 1971 08ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1972 08ec 3222     		movs	r2, #50
 1973 08ee 02FB03F3 		mul	r3, r2, r3
 1974 08f2 1A1D     		adds	r2, r3, #4
 1975 08f4 07F5B053 		add	r3, r7, #5632
 1976 08f8 03F11703 		add	r3, r3, #23
 1977 08fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1978 08fe 07F5B051 		add	r1, r7, #5632
 1979 0902 01F11301 		add	r1, r1, #19
 1980 0906 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 1981 0908 01FB03F3 		mul	r3, r1, r3
 1982 090c 1A44     		add	r2, r2, r3
 1983 090e 07F5B053 		add	r3, r7, #5632
 1984 0912 03F11303 		add	r3, r3, #19
 1985 0916 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1986 0918 1A44     		add	r2, r2, r3
 1987 091a 07F5B053 		add	r3, r7, #5632
 1988 091e 03F11603 		add	r3, r3, #22
 1989 0922 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1990 0924 D31A     		subs	r3, r2, r3
 1991 0926 5A1E     		subs	r2, r3, #1
 1992 0928 07F5B053 		add	r3, r7, #5632
 1993 092c 03F11603 		add	r3, r3, #22
 1994 0930 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1995 0932 07F13803 		add	r3, r7, #56
 1996 0936 1C3B     		subs	r3, r3, #28
 1997 0938 0B44     		add	r3, r3, r1
 1998 093a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1999 093c 07F15803 		add	r3, r7, #88
 2000 0940 043B     		subs	r3, r3, #4
 2001 0942 9954     		strb	r1, [r3, r2]
 489:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 61


 2002              		.loc 1 489 0 discriminator 3
 2003 0944 07F5B053 		add	r3, r7, #5632
 2004 0948 03F11603 		add	r3, r3, #22
 2005 094c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2006 094e 0133     		adds	r3, r3, #1
 2007 0950 07F5B052 		add	r2, r7, #5632
 2008 0954 02F11602 		add	r2, r2, #22
 2009 0958 1370     		strb	r3, [r2]
 2010              	.L110:
 489:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 2011              		.loc 1 489 0 is_stmt 0 discriminator 1
 2012 095a 07F5B053 		add	r3, r7, #5632
 2013 095e 03F11603 		add	r3, r3, #22
 2014 0962 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2015 0964 07F5B053 		add	r3, r7, #5632
 2016 0968 03F11303 		add	r3, r3, #19
 2017 096c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2018 096e 9A42     		cmp	r2, r3
 2019 0970 B7D3     		bcc	.L111
 486:..\src/command_processing.c ****                         m_tmp = m_addr + i*sod;
 2020              		.loc 1 486 0 is_stmt 1 discriminator 2
 2021 0972 07F5B053 		add	r3, r7, #5632
 2022 0976 03F11703 		add	r3, r3, #23
 2023 097a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2024 097c 0133     		adds	r3, r3, #1
 2025 097e 07F5B052 		add	r2, r7, #5632
 2026 0982 02F11702 		add	r2, r2, #23
 2027 0986 1370     		strb	r3, [r2]
 2028              	.L109:
 486:..\src/command_processing.c ****                         m_tmp = m_addr + i*sod;
 2029              		.loc 1 486 0 is_stmt 0 discriminator 1
 2030 0988 07F5B053 		add	r3, r7, #5632
 2031 098c 03F11503 		add	r3, r3, #21
 2032 0990 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2033 0992 07F11803 		add	r3, r7, #24
 2034 0996 143B     		subs	r3, r3, #20
 2035 0998 1B68     		ldr	r3, [r3]
 2036 099a 1344     		add	r3, r3, r2
 2037 099c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2038 099e 07F5B052 		add	r2, r7, #5632
 2039 09a2 02F11702 		add	r2, r2, #23
 2040 09a6 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2041 09a8 9A42     		cmp	r2, r3
 2042 09aa FFF471AF 		bcc	.L112
 491:..\src/command_processing.c ****                         }
 492:..\src/command_processing.c ****                     }
 493:..\src/command_processing.c ****                     break;   
 2043              		.loc 1 493 0 is_stmt 1 discriminator 7
 2044 09ae 00BF     		nop
 2045 09b0 01F08BBD 		b	.L113
 2046              	.L79:
 494:..\src/command_processing.c ****             }
 495:..\src/command_processing.c ****         }
 496:..\src/command_processing.c ****         else {
 497:..\src/command_processing.c ****             
 498:..\src/command_processing.c **** // DO NOT MODIFY THE FUNCTION BEFORE THIS LINE
 499:..\src/command_processing.c ****             
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 62


 500:..\src/command_processing.c **** // MODIFY CUSTOM PARAM            
 501:..\src/command_processing.c ****                 switch(idx+1){
 2047              		.loc 1 501 0
 2048 09b4 07F5B053 		add	r3, r7, #5632
 2049 09b8 03F11503 		add	r3, r3, #21
 2050 09bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2051 09be 0133     		adds	r3, r3, #1
 2052 09c0 023B     		subs	r3, r3, #2
 2053 09c2 332B     		cmp	r3, #51
 2054 09c4 01F28085 		bhi	.L283
 2055 09c8 01A2     		adr	r2, .L116
 2056 09ca 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2057 09ce 00BF     		.p2align 2
 2058              	.L116:
 2059 09d0 A10A0000 		.word	.L115+1
 2060 09d4 6D0F0000 		.word	.L117+1
 2061 09d8 C9240000 		.word	.L283+1
 2062 09dc C9240000 		.word	.L283+1
 2063 09e0 C9240000 		.word	.L283+1
 2064 09e4 C9240000 		.word	.L283+1
 2065 09e8 37140000 		.word	.L118+1
 2066 09ec C9240000 		.word	.L283+1
 2067 09f0 C9240000 		.word	.L283+1
 2068 09f4 AB150000 		.word	.L119+1
 2069 09f8 C9240000 		.word	.L283+1
 2070 09fc C9240000 		.word	.L283+1
 2071 0a00 C9240000 		.word	.L283+1
 2072 0a04 C9240000 		.word	.L283+1
 2073 0a08 C9240000 		.word	.L283+1
 2074 0a0c C9240000 		.word	.L283+1
 2075 0a10 C9240000 		.word	.L283+1
 2076 0a14 C9240000 		.word	.L283+1
 2077 0a18 C9240000 		.word	.L283+1
 2078 0a1c C9240000 		.word	.L283+1
 2079 0a20 C9240000 		.word	.L283+1
 2080 0a24 79170000 		.word	.L120+1
 2081 0a28 C9240000 		.word	.L283+1
 2082 0a2c C9240000 		.word	.L283+1
 2083 0a30 C9240000 		.word	.L283+1
 2084 0a34 C9240000 		.word	.L283+1
 2085 0a38 C9240000 		.word	.L283+1
 2086 0a3c C9240000 		.word	.L283+1
 2087 0a40 C9240000 		.word	.L283+1
 2088 0a44 C9240000 		.word	.L283+1
 2089 0a48 C9240000 		.word	.L283+1
 2090 0a4c C9240000 		.word	.L283+1
 2091 0a50 C9240000 		.word	.L283+1
 2092 0a54 C9240000 		.word	.L283+1
 2093 0a58 C9240000 		.word	.L283+1
 2094 0a5c C9240000 		.word	.L283+1
 2095 0a60 C9240000 		.word	.L283+1
 2096 0a64 C9240000 		.word	.L283+1
 2097 0a68 C9240000 		.word	.L283+1
 2098 0a6c C9240000 		.word	.L283+1
 2099 0a70 C9240000 		.word	.L283+1
 2100 0a74 C9240000 		.word	.L283+1
 2101 0a78 43180000 		.word	.L121+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 63


 2102 0a7c 111D0000 		.word	.L122+1
 2103 0a80 C9240000 		.word	.L283+1
 2104 0a84 C9240000 		.word	.L283+1
 2105 0a88 C9240000 		.word	.L283+1
 2106 0a8c C9240000 		.word	.L283+1
 2107 0a90 DB210000 		.word	.L123+1
 2108 0a94 C9240000 		.word	.L283+1
 2109 0a98 C9240000 		.word	.L283+1
 2110 0a9c FF220000 		.word	.L124+1
 2111              		.p2align 1
 2112              	.L115:
 502:..\src/command_processing.c ****                     case 2:         // Position PID
 503:..\src/command_processing.c ****                         if(c_mem.motor[MOTOR_IDX].control_mode != CURR_AND_POS_CONTROL) {
 2113              		.loc 1 503 0
 2114 0aa0 07F5B053 		add	r3, r7, #5632
 2115 0aa4 03F10F03 		add	r3, r3, #15
 2116 0aa8 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2117 0aaa AC49     		ldr	r1, .L289
 2118 0aac 1346     		mov	r3, r2
 2119 0aae DB00     		lsls	r3, r3, #3
 2120 0ab0 9B1A     		subs	r3, r3, r2
 2121 0ab2 1B01     		lsls	r3, r3, #4
 2122 0ab4 0B44     		add	r3, r3, r1
 2123 0ab6 03F20F13 		addw	r3, r3, #271
 2124 0aba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2125 0abc 032B     		cmp	r3, #3
 2126 0abe 00F02981 		beq	.L125
 504:..\src/command_processing.c ****                             aux_float = (float) c_mem.motor[MOTOR_IDX].k_p / 65536;
 2127              		.loc 1 504 0
 2128 0ac2 07F5B053 		add	r3, r7, #5632
 2129 0ac6 03F10F03 		add	r3, r3, #15
 2130 0aca 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2131 0acc A349     		ldr	r1, .L289
 2132 0ace 1346     		mov	r3, r2
 2133 0ad0 DB00     		lsls	r3, r3, #3
 2134 0ad2 9B1A     		subs	r3, r3, r2
 2135 0ad4 1B01     		lsls	r3, r3, #4
 2136 0ad6 0B44     		add	r3, r3, r1
 2137 0ad8 B033     		adds	r3, r3, #176
 2138 0ada 1B68     		ldr	r3, [r3]
 2139 0adc 1846     		mov	r0, r3
 2140 0ade FFF7FEFF 		bl	__aeabi_i2f
 2141 0ae2 0346     		mov	r3, r0
 2142 0ae4 4FF08F41 		mov	r1, #1199570944
 2143 0ae8 1846     		mov	r0, r3
 2144 0aea FFF7FEFF 		bl	__aeabi_fdiv
 2145 0aee 0346     		mov	r3, r0
 2146 0af0 1A46     		mov	r2, r3
 2147 0af2 07F13803 		add	r3, r7, #56
 2148 0af6 1C3B     		subs	r3, r3, #28
 2149 0af8 1A60     		str	r2, [r3]	@ float
 505:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 2150              		.loc 1 505 0
 2151 0afa 0023     		movs	r3, #0
 2152 0afc 07F5B052 		add	r2, r7, #5632
 2153 0b00 02F11702 		add	r2, r2, #23
 2154 0b04 1370     		strb	r3, [r2]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 64


 2155 0b06 2EE0     		b	.L126
 2156              	.L127:
 506:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx) + sod - i -1] = ((char*)(&aux
 2157              		.loc 1 506 0 discriminator 3
 2158 0b08 07F5B053 		add	r3, r7, #5632
 2159 0b0c 03F11503 		add	r3, r3, #21
 2160 0b10 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2161 0b12 3222     		movs	r2, #50
 2162 0b14 02FB03F3 		mul	r3, r2, r3
 2163 0b18 1A1D     		adds	r2, r3, #4
 2164 0b1a 07F5B053 		add	r3, r7, #5632
 2165 0b1e 03F11303 		add	r3, r3, #19
 2166 0b22 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2167 0b24 1A44     		add	r2, r2, r3
 2168 0b26 07F5B053 		add	r3, r7, #5632
 2169 0b2a 03F11703 		add	r3, r3, #23
 2170 0b2e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2171 0b30 D31A     		subs	r3, r2, r3
 2172 0b32 5A1E     		subs	r2, r3, #1
 2173 0b34 07F5B053 		add	r3, r7, #5632
 2174 0b38 03F11703 		add	r3, r3, #23
 2175 0b3c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2176 0b3e 07F13803 		add	r3, r7, #56
 2177 0b42 1C3B     		subs	r3, r3, #28
 2178 0b44 0B44     		add	r3, r3, r1
 2179 0b46 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2180 0b48 07F15803 		add	r3, r7, #88
 2181 0b4c 043B     		subs	r3, r3, #4
 2182 0b4e 9954     		strb	r1, [r3, r2]
 505:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 2183              		.loc 1 505 0 discriminator 3
 2184 0b50 07F5B053 		add	r3, r7, #5632
 2185 0b54 03F11703 		add	r3, r3, #23
 2186 0b58 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2187 0b5a 0133     		adds	r3, r3, #1
 2188 0b5c 07F5B052 		add	r2, r7, #5632
 2189 0b60 02F11702 		add	r2, r2, #23
 2190 0b64 1370     		strb	r3, [r2]
 2191              	.L126:
 505:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 2192              		.loc 1 505 0 is_stmt 0 discriminator 1
 2193 0b66 07F5B053 		add	r3, r7, #5632
 2194 0b6a 03F11703 		add	r3, r3, #23
 2195 0b6e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2196 0b70 07F5B053 		add	r3, r7, #5632
 2197 0b74 03F11303 		add	r3, r3, #19
 2198 0b78 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2199 0b7a 9A42     		cmp	r2, r3
 2200 0b7c C4D3     		bcc	.L127
 507:..\src/command_processing.c ****                             }
 508:..\src/command_processing.c ****                             aux_float = (float) c_mem.motor[MOTOR_IDX].k_i / 65536;
 2201              		.loc 1 508 0 is_stmt 1
 2202 0b7e 07F5B053 		add	r3, r7, #5632
 2203 0b82 03F10F03 		add	r3, r3, #15
 2204 0b86 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2205 0b88 7449     		ldr	r1, .L289
 2206 0b8a 1346     		mov	r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 65


 2207 0b8c DB00     		lsls	r3, r3, #3
 2208 0b8e 9B1A     		subs	r3, r3, r2
 2209 0b90 1B01     		lsls	r3, r3, #4
 2210 0b92 0B44     		add	r3, r3, r1
 2211 0b94 B433     		adds	r3, r3, #180
 2212 0b96 1B68     		ldr	r3, [r3]
 2213 0b98 1846     		mov	r0, r3
 2214 0b9a FFF7FEFF 		bl	__aeabi_i2f
 2215 0b9e 0346     		mov	r3, r0
 2216 0ba0 4FF08F41 		mov	r1, #1199570944
 2217 0ba4 1846     		mov	r0, r3
 2218 0ba6 FFF7FEFF 		bl	__aeabi_fdiv
 2219 0baa 0346     		mov	r3, r0
 2220 0bac 1A46     		mov	r2, r3
 2221 0bae 07F13803 		add	r3, r7, #56
 2222 0bb2 1C3B     		subs	r3, r3, #28
 2223 0bb4 1A60     		str	r2, [r3]	@ float
 509:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 2224              		.loc 1 509 0
 2225 0bb6 0023     		movs	r3, #0
 2226 0bb8 07F5B052 		add	r2, r7, #5632
 2227 0bbc 02F11702 		add	r2, r2, #23
 2228 0bc0 1370     		strb	r3, [r2]
 2229 0bc2 34E0     		b	.L128
 2230              	.L129:
 510:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + sod) + sod - i -1] = ((char*
 2231              		.loc 1 510 0 discriminator 3
 2232 0bc4 07F5B053 		add	r3, r7, #5632
 2233 0bc8 03F11503 		add	r3, r3, #21
 2234 0bcc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2235 0bce 3222     		movs	r2, #50
 2236 0bd0 02FB03F3 		mul	r3, r2, r3
 2237 0bd4 1A1D     		adds	r2, r3, #4
 2238 0bd6 07F5B053 		add	r3, r7, #5632
 2239 0bda 03F11303 		add	r3, r3, #19
 2240 0bde 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2241 0be0 1A44     		add	r2, r2, r3
 2242 0be2 07F5B053 		add	r3, r7, #5632
 2243 0be6 03F11303 		add	r3, r3, #19
 2244 0bea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2245 0bec 1A44     		add	r2, r2, r3
 2246 0bee 07F5B053 		add	r3, r7, #5632
 2247 0bf2 03F11703 		add	r3, r3, #23
 2248 0bf6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2249 0bf8 D31A     		subs	r3, r2, r3
 2250 0bfa 5A1E     		subs	r2, r3, #1
 2251 0bfc 07F5B053 		add	r3, r7, #5632
 2252 0c00 03F11703 		add	r3, r3, #23
 2253 0c04 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2254 0c06 07F13803 		add	r3, r7, #56
 2255 0c0a 1C3B     		subs	r3, r3, #28
 2256 0c0c 0B44     		add	r3, r3, r1
 2257 0c0e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2258 0c10 07F15803 		add	r3, r7, #88
 2259 0c14 043B     		subs	r3, r3, #4
 2260 0c16 9954     		strb	r1, [r3, r2]
 509:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 66


 2261              		.loc 1 509 0 discriminator 3
 2262 0c18 07F5B053 		add	r3, r7, #5632
 2263 0c1c 03F11703 		add	r3, r3, #23
 2264 0c20 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2265 0c22 0133     		adds	r3, r3, #1
 2266 0c24 07F5B052 		add	r2, r7, #5632
 2267 0c28 02F11702 		add	r2, r2, #23
 2268 0c2c 1370     		strb	r3, [r2]
 2269              	.L128:
 509:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 2270              		.loc 1 509 0 is_stmt 0 discriminator 1
 2271 0c2e 07F5B053 		add	r3, r7, #5632
 2272 0c32 03F11703 		add	r3, r3, #23
 2273 0c36 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2274 0c38 07F5B053 		add	r3, r7, #5632
 2275 0c3c 03F11303 		add	r3, r3, #19
 2276 0c40 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2277 0c42 9A42     		cmp	r2, r3
 2278 0c44 BED3     		bcc	.L129
 511:..\src/command_processing.c ****                             }
 512:..\src/command_processing.c ****                             aux_float = (float) c_mem.motor[MOTOR_IDX].k_d / 65536;
 2279              		.loc 1 512 0 is_stmt 1
 2280 0c46 07F5B053 		add	r3, r7, #5632
 2281 0c4a 03F10F03 		add	r3, r3, #15
 2282 0c4e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2283 0c50 4249     		ldr	r1, .L289
 2284 0c52 1346     		mov	r3, r2
 2285 0c54 DB00     		lsls	r3, r3, #3
 2286 0c56 9B1A     		subs	r3, r3, r2
 2287 0c58 1B01     		lsls	r3, r3, #4
 2288 0c5a 0B44     		add	r3, r3, r1
 2289 0c5c B833     		adds	r3, r3, #184
 2290 0c5e 1B68     		ldr	r3, [r3]
 2291 0c60 1846     		mov	r0, r3
 2292 0c62 FFF7FEFF 		bl	__aeabi_i2f
 2293 0c66 0346     		mov	r3, r0
 2294 0c68 4FF08F41 		mov	r1, #1199570944
 2295 0c6c 1846     		mov	r0, r3
 2296 0c6e FFF7FEFF 		bl	__aeabi_fdiv
 2297 0c72 0346     		mov	r3, r0
 2298 0c74 1A46     		mov	r2, r3
 2299 0c76 07F13803 		add	r3, r7, #56
 2300 0c7a 1C3B     		subs	r3, r3, #28
 2301 0c7c 1A60     		str	r2, [r3]	@ float
 513:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 2302              		.loc 1 513 0
 2303 0c7e 0023     		movs	r3, #0
 2304 0c80 07F5B052 		add	r2, r7, #5632
 2305 0c84 02F11702 		add	r2, r2, #23
 2306 0c88 1370     		strb	r3, [r2]
 2307 0c8a 35E0     		b	.L130
 2308              	.L131:
 514:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + 2*sod) + sod - i -1] = ((cha
 2309              		.loc 1 514 0 discriminator 3
 2310 0c8c 07F5B053 		add	r3, r7, #5632
 2311 0c90 03F11503 		add	r3, r3, #21
 2312 0c94 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 67


 2313 0c96 3222     		movs	r2, #50
 2314 0c98 02FB03F3 		mul	r3, r2, r3
 2315 0c9c 1A1D     		adds	r2, r3, #4
 2316 0c9e 07F5B053 		add	r3, r7, #5632
 2317 0ca2 03F11303 		add	r3, r3, #19
 2318 0ca6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2319 0ca8 5B00     		lsls	r3, r3, #1
 2320 0caa 1A44     		add	r2, r2, r3
 2321 0cac 07F5B053 		add	r3, r7, #5632
 2322 0cb0 03F11303 		add	r3, r3, #19
 2323 0cb4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2324 0cb6 1A44     		add	r2, r2, r3
 2325 0cb8 07F5B053 		add	r3, r7, #5632
 2326 0cbc 03F11703 		add	r3, r3, #23
 2327 0cc0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2328 0cc2 D31A     		subs	r3, r2, r3
 2329 0cc4 5A1E     		subs	r2, r3, #1
 2330 0cc6 07F5B053 		add	r3, r7, #5632
 2331 0cca 03F11703 		add	r3, r3, #23
 2332 0cce 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2333 0cd0 07F13803 		add	r3, r7, #56
 2334 0cd4 1C3B     		subs	r3, r3, #28
 2335 0cd6 0B44     		add	r3, r3, r1
 2336 0cd8 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2337 0cda 07F15803 		add	r3, r7, #88
 2338 0cde 043B     		subs	r3, r3, #4
 2339 0ce0 9954     		strb	r1, [r3, r2]
 513:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 2340              		.loc 1 513 0 discriminator 3
 2341 0ce2 07F5B053 		add	r3, r7, #5632
 2342 0ce6 03F11703 		add	r3, r3, #23
 2343 0cea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2344 0cec 0133     		adds	r3, r3, #1
 2345 0cee 07F5B052 		add	r2, r7, #5632
 2346 0cf2 02F11702 		add	r2, r2, #23
 2347 0cf6 1370     		strb	r3, [r2]
 2348              	.L130:
 513:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 2349              		.loc 1 513 0 is_stmt 0 discriminator 1
 2350 0cf8 07F5B053 		add	r3, r7, #5632
 2351 0cfc 03F11703 		add	r3, r3, #23
 2352 0d00 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2353 0d02 07F5B053 		add	r3, r7, #5632
 2354 0d06 03F11303 		add	r3, r3, #19
 2355 0d0a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2356 0d0c 9A42     		cmp	r2, r3
 2357 0d0e BDD3     		bcc	.L131
 515:..\src/command_processing.c ****                             } 
 516:..\src/command_processing.c ****                         }
 517:..\src/command_processing.c ****                         else {
 518:..\src/command_processing.c ****                             aux_float = (float) c_mem.motor[MOTOR_IDX].k_p_dl / 65536;
 519:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 520:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx) + sod - i -1] = ((char*)(&aux
 521:..\src/command_processing.c ****                             }
 522:..\src/command_processing.c ****                             aux_float = (float) c_mem.motor[MOTOR_IDX].k_i_dl / 65536;
 523:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 524:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + sod) + sod - i -1] = ((char*
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 68


 525:..\src/command_processing.c ****                             }
 526:..\src/command_processing.c ****                             aux_float = (float) c_mem.motor[MOTOR_IDX].k_d_dl / 65536;
 527:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 528:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + 2*sod) + sod - i -1] = ((cha
 529:..\src/command_processing.c ****                             }
 530:..\src/command_processing.c ****                         }
 531:..\src/command_processing.c ****                         break;
 2358              		.loc 1 531 0 is_stmt 1
 2359 0d10 01F0DBBB 		b	.L113
 2360              	.L125:
 518:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 2361              		.loc 1 518 0
 2362 0d14 07F5B053 		add	r3, r7, #5632
 2363 0d18 03F10F03 		add	r3, r3, #15
 2364 0d1c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2365 0d1e 0F49     		ldr	r1, .L289
 2366 0d20 1346     		mov	r3, r2
 2367 0d22 DB00     		lsls	r3, r3, #3
 2368 0d24 9B1A     		subs	r3, r3, r2
 2369 0d26 1B01     		lsls	r3, r3, #4
 2370 0d28 0B44     		add	r3, r3, r1
 2371 0d2a C833     		adds	r3, r3, #200
 2372 0d2c 1B68     		ldr	r3, [r3]
 2373 0d2e 1846     		mov	r0, r3
 2374 0d30 FFF7FEFF 		bl	__aeabi_i2f
 2375 0d34 0346     		mov	r3, r0
 2376 0d36 4FF08F41 		mov	r1, #1199570944
 2377 0d3a 1846     		mov	r0, r3
 2378 0d3c FFF7FEFF 		bl	__aeabi_fdiv
 2379 0d40 0346     		mov	r3, r0
 2380 0d42 1A46     		mov	r2, r3
 2381 0d44 07F13803 		add	r3, r7, #56
 2382 0d48 1C3B     		subs	r3, r3, #28
 2383 0d4a 1A60     		str	r2, [r3]	@ float
 519:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx) + sod - i -1] = ((char*)(&aux
 2384              		.loc 1 519 0
 2385 0d4c 0023     		movs	r3, #0
 2386 0d4e 07F5B052 		add	r2, r7, #5632
 2387 0d52 02F11702 		add	r2, r2, #23
 2388 0d56 1370     		strb	r3, [r2]
 2389 0d58 31E0     		b	.L133
 2390              	.L290:
 2391 0d5a 00BF     		.align	2
 2392              	.L289:
 2393 0d5c 00000000 		.word	c_mem
 2394              	.L134:
 520:..\src/command_processing.c ****                             }
 2395              		.loc 1 520 0 discriminator 3
 2396 0d60 07F5B053 		add	r3, r7, #5632
 2397 0d64 03F11503 		add	r3, r3, #21
 2398 0d68 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2399 0d6a 3222     		movs	r2, #50
 2400 0d6c 02FB03F3 		mul	r3, r2, r3
 2401 0d70 1A1D     		adds	r2, r3, #4
 2402 0d72 07F5B053 		add	r3, r7, #5632
 2403 0d76 03F11303 		add	r3, r3, #19
 2404 0d7a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 69


 2405 0d7c 1A44     		add	r2, r2, r3
 2406 0d7e 07F5B053 		add	r3, r7, #5632
 2407 0d82 03F11703 		add	r3, r3, #23
 2408 0d86 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2409 0d88 D31A     		subs	r3, r2, r3
 2410 0d8a 5A1E     		subs	r2, r3, #1
 2411 0d8c 07F5B053 		add	r3, r7, #5632
 2412 0d90 03F11703 		add	r3, r3, #23
 2413 0d94 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2414 0d96 07F13803 		add	r3, r7, #56
 2415 0d9a 1C3B     		subs	r3, r3, #28
 2416 0d9c 0B44     		add	r3, r3, r1
 2417 0d9e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2418 0da0 07F15803 		add	r3, r7, #88
 2419 0da4 043B     		subs	r3, r3, #4
 2420 0da6 9954     		strb	r1, [r3, r2]
 519:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx) + sod - i -1] = ((char*)(&aux
 2421              		.loc 1 519 0 discriminator 3
 2422 0da8 07F5B053 		add	r3, r7, #5632
 2423 0dac 03F11703 		add	r3, r3, #23
 2424 0db0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2425 0db2 0133     		adds	r3, r3, #1
 2426 0db4 07F5B052 		add	r2, r7, #5632
 2427 0db8 02F11702 		add	r2, r2, #23
 2428 0dbc 1370     		strb	r3, [r2]
 2429              	.L133:
 519:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx) + sod - i -1] = ((char*)(&aux
 2430              		.loc 1 519 0 is_stmt 0 discriminator 1
 2431 0dbe 07F5B053 		add	r3, r7, #5632
 2432 0dc2 03F11703 		add	r3, r3, #23
 2433 0dc6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2434 0dc8 07F5B053 		add	r3, r7, #5632
 2435 0dcc 03F11303 		add	r3, r3, #19
 2436 0dd0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2437 0dd2 9A42     		cmp	r2, r3
 2438 0dd4 C4D3     		bcc	.L134
 522:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 2439              		.loc 1 522 0 is_stmt 1
 2440 0dd6 07F5B053 		add	r3, r7, #5632
 2441 0dda 03F10F03 		add	r3, r3, #15
 2442 0dde 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2443 0de0 AB49     		ldr	r1, .L291
 2444 0de2 1346     		mov	r3, r2
 2445 0de4 DB00     		lsls	r3, r3, #3
 2446 0de6 9B1A     		subs	r3, r3, r2
 2447 0de8 1B01     		lsls	r3, r3, #4
 2448 0dea 0B44     		add	r3, r3, r1
 2449 0dec CC33     		adds	r3, r3, #204
 2450 0dee 1B68     		ldr	r3, [r3]
 2451 0df0 1846     		mov	r0, r3
 2452 0df2 FFF7FEFF 		bl	__aeabi_i2f
 2453 0df6 0346     		mov	r3, r0
 2454 0df8 4FF08F41 		mov	r1, #1199570944
 2455 0dfc 1846     		mov	r0, r3
 2456 0dfe FFF7FEFF 		bl	__aeabi_fdiv
 2457 0e02 0346     		mov	r3, r0
 2458 0e04 1A46     		mov	r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 70


 2459 0e06 07F13803 		add	r3, r7, #56
 2460 0e0a 1C3B     		subs	r3, r3, #28
 2461 0e0c 1A60     		str	r2, [r3]	@ float
 523:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + sod) + sod - i -1] = ((char*
 2462              		.loc 1 523 0
 2463 0e0e 0023     		movs	r3, #0
 2464 0e10 07F5B052 		add	r2, r7, #5632
 2465 0e14 02F11702 		add	r2, r2, #23
 2466 0e18 1370     		strb	r3, [r2]
 2467 0e1a 34E0     		b	.L135
 2468              	.L136:
 524:..\src/command_processing.c ****                             }
 2469              		.loc 1 524 0 discriminator 3
 2470 0e1c 07F5B053 		add	r3, r7, #5632
 2471 0e20 03F11503 		add	r3, r3, #21
 2472 0e24 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2473 0e26 3222     		movs	r2, #50
 2474 0e28 02FB03F3 		mul	r3, r2, r3
 2475 0e2c 1A1D     		adds	r2, r3, #4
 2476 0e2e 07F5B053 		add	r3, r7, #5632
 2477 0e32 03F11303 		add	r3, r3, #19
 2478 0e36 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2479 0e38 1A44     		add	r2, r2, r3
 2480 0e3a 07F5B053 		add	r3, r7, #5632
 2481 0e3e 03F11303 		add	r3, r3, #19
 2482 0e42 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2483 0e44 1A44     		add	r2, r2, r3
 2484 0e46 07F5B053 		add	r3, r7, #5632
 2485 0e4a 03F11703 		add	r3, r3, #23
 2486 0e4e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2487 0e50 D31A     		subs	r3, r2, r3
 2488 0e52 5A1E     		subs	r2, r3, #1
 2489 0e54 07F5B053 		add	r3, r7, #5632
 2490 0e58 03F11703 		add	r3, r3, #23
 2491 0e5c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2492 0e5e 07F13803 		add	r3, r7, #56
 2493 0e62 1C3B     		subs	r3, r3, #28
 2494 0e64 0B44     		add	r3, r3, r1
 2495 0e66 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2496 0e68 07F15803 		add	r3, r7, #88
 2497 0e6c 043B     		subs	r3, r3, #4
 2498 0e6e 9954     		strb	r1, [r3, r2]
 523:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + sod) + sod - i -1] = ((char*
 2499              		.loc 1 523 0 discriminator 3
 2500 0e70 07F5B053 		add	r3, r7, #5632
 2501 0e74 03F11703 		add	r3, r3, #23
 2502 0e78 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2503 0e7a 0133     		adds	r3, r3, #1
 2504 0e7c 07F5B052 		add	r2, r7, #5632
 2505 0e80 02F11702 		add	r2, r2, #23
 2506 0e84 1370     		strb	r3, [r2]
 2507              	.L135:
 523:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + sod) + sod - i -1] = ((char*
 2508              		.loc 1 523 0 is_stmt 0 discriminator 1
 2509 0e86 07F5B053 		add	r3, r7, #5632
 2510 0e8a 03F11703 		add	r3, r3, #23
 2511 0e8e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 71


 2512 0e90 07F5B053 		add	r3, r7, #5632
 2513 0e94 03F11303 		add	r3, r3, #19
 2514 0e98 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2515 0e9a 9A42     		cmp	r2, r3
 2516 0e9c BED3     		bcc	.L136
 526:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 2517              		.loc 1 526 0 is_stmt 1
 2518 0e9e 07F5B053 		add	r3, r7, #5632
 2519 0ea2 03F10F03 		add	r3, r3, #15
 2520 0ea6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2521 0ea8 7949     		ldr	r1, .L291
 2522 0eaa 1346     		mov	r3, r2
 2523 0eac DB00     		lsls	r3, r3, #3
 2524 0eae 9B1A     		subs	r3, r3, r2
 2525 0eb0 1B01     		lsls	r3, r3, #4
 2526 0eb2 0B44     		add	r3, r3, r1
 2527 0eb4 D033     		adds	r3, r3, #208
 2528 0eb6 1B68     		ldr	r3, [r3]
 2529 0eb8 1846     		mov	r0, r3
 2530 0eba FFF7FEFF 		bl	__aeabi_i2f
 2531 0ebe 0346     		mov	r3, r0
 2532 0ec0 4FF08F41 		mov	r1, #1199570944
 2533 0ec4 1846     		mov	r0, r3
 2534 0ec6 FFF7FEFF 		bl	__aeabi_fdiv
 2535 0eca 0346     		mov	r3, r0
 2536 0ecc 1A46     		mov	r2, r3
 2537 0ece 07F13803 		add	r3, r7, #56
 2538 0ed2 1C3B     		subs	r3, r3, #28
 2539 0ed4 1A60     		str	r2, [r3]	@ float
 527:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + 2*sod) + sod - i -1] = ((cha
 2540              		.loc 1 527 0
 2541 0ed6 0023     		movs	r3, #0
 2542 0ed8 07F5B052 		add	r2, r7, #5632
 2543 0edc 02F11702 		add	r2, r2, #23
 2544 0ee0 1370     		strb	r3, [r2]
 2545 0ee2 35E0     		b	.L137
 2546              	.L138:
 528:..\src/command_processing.c ****                             }
 2547              		.loc 1 528 0 discriminator 3
 2548 0ee4 07F5B053 		add	r3, r7, #5632
 2549 0ee8 03F11503 		add	r3, r3, #21
 2550 0eec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2551 0eee 3222     		movs	r2, #50
 2552 0ef0 02FB03F3 		mul	r3, r2, r3
 2553 0ef4 1A1D     		adds	r2, r3, #4
 2554 0ef6 07F5B053 		add	r3, r7, #5632
 2555 0efa 03F11303 		add	r3, r3, #19
 2556 0efe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2557 0f00 5B00     		lsls	r3, r3, #1
 2558 0f02 1A44     		add	r2, r2, r3
 2559 0f04 07F5B053 		add	r3, r7, #5632
 2560 0f08 03F11303 		add	r3, r3, #19
 2561 0f0c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2562 0f0e 1A44     		add	r2, r2, r3
 2563 0f10 07F5B053 		add	r3, r7, #5632
 2564 0f14 03F11703 		add	r3, r3, #23
 2565 0f18 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 72


 2566 0f1a D31A     		subs	r3, r2, r3
 2567 0f1c 5A1E     		subs	r2, r3, #1
 2568 0f1e 07F5B053 		add	r3, r7, #5632
 2569 0f22 03F11703 		add	r3, r3, #23
 2570 0f26 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2571 0f28 07F13803 		add	r3, r7, #56
 2572 0f2c 1C3B     		subs	r3, r3, #28
 2573 0f2e 0B44     		add	r3, r3, r1
 2574 0f30 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2575 0f32 07F15803 		add	r3, r7, #88
 2576 0f36 043B     		subs	r3, r3, #4
 2577 0f38 9954     		strb	r1, [r3, r2]
 527:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + 2*sod) + sod - i -1] = ((cha
 2578              		.loc 1 527 0 discriminator 3
 2579 0f3a 07F5B053 		add	r3, r7, #5632
 2580 0f3e 03F11703 		add	r3, r3, #23
 2581 0f42 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2582 0f44 0133     		adds	r3, r3, #1
 2583 0f46 07F5B052 		add	r2, r7, #5632
 2584 0f4a 02F11702 		add	r2, r2, #23
 2585 0f4e 1370     		strb	r3, [r2]
 2586              	.L137:
 527:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + 2*sod) + sod - i -1] = ((cha
 2587              		.loc 1 527 0 is_stmt 0 discriminator 1
 2588 0f50 07F5B053 		add	r3, r7, #5632
 2589 0f54 03F11703 		add	r3, r3, #23
 2590 0f58 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2591 0f5a 07F5B053 		add	r3, r7, #5632
 2592 0f5e 03F11303 		add	r3, r3, #19
 2593 0f62 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2594 0f64 9A42     		cmp	r2, r3
 2595 0f66 BDD3     		bcc	.L138
 2596              		.loc 1 531 0 is_stmt 1
 2597 0f68 01F0AFBA 		b	.L113
 2598              	.L117:
 532:..\src/command_processing.c ****                         
 533:..\src/command_processing.c ****                     case 3:         //Current PID
 534:..\src/command_processing.c ****                         if(c_mem.motor[MOTOR_IDX].control_mode != CURR_AND_POS_CONTROL) {
 2599              		.loc 1 534 0
 2600 0f6c 07F5B053 		add	r3, r7, #5632
 2601 0f70 03F10F03 		add	r3, r3, #15
 2602 0f74 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2603 0f76 4649     		ldr	r1, .L291
 2604 0f78 1346     		mov	r3, r2
 2605 0f7a DB00     		lsls	r3, r3, #3
 2606 0f7c 9B1A     		subs	r3, r3, r2
 2607 0f7e 1B01     		lsls	r3, r3, #4
 2608 0f80 0B44     		add	r3, r3, r1
 2609 0f82 03F20F13 		addw	r3, r3, #271
 2610 0f86 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2611 0f88 032B     		cmp	r3, #3
 2612 0f8a 00F02B81 		beq	.L139
 535:..\src/command_processing.c ****                             aux_float = (float) c_mem.motor[MOTOR_IDX].k_p_c / 65536;
 2613              		.loc 1 535 0
 2614 0f8e 07F5B053 		add	r3, r7, #5632
 2615 0f92 03F10F03 		add	r3, r3, #15
 2616 0f96 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 73


 2617 0f98 3D49     		ldr	r1, .L291
 2618 0f9a 1346     		mov	r3, r2
 2619 0f9c DB00     		lsls	r3, r3, #3
 2620 0f9e 9B1A     		subs	r3, r3, r2
 2621 0fa0 1B01     		lsls	r3, r3, #4
 2622 0fa2 0B44     		add	r3, r3, r1
 2623 0fa4 BC33     		adds	r3, r3, #188
 2624 0fa6 1B68     		ldr	r3, [r3]
 2625 0fa8 1846     		mov	r0, r3
 2626 0faa FFF7FEFF 		bl	__aeabi_i2f
 2627 0fae 0346     		mov	r3, r0
 2628 0fb0 4FF08F41 		mov	r1, #1199570944
 2629 0fb4 1846     		mov	r0, r3
 2630 0fb6 FFF7FEFF 		bl	__aeabi_fdiv
 2631 0fba 0346     		mov	r3, r0
 2632 0fbc 1A46     		mov	r2, r3
 2633 0fbe 07F13803 		add	r3, r7, #56
 2634 0fc2 1C3B     		subs	r3, r3, #28
 2635 0fc4 1A60     		str	r2, [r3]	@ float
 536:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 2636              		.loc 1 536 0
 2637 0fc6 0023     		movs	r3, #0
 2638 0fc8 07F5B052 		add	r2, r7, #5632
 2639 0fcc 02F11702 		add	r2, r2, #23
 2640 0fd0 1370     		strb	r3, [r2]
 2641 0fd2 2EE0     		b	.L140
 2642              	.L141:
 537:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx) + sod - i -1] = ((char*)(&aux
 2643              		.loc 1 537 0 discriminator 3
 2644 0fd4 07F5B053 		add	r3, r7, #5632
 2645 0fd8 03F11503 		add	r3, r3, #21
 2646 0fdc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2647 0fde 3222     		movs	r2, #50
 2648 0fe0 02FB03F3 		mul	r3, r2, r3
 2649 0fe4 1A1D     		adds	r2, r3, #4
 2650 0fe6 07F5B053 		add	r3, r7, #5632
 2651 0fea 03F11303 		add	r3, r3, #19
 2652 0fee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2653 0ff0 1A44     		add	r2, r2, r3
 2654 0ff2 07F5B053 		add	r3, r7, #5632
 2655 0ff6 03F11703 		add	r3, r3, #23
 2656 0ffa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2657 0ffc D31A     		subs	r3, r2, r3
 2658 0ffe 5A1E     		subs	r2, r3, #1
 2659 1000 07F5B053 		add	r3, r7, #5632
 2660 1004 03F11703 		add	r3, r3, #23
 2661 1008 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2662 100a 07F13803 		add	r3, r7, #56
 2663 100e 1C3B     		subs	r3, r3, #28
 2664 1010 0B44     		add	r3, r3, r1
 2665 1012 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2666 1014 07F15803 		add	r3, r7, #88
 2667 1018 043B     		subs	r3, r3, #4
 2668 101a 9954     		strb	r1, [r3, r2]
 536:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 2669              		.loc 1 536 0 discriminator 3
 2670 101c 07F5B053 		add	r3, r7, #5632
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 74


 2671 1020 03F11703 		add	r3, r3, #23
 2672 1024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2673 1026 0133     		adds	r3, r3, #1
 2674 1028 07F5B052 		add	r2, r7, #5632
 2675 102c 02F11702 		add	r2, r2, #23
 2676 1030 1370     		strb	r3, [r2]
 2677              	.L140:
 536:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 2678              		.loc 1 536 0 is_stmt 0 discriminator 1
 2679 1032 07F5B053 		add	r3, r7, #5632
 2680 1036 03F11703 		add	r3, r3, #23
 2681 103a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2682 103c 07F5B053 		add	r3, r7, #5632
 2683 1040 03F11303 		add	r3, r3, #19
 2684 1044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2685 1046 9A42     		cmp	r2, r3
 2686 1048 C4D3     		bcc	.L141
 538:..\src/command_processing.c ****                             }
 539:..\src/command_processing.c ****                             aux_float = (float) c_mem.motor[MOTOR_IDX].k_i_c / 65536;
 2687              		.loc 1 539 0 is_stmt 1
 2688 104a 07F5B053 		add	r3, r7, #5632
 2689 104e 03F10F03 		add	r3, r3, #15
 2690 1052 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2691 1054 0E49     		ldr	r1, .L291
 2692 1056 1346     		mov	r3, r2
 2693 1058 DB00     		lsls	r3, r3, #3
 2694 105a 9B1A     		subs	r3, r3, r2
 2695 105c 1B01     		lsls	r3, r3, #4
 2696 105e 0B44     		add	r3, r3, r1
 2697 1060 C033     		adds	r3, r3, #192
 2698 1062 1B68     		ldr	r3, [r3]
 2699 1064 1846     		mov	r0, r3
 2700 1066 FFF7FEFF 		bl	__aeabi_i2f
 2701 106a 0346     		mov	r3, r0
 2702 106c 4FF08F41 		mov	r1, #1199570944
 2703 1070 1846     		mov	r0, r3
 2704 1072 FFF7FEFF 		bl	__aeabi_fdiv
 2705 1076 0346     		mov	r3, r0
 2706 1078 1A46     		mov	r2, r3
 2707 107a 07F13803 		add	r3, r7, #56
 2708 107e 1C3B     		subs	r3, r3, #28
 2709 1080 1A60     		str	r2, [r3]	@ float
 540:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 2710              		.loc 1 540 0
 2711 1082 0023     		movs	r3, #0
 2712 1084 07F5B052 		add	r2, r7, #5632
 2713 1088 02F11702 		add	r2, r2, #23
 2714 108c 1370     		strb	r3, [r2]
 2715 108e 36E0     		b	.L142
 2716              	.L292:
 2717              		.align	2
 2718              	.L291:
 2719 1090 00000000 		.word	c_mem
 2720              	.L143:
 541:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + sod) + sod - i -1] = ((char*
 2721              		.loc 1 541 0 discriminator 3
 2722 1094 07F5B053 		add	r3, r7, #5632
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 75


 2723 1098 03F11503 		add	r3, r3, #21
 2724 109c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2725 109e 3222     		movs	r2, #50
 2726 10a0 02FB03F3 		mul	r3, r2, r3
 2727 10a4 1A1D     		adds	r2, r3, #4
 2728 10a6 07F5B053 		add	r3, r7, #5632
 2729 10aa 03F11303 		add	r3, r3, #19
 2730 10ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2731 10b0 1A44     		add	r2, r2, r3
 2732 10b2 07F5B053 		add	r3, r7, #5632
 2733 10b6 03F11303 		add	r3, r3, #19
 2734 10ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2735 10bc 1A44     		add	r2, r2, r3
 2736 10be 07F5B053 		add	r3, r7, #5632
 2737 10c2 03F11703 		add	r3, r3, #23
 2738 10c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2739 10c8 D31A     		subs	r3, r2, r3
 2740 10ca 5A1E     		subs	r2, r3, #1
 2741 10cc 07F5B053 		add	r3, r7, #5632
 2742 10d0 03F11703 		add	r3, r3, #23
 2743 10d4 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2744 10d6 07F13803 		add	r3, r7, #56
 2745 10da 1C3B     		subs	r3, r3, #28
 2746 10dc 0B44     		add	r3, r3, r1
 2747 10de 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2748 10e0 07F15803 		add	r3, r7, #88
 2749 10e4 043B     		subs	r3, r3, #4
 2750 10e6 9954     		strb	r1, [r3, r2]
 540:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 2751              		.loc 1 540 0 discriminator 3
 2752 10e8 07F5B053 		add	r3, r7, #5632
 2753 10ec 03F11703 		add	r3, r3, #23
 2754 10f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2755 10f2 0133     		adds	r3, r3, #1
 2756 10f4 07F5B052 		add	r2, r7, #5632
 2757 10f8 02F11702 		add	r2, r2, #23
 2758 10fc 1370     		strb	r3, [r2]
 2759              	.L142:
 540:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 2760              		.loc 1 540 0 is_stmt 0 discriminator 1
 2761 10fe 07F5B053 		add	r3, r7, #5632
 2762 1102 03F11703 		add	r3, r3, #23
 2763 1106 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2764 1108 07F5B053 		add	r3, r7, #5632
 2765 110c 03F11303 		add	r3, r3, #19
 2766 1110 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2767 1112 9A42     		cmp	r2, r3
 2768 1114 BED3     		bcc	.L143
 542:..\src/command_processing.c ****                             }
 543:..\src/command_processing.c ****                             aux_float = (float) c_mem.motor[MOTOR_IDX].k_d_c / 65536;
 2769              		.loc 1 543 0 is_stmt 1
 2770 1116 07F5B053 		add	r3, r7, #5632
 2771 111a 03F10F03 		add	r3, r3, #15
 2772 111e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2773 1120 C849     		ldr	r1, .L293
 2774 1122 1346     		mov	r3, r2
 2775 1124 DB00     		lsls	r3, r3, #3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 76


 2776 1126 9B1A     		subs	r3, r3, r2
 2777 1128 1B01     		lsls	r3, r3, #4
 2778 112a 0B44     		add	r3, r3, r1
 2779 112c C433     		adds	r3, r3, #196
 2780 112e 1B68     		ldr	r3, [r3]
 2781 1130 1846     		mov	r0, r3
 2782 1132 FFF7FEFF 		bl	__aeabi_i2f
 2783 1136 0346     		mov	r3, r0
 2784 1138 4FF08F41 		mov	r1, #1199570944
 2785 113c 1846     		mov	r0, r3
 2786 113e FFF7FEFF 		bl	__aeabi_fdiv
 2787 1142 0346     		mov	r3, r0
 2788 1144 1A46     		mov	r2, r3
 2789 1146 07F13803 		add	r3, r7, #56
 2790 114a 1C3B     		subs	r3, r3, #28
 2791 114c 1A60     		str	r2, [r3]	@ float
 544:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 2792              		.loc 1 544 0
 2793 114e 0023     		movs	r3, #0
 2794 1150 07F5B052 		add	r2, r7, #5632
 2795 1154 02F11702 		add	r2, r2, #23
 2796 1158 1370     		strb	r3, [r2]
 2797 115a 35E0     		b	.L144
 2798              	.L145:
 545:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + 2*sod) + sod - i -1] = ((cha
 2799              		.loc 1 545 0 discriminator 3
 2800 115c 07F5B053 		add	r3, r7, #5632
 2801 1160 03F11503 		add	r3, r3, #21
 2802 1164 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2803 1166 3222     		movs	r2, #50
 2804 1168 02FB03F3 		mul	r3, r2, r3
 2805 116c 1A1D     		adds	r2, r3, #4
 2806 116e 07F5B053 		add	r3, r7, #5632
 2807 1172 03F11303 		add	r3, r3, #19
 2808 1176 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2809 1178 5B00     		lsls	r3, r3, #1
 2810 117a 1A44     		add	r2, r2, r3
 2811 117c 07F5B053 		add	r3, r7, #5632
 2812 1180 03F11303 		add	r3, r3, #19
 2813 1184 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2814 1186 1A44     		add	r2, r2, r3
 2815 1188 07F5B053 		add	r3, r7, #5632
 2816 118c 03F11703 		add	r3, r3, #23
 2817 1190 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2818 1192 D31A     		subs	r3, r2, r3
 2819 1194 5A1E     		subs	r2, r3, #1
 2820 1196 07F5B053 		add	r3, r7, #5632
 2821 119a 03F11703 		add	r3, r3, #23
 2822 119e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2823 11a0 07F13803 		add	r3, r7, #56
 2824 11a4 1C3B     		subs	r3, r3, #28
 2825 11a6 0B44     		add	r3, r3, r1
 2826 11a8 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2827 11aa 07F15803 		add	r3, r7, #88
 2828 11ae 043B     		subs	r3, r3, #4
 2829 11b0 9954     		strb	r1, [r3, r2]
 544:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 77


 2830              		.loc 1 544 0 discriminator 3
 2831 11b2 07F5B053 		add	r3, r7, #5632
 2832 11b6 03F11703 		add	r3, r3, #23
 2833 11ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2834 11bc 0133     		adds	r3, r3, #1
 2835 11be 07F5B052 		add	r2, r7, #5632
 2836 11c2 02F11702 		add	r2, r2, #23
 2837 11c6 1370     		strb	r3, [r2]
 2838              	.L144:
 544:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 2839              		.loc 1 544 0 is_stmt 0 discriminator 1
 2840 11c8 07F5B053 		add	r3, r7, #5632
 2841 11cc 03F11703 		add	r3, r3, #23
 2842 11d0 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2843 11d2 07F5B053 		add	r3, r7, #5632
 2844 11d6 03F11303 		add	r3, r3, #19
 2845 11da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2846 11dc 9A42     		cmp	r2, r3
 2847 11de BDD3     		bcc	.L145
 546:..\src/command_processing.c ****                             }
 547:..\src/command_processing.c ****                         }
 548:..\src/command_processing.c ****                         else {
 549:..\src/command_processing.c ****                             aux_float = (float) c_mem.motor[MOTOR_IDX].k_p_c_dl / 65536;
 550:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 551:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx) + sod - i -1] = ((char*)(&aux
 552:..\src/command_processing.c ****                             }
 553:..\src/command_processing.c ****                             aux_float = (float) c_mem.motor[MOTOR_IDX].k_i_c_dl / 65536;
 554:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 555:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + sod) + sod - i -1] = ((char*
 556:..\src/command_processing.c ****                             }
 557:..\src/command_processing.c ****                             aux_float = (float) c_mem.motor[MOTOR_IDX].k_d_c_dl / 65536;
 558:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 559:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + 2*sod) + sod - i -1] = ((cha
 560:..\src/command_processing.c ****                             }
 561:..\src/command_processing.c ****                         }            
 562:..\src/command_processing.c ****                         break;  
 2848              		.loc 1 562 0 is_stmt 1
 2849 11e0 01F073B9 		b	.L113
 2850              	.L139:
 549:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 2851              		.loc 1 549 0
 2852 11e4 07F5B053 		add	r3, r7, #5632
 2853 11e8 03F10F03 		add	r3, r3, #15
 2854 11ec 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2855 11ee 9549     		ldr	r1, .L293
 2856 11f0 1346     		mov	r3, r2
 2857 11f2 DB00     		lsls	r3, r3, #3
 2858 11f4 9B1A     		subs	r3, r3, r2
 2859 11f6 1B01     		lsls	r3, r3, #4
 2860 11f8 0B44     		add	r3, r3, r1
 2861 11fa D433     		adds	r3, r3, #212
 2862 11fc 1B68     		ldr	r3, [r3]
 2863 11fe 1846     		mov	r0, r3
 2864 1200 FFF7FEFF 		bl	__aeabi_i2f
 2865 1204 0346     		mov	r3, r0
 2866 1206 4FF08F41 		mov	r1, #1199570944
 2867 120a 1846     		mov	r0, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 78


 2868 120c FFF7FEFF 		bl	__aeabi_fdiv
 2869 1210 0346     		mov	r3, r0
 2870 1212 1A46     		mov	r2, r3
 2871 1214 07F13803 		add	r3, r7, #56
 2872 1218 1C3B     		subs	r3, r3, #28
 2873 121a 1A60     		str	r2, [r3]	@ float
 550:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx) + sod - i -1] = ((char*)(&aux
 2874              		.loc 1 550 0
 2875 121c 0023     		movs	r3, #0
 2876 121e 07F5B052 		add	r2, r7, #5632
 2877 1222 02F11702 		add	r2, r2, #23
 2878 1226 1370     		strb	r3, [r2]
 2879 1228 2EE0     		b	.L147
 2880              	.L148:
 551:..\src/command_processing.c ****                             }
 2881              		.loc 1 551 0 discriminator 3
 2882 122a 07F5B053 		add	r3, r7, #5632
 2883 122e 03F11503 		add	r3, r3, #21
 2884 1232 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2885 1234 3222     		movs	r2, #50
 2886 1236 02FB03F3 		mul	r3, r2, r3
 2887 123a 1A1D     		adds	r2, r3, #4
 2888 123c 07F5B053 		add	r3, r7, #5632
 2889 1240 03F11303 		add	r3, r3, #19
 2890 1244 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2891 1246 1A44     		add	r2, r2, r3
 2892 1248 07F5B053 		add	r3, r7, #5632
 2893 124c 03F11703 		add	r3, r3, #23
 2894 1250 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2895 1252 D31A     		subs	r3, r2, r3
 2896 1254 5A1E     		subs	r2, r3, #1
 2897 1256 07F5B053 		add	r3, r7, #5632
 2898 125a 03F11703 		add	r3, r3, #23
 2899 125e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2900 1260 07F13803 		add	r3, r7, #56
 2901 1264 1C3B     		subs	r3, r3, #28
 2902 1266 0B44     		add	r3, r3, r1
 2903 1268 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2904 126a 07F15803 		add	r3, r7, #88
 2905 126e 043B     		subs	r3, r3, #4
 2906 1270 9954     		strb	r1, [r3, r2]
 550:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx) + sod - i -1] = ((char*)(&aux
 2907              		.loc 1 550 0 discriminator 3
 2908 1272 07F5B053 		add	r3, r7, #5632
 2909 1276 03F11703 		add	r3, r3, #23
 2910 127a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2911 127c 0133     		adds	r3, r3, #1
 2912 127e 07F5B052 		add	r2, r7, #5632
 2913 1282 02F11702 		add	r2, r2, #23
 2914 1286 1370     		strb	r3, [r2]
 2915              	.L147:
 550:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx) + sod - i -1] = ((char*)(&aux
 2916              		.loc 1 550 0 is_stmt 0 discriminator 1
 2917 1288 07F5B053 		add	r3, r7, #5632
 2918 128c 03F11703 		add	r3, r3, #23
 2919 1290 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2920 1292 07F5B053 		add	r3, r7, #5632
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 79


 2921 1296 03F11303 		add	r3, r3, #19
 2922 129a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2923 129c 9A42     		cmp	r2, r3
 2924 129e C4D3     		bcc	.L148
 553:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 2925              		.loc 1 553 0 is_stmt 1
 2926 12a0 07F5B053 		add	r3, r7, #5632
 2927 12a4 03F10F03 		add	r3, r3, #15
 2928 12a8 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2929 12aa 6649     		ldr	r1, .L293
 2930 12ac 1346     		mov	r3, r2
 2931 12ae DB00     		lsls	r3, r3, #3
 2932 12b0 9B1A     		subs	r3, r3, r2
 2933 12b2 1B01     		lsls	r3, r3, #4
 2934 12b4 0B44     		add	r3, r3, r1
 2935 12b6 D833     		adds	r3, r3, #216
 2936 12b8 1B68     		ldr	r3, [r3]
 2937 12ba 1846     		mov	r0, r3
 2938 12bc FFF7FEFF 		bl	__aeabi_i2f
 2939 12c0 0346     		mov	r3, r0
 2940 12c2 4FF08F41 		mov	r1, #1199570944
 2941 12c6 1846     		mov	r0, r3
 2942 12c8 FFF7FEFF 		bl	__aeabi_fdiv
 2943 12cc 0346     		mov	r3, r0
 2944 12ce 1A46     		mov	r2, r3
 2945 12d0 07F13803 		add	r3, r7, #56
 2946 12d4 1C3B     		subs	r3, r3, #28
 2947 12d6 1A60     		str	r2, [r3]	@ float
 554:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + sod) + sod - i -1] = ((char*
 2948              		.loc 1 554 0
 2949 12d8 0023     		movs	r3, #0
 2950 12da 07F5B052 		add	r2, r7, #5632
 2951 12de 02F11702 		add	r2, r2, #23
 2952 12e2 1370     		strb	r3, [r2]
 2953 12e4 34E0     		b	.L149
 2954              	.L150:
 555:..\src/command_processing.c ****                             }
 2955              		.loc 1 555 0 discriminator 3
 2956 12e6 07F5B053 		add	r3, r7, #5632
 2957 12ea 03F11503 		add	r3, r3, #21
 2958 12ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2959 12f0 3222     		movs	r2, #50
 2960 12f2 02FB03F3 		mul	r3, r2, r3
 2961 12f6 1A1D     		adds	r2, r3, #4
 2962 12f8 07F5B053 		add	r3, r7, #5632
 2963 12fc 03F11303 		add	r3, r3, #19
 2964 1300 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2965 1302 1A44     		add	r2, r2, r3
 2966 1304 07F5B053 		add	r3, r7, #5632
 2967 1308 03F11303 		add	r3, r3, #19
 2968 130c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2969 130e 1A44     		add	r2, r2, r3
 2970 1310 07F5B053 		add	r3, r7, #5632
 2971 1314 03F11703 		add	r3, r3, #23
 2972 1318 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2973 131a D31A     		subs	r3, r2, r3
 2974 131c 5A1E     		subs	r2, r3, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 80


 2975 131e 07F5B053 		add	r3, r7, #5632
 2976 1322 03F11703 		add	r3, r3, #23
 2977 1326 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2978 1328 07F13803 		add	r3, r7, #56
 2979 132c 1C3B     		subs	r3, r3, #28
 2980 132e 0B44     		add	r3, r3, r1
 2981 1330 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2982 1332 07F15803 		add	r3, r7, #88
 2983 1336 043B     		subs	r3, r3, #4
 2984 1338 9954     		strb	r1, [r3, r2]
 554:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + sod) + sod - i -1] = ((char*
 2985              		.loc 1 554 0 discriminator 3
 2986 133a 07F5B053 		add	r3, r7, #5632
 2987 133e 03F11703 		add	r3, r3, #23
 2988 1342 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2989 1344 0133     		adds	r3, r3, #1
 2990 1346 07F5B052 		add	r2, r7, #5632
 2991 134a 02F11702 		add	r2, r2, #23
 2992 134e 1370     		strb	r3, [r2]
 2993              	.L149:
 554:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + sod) + sod - i -1] = ((char*
 2994              		.loc 1 554 0 is_stmt 0 discriminator 1
 2995 1350 07F5B053 		add	r3, r7, #5632
 2996 1354 03F11703 		add	r3, r3, #23
 2997 1358 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2998 135a 07F5B053 		add	r3, r7, #5632
 2999 135e 03F11303 		add	r3, r3, #19
 3000 1362 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3001 1364 9A42     		cmp	r2, r3
 3002 1366 BED3     		bcc	.L150
 557:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 3003              		.loc 1 557 0 is_stmt 1
 3004 1368 07F5B053 		add	r3, r7, #5632
 3005 136c 03F10F03 		add	r3, r3, #15
 3006 1370 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3007 1372 3449     		ldr	r1, .L293
 3008 1374 1346     		mov	r3, r2
 3009 1376 DB00     		lsls	r3, r3, #3
 3010 1378 9B1A     		subs	r3, r3, r2
 3011 137a 1B01     		lsls	r3, r3, #4
 3012 137c 0B44     		add	r3, r3, r1
 3013 137e DC33     		adds	r3, r3, #220
 3014 1380 1B68     		ldr	r3, [r3]
 3015 1382 1846     		mov	r0, r3
 3016 1384 FFF7FEFF 		bl	__aeabi_i2f
 3017 1388 0346     		mov	r3, r0
 3018 138a 4FF08F41 		mov	r1, #1199570944
 3019 138e 1846     		mov	r0, r3
 3020 1390 FFF7FEFF 		bl	__aeabi_fdiv
 3021 1394 0346     		mov	r3, r0
 3022 1396 1A46     		mov	r2, r3
 3023 1398 07F13803 		add	r3, r7, #56
 3024 139c 1C3B     		subs	r3, r3, #28
 3025 139e 1A60     		str	r2, [r3]	@ float
 558:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + 2*sod) + sod - i -1] = ((cha
 3026              		.loc 1 558 0
 3027 13a0 0023     		movs	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 81


 3028 13a2 07F5B052 		add	r2, r7, #5632
 3029 13a6 02F11702 		add	r2, r2, #23
 3030 13aa 1370     		strb	r3, [r2]
 3031 13ac 35E0     		b	.L151
 3032              	.L152:
 559:..\src/command_processing.c ****                             }
 3033              		.loc 1 559 0 discriminator 3
 3034 13ae 07F5B053 		add	r3, r7, #5632
 3035 13b2 03F11503 		add	r3, r3, #21
 3036 13b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3037 13b8 3222     		movs	r2, #50
 3038 13ba 02FB03F3 		mul	r3, r2, r3
 3039 13be 1A1D     		adds	r2, r3, #4
 3040 13c0 07F5B053 		add	r3, r7, #5632
 3041 13c4 03F11303 		add	r3, r3, #19
 3042 13c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3043 13ca 5B00     		lsls	r3, r3, #1
 3044 13cc 1A44     		add	r2, r2, r3
 3045 13ce 07F5B053 		add	r3, r7, #5632
 3046 13d2 03F11303 		add	r3, r3, #19
 3047 13d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3048 13d8 1A44     		add	r2, r2, r3
 3049 13da 07F5B053 		add	r3, r7, #5632
 3050 13de 03F11703 		add	r3, r3, #23
 3051 13e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3052 13e4 D31A     		subs	r3, r2, r3
 3053 13e6 5A1E     		subs	r2, r3, #1
 3054 13e8 07F5B053 		add	r3, r7, #5632
 3055 13ec 03F11703 		add	r3, r3, #23
 3056 13f0 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3057 13f2 07F13803 		add	r3, r7, #56
 3058 13f6 1C3B     		subs	r3, r3, #28
 3059 13f8 0B44     		add	r3, r3, r1
 3060 13fa 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3061 13fc 07F15803 		add	r3, r7, #88
 3062 1400 043B     		subs	r3, r3, #4
 3063 1402 9954     		strb	r1, [r3, r2]
 558:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + 2*sod) + sod - i -1] = ((cha
 3064              		.loc 1 558 0 discriminator 3
 3065 1404 07F5B053 		add	r3, r7, #5632
 3066 1408 03F11703 		add	r3, r3, #23
 3067 140c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3068 140e 0133     		adds	r3, r3, #1
 3069 1410 07F5B052 		add	r2, r7, #5632
 3070 1414 02F11702 		add	r2, r2, #23
 3071 1418 1370     		strb	r3, [r2]
 3072              	.L151:
 558:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + 2*sod) + sod - i -1] = ((cha
 3073              		.loc 1 558 0 is_stmt 0 discriminator 1
 3074 141a 07F5B053 		add	r3, r7, #5632
 3075 141e 03F11703 		add	r3, r3, #23
 3076 1422 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3077 1424 07F5B053 		add	r3, r7, #5632
 3078 1428 03F11303 		add	r3, r3, #19
 3079 142c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3080 142e 9A42     		cmp	r2, r3
 3081 1430 BDD3     		bcc	.L152
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 82


 3082              		.loc 1 562 0 is_stmt 1
 3083 1432 01F04AB8 		b	.L113
 3084              	.L118:
 563:..\src/command_processing.c **** 
 564:..\src/command_processing.c ****                     case 8:         //Measurement Offset
 565:..\src/command_processing.c ****                         for (i=0; i<NUM_ITEMS[idx]; i++){
 3085              		.loc 1 565 0
 3086 1436 0023     		movs	r3, #0
 3087 1438 07F5B052 		add	r2, r7, #5632
 3088 143c 02F11702 		add	r2, r2, #23
 3089 1440 1370     		strb	r3, [r2]
 3090 1442 9DE0     		b	.L153
 3091              	.L294:
 3092              		.align	2
 3093              	.L293:
 3094 1444 00000000 		.word	c_mem
 3095              	.L156:
 566:..\src/command_processing.c ****                             aux_int16 = (c_mem.enc[g_mem.motor[MOTOR_IDX].encoder_line].m_off[i] >>
 3096              		.loc 1 566 0
 3097 1448 07F5B053 		add	r3, r7, #5632
 3098 144c 03F10F03 		add	r3, r3, #15
 3099 1450 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3100 1452 C749     		ldr	r1, .L295
 3101 1454 1346     		mov	r3, r2
 3102 1456 DB00     		lsls	r3, r3, #3
 3103 1458 9B1A     		subs	r3, r3, r2
 3104 145a 1B01     		lsls	r3, r3, #4
 3105 145c 0B44     		add	r3, r3, r1
 3106 145e 03F58873 		add	r3, r3, #272
 3107 1462 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3108 1464 1846     		mov	r0, r3
 3109 1466 07F5B053 		add	r3, r7, #5632
 3110 146a 03F11703 		add	r3, r3, #23
 3111 146e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3112 1470 C049     		ldr	r1, .L295+4
 3113 1472 0346     		mov	r3, r0
 3114 1474 5B00     		lsls	r3, r3, #1
 3115 1476 0344     		add	r3, r3, r0
 3116 1478 9B00     		lsls	r3, r3, #2
 3117 147a 1344     		add	r3, r3, r2
 3118 147c 6633     		adds	r3, r3, #102
 3119 147e 51F82310 		ldr	r1, [r1, r3, lsl #2]
 3120 1482 07F5B053 		add	r3, r7, #5632
 3121 1486 03F10F03 		add	r3, r3, #15
 3122 148a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3123 148c B848     		ldr	r0, .L295
 3124 148e 1346     		mov	r3, r2
 3125 1490 DB00     		lsls	r3, r3, #3
 3126 1492 9B1A     		subs	r3, r3, r2
 3127 1494 1B01     		lsls	r3, r3, #4
 3128 1496 0344     		add	r3, r3, r0
 3129 1498 03F58873 		add	r3, r3, #272
 3130 149c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3131 149e 1C46     		mov	r4, r3
 3132 14a0 07F5B053 		add	r3, r7, #5632
 3133 14a4 03F11703 		add	r3, r3, #23
 3134 14a8 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 83


 3135 14aa B248     		ldr	r0, .L295+4
 3136 14ac 2346     		mov	r3, r4
 3137 14ae 5B00     		lsls	r3, r3, #1
 3138 14b0 2344     		add	r3, r3, r4
 3139 14b2 1B01     		lsls	r3, r3, #4
 3140 14b4 0344     		add	r3, r3, r0
 3141 14b6 1344     		add	r3, r3, r2
 3142 14b8 03F29513 		addw	r3, r3, #405
 3143 14bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3144 14be 41FA03F3 		asr	r3, r1, r3
 3145 14c2 1AB2     		sxth	r2, r3
 3146 14c4 07F13803 		add	r3, r7, #56
 3147 14c8 1E3B     		subs	r3, r3, #30
 3148 14ca 1A80     		strh	r2, [r3]	@ movhi
 567:..\src/command_processing.c ****                             for(j = 0; j < sod; j++) {
 3149              		.loc 1 567 0
 3150 14cc 0023     		movs	r3, #0
 3151 14ce 07F5B052 		add	r2, r7, #5632
 3152 14d2 02F11602 		add	r2, r2, #22
 3153 14d6 1370     		strb	r3, [r2]
 3154 14d8 3BE0     		b	.L154
 3155              	.L155:
 568:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + i*sod) + sod - j -1] = ((cha
 3156              		.loc 1 568 0 discriminator 3
 3157 14da 07F5B053 		add	r3, r7, #5632
 3158 14de 03F11503 		add	r3, r3, #21
 3159 14e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3160 14e4 3222     		movs	r2, #50
 3161 14e6 02FB03F3 		mul	r3, r2, r3
 3162 14ea 1A1D     		adds	r2, r3, #4
 3163 14ec 07F5B053 		add	r3, r7, #5632
 3164 14f0 03F11703 		add	r3, r3, #23
 3165 14f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3166 14f6 07F5B051 		add	r1, r7, #5632
 3167 14fa 01F11301 		add	r1, r1, #19
 3168 14fe 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 3169 1500 01FB03F3 		mul	r3, r1, r3
 3170 1504 1A44     		add	r2, r2, r3
 3171 1506 07F5B053 		add	r3, r7, #5632
 3172 150a 03F11303 		add	r3, r3, #19
 3173 150e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3174 1510 1A44     		add	r2, r2, r3
 3175 1512 07F5B053 		add	r3, r7, #5632
 3176 1516 03F11603 		add	r3, r3, #22
 3177 151a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3178 151c D31A     		subs	r3, r2, r3
 3179 151e 5A1E     		subs	r2, r3, #1
 3180 1520 07F5B053 		add	r3, r7, #5632
 3181 1524 03F11603 		add	r3, r3, #22
 3182 1528 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3183 152a 07F13803 		add	r3, r7, #56
 3184 152e 1E3B     		subs	r3, r3, #30
 3185 1530 0B44     		add	r3, r3, r1
 3186 1532 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3187 1534 07F15803 		add	r3, r7, #88
 3188 1538 043B     		subs	r3, r3, #4
 3189 153a 9954     		strb	r1, [r3, r2]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 84


 567:..\src/command_processing.c ****                             for(j = 0; j < sod; j++) {
 3190              		.loc 1 567 0 discriminator 3
 3191 153c 07F5B053 		add	r3, r7, #5632
 3192 1540 03F11603 		add	r3, r3, #22
 3193 1544 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3194 1546 0133     		adds	r3, r3, #1
 3195 1548 07F5B052 		add	r2, r7, #5632
 3196 154c 02F11602 		add	r2, r2, #22
 3197 1550 1370     		strb	r3, [r2]
 3198              	.L154:
 567:..\src/command_processing.c ****                             for(j = 0; j < sod; j++) {
 3199              		.loc 1 567 0 is_stmt 0 discriminator 1
 3200 1552 07F5B053 		add	r3, r7, #5632
 3201 1556 03F11603 		add	r3, r3, #22
 3202 155a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3203 155c 07F5B053 		add	r3, r7, #5632
 3204 1560 03F11303 		add	r3, r3, #19
 3205 1564 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3206 1566 9A42     		cmp	r2, r3
 3207 1568 B7D3     		bcc	.L155
 565:..\src/command_processing.c ****                             aux_int16 = (c_mem.enc[g_mem.motor[MOTOR_IDX].encoder_line].m_off[i] >>
 3208              		.loc 1 565 0 is_stmt 1 discriminator 2
 3209 156a 07F5B053 		add	r3, r7, #5632
 3210 156e 03F11703 		add	r3, r3, #23
 3211 1572 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3212 1574 0133     		adds	r3, r3, #1
 3213 1576 07F5B052 		add	r2, r7, #5632
 3214 157a 02F11702 		add	r2, r2, #23
 3215 157e 1370     		strb	r3, [r2]
 3216              	.L153:
 565:..\src/command_processing.c ****                             aux_int16 = (c_mem.enc[g_mem.motor[MOTOR_IDX].encoder_line].m_off[i] >>
 3217              		.loc 1 565 0 is_stmt 0 discriminator 1
 3218 1580 07F5B053 		add	r3, r7, #5632
 3219 1584 03F11503 		add	r3, r3, #21
 3220 1588 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3221 158a 07F11803 		add	r3, r7, #24
 3222 158e 143B     		subs	r3, r3, #20
 3223 1590 1B68     		ldr	r3, [r3]
 3224 1592 1344     		add	r3, r3, r2
 3225 1594 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3226 1596 07F5B052 		add	r2, r7, #5632
 3227 159a 02F11702 		add	r2, r2, #23
 3228 159e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 3229 15a0 9A42     		cmp	r2, r3
 3230 15a2 FFF451AF 		bcc	.L156
 569:..\src/command_processing.c ****                             }
 570:..\src/command_processing.c ****                         }
 571:..\src/command_processing.c ****                         break;
 3231              		.loc 1 571 0 is_stmt 1
 3232 15a6 00F090BF 		b	.L113
 3233              	.L119:
 572:..\src/command_processing.c ****                 
 573:..\src/command_processing.c ****                     case 11:        //Position limits
 574:..\src/command_processing.c ****                         aux_int32 = (c_mem.motor[MOTOR_IDX].pos_lim_inf >> c_mem.enc[g_mem.motor[MO
 3234              		.loc 1 574 0
 3235 15aa 07F5B053 		add	r3, r7, #5632
 3236 15ae 03F10F03 		add	r3, r3, #15
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 85


 3237 15b2 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3238 15b4 6F49     		ldr	r1, .L295+4
 3239 15b6 1346     		mov	r3, r2
 3240 15b8 DB00     		lsls	r3, r3, #3
 3241 15ba 9B1A     		subs	r3, r3, r2
 3242 15bc 1B01     		lsls	r3, r3, #4
 3243 15be 0B44     		add	r3, r3, r1
 3244 15c0 E433     		adds	r3, r3, #228
 3245 15c2 1968     		ldr	r1, [r3]
 3246 15c4 07F5B053 		add	r3, r7, #5632
 3247 15c8 03F10F03 		add	r3, r3, #15
 3248 15cc 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3249 15ce 6848     		ldr	r0, .L295
 3250 15d0 1346     		mov	r3, r2
 3251 15d2 DB00     		lsls	r3, r3, #3
 3252 15d4 9B1A     		subs	r3, r3, r2
 3253 15d6 1B01     		lsls	r3, r3, #4
 3254 15d8 0344     		add	r3, r3, r0
 3255 15da 03F58873 		add	r3, r3, #272
 3256 15de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3257 15e0 1846     		mov	r0, r3
 3258 15e2 644A     		ldr	r2, .L295+4
 3259 15e4 0346     		mov	r3, r0
 3260 15e6 5B00     		lsls	r3, r3, #1
 3261 15e8 0344     		add	r3, r3, r0
 3262 15ea 1B01     		lsls	r3, r3, #4
 3263 15ec 1344     		add	r3, r3, r2
 3264 15ee 03F29513 		addw	r3, r3, #405
 3265 15f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3266 15f4 41FA03F2 		asr	r2, r1, r3
 3267 15f8 07F11803 		add	r3, r7, #24
 3268 15fc 043B     		subs	r3, r3, #4
 3269 15fe 1A60     		str	r2, [r3]
 575:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 3270              		.loc 1 575 0
 3271 1600 0023     		movs	r3, #0
 3272 1602 07F5B052 		add	r2, r7, #5632
 3273 1606 02F11602 		add	r2, r2, #22
 3274 160a 1370     		strb	r3, [r2]
 3275 160c 2EE0     		b	.L157
 3276              	.L158:
 576:..\src/command_processing.c ****                             packet_data[(4 + PARAM_BYTE_SLOT*idx) + sod - j -1] = ((char*)(&aux_int
 3277              		.loc 1 576 0 discriminator 3
 3278 160e 07F5B053 		add	r3, r7, #5632
 3279 1612 03F11503 		add	r3, r3, #21
 3280 1616 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3281 1618 3222     		movs	r2, #50
 3282 161a 02FB03F3 		mul	r3, r2, r3
 3283 161e 1A1D     		adds	r2, r3, #4
 3284 1620 07F5B053 		add	r3, r7, #5632
 3285 1624 03F11303 		add	r3, r3, #19
 3286 1628 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3287 162a 1A44     		add	r2, r2, r3
 3288 162c 07F5B053 		add	r3, r7, #5632
 3289 1630 03F11603 		add	r3, r3, #22
 3290 1634 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3291 1636 D31A     		subs	r3, r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 86


 3292 1638 5A1E     		subs	r2, r3, #1
 3293 163a 07F5B053 		add	r3, r7, #5632
 3294 163e 03F11603 		add	r3, r3, #22
 3295 1642 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3296 1644 07F11803 		add	r3, r7, #24
 3297 1648 043B     		subs	r3, r3, #4
 3298 164a 0B44     		add	r3, r3, r1
 3299 164c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3300 164e 07F15803 		add	r3, r7, #88
 3301 1652 043B     		subs	r3, r3, #4
 3302 1654 9954     		strb	r1, [r3, r2]
 575:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 3303              		.loc 1 575 0 discriminator 3
 3304 1656 07F5B053 		add	r3, r7, #5632
 3305 165a 03F11603 		add	r3, r3, #22
 3306 165e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3307 1660 0133     		adds	r3, r3, #1
 3308 1662 07F5B052 		add	r2, r7, #5632
 3309 1666 02F11602 		add	r2, r2, #22
 3310 166a 1370     		strb	r3, [r2]
 3311              	.L157:
 575:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 3312              		.loc 1 575 0 is_stmt 0 discriminator 1
 3313 166c 07F5B053 		add	r3, r7, #5632
 3314 1670 03F11603 		add	r3, r3, #22
 3315 1674 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3316 1676 07F5B053 		add	r3, r7, #5632
 3317 167a 03F11303 		add	r3, r3, #19
 3318 167e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3319 1680 9A42     		cmp	r2, r3
 3320 1682 C4D3     		bcc	.L158
 577:..\src/command_processing.c ****                         }
 578:..\src/command_processing.c ****                         aux_int32 = (c_mem.motor[MOTOR_IDX].pos_lim_sup >> c_mem.enc[g_mem.motor[MO
 3321              		.loc 1 578 0 is_stmt 1
 3322 1684 07F5B053 		add	r3, r7, #5632
 3323 1688 03F10F03 		add	r3, r3, #15
 3324 168c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3325 168e 3949     		ldr	r1, .L295+4
 3326 1690 1346     		mov	r3, r2
 3327 1692 DB00     		lsls	r3, r3, #3
 3328 1694 9B1A     		subs	r3, r3, r2
 3329 1696 1B01     		lsls	r3, r3, #4
 3330 1698 0B44     		add	r3, r3, r1
 3331 169a E833     		adds	r3, r3, #232
 3332 169c 1968     		ldr	r1, [r3]
 3333 169e 07F5B053 		add	r3, r7, #5632
 3334 16a2 03F10F03 		add	r3, r3, #15
 3335 16a6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3336 16a8 3148     		ldr	r0, .L295
 3337 16aa 1346     		mov	r3, r2
 3338 16ac DB00     		lsls	r3, r3, #3
 3339 16ae 9B1A     		subs	r3, r3, r2
 3340 16b0 1B01     		lsls	r3, r3, #4
 3341 16b2 0344     		add	r3, r3, r0
 3342 16b4 03F58873 		add	r3, r3, #272
 3343 16b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3344 16ba 1846     		mov	r0, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 87


 3345 16bc 2D4A     		ldr	r2, .L295+4
 3346 16be 0346     		mov	r3, r0
 3347 16c0 5B00     		lsls	r3, r3, #1
 3348 16c2 0344     		add	r3, r3, r0
 3349 16c4 1B01     		lsls	r3, r3, #4
 3350 16c6 1344     		add	r3, r3, r2
 3351 16c8 03F29513 		addw	r3, r3, #405
 3352 16cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3353 16ce 41FA03F2 		asr	r2, r1, r3
 3354 16d2 07F11803 		add	r3, r7, #24
 3355 16d6 043B     		subs	r3, r3, #4
 3356 16d8 1A60     		str	r2, [r3]
 579:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 3357              		.loc 1 579 0
 3358 16da 0023     		movs	r3, #0
 3359 16dc 07F5B052 		add	r2, r7, #5632
 3360 16e0 02F11602 		add	r2, r2, #22
 3361 16e4 1370     		strb	r3, [r2]
 3362 16e6 34E0     		b	.L159
 3363              	.L160:
 580:..\src/command_processing.c ****                             packet_data[(4 + PARAM_BYTE_SLOT*idx + sod) + sod - j -1] = ((char*)(&a
 3364              		.loc 1 580 0 discriminator 3
 3365 16e8 07F5B053 		add	r3, r7, #5632
 3366 16ec 03F11503 		add	r3, r3, #21
 3367 16f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3368 16f2 3222     		movs	r2, #50
 3369 16f4 02FB03F3 		mul	r3, r2, r3
 3370 16f8 1A1D     		adds	r2, r3, #4
 3371 16fa 07F5B053 		add	r3, r7, #5632
 3372 16fe 03F11303 		add	r3, r3, #19
 3373 1702 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3374 1704 1A44     		add	r2, r2, r3
 3375 1706 07F5B053 		add	r3, r7, #5632
 3376 170a 03F11303 		add	r3, r3, #19
 3377 170e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3378 1710 1A44     		add	r2, r2, r3
 3379 1712 07F5B053 		add	r3, r7, #5632
 3380 1716 03F11603 		add	r3, r3, #22
 3381 171a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3382 171c D31A     		subs	r3, r2, r3
 3383 171e 5A1E     		subs	r2, r3, #1
 3384 1720 07F5B053 		add	r3, r7, #5632
 3385 1724 03F11603 		add	r3, r3, #22
 3386 1728 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3387 172a 07F11803 		add	r3, r7, #24
 3388 172e 043B     		subs	r3, r3, #4
 3389 1730 0B44     		add	r3, r3, r1
 3390 1732 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3391 1734 07F15803 		add	r3, r7, #88
 3392 1738 043B     		subs	r3, r3, #4
 3393 173a 9954     		strb	r1, [r3, r2]
 579:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 3394              		.loc 1 579 0 discriminator 3
 3395 173c 07F5B053 		add	r3, r7, #5632
 3396 1740 03F11603 		add	r3, r3, #22
 3397 1744 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3398 1746 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 88


 3399 1748 07F5B052 		add	r2, r7, #5632
 3400 174c 02F11602 		add	r2, r2, #22
 3401 1750 1370     		strb	r3, [r2]
 3402              	.L159:
 579:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 3403              		.loc 1 579 0 is_stmt 0 discriminator 1
 3404 1752 07F5B053 		add	r3, r7, #5632
 3405 1756 03F11603 		add	r3, r3, #22
 3406 175a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3407 175c 07F5B053 		add	r3, r7, #5632
 3408 1760 03F11303 		add	r3, r3, #19
 3409 1764 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3410 1766 9A42     		cmp	r2, r3
 3411 1768 BED3     		bcc	.L160
 581:..\src/command_processing.c ****                         }
 582:..\src/command_processing.c ****                         break;            
 3412              		.loc 1 582 0 is_stmt 1
 3413 176a 00F0AEBE 		b	.L113
 3414              	.L296:
 3415 176e 00BF     		.align	2
 3416              	.L295:
 3417 1770 00000000 		.word	g_mem
 3418 1774 00000000 		.word	c_mem
 3419              	.L120:
 583:..\src/command_processing.c **** 
 584:..\src/command_processing.c ****                     case 23:        //Rest Position
 585:..\src/command_processing.c ****                         aux_int32 = (c_mem.SH.rest_pos >> c_mem.enc[g_mem.motor[MOTOR_IDX].encoder_
 3420              		.loc 1 585 0
 3421 1778 CF4B     		ldr	r3, .L297
 3422 177a D3F8A012 		ldr	r1, [r3, #672]
 3423 177e 07F5B053 		add	r3, r7, #5632
 3424 1782 03F10F03 		add	r3, r3, #15
 3425 1786 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3426 1788 CC48     		ldr	r0, .L297+4
 3427 178a 1346     		mov	r3, r2
 3428 178c DB00     		lsls	r3, r3, #3
 3429 178e 9B1A     		subs	r3, r3, r2
 3430 1790 1B01     		lsls	r3, r3, #4
 3431 1792 0344     		add	r3, r3, r0
 3432 1794 03F58873 		add	r3, r3, #272
 3433 1798 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3434 179a 1846     		mov	r0, r3
 3435 179c C64A     		ldr	r2, .L297
 3436 179e 0346     		mov	r3, r0
 3437 17a0 5B00     		lsls	r3, r3, #1
 3438 17a2 0344     		add	r3, r3, r0
 3439 17a4 1B01     		lsls	r3, r3, #4
 3440 17a6 1344     		add	r3, r3, r2
 3441 17a8 03F29513 		addw	r3, r3, #405
 3442 17ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3443 17ae 41FA03F2 		asr	r2, r1, r3
 3444 17b2 07F11803 		add	r3, r7, #24
 3445 17b6 043B     		subs	r3, r3, #4
 3446 17b8 1A60     		str	r2, [r3]
 586:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 3447              		.loc 1 586 0
 3448 17ba 0023     		movs	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 89


 3449 17bc 07F5B052 		add	r2, r7, #5632
 3450 17c0 02F11602 		add	r2, r2, #22
 3451 17c4 1370     		strb	r3, [r2]
 3452 17c6 2EE0     		b	.L161
 3453              	.L162:
 587:..\src/command_processing.c ****                             packet_data[(4 + PARAM_BYTE_SLOT*idx) + sod - j -1] = ((char*)(&aux_int
 3454              		.loc 1 587 0 discriminator 3
 3455 17c8 07F5B053 		add	r3, r7, #5632
 3456 17cc 03F11503 		add	r3, r3, #21
 3457 17d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3458 17d2 3222     		movs	r2, #50
 3459 17d4 02FB03F3 		mul	r3, r2, r3
 3460 17d8 1A1D     		adds	r2, r3, #4
 3461 17da 07F5B053 		add	r3, r7, #5632
 3462 17de 03F11303 		add	r3, r3, #19
 3463 17e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3464 17e4 1A44     		add	r2, r2, r3
 3465 17e6 07F5B053 		add	r3, r7, #5632
 3466 17ea 03F11603 		add	r3, r3, #22
 3467 17ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3468 17f0 D31A     		subs	r3, r2, r3
 3469 17f2 5A1E     		subs	r2, r3, #1
 3470 17f4 07F5B053 		add	r3, r7, #5632
 3471 17f8 03F11603 		add	r3, r3, #22
 3472 17fc 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3473 17fe 07F11803 		add	r3, r7, #24
 3474 1802 043B     		subs	r3, r3, #4
 3475 1804 0B44     		add	r3, r3, r1
 3476 1806 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3477 1808 07F15803 		add	r3, r7, #88
 3478 180c 043B     		subs	r3, r3, #4
 3479 180e 9954     		strb	r1, [r3, r2]
 586:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 3480              		.loc 1 586 0 discriminator 3
 3481 1810 07F5B053 		add	r3, r7, #5632
 3482 1814 03F11603 		add	r3, r3, #22
 3483 1818 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3484 181a 0133     		adds	r3, r3, #1
 3485 181c 07F5B052 		add	r2, r7, #5632
 3486 1820 02F11602 		add	r2, r2, #22
 3487 1824 1370     		strb	r3, [r2]
 3488              	.L161:
 586:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 3489              		.loc 1 586 0 is_stmt 0 discriminator 1
 3490 1826 07F5B053 		add	r3, r7, #5632
 3491 182a 03F11603 		add	r3, r3, #22
 3492 182e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3493 1830 07F5B053 		add	r3, r7, #5632
 3494 1834 03F11303 		add	r3, r3, #19
 3495 1838 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3496 183a 9A42     		cmp	r2, r3
 3497 183c C4D3     		bcc	.L162
 588:..\src/command_processing.c ****                         }
 589:..\src/command_processing.c ****                         break; 
 3498              		.loc 1 589 0 is_stmt 1
 3499 183e 00F044BE 		b	.L113
 3500              	.L121:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 90


 590:..\src/command_processing.c ****                         
 591:..\src/command_processing.c ****                     case 44:         // Second Motor Position PID
 592:..\src/command_processing.c ****                         if(c_mem.motor[SECOND_MOTOR_IDX].control_mode != CURR_AND_POS_CONTROL) {
 3501              		.loc 1 592 0
 3502 1842 07F5B053 		add	r3, r7, #5632
 3503 1846 03F10E03 		add	r3, r3, #14
 3504 184a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3505 184c 9A49     		ldr	r1, .L297
 3506 184e 1346     		mov	r3, r2
 3507 1850 DB00     		lsls	r3, r3, #3
 3508 1852 9B1A     		subs	r3, r3, r2
 3509 1854 1B01     		lsls	r3, r3, #4
 3510 1856 0B44     		add	r3, r3, r1
 3511 1858 03F20F13 		addw	r3, r3, #271
 3512 185c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3513 185e 032B     		cmp	r3, #3
 3514 1860 00F02E81 		beq	.L163
 593:..\src/command_processing.c ****                             aux_float = (float) c_mem.motor[SECOND_MOTOR_IDX].k_p / 65536;
 3515              		.loc 1 593 0
 3516 1864 07F5B053 		add	r3, r7, #5632
 3517 1868 03F10E03 		add	r3, r3, #14
 3518 186c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3519 186e 9249     		ldr	r1, .L297
 3520 1870 1346     		mov	r3, r2
 3521 1872 DB00     		lsls	r3, r3, #3
 3522 1874 9B1A     		subs	r3, r3, r2
 3523 1876 1B01     		lsls	r3, r3, #4
 3524 1878 0B44     		add	r3, r3, r1
 3525 187a B033     		adds	r3, r3, #176
 3526 187c 1B68     		ldr	r3, [r3]
 3527 187e 1846     		mov	r0, r3
 3528 1880 FFF7FEFF 		bl	__aeabi_i2f
 3529 1884 0346     		mov	r3, r0
 3530 1886 4FF08F41 		mov	r1, #1199570944
 3531 188a 1846     		mov	r0, r3
 3532 188c FFF7FEFF 		bl	__aeabi_fdiv
 3533 1890 0346     		mov	r3, r0
 3534 1892 1A46     		mov	r2, r3
 3535 1894 07F13803 		add	r3, r7, #56
 3536 1898 1C3B     		subs	r3, r3, #28
 3537 189a 1A60     		str	r2, [r3]	@ float
 594:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 3538              		.loc 1 594 0
 3539 189c 0023     		movs	r3, #0
 3540 189e 07F5B052 		add	r2, r7, #5632
 3541 18a2 02F11702 		add	r2, r2, #23
 3542 18a6 1370     		strb	r3, [r2]
 3543 18a8 2EE0     		b	.L164
 3544              	.L165:
 595:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx) + sod - i -1] = ((char*)(&aux
 3545              		.loc 1 595 0 discriminator 3
 3546 18aa 07F5B053 		add	r3, r7, #5632
 3547 18ae 03F11503 		add	r3, r3, #21
 3548 18b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3549 18b4 3222     		movs	r2, #50
 3550 18b6 02FB03F3 		mul	r3, r2, r3
 3551 18ba 1A1D     		adds	r2, r3, #4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 91


 3552 18bc 07F5B053 		add	r3, r7, #5632
 3553 18c0 03F11303 		add	r3, r3, #19
 3554 18c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3555 18c6 1A44     		add	r2, r2, r3
 3556 18c8 07F5B053 		add	r3, r7, #5632
 3557 18cc 03F11703 		add	r3, r3, #23
 3558 18d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3559 18d2 D31A     		subs	r3, r2, r3
 3560 18d4 5A1E     		subs	r2, r3, #1
 3561 18d6 07F5B053 		add	r3, r7, #5632
 3562 18da 03F11703 		add	r3, r3, #23
 3563 18de 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3564 18e0 07F13803 		add	r3, r7, #56
 3565 18e4 1C3B     		subs	r3, r3, #28
 3566 18e6 0B44     		add	r3, r3, r1
 3567 18e8 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3568 18ea 07F15803 		add	r3, r7, #88
 3569 18ee 043B     		subs	r3, r3, #4
 3570 18f0 9954     		strb	r1, [r3, r2]
 594:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 3571              		.loc 1 594 0 discriminator 3
 3572 18f2 07F5B053 		add	r3, r7, #5632
 3573 18f6 03F11703 		add	r3, r3, #23
 3574 18fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3575 18fc 0133     		adds	r3, r3, #1
 3576 18fe 07F5B052 		add	r2, r7, #5632
 3577 1902 02F11702 		add	r2, r2, #23
 3578 1906 1370     		strb	r3, [r2]
 3579              	.L164:
 594:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 3580              		.loc 1 594 0 is_stmt 0 discriminator 1
 3581 1908 07F5B053 		add	r3, r7, #5632
 3582 190c 03F11703 		add	r3, r3, #23
 3583 1910 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3584 1912 07F5B053 		add	r3, r7, #5632
 3585 1916 03F11303 		add	r3, r3, #19
 3586 191a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3587 191c 9A42     		cmp	r2, r3
 3588 191e C4D3     		bcc	.L165
 596:..\src/command_processing.c ****                             }
 597:..\src/command_processing.c ****                             aux_float = (float) c_mem.motor[SECOND_MOTOR_IDX].k_i / 65536;
 3589              		.loc 1 597 0 is_stmt 1
 3590 1920 07F5B053 		add	r3, r7, #5632
 3591 1924 03F10E03 		add	r3, r3, #14
 3592 1928 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3593 192a 6349     		ldr	r1, .L297
 3594 192c 1346     		mov	r3, r2
 3595 192e DB00     		lsls	r3, r3, #3
 3596 1930 9B1A     		subs	r3, r3, r2
 3597 1932 1B01     		lsls	r3, r3, #4
 3598 1934 0B44     		add	r3, r3, r1
 3599 1936 B433     		adds	r3, r3, #180
 3600 1938 1B68     		ldr	r3, [r3]
 3601 193a 1846     		mov	r0, r3
 3602 193c FFF7FEFF 		bl	__aeabi_i2f
 3603 1940 0346     		mov	r3, r0
 3604 1942 4FF08F41 		mov	r1, #1199570944
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 92


 3605 1946 1846     		mov	r0, r3
 3606 1948 FFF7FEFF 		bl	__aeabi_fdiv
 3607 194c 0346     		mov	r3, r0
 3608 194e 1A46     		mov	r2, r3
 3609 1950 07F13803 		add	r3, r7, #56
 3610 1954 1C3B     		subs	r3, r3, #28
 3611 1956 1A60     		str	r2, [r3]	@ float
 598:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 3612              		.loc 1 598 0
 3613 1958 0023     		movs	r3, #0
 3614 195a 07F5B052 		add	r2, r7, #5632
 3615 195e 02F11702 		add	r2, r2, #23
 3616 1962 1370     		strb	r3, [r2]
 3617 1964 34E0     		b	.L166
 3618              	.L167:
 599:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + sod) + sod - i -1] = ((char*
 3619              		.loc 1 599 0 discriminator 3
 3620 1966 07F5B053 		add	r3, r7, #5632
 3621 196a 03F11503 		add	r3, r3, #21
 3622 196e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3623 1970 3222     		movs	r2, #50
 3624 1972 02FB03F3 		mul	r3, r2, r3
 3625 1976 1A1D     		adds	r2, r3, #4
 3626 1978 07F5B053 		add	r3, r7, #5632
 3627 197c 03F11303 		add	r3, r3, #19
 3628 1980 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3629 1982 1A44     		add	r2, r2, r3
 3630 1984 07F5B053 		add	r3, r7, #5632
 3631 1988 03F11303 		add	r3, r3, #19
 3632 198c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3633 198e 1A44     		add	r2, r2, r3
 3634 1990 07F5B053 		add	r3, r7, #5632
 3635 1994 03F11703 		add	r3, r3, #23
 3636 1998 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3637 199a D31A     		subs	r3, r2, r3
 3638 199c 5A1E     		subs	r2, r3, #1
 3639 199e 07F5B053 		add	r3, r7, #5632
 3640 19a2 03F11703 		add	r3, r3, #23
 3641 19a6 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3642 19a8 07F13803 		add	r3, r7, #56
 3643 19ac 1C3B     		subs	r3, r3, #28
 3644 19ae 0B44     		add	r3, r3, r1
 3645 19b0 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3646 19b2 07F15803 		add	r3, r7, #88
 3647 19b6 043B     		subs	r3, r3, #4
 3648 19b8 9954     		strb	r1, [r3, r2]
 598:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 3649              		.loc 1 598 0 discriminator 3
 3650 19ba 07F5B053 		add	r3, r7, #5632
 3651 19be 03F11703 		add	r3, r3, #23
 3652 19c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3653 19c4 0133     		adds	r3, r3, #1
 3654 19c6 07F5B052 		add	r2, r7, #5632
 3655 19ca 02F11702 		add	r2, r2, #23
 3656 19ce 1370     		strb	r3, [r2]
 3657              	.L166:
 598:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 93


 3658              		.loc 1 598 0 is_stmt 0 discriminator 1
 3659 19d0 07F5B053 		add	r3, r7, #5632
 3660 19d4 03F11703 		add	r3, r3, #23
 3661 19d8 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3662 19da 07F5B053 		add	r3, r7, #5632
 3663 19de 03F11303 		add	r3, r3, #19
 3664 19e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3665 19e4 9A42     		cmp	r2, r3
 3666 19e6 BED3     		bcc	.L167
 600:..\src/command_processing.c ****                             }
 601:..\src/command_processing.c ****                             aux_float = (float) c_mem.motor[SECOND_MOTOR_IDX].k_d / 65536;
 3667              		.loc 1 601 0 is_stmt 1
 3668 19e8 07F5B053 		add	r3, r7, #5632
 3669 19ec 03F10E03 		add	r3, r3, #14
 3670 19f0 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3671 19f2 3149     		ldr	r1, .L297
 3672 19f4 1346     		mov	r3, r2
 3673 19f6 DB00     		lsls	r3, r3, #3
 3674 19f8 9B1A     		subs	r3, r3, r2
 3675 19fa 1B01     		lsls	r3, r3, #4
 3676 19fc 0B44     		add	r3, r3, r1
 3677 19fe B833     		adds	r3, r3, #184
 3678 1a00 1B68     		ldr	r3, [r3]
 3679 1a02 1846     		mov	r0, r3
 3680 1a04 FFF7FEFF 		bl	__aeabi_i2f
 3681 1a08 0346     		mov	r3, r0
 3682 1a0a 4FF08F41 		mov	r1, #1199570944
 3683 1a0e 1846     		mov	r0, r3
 3684 1a10 FFF7FEFF 		bl	__aeabi_fdiv
 3685 1a14 0346     		mov	r3, r0
 3686 1a16 1A46     		mov	r2, r3
 3687 1a18 07F13803 		add	r3, r7, #56
 3688 1a1c 1C3B     		subs	r3, r3, #28
 3689 1a1e 1A60     		str	r2, [r3]	@ float
 602:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 3690              		.loc 1 602 0
 3691 1a20 0023     		movs	r3, #0
 3692 1a22 07F5B052 		add	r2, r7, #5632
 3693 1a26 02F11702 		add	r2, r2, #23
 3694 1a2a 1370     		strb	r3, [r2]
 3695 1a2c 35E0     		b	.L168
 3696              	.L169:
 603:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + 2*sod) + sod - i -1] = ((cha
 3697              		.loc 1 603 0 discriminator 3
 3698 1a2e 07F5B053 		add	r3, r7, #5632
 3699 1a32 03F11503 		add	r3, r3, #21
 3700 1a36 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3701 1a38 3222     		movs	r2, #50
 3702 1a3a 02FB03F3 		mul	r3, r2, r3
 3703 1a3e 1A1D     		adds	r2, r3, #4
 3704 1a40 07F5B053 		add	r3, r7, #5632
 3705 1a44 03F11303 		add	r3, r3, #19
 3706 1a48 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3707 1a4a 5B00     		lsls	r3, r3, #1
 3708 1a4c 1A44     		add	r2, r2, r3
 3709 1a4e 07F5B053 		add	r3, r7, #5632
 3710 1a52 03F11303 		add	r3, r3, #19
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 94


 3711 1a56 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3712 1a58 1A44     		add	r2, r2, r3
 3713 1a5a 07F5B053 		add	r3, r7, #5632
 3714 1a5e 03F11703 		add	r3, r3, #23
 3715 1a62 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3716 1a64 D31A     		subs	r3, r2, r3
 3717 1a66 5A1E     		subs	r2, r3, #1
 3718 1a68 07F5B053 		add	r3, r7, #5632
 3719 1a6c 03F11703 		add	r3, r3, #23
 3720 1a70 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3721 1a72 07F13803 		add	r3, r7, #56
 3722 1a76 1C3B     		subs	r3, r3, #28
 3723 1a78 0B44     		add	r3, r3, r1
 3724 1a7a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3725 1a7c 07F15803 		add	r3, r7, #88
 3726 1a80 043B     		subs	r3, r3, #4
 3727 1a82 9954     		strb	r1, [r3, r2]
 602:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 3728              		.loc 1 602 0 discriminator 3
 3729 1a84 07F5B053 		add	r3, r7, #5632
 3730 1a88 03F11703 		add	r3, r3, #23
 3731 1a8c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3732 1a8e 0133     		adds	r3, r3, #1
 3733 1a90 07F5B052 		add	r2, r7, #5632
 3734 1a94 02F11702 		add	r2, r2, #23
 3735 1a98 1370     		strb	r3, [r2]
 3736              	.L168:
 602:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 3737              		.loc 1 602 0 is_stmt 0 discriminator 1
 3738 1a9a 07F5B053 		add	r3, r7, #5632
 3739 1a9e 03F11703 		add	r3, r3, #23
 3740 1aa2 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3741 1aa4 07F5B053 		add	r3, r7, #5632
 3742 1aa8 03F11303 		add	r3, r3, #19
 3743 1aac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3744 1aae 9A42     		cmp	r2, r3
 3745 1ab0 BDD3     		bcc	.L169
 604:..\src/command_processing.c ****                             } 
 605:..\src/command_processing.c ****                         }
 606:..\src/command_processing.c ****                         else {
 607:..\src/command_processing.c ****                             aux_float = (float) c_mem.motor[SECOND_MOTOR_IDX].k_p_dl / 65536;
 608:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 609:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx) + sod - i -1] = ((char*)(&aux
 610:..\src/command_processing.c ****                             }
 611:..\src/command_processing.c ****                             aux_float = (float) c_mem.motor[SECOND_MOTOR_IDX].k_i_dl / 65536;
 612:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 613:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + sod) + sod - i -1] = ((char*
 614:..\src/command_processing.c ****                             }
 615:..\src/command_processing.c ****                             aux_float = (float) c_mem.motor[SECOND_MOTOR_IDX].k_d_dl / 65536;
 616:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 617:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + 2*sod) + sod - i -1] = ((cha
 618:..\src/command_processing.c ****                             }
 619:..\src/command_processing.c ****                         }
 620:..\src/command_processing.c ****                         break;
 3746              		.loc 1 620 0 is_stmt 1
 3747 1ab2 00F00ABD 		b	.L113
 3748              	.L298:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 95


 3749 1ab6 00BF     		.align	2
 3750              	.L297:
 3751 1ab8 00000000 		.word	c_mem
 3752 1abc 00000000 		.word	g_mem
 3753              	.L163:
 607:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 3754              		.loc 1 607 0
 3755 1ac0 07F5B053 		add	r3, r7, #5632
 3756 1ac4 03F10E03 		add	r3, r3, #14
 3757 1ac8 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3758 1aca AB49     		ldr	r1, .L299
 3759 1acc 1346     		mov	r3, r2
 3760 1ace DB00     		lsls	r3, r3, #3
 3761 1ad0 9B1A     		subs	r3, r3, r2
 3762 1ad2 1B01     		lsls	r3, r3, #4
 3763 1ad4 0B44     		add	r3, r3, r1
 3764 1ad6 C833     		adds	r3, r3, #200
 3765 1ad8 1B68     		ldr	r3, [r3]
 3766 1ada 1846     		mov	r0, r3
 3767 1adc FFF7FEFF 		bl	__aeabi_i2f
 3768 1ae0 0346     		mov	r3, r0
 3769 1ae2 4FF08F41 		mov	r1, #1199570944
 3770 1ae6 1846     		mov	r0, r3
 3771 1ae8 FFF7FEFF 		bl	__aeabi_fdiv
 3772 1aec 0346     		mov	r3, r0
 3773 1aee 1A46     		mov	r2, r3
 3774 1af0 07F13803 		add	r3, r7, #56
 3775 1af4 1C3B     		subs	r3, r3, #28
 3776 1af6 1A60     		str	r2, [r3]	@ float
 608:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx) + sod - i -1] = ((char*)(&aux
 3777              		.loc 1 608 0
 3778 1af8 0023     		movs	r3, #0
 3779 1afa 07F5B052 		add	r2, r7, #5632
 3780 1afe 02F11702 		add	r2, r2, #23
 3781 1b02 1370     		strb	r3, [r2]
 3782 1b04 2EE0     		b	.L171
 3783              	.L172:
 609:..\src/command_processing.c ****                             }
 3784              		.loc 1 609 0 discriminator 3
 3785 1b06 07F5B053 		add	r3, r7, #5632
 3786 1b0a 03F11503 		add	r3, r3, #21
 3787 1b0e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3788 1b10 3222     		movs	r2, #50
 3789 1b12 02FB03F3 		mul	r3, r2, r3
 3790 1b16 1A1D     		adds	r2, r3, #4
 3791 1b18 07F5B053 		add	r3, r7, #5632
 3792 1b1c 03F11303 		add	r3, r3, #19
 3793 1b20 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3794 1b22 1A44     		add	r2, r2, r3
 3795 1b24 07F5B053 		add	r3, r7, #5632
 3796 1b28 03F11703 		add	r3, r3, #23
 3797 1b2c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3798 1b2e D31A     		subs	r3, r2, r3
 3799 1b30 5A1E     		subs	r2, r3, #1
 3800 1b32 07F5B053 		add	r3, r7, #5632
 3801 1b36 03F11703 		add	r3, r3, #23
 3802 1b3a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 96


 3803 1b3c 07F13803 		add	r3, r7, #56
 3804 1b40 1C3B     		subs	r3, r3, #28
 3805 1b42 0B44     		add	r3, r3, r1
 3806 1b44 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3807 1b46 07F15803 		add	r3, r7, #88
 3808 1b4a 043B     		subs	r3, r3, #4
 3809 1b4c 9954     		strb	r1, [r3, r2]
 608:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx) + sod - i -1] = ((char*)(&aux
 3810              		.loc 1 608 0 discriminator 3
 3811 1b4e 07F5B053 		add	r3, r7, #5632
 3812 1b52 03F11703 		add	r3, r3, #23
 3813 1b56 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3814 1b58 0133     		adds	r3, r3, #1
 3815 1b5a 07F5B052 		add	r2, r7, #5632
 3816 1b5e 02F11702 		add	r2, r2, #23
 3817 1b62 1370     		strb	r3, [r2]
 3818              	.L171:
 608:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx) + sod - i -1] = ((char*)(&aux
 3819              		.loc 1 608 0 is_stmt 0 discriminator 1
 3820 1b64 07F5B053 		add	r3, r7, #5632
 3821 1b68 03F11703 		add	r3, r3, #23
 3822 1b6c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3823 1b6e 07F5B053 		add	r3, r7, #5632
 3824 1b72 03F11303 		add	r3, r3, #19
 3825 1b76 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3826 1b78 9A42     		cmp	r2, r3
 3827 1b7a C4D3     		bcc	.L172
 611:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 3828              		.loc 1 611 0 is_stmt 1
 3829 1b7c 07F5B053 		add	r3, r7, #5632
 3830 1b80 03F10E03 		add	r3, r3, #14
 3831 1b84 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3832 1b86 7C49     		ldr	r1, .L299
 3833 1b88 1346     		mov	r3, r2
 3834 1b8a DB00     		lsls	r3, r3, #3
 3835 1b8c 9B1A     		subs	r3, r3, r2
 3836 1b8e 1B01     		lsls	r3, r3, #4
 3837 1b90 0B44     		add	r3, r3, r1
 3838 1b92 CC33     		adds	r3, r3, #204
 3839 1b94 1B68     		ldr	r3, [r3]
 3840 1b96 1846     		mov	r0, r3
 3841 1b98 FFF7FEFF 		bl	__aeabi_i2f
 3842 1b9c 0346     		mov	r3, r0
 3843 1b9e 4FF08F41 		mov	r1, #1199570944
 3844 1ba2 1846     		mov	r0, r3
 3845 1ba4 FFF7FEFF 		bl	__aeabi_fdiv
 3846 1ba8 0346     		mov	r3, r0
 3847 1baa 1A46     		mov	r2, r3
 3848 1bac 07F13803 		add	r3, r7, #56
 3849 1bb0 1C3B     		subs	r3, r3, #28
 3850 1bb2 1A60     		str	r2, [r3]	@ float
 612:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + sod) + sod - i -1] = ((char*
 3851              		.loc 1 612 0
 3852 1bb4 0023     		movs	r3, #0
 3853 1bb6 07F5B052 		add	r2, r7, #5632
 3854 1bba 02F11702 		add	r2, r2, #23
 3855 1bbe 1370     		strb	r3, [r2]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 97


 3856 1bc0 34E0     		b	.L173
 3857              	.L174:
 613:..\src/command_processing.c ****                             }
 3858              		.loc 1 613 0 discriminator 3
 3859 1bc2 07F5B053 		add	r3, r7, #5632
 3860 1bc6 03F11503 		add	r3, r3, #21
 3861 1bca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3862 1bcc 3222     		movs	r2, #50
 3863 1bce 02FB03F3 		mul	r3, r2, r3
 3864 1bd2 1A1D     		adds	r2, r3, #4
 3865 1bd4 07F5B053 		add	r3, r7, #5632
 3866 1bd8 03F11303 		add	r3, r3, #19
 3867 1bdc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3868 1bde 1A44     		add	r2, r2, r3
 3869 1be0 07F5B053 		add	r3, r7, #5632
 3870 1be4 03F11303 		add	r3, r3, #19
 3871 1be8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3872 1bea 1A44     		add	r2, r2, r3
 3873 1bec 07F5B053 		add	r3, r7, #5632
 3874 1bf0 03F11703 		add	r3, r3, #23
 3875 1bf4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3876 1bf6 D31A     		subs	r3, r2, r3
 3877 1bf8 5A1E     		subs	r2, r3, #1
 3878 1bfa 07F5B053 		add	r3, r7, #5632
 3879 1bfe 03F11703 		add	r3, r3, #23
 3880 1c02 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3881 1c04 07F13803 		add	r3, r7, #56
 3882 1c08 1C3B     		subs	r3, r3, #28
 3883 1c0a 0B44     		add	r3, r3, r1
 3884 1c0c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3885 1c0e 07F15803 		add	r3, r7, #88
 3886 1c12 043B     		subs	r3, r3, #4
 3887 1c14 9954     		strb	r1, [r3, r2]
 612:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + sod) + sod - i -1] = ((char*
 3888              		.loc 1 612 0 discriminator 3
 3889 1c16 07F5B053 		add	r3, r7, #5632
 3890 1c1a 03F11703 		add	r3, r3, #23
 3891 1c1e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3892 1c20 0133     		adds	r3, r3, #1
 3893 1c22 07F5B052 		add	r2, r7, #5632
 3894 1c26 02F11702 		add	r2, r2, #23
 3895 1c2a 1370     		strb	r3, [r2]
 3896              	.L173:
 612:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + sod) + sod - i -1] = ((char*
 3897              		.loc 1 612 0 is_stmt 0 discriminator 1
 3898 1c2c 07F5B053 		add	r3, r7, #5632
 3899 1c30 03F11703 		add	r3, r3, #23
 3900 1c34 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3901 1c36 07F5B053 		add	r3, r7, #5632
 3902 1c3a 03F11303 		add	r3, r3, #19
 3903 1c3e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3904 1c40 9A42     		cmp	r2, r3
 3905 1c42 BED3     		bcc	.L174
 615:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 3906              		.loc 1 615 0 is_stmt 1
 3907 1c44 07F5B053 		add	r3, r7, #5632
 3908 1c48 03F10E03 		add	r3, r3, #14
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 98


 3909 1c4c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3910 1c4e 4A49     		ldr	r1, .L299
 3911 1c50 1346     		mov	r3, r2
 3912 1c52 DB00     		lsls	r3, r3, #3
 3913 1c54 9B1A     		subs	r3, r3, r2
 3914 1c56 1B01     		lsls	r3, r3, #4
 3915 1c58 0B44     		add	r3, r3, r1
 3916 1c5a D033     		adds	r3, r3, #208
 3917 1c5c 1B68     		ldr	r3, [r3]
 3918 1c5e 1846     		mov	r0, r3
 3919 1c60 FFF7FEFF 		bl	__aeabi_i2f
 3920 1c64 0346     		mov	r3, r0
 3921 1c66 4FF08F41 		mov	r1, #1199570944
 3922 1c6a 1846     		mov	r0, r3
 3923 1c6c FFF7FEFF 		bl	__aeabi_fdiv
 3924 1c70 0346     		mov	r3, r0
 3925 1c72 1A46     		mov	r2, r3
 3926 1c74 07F13803 		add	r3, r7, #56
 3927 1c78 1C3B     		subs	r3, r3, #28
 3928 1c7a 1A60     		str	r2, [r3]	@ float
 616:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + 2*sod) + sod - i -1] = ((cha
 3929              		.loc 1 616 0
 3930 1c7c 0023     		movs	r3, #0
 3931 1c7e 07F5B052 		add	r2, r7, #5632
 3932 1c82 02F11702 		add	r2, r2, #23
 3933 1c86 1370     		strb	r3, [r2]
 3934 1c88 35E0     		b	.L175
 3935              	.L176:
 617:..\src/command_processing.c ****                             }
 3936              		.loc 1 617 0 discriminator 3
 3937 1c8a 07F5B053 		add	r3, r7, #5632
 3938 1c8e 03F11503 		add	r3, r3, #21
 3939 1c92 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3940 1c94 3222     		movs	r2, #50
 3941 1c96 02FB03F3 		mul	r3, r2, r3
 3942 1c9a 1A1D     		adds	r2, r3, #4
 3943 1c9c 07F5B053 		add	r3, r7, #5632
 3944 1ca0 03F11303 		add	r3, r3, #19
 3945 1ca4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3946 1ca6 5B00     		lsls	r3, r3, #1
 3947 1ca8 1A44     		add	r2, r2, r3
 3948 1caa 07F5B053 		add	r3, r7, #5632
 3949 1cae 03F11303 		add	r3, r3, #19
 3950 1cb2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3951 1cb4 1A44     		add	r2, r2, r3
 3952 1cb6 07F5B053 		add	r3, r7, #5632
 3953 1cba 03F11703 		add	r3, r3, #23
 3954 1cbe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3955 1cc0 D31A     		subs	r3, r2, r3
 3956 1cc2 5A1E     		subs	r2, r3, #1
 3957 1cc4 07F5B053 		add	r3, r7, #5632
 3958 1cc8 03F11703 		add	r3, r3, #23
 3959 1ccc 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3960 1cce 07F13803 		add	r3, r7, #56
 3961 1cd2 1C3B     		subs	r3, r3, #28
 3962 1cd4 0B44     		add	r3, r3, r1
 3963 1cd6 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 99


 3964 1cd8 07F15803 		add	r3, r7, #88
 3965 1cdc 043B     		subs	r3, r3, #4
 3966 1cde 9954     		strb	r1, [r3, r2]
 616:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + 2*sod) + sod - i -1] = ((cha
 3967              		.loc 1 616 0 discriminator 3
 3968 1ce0 07F5B053 		add	r3, r7, #5632
 3969 1ce4 03F11703 		add	r3, r3, #23
 3970 1ce8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3971 1cea 0133     		adds	r3, r3, #1
 3972 1cec 07F5B052 		add	r2, r7, #5632
 3973 1cf0 02F11702 		add	r2, r2, #23
 3974 1cf4 1370     		strb	r3, [r2]
 3975              	.L175:
 616:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + 2*sod) + sod - i -1] = ((cha
 3976              		.loc 1 616 0 is_stmt 0 discriminator 1
 3977 1cf6 07F5B053 		add	r3, r7, #5632
 3978 1cfa 03F11703 		add	r3, r3, #23
 3979 1cfe 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3980 1d00 07F5B053 		add	r3, r7, #5632
 3981 1d04 03F11303 		add	r3, r3, #19
 3982 1d08 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3983 1d0a 9A42     		cmp	r2, r3
 3984 1d0c BDD3     		bcc	.L176
 3985              		.loc 1 620 0 is_stmt 1
 3986 1d0e DCE3     		b	.L113
 3987              	.L122:
 621:..\src/command_processing.c ****                         
 622:..\src/command_processing.c ****                     case 45:         // Second Motor Current PID
 623:..\src/command_processing.c ****                         if(c_mem.motor[SECOND_MOTOR_IDX].control_mode != CURR_AND_POS_CONTROL) {
 3988              		.loc 1 623 0
 3989 1d10 07F5B053 		add	r3, r7, #5632
 3990 1d14 03F10E03 		add	r3, r3, #14
 3991 1d18 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3992 1d1a 1749     		ldr	r1, .L299
 3993 1d1c 1346     		mov	r3, r2
 3994 1d1e DB00     		lsls	r3, r3, #3
 3995 1d20 9B1A     		subs	r3, r3, r2
 3996 1d22 1B01     		lsls	r3, r3, #4
 3997 1d24 0B44     		add	r3, r3, r1
 3998 1d26 03F20F13 		addw	r3, r3, #271
 3999 1d2a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4000 1d2c 032B     		cmp	r3, #3
 4001 1d2e 00F02A81 		beq	.L177
 624:..\src/command_processing.c ****                             aux_float = (float) c_mem.motor[SECOND_MOTOR_IDX].k_p_c / 65536;
 4002              		.loc 1 624 0
 4003 1d32 07F5B053 		add	r3, r7, #5632
 4004 1d36 03F10E03 		add	r3, r3, #14
 4005 1d3a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4006 1d3c 0E49     		ldr	r1, .L299
 4007 1d3e 1346     		mov	r3, r2
 4008 1d40 DB00     		lsls	r3, r3, #3
 4009 1d42 9B1A     		subs	r3, r3, r2
 4010 1d44 1B01     		lsls	r3, r3, #4
 4011 1d46 0B44     		add	r3, r3, r1
 4012 1d48 BC33     		adds	r3, r3, #188
 4013 1d4a 1B68     		ldr	r3, [r3]
 4014 1d4c 1846     		mov	r0, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 100


 4015 1d4e FFF7FEFF 		bl	__aeabi_i2f
 4016 1d52 0346     		mov	r3, r0
 4017 1d54 4FF08F41 		mov	r1, #1199570944
 4018 1d58 1846     		mov	r0, r3
 4019 1d5a FFF7FEFF 		bl	__aeabi_fdiv
 4020 1d5e 0346     		mov	r3, r0
 4021 1d60 1A46     		mov	r2, r3
 4022 1d62 07F13803 		add	r3, r7, #56
 4023 1d66 1C3B     		subs	r3, r3, #28
 4024 1d68 1A60     		str	r2, [r3]	@ float
 625:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 4025              		.loc 1 625 0
 4026 1d6a 0023     		movs	r3, #0
 4027 1d6c 07F5B052 		add	r2, r7, #5632
 4028 1d70 02F11702 		add	r2, r2, #23
 4029 1d74 1370     		strb	r3, [r2]
 4030 1d76 30E0     		b	.L178
 4031              	.L300:
 4032              		.align	2
 4033              	.L299:
 4034 1d78 00000000 		.word	c_mem
 4035              	.L179:
 626:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx) + sod - i -1] = ((char*)(&aux
 4036              		.loc 1 626 0 discriminator 3
 4037 1d7c 07F5B053 		add	r3, r7, #5632
 4038 1d80 03F11503 		add	r3, r3, #21
 4039 1d84 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4040 1d86 3222     		movs	r2, #50
 4041 1d88 02FB03F3 		mul	r3, r2, r3
 4042 1d8c 1A1D     		adds	r2, r3, #4
 4043 1d8e 07F5B053 		add	r3, r7, #5632
 4044 1d92 03F11303 		add	r3, r3, #19
 4045 1d96 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4046 1d98 1A44     		add	r2, r2, r3
 4047 1d9a 07F5B053 		add	r3, r7, #5632
 4048 1d9e 03F11703 		add	r3, r3, #23
 4049 1da2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4050 1da4 D31A     		subs	r3, r2, r3
 4051 1da6 5A1E     		subs	r2, r3, #1
 4052 1da8 07F5B053 		add	r3, r7, #5632
 4053 1dac 03F11703 		add	r3, r3, #23
 4054 1db0 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4055 1db2 07F13803 		add	r3, r7, #56
 4056 1db6 1C3B     		subs	r3, r3, #28
 4057 1db8 0B44     		add	r3, r3, r1
 4058 1dba 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4059 1dbc 07F15803 		add	r3, r7, #88
 4060 1dc0 043B     		subs	r3, r3, #4
 4061 1dc2 9954     		strb	r1, [r3, r2]
 625:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 4062              		.loc 1 625 0 discriminator 3
 4063 1dc4 07F5B053 		add	r3, r7, #5632
 4064 1dc8 03F11703 		add	r3, r3, #23
 4065 1dcc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4066 1dce 0133     		adds	r3, r3, #1
 4067 1dd0 07F5B052 		add	r2, r7, #5632
 4068 1dd4 02F11702 		add	r2, r2, #23
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 101


 4069 1dd8 1370     		strb	r3, [r2]
 4070              	.L178:
 625:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 4071              		.loc 1 625 0 is_stmt 0 discriminator 1
 4072 1dda 07F5B053 		add	r3, r7, #5632
 4073 1dde 03F11703 		add	r3, r3, #23
 4074 1de2 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4075 1de4 07F5B053 		add	r3, r7, #5632
 4076 1de8 03F11303 		add	r3, r3, #19
 4077 1dec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4078 1dee 9A42     		cmp	r2, r3
 4079 1df0 C4D3     		bcc	.L179
 627:..\src/command_processing.c ****                             }
 628:..\src/command_processing.c ****                             aux_float = (float) c_mem.motor[SECOND_MOTOR_IDX].k_i_c / 65536;
 4080              		.loc 1 628 0 is_stmt 1
 4081 1df2 07F5B053 		add	r3, r7, #5632
 4082 1df6 03F10E03 		add	r3, r3, #14
 4083 1dfa 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4084 1dfc A249     		ldr	r1, .L301
 4085 1dfe 1346     		mov	r3, r2
 4086 1e00 DB00     		lsls	r3, r3, #3
 4087 1e02 9B1A     		subs	r3, r3, r2
 4088 1e04 1B01     		lsls	r3, r3, #4
 4089 1e06 0B44     		add	r3, r3, r1
 4090 1e08 C033     		adds	r3, r3, #192
 4091 1e0a 1B68     		ldr	r3, [r3]
 4092 1e0c 1846     		mov	r0, r3
 4093 1e0e FFF7FEFF 		bl	__aeabi_i2f
 4094 1e12 0346     		mov	r3, r0
 4095 1e14 4FF08F41 		mov	r1, #1199570944
 4096 1e18 1846     		mov	r0, r3
 4097 1e1a FFF7FEFF 		bl	__aeabi_fdiv
 4098 1e1e 0346     		mov	r3, r0
 4099 1e20 1A46     		mov	r2, r3
 4100 1e22 07F13803 		add	r3, r7, #56
 4101 1e26 1C3B     		subs	r3, r3, #28
 4102 1e28 1A60     		str	r2, [r3]	@ float
 629:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 4103              		.loc 1 629 0
 4104 1e2a 0023     		movs	r3, #0
 4105 1e2c 07F5B052 		add	r2, r7, #5632
 4106 1e30 02F11702 		add	r2, r2, #23
 4107 1e34 1370     		strb	r3, [r2]
 4108 1e36 34E0     		b	.L180
 4109              	.L181:
 630:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + sod) + sod - i -1] = ((char*
 4110              		.loc 1 630 0 discriminator 3
 4111 1e38 07F5B053 		add	r3, r7, #5632
 4112 1e3c 03F11503 		add	r3, r3, #21
 4113 1e40 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4114 1e42 3222     		movs	r2, #50
 4115 1e44 02FB03F3 		mul	r3, r2, r3
 4116 1e48 1A1D     		adds	r2, r3, #4
 4117 1e4a 07F5B053 		add	r3, r7, #5632
 4118 1e4e 03F11303 		add	r3, r3, #19
 4119 1e52 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4120 1e54 1A44     		add	r2, r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 102


 4121 1e56 07F5B053 		add	r3, r7, #5632
 4122 1e5a 03F11303 		add	r3, r3, #19
 4123 1e5e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4124 1e60 1A44     		add	r2, r2, r3
 4125 1e62 07F5B053 		add	r3, r7, #5632
 4126 1e66 03F11703 		add	r3, r3, #23
 4127 1e6a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4128 1e6c D31A     		subs	r3, r2, r3
 4129 1e6e 5A1E     		subs	r2, r3, #1
 4130 1e70 07F5B053 		add	r3, r7, #5632
 4131 1e74 03F11703 		add	r3, r3, #23
 4132 1e78 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4133 1e7a 07F13803 		add	r3, r7, #56
 4134 1e7e 1C3B     		subs	r3, r3, #28
 4135 1e80 0B44     		add	r3, r3, r1
 4136 1e82 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4137 1e84 07F15803 		add	r3, r7, #88
 4138 1e88 043B     		subs	r3, r3, #4
 4139 1e8a 9954     		strb	r1, [r3, r2]
 629:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 4140              		.loc 1 629 0 discriminator 3
 4141 1e8c 07F5B053 		add	r3, r7, #5632
 4142 1e90 03F11703 		add	r3, r3, #23
 4143 1e94 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4144 1e96 0133     		adds	r3, r3, #1
 4145 1e98 07F5B052 		add	r2, r7, #5632
 4146 1e9c 02F11702 		add	r2, r2, #23
 4147 1ea0 1370     		strb	r3, [r2]
 4148              	.L180:
 629:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 4149              		.loc 1 629 0 is_stmt 0 discriminator 1
 4150 1ea2 07F5B053 		add	r3, r7, #5632
 4151 1ea6 03F11703 		add	r3, r3, #23
 4152 1eaa 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4153 1eac 07F5B053 		add	r3, r7, #5632
 4154 1eb0 03F11303 		add	r3, r3, #19
 4155 1eb4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4156 1eb6 9A42     		cmp	r2, r3
 4157 1eb8 BED3     		bcc	.L181
 631:..\src/command_processing.c ****                             }
 632:..\src/command_processing.c ****                             aux_float = (float) c_mem.motor[SECOND_MOTOR_IDX].k_d_c / 65536;
 4158              		.loc 1 632 0 is_stmt 1
 4159 1eba 07F5B053 		add	r3, r7, #5632
 4160 1ebe 03F10E03 		add	r3, r3, #14
 4161 1ec2 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4162 1ec4 7049     		ldr	r1, .L301
 4163 1ec6 1346     		mov	r3, r2
 4164 1ec8 DB00     		lsls	r3, r3, #3
 4165 1eca 9B1A     		subs	r3, r3, r2
 4166 1ecc 1B01     		lsls	r3, r3, #4
 4167 1ece 0B44     		add	r3, r3, r1
 4168 1ed0 C433     		adds	r3, r3, #196
 4169 1ed2 1B68     		ldr	r3, [r3]
 4170 1ed4 1846     		mov	r0, r3
 4171 1ed6 FFF7FEFF 		bl	__aeabi_i2f
 4172 1eda 0346     		mov	r3, r0
 4173 1edc 4FF08F41 		mov	r1, #1199570944
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 103


 4174 1ee0 1846     		mov	r0, r3
 4175 1ee2 FFF7FEFF 		bl	__aeabi_fdiv
 4176 1ee6 0346     		mov	r3, r0
 4177 1ee8 1A46     		mov	r2, r3
 4178 1eea 07F13803 		add	r3, r7, #56
 4179 1eee 1C3B     		subs	r3, r3, #28
 4180 1ef0 1A60     		str	r2, [r3]	@ float
 633:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 4181              		.loc 1 633 0
 4182 1ef2 0023     		movs	r3, #0
 4183 1ef4 07F5B052 		add	r2, r7, #5632
 4184 1ef8 02F11702 		add	r2, r2, #23
 4185 1efc 1370     		strb	r3, [r2]
 4186 1efe 35E0     		b	.L182
 4187              	.L183:
 634:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + 2*sod) + sod - i -1] = ((cha
 4188              		.loc 1 634 0 discriminator 3
 4189 1f00 07F5B053 		add	r3, r7, #5632
 4190 1f04 03F11503 		add	r3, r3, #21
 4191 1f08 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4192 1f0a 3222     		movs	r2, #50
 4193 1f0c 02FB03F3 		mul	r3, r2, r3
 4194 1f10 1A1D     		adds	r2, r3, #4
 4195 1f12 07F5B053 		add	r3, r7, #5632
 4196 1f16 03F11303 		add	r3, r3, #19
 4197 1f1a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4198 1f1c 5B00     		lsls	r3, r3, #1
 4199 1f1e 1A44     		add	r2, r2, r3
 4200 1f20 07F5B053 		add	r3, r7, #5632
 4201 1f24 03F11303 		add	r3, r3, #19
 4202 1f28 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4203 1f2a 1A44     		add	r2, r2, r3
 4204 1f2c 07F5B053 		add	r3, r7, #5632
 4205 1f30 03F11703 		add	r3, r3, #23
 4206 1f34 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4207 1f36 D31A     		subs	r3, r2, r3
 4208 1f38 5A1E     		subs	r2, r3, #1
 4209 1f3a 07F5B053 		add	r3, r7, #5632
 4210 1f3e 03F11703 		add	r3, r3, #23
 4211 1f42 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4212 1f44 07F13803 		add	r3, r7, #56
 4213 1f48 1C3B     		subs	r3, r3, #28
 4214 1f4a 0B44     		add	r3, r3, r1
 4215 1f4c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4216 1f4e 07F15803 		add	r3, r7, #88
 4217 1f52 043B     		subs	r3, r3, #4
 4218 1f54 9954     		strb	r1, [r3, r2]
 633:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 4219              		.loc 1 633 0 discriminator 3
 4220 1f56 07F5B053 		add	r3, r7, #5632
 4221 1f5a 03F11703 		add	r3, r3, #23
 4222 1f5e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4223 1f60 0133     		adds	r3, r3, #1
 4224 1f62 07F5B052 		add	r2, r7, #5632
 4225 1f66 02F11702 		add	r2, r2, #23
 4226 1f6a 1370     		strb	r3, [r2]
 4227              	.L182:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 104


 633:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 4228              		.loc 1 633 0 is_stmt 0 discriminator 1
 4229 1f6c 07F5B053 		add	r3, r7, #5632
 4230 1f70 03F11703 		add	r3, r3, #23
 4231 1f74 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4232 1f76 07F5B053 		add	r3, r7, #5632
 4233 1f7a 03F11303 		add	r3, r3, #19
 4234 1f7e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4235 1f80 9A42     		cmp	r2, r3
 4236 1f82 BDD3     		bcc	.L183
 635:..\src/command_processing.c ****                             }
 636:..\src/command_processing.c ****                         }
 637:..\src/command_processing.c ****                         else {
 638:..\src/command_processing.c ****                             aux_float = (float) c_mem.motor[SECOND_MOTOR_IDX].k_p_c_dl / 65536;
 639:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 640:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx) + sod - i -1] = ((char*)(&aux
 641:..\src/command_processing.c ****                             }
 642:..\src/command_processing.c ****                             aux_float = (float) c_mem.motor[SECOND_MOTOR_IDX].k_i_c_dl / 65536;
 643:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 644:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + sod) + sod - i -1] = ((char*
 645:..\src/command_processing.c ****                             }
 646:..\src/command_processing.c ****                             aux_float = (float) c_mem.motor[SECOND_MOTOR_IDX].k_d_c_dl / 65536;
 647:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 648:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + 2*sod) + sod - i -1] = ((cha
 649:..\src/command_processing.c ****                             }
 650:..\src/command_processing.c ****                         }            
 651:..\src/command_processing.c ****                         break;  
 4237              		.loc 1 651 0 is_stmt 1
 4238 1f84 A1E2     		b	.L113
 4239              	.L177:
 638:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 4240              		.loc 1 638 0
 4241 1f86 07F5B053 		add	r3, r7, #5632
 4242 1f8a 03F10E03 		add	r3, r3, #14
 4243 1f8e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4244 1f90 3D49     		ldr	r1, .L301
 4245 1f92 1346     		mov	r3, r2
 4246 1f94 DB00     		lsls	r3, r3, #3
 4247 1f96 9B1A     		subs	r3, r3, r2
 4248 1f98 1B01     		lsls	r3, r3, #4
 4249 1f9a 0B44     		add	r3, r3, r1
 4250 1f9c D433     		adds	r3, r3, #212
 4251 1f9e 1B68     		ldr	r3, [r3]
 4252 1fa0 1846     		mov	r0, r3
 4253 1fa2 FFF7FEFF 		bl	__aeabi_i2f
 4254 1fa6 0346     		mov	r3, r0
 4255 1fa8 4FF08F41 		mov	r1, #1199570944
 4256 1fac 1846     		mov	r0, r3
 4257 1fae FFF7FEFF 		bl	__aeabi_fdiv
 4258 1fb2 0346     		mov	r3, r0
 4259 1fb4 1A46     		mov	r2, r3
 4260 1fb6 07F13803 		add	r3, r7, #56
 4261 1fba 1C3B     		subs	r3, r3, #28
 4262 1fbc 1A60     		str	r2, [r3]	@ float
 639:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx) + sod - i -1] = ((char*)(&aux
 4263              		.loc 1 639 0
 4264 1fbe 0023     		movs	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 105


 4265 1fc0 07F5B052 		add	r2, r7, #5632
 4266 1fc4 02F11702 		add	r2, r2, #23
 4267 1fc8 1370     		strb	r3, [r2]
 4268 1fca 2EE0     		b	.L185
 4269              	.L186:
 640:..\src/command_processing.c ****                             }
 4270              		.loc 1 640 0 discriminator 3
 4271 1fcc 07F5B053 		add	r3, r7, #5632
 4272 1fd0 03F11503 		add	r3, r3, #21
 4273 1fd4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4274 1fd6 3222     		movs	r2, #50
 4275 1fd8 02FB03F3 		mul	r3, r2, r3
 4276 1fdc 1A1D     		adds	r2, r3, #4
 4277 1fde 07F5B053 		add	r3, r7, #5632
 4278 1fe2 03F11303 		add	r3, r3, #19
 4279 1fe6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4280 1fe8 1A44     		add	r2, r2, r3
 4281 1fea 07F5B053 		add	r3, r7, #5632
 4282 1fee 03F11703 		add	r3, r3, #23
 4283 1ff2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4284 1ff4 D31A     		subs	r3, r2, r3
 4285 1ff6 5A1E     		subs	r2, r3, #1
 4286 1ff8 07F5B053 		add	r3, r7, #5632
 4287 1ffc 03F11703 		add	r3, r3, #23
 4288 2000 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4289 2002 07F13803 		add	r3, r7, #56
 4290 2006 1C3B     		subs	r3, r3, #28
 4291 2008 0B44     		add	r3, r3, r1
 4292 200a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4293 200c 07F15803 		add	r3, r7, #88
 4294 2010 043B     		subs	r3, r3, #4
 4295 2012 9954     		strb	r1, [r3, r2]
 639:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx) + sod - i -1] = ((char*)(&aux
 4296              		.loc 1 639 0 discriminator 3
 4297 2014 07F5B053 		add	r3, r7, #5632
 4298 2018 03F11703 		add	r3, r3, #23
 4299 201c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4300 201e 0133     		adds	r3, r3, #1
 4301 2020 07F5B052 		add	r2, r7, #5632
 4302 2024 02F11702 		add	r2, r2, #23
 4303 2028 1370     		strb	r3, [r2]
 4304              	.L185:
 639:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx) + sod - i -1] = ((char*)(&aux
 4305              		.loc 1 639 0 is_stmt 0 discriminator 1
 4306 202a 07F5B053 		add	r3, r7, #5632
 4307 202e 03F11703 		add	r3, r3, #23
 4308 2032 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4309 2034 07F5B053 		add	r3, r7, #5632
 4310 2038 03F11303 		add	r3, r3, #19
 4311 203c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4312 203e 9A42     		cmp	r2, r3
 4313 2040 C4D3     		bcc	.L186
 642:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 4314              		.loc 1 642 0 is_stmt 1
 4315 2042 07F5B053 		add	r3, r7, #5632
 4316 2046 03F10E03 		add	r3, r3, #14
 4317 204a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 106


 4318 204c 0E49     		ldr	r1, .L301
 4319 204e 1346     		mov	r3, r2
 4320 2050 DB00     		lsls	r3, r3, #3
 4321 2052 9B1A     		subs	r3, r3, r2
 4322 2054 1B01     		lsls	r3, r3, #4
 4323 2056 0B44     		add	r3, r3, r1
 4324 2058 D833     		adds	r3, r3, #216
 4325 205a 1B68     		ldr	r3, [r3]
 4326 205c 1846     		mov	r0, r3
 4327 205e FFF7FEFF 		bl	__aeabi_i2f
 4328 2062 0346     		mov	r3, r0
 4329 2064 4FF08F41 		mov	r1, #1199570944
 4330 2068 1846     		mov	r0, r3
 4331 206a FFF7FEFF 		bl	__aeabi_fdiv
 4332 206e 0346     		mov	r3, r0
 4333 2070 1A46     		mov	r2, r3
 4334 2072 07F13803 		add	r3, r7, #56
 4335 2076 1C3B     		subs	r3, r3, #28
 4336 2078 1A60     		str	r2, [r3]	@ float
 643:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + sod) + sod - i -1] = ((char*
 4337              		.loc 1 643 0
 4338 207a 0023     		movs	r3, #0
 4339 207c 07F5B052 		add	r2, r7, #5632
 4340 2080 02F11702 		add	r2, r2, #23
 4341 2084 1370     		strb	r3, [r2]
 4342 2086 36E0     		b	.L187
 4343              	.L302:
 4344              		.align	2
 4345              	.L301:
 4346 2088 00000000 		.word	c_mem
 4347              	.L188:
 644:..\src/command_processing.c ****                             }
 4348              		.loc 1 644 0 discriminator 3
 4349 208c 07F5B053 		add	r3, r7, #5632
 4350 2090 03F11503 		add	r3, r3, #21
 4351 2094 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4352 2096 3222     		movs	r2, #50
 4353 2098 02FB03F3 		mul	r3, r2, r3
 4354 209c 1A1D     		adds	r2, r3, #4
 4355 209e 07F5B053 		add	r3, r7, #5632
 4356 20a2 03F11303 		add	r3, r3, #19
 4357 20a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4358 20a8 1A44     		add	r2, r2, r3
 4359 20aa 07F5B053 		add	r3, r7, #5632
 4360 20ae 03F11303 		add	r3, r3, #19
 4361 20b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4362 20b4 1A44     		add	r2, r2, r3
 4363 20b6 07F5B053 		add	r3, r7, #5632
 4364 20ba 03F11703 		add	r3, r3, #23
 4365 20be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4366 20c0 D31A     		subs	r3, r2, r3
 4367 20c2 5A1E     		subs	r2, r3, #1
 4368 20c4 07F5B053 		add	r3, r7, #5632
 4369 20c8 03F11703 		add	r3, r3, #23
 4370 20cc 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4371 20ce 07F13803 		add	r3, r7, #56
 4372 20d2 1C3B     		subs	r3, r3, #28
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 107


 4373 20d4 0B44     		add	r3, r3, r1
 4374 20d6 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4375 20d8 07F15803 		add	r3, r7, #88
 4376 20dc 043B     		subs	r3, r3, #4
 4377 20de 9954     		strb	r1, [r3, r2]
 643:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + sod) + sod - i -1] = ((char*
 4378              		.loc 1 643 0 discriminator 3
 4379 20e0 07F5B053 		add	r3, r7, #5632
 4380 20e4 03F11703 		add	r3, r3, #23
 4381 20e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4382 20ea 0133     		adds	r3, r3, #1
 4383 20ec 07F5B052 		add	r2, r7, #5632
 4384 20f0 02F11702 		add	r2, r2, #23
 4385 20f4 1370     		strb	r3, [r2]
 4386              	.L187:
 643:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + sod) + sod - i -1] = ((char*
 4387              		.loc 1 643 0 is_stmt 0 discriminator 1
 4388 20f6 07F5B053 		add	r3, r7, #5632
 4389 20fa 03F11703 		add	r3, r3, #23
 4390 20fe 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4391 2100 07F5B053 		add	r3, r7, #5632
 4392 2104 03F11303 		add	r3, r3, #19
 4393 2108 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4394 210a 9A42     		cmp	r2, r3
 4395 210c BED3     		bcc	.L188
 646:..\src/command_processing.c ****                             for(i = 0; i < sod; i++) {
 4396              		.loc 1 646 0 is_stmt 1
 4397 210e 07F5B053 		add	r3, r7, #5632
 4398 2112 03F10E03 		add	r3, r3, #14
 4399 2116 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4400 2118 C849     		ldr	r1, .L303
 4401 211a 1346     		mov	r3, r2
 4402 211c DB00     		lsls	r3, r3, #3
 4403 211e 9B1A     		subs	r3, r3, r2
 4404 2120 1B01     		lsls	r3, r3, #4
 4405 2122 0B44     		add	r3, r3, r1
 4406 2124 DC33     		adds	r3, r3, #220
 4407 2126 1B68     		ldr	r3, [r3]
 4408 2128 1846     		mov	r0, r3
 4409 212a FFF7FEFF 		bl	__aeabi_i2f
 4410 212e 0346     		mov	r3, r0
 4411 2130 4FF08F41 		mov	r1, #1199570944
 4412 2134 1846     		mov	r0, r3
 4413 2136 FFF7FEFF 		bl	__aeabi_fdiv
 4414 213a 0346     		mov	r3, r0
 4415 213c 1A46     		mov	r2, r3
 4416 213e 07F13803 		add	r3, r7, #56
 4417 2142 1C3B     		subs	r3, r3, #28
 4418 2144 1A60     		str	r2, [r3]	@ float
 647:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + 2*sod) + sod - i -1] = ((cha
 4419              		.loc 1 647 0
 4420 2146 0023     		movs	r3, #0
 4421 2148 07F5B052 		add	r2, r7, #5632
 4422 214c 02F11702 		add	r2, r2, #23
 4423 2150 1370     		strb	r3, [r2]
 4424 2152 35E0     		b	.L189
 4425              	.L190:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 108


 648:..\src/command_processing.c ****                             }
 4426              		.loc 1 648 0 discriminator 3
 4427 2154 07F5B053 		add	r3, r7, #5632
 4428 2158 03F11503 		add	r3, r3, #21
 4429 215c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4430 215e 3222     		movs	r2, #50
 4431 2160 02FB03F3 		mul	r3, r2, r3
 4432 2164 1A1D     		adds	r2, r3, #4
 4433 2166 07F5B053 		add	r3, r7, #5632
 4434 216a 03F11303 		add	r3, r3, #19
 4435 216e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4436 2170 5B00     		lsls	r3, r3, #1
 4437 2172 1A44     		add	r2, r2, r3
 4438 2174 07F5B053 		add	r3, r7, #5632
 4439 2178 03F11303 		add	r3, r3, #19
 4440 217c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4441 217e 1A44     		add	r2, r2, r3
 4442 2180 07F5B053 		add	r3, r7, #5632
 4443 2184 03F11703 		add	r3, r3, #23
 4444 2188 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4445 218a D31A     		subs	r3, r2, r3
 4446 218c 5A1E     		subs	r2, r3, #1
 4447 218e 07F5B053 		add	r3, r7, #5632
 4448 2192 03F11703 		add	r3, r3, #23
 4449 2196 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4450 2198 07F13803 		add	r3, r7, #56
 4451 219c 1C3B     		subs	r3, r3, #28
 4452 219e 0B44     		add	r3, r3, r1
 4453 21a0 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4454 21a2 07F15803 		add	r3, r7, #88
 4455 21a6 043B     		subs	r3, r3, #4
 4456 21a8 9954     		strb	r1, [r3, r2]
 647:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + 2*sod) + sod - i -1] = ((cha
 4457              		.loc 1 647 0 discriminator 3
 4458 21aa 07F5B053 		add	r3, r7, #5632
 4459 21ae 03F11703 		add	r3, r3, #23
 4460 21b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4461 21b4 0133     		adds	r3, r3, #1
 4462 21b6 07F5B052 		add	r2, r7, #5632
 4463 21ba 02F11702 		add	r2, r2, #23
 4464 21be 1370     		strb	r3, [r2]
 4465              	.L189:
 647:..\src/command_processing.c ****                                 packet_data[(4 + PARAM_BYTE_SLOT*idx + 2*sod) + sod - i -1] = ((cha
 4466              		.loc 1 647 0 is_stmt 0 discriminator 1
 4467 21c0 07F5B053 		add	r3, r7, #5632
 4468 21c4 03F11703 		add	r3, r3, #23
 4469 21c8 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4470 21ca 07F5B053 		add	r3, r7, #5632
 4471 21ce 03F11303 		add	r3, r3, #19
 4472 21d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4473 21d4 9A42     		cmp	r2, r3
 4474 21d6 BDD3     		bcc	.L190
 4475              		.loc 1 651 0 is_stmt 1
 4476 21d8 77E1     		b	.L113
 4477              	.L123:
 652:..\src/command_processing.c **** 
 653:..\src/command_processing.c ****                     case 50:         // Second Motor Measurement Offset
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 109


 654:..\src/command_processing.c ****                         aux_int16 = (c_mem.enc[g_mem.motor[SECOND_MOTOR_IDX].encoder_line].m_off[i]
 4478              		.loc 1 654 0
 4479 21da 07F5B053 		add	r3, r7, #5632
 4480 21de 03F10E03 		add	r3, r3, #14
 4481 21e2 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4482 21e4 9649     		ldr	r1, .L303+4
 4483 21e6 1346     		mov	r3, r2
 4484 21e8 DB00     		lsls	r3, r3, #3
 4485 21ea 9B1A     		subs	r3, r3, r2
 4486 21ec 1B01     		lsls	r3, r3, #4
 4487 21ee 0B44     		add	r3, r3, r1
 4488 21f0 03F58873 		add	r3, r3, #272
 4489 21f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4490 21f6 1846     		mov	r0, r3
 4491 21f8 07F5B053 		add	r3, r7, #5632
 4492 21fc 03F11703 		add	r3, r3, #23
 4493 2200 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4494 2202 8E49     		ldr	r1, .L303
 4495 2204 0346     		mov	r3, r0
 4496 2206 5B00     		lsls	r3, r3, #1
 4497 2208 0344     		add	r3, r3, r0
 4498 220a 9B00     		lsls	r3, r3, #2
 4499 220c 1344     		add	r3, r3, r2
 4500 220e 6633     		adds	r3, r3, #102
 4501 2210 51F82310 		ldr	r1, [r1, r3, lsl #2]
 4502 2214 07F5B053 		add	r3, r7, #5632
 4503 2218 03F10E03 		add	r3, r3, #14
 4504 221c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4505 221e 8848     		ldr	r0, .L303+4
 4506 2220 1346     		mov	r3, r2
 4507 2222 DB00     		lsls	r3, r3, #3
 4508 2224 9B1A     		subs	r3, r3, r2
 4509 2226 1B01     		lsls	r3, r3, #4
 4510 2228 0344     		add	r3, r3, r0
 4511 222a 03F58873 		add	r3, r3, #272
 4512 222e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4513 2230 1C46     		mov	r4, r3
 4514 2232 07F5B053 		add	r3, r7, #5632
 4515 2236 03F11703 		add	r3, r3, #23
 4516 223a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4517 223c 7F48     		ldr	r0, .L303
 4518 223e 2346     		mov	r3, r4
 4519 2240 5B00     		lsls	r3, r3, #1
 4520 2242 2344     		add	r3, r3, r4
 4521 2244 1B01     		lsls	r3, r3, #4
 4522 2246 0344     		add	r3, r3, r0
 4523 2248 1344     		add	r3, r3, r2
 4524 224a 03F29513 		addw	r3, r3, #405
 4525 224e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4526 2250 41FA03F3 		asr	r3, r1, r3
 4527 2254 1AB2     		sxth	r2, r3
 4528 2256 07F13803 		add	r3, r7, #56
 4529 225a 1E3B     		subs	r3, r3, #30
 4530 225c 1A80     		strh	r2, [r3]	@ movhi
 655:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 4531              		.loc 1 655 0
 4532 225e 0023     		movs	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 110


 4533 2260 07F5B052 		add	r2, r7, #5632
 4534 2264 02F11602 		add	r2, r2, #22
 4535 2268 1370     		strb	r3, [r2]
 4536 226a 3BE0     		b	.L191
 4537              	.L192:
 656:..\src/command_processing.c ****                             packet_data[(4 + PARAM_BYTE_SLOT*idx + i*sod) + sod - j -1] = ((char*)(
 4538              		.loc 1 656 0 discriminator 3
 4539 226c 07F5B053 		add	r3, r7, #5632
 4540 2270 03F11503 		add	r3, r3, #21
 4541 2274 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4542 2276 3222     		movs	r2, #50
 4543 2278 02FB03F3 		mul	r3, r2, r3
 4544 227c 1A1D     		adds	r2, r3, #4
 4545 227e 07F5B053 		add	r3, r7, #5632
 4546 2282 03F11703 		add	r3, r3, #23
 4547 2286 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4548 2288 07F5B051 		add	r1, r7, #5632
 4549 228c 01F11301 		add	r1, r1, #19
 4550 2290 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 4551 2292 01FB03F3 		mul	r3, r1, r3
 4552 2296 1A44     		add	r2, r2, r3
 4553 2298 07F5B053 		add	r3, r7, #5632
 4554 229c 03F11303 		add	r3, r3, #19
 4555 22a0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4556 22a2 1A44     		add	r2, r2, r3
 4557 22a4 07F5B053 		add	r3, r7, #5632
 4558 22a8 03F11603 		add	r3, r3, #22
 4559 22ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4560 22ae D31A     		subs	r3, r2, r3
 4561 22b0 5A1E     		subs	r2, r3, #1
 4562 22b2 07F5B053 		add	r3, r7, #5632
 4563 22b6 03F11603 		add	r3, r3, #22
 4564 22ba 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4565 22bc 07F13803 		add	r3, r7, #56
 4566 22c0 1E3B     		subs	r3, r3, #30
 4567 22c2 0B44     		add	r3, r3, r1
 4568 22c4 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4569 22c6 07F15803 		add	r3, r7, #88
 4570 22ca 043B     		subs	r3, r3, #4
 4571 22cc 9954     		strb	r1, [r3, r2]
 655:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 4572              		.loc 1 655 0 discriminator 3
 4573 22ce 07F5B053 		add	r3, r7, #5632
 4574 22d2 03F11603 		add	r3, r3, #22
 4575 22d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4576 22d8 0133     		adds	r3, r3, #1
 4577 22da 07F5B052 		add	r2, r7, #5632
 4578 22de 02F11602 		add	r2, r2, #22
 4579 22e2 1370     		strb	r3, [r2]
 4580              	.L191:
 655:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 4581              		.loc 1 655 0 is_stmt 0 discriminator 1
 4582 22e4 07F5B053 		add	r3, r7, #5632
 4583 22e8 03F11603 		add	r3, r3, #22
 4584 22ec 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4585 22ee 07F5B053 		add	r3, r7, #5632
 4586 22f2 03F11303 		add	r3, r3, #19
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 111


 4587 22f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4588 22f8 9A42     		cmp	r2, r3
 4589 22fa B7D3     		bcc	.L192
 657:..\src/command_processing.c ****                         }
 658:..\src/command_processing.c ****                         break;
 4590              		.loc 1 658 0 is_stmt 1
 4591 22fc E5E0     		b	.L113
 4592              	.L124:
 659:..\src/command_processing.c ****                 
 660:..\src/command_processing.c ****                     case 53:        // Second Motor Position limits
 661:..\src/command_processing.c ****                         aux_int32 = (c_mem.motor[SECOND_MOTOR_IDX].pos_lim_inf >> c_mem.enc[g_mem.m
 4593              		.loc 1 661 0
 4594 22fe 07F5B053 		add	r3, r7, #5632
 4595 2302 03F10E03 		add	r3, r3, #14
 4596 2306 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4597 2308 4C49     		ldr	r1, .L303
 4598 230a 1346     		mov	r3, r2
 4599 230c DB00     		lsls	r3, r3, #3
 4600 230e 9B1A     		subs	r3, r3, r2
 4601 2310 1B01     		lsls	r3, r3, #4
 4602 2312 0B44     		add	r3, r3, r1
 4603 2314 E433     		adds	r3, r3, #228
 4604 2316 1968     		ldr	r1, [r3]
 4605 2318 07F5B053 		add	r3, r7, #5632
 4606 231c 03F10E03 		add	r3, r3, #14
 4607 2320 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4608 2322 4748     		ldr	r0, .L303+4
 4609 2324 1346     		mov	r3, r2
 4610 2326 DB00     		lsls	r3, r3, #3
 4611 2328 9B1A     		subs	r3, r3, r2
 4612 232a 1B01     		lsls	r3, r3, #4
 4613 232c 0344     		add	r3, r3, r0
 4614 232e 03F58873 		add	r3, r3, #272
 4615 2332 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4616 2334 1846     		mov	r0, r3
 4617 2336 414A     		ldr	r2, .L303
 4618 2338 0346     		mov	r3, r0
 4619 233a 5B00     		lsls	r3, r3, #1
 4620 233c 0344     		add	r3, r3, r0
 4621 233e 1B01     		lsls	r3, r3, #4
 4622 2340 1344     		add	r3, r3, r2
 4623 2342 03F29513 		addw	r3, r3, #405
 4624 2346 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4625 2348 41FA03F2 		asr	r2, r1, r3
 4626 234c 07F11803 		add	r3, r7, #24
 4627 2350 043B     		subs	r3, r3, #4
 4628 2352 1A60     		str	r2, [r3]
 662:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 4629              		.loc 1 662 0
 4630 2354 0023     		movs	r3, #0
 4631 2356 07F5B052 		add	r2, r7, #5632
 4632 235a 02F11602 		add	r2, r2, #22
 4633 235e 1370     		strb	r3, [r2]
 4634 2360 2EE0     		b	.L193
 4635              	.L194:
 663:..\src/command_processing.c ****                             packet_data[(4 + PARAM_BYTE_SLOT*idx) + sod - j -1] = ((char*)(&aux_int
 4636              		.loc 1 663 0 discriminator 3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 112


 4637 2362 07F5B053 		add	r3, r7, #5632
 4638 2366 03F11503 		add	r3, r3, #21
 4639 236a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4640 236c 3222     		movs	r2, #50
 4641 236e 02FB03F3 		mul	r3, r2, r3
 4642 2372 1A1D     		adds	r2, r3, #4
 4643 2374 07F5B053 		add	r3, r7, #5632
 4644 2378 03F11303 		add	r3, r3, #19
 4645 237c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4646 237e 1A44     		add	r2, r2, r3
 4647 2380 07F5B053 		add	r3, r7, #5632
 4648 2384 03F11603 		add	r3, r3, #22
 4649 2388 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4650 238a D31A     		subs	r3, r2, r3
 4651 238c 5A1E     		subs	r2, r3, #1
 4652 238e 07F5B053 		add	r3, r7, #5632
 4653 2392 03F11603 		add	r3, r3, #22
 4654 2396 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4655 2398 07F11803 		add	r3, r7, #24
 4656 239c 043B     		subs	r3, r3, #4
 4657 239e 0B44     		add	r3, r3, r1
 4658 23a0 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4659 23a2 07F15803 		add	r3, r7, #88
 4660 23a6 043B     		subs	r3, r3, #4
 4661 23a8 9954     		strb	r1, [r3, r2]
 662:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 4662              		.loc 1 662 0 discriminator 3
 4663 23aa 07F5B053 		add	r3, r7, #5632
 4664 23ae 03F11603 		add	r3, r3, #22
 4665 23b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4666 23b4 0133     		adds	r3, r3, #1
 4667 23b6 07F5B052 		add	r2, r7, #5632
 4668 23ba 02F11602 		add	r2, r2, #22
 4669 23be 1370     		strb	r3, [r2]
 4670              	.L193:
 662:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 4671              		.loc 1 662 0 is_stmt 0 discriminator 1
 4672 23c0 07F5B053 		add	r3, r7, #5632
 4673 23c4 03F11603 		add	r3, r3, #22
 4674 23c8 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4675 23ca 07F5B053 		add	r3, r7, #5632
 4676 23ce 03F11303 		add	r3, r3, #19
 4677 23d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4678 23d4 9A42     		cmp	r2, r3
 4679 23d6 C4D3     		bcc	.L194
 664:..\src/command_processing.c ****                         }
 665:..\src/command_processing.c ****                         aux_int32 = (c_mem.motor[SECOND_MOTOR_IDX].pos_lim_sup >> c_mem.enc[g_mem.m
 4680              		.loc 1 665 0 is_stmt 1
 4681 23d8 07F5B053 		add	r3, r7, #5632
 4682 23dc 03F10E03 		add	r3, r3, #14
 4683 23e0 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4684 23e2 1649     		ldr	r1, .L303
 4685 23e4 1346     		mov	r3, r2
 4686 23e6 DB00     		lsls	r3, r3, #3
 4687 23e8 9B1A     		subs	r3, r3, r2
 4688 23ea 1B01     		lsls	r3, r3, #4
 4689 23ec 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 113


 4690 23ee E833     		adds	r3, r3, #232
 4691 23f0 1968     		ldr	r1, [r3]
 4692 23f2 07F5B053 		add	r3, r7, #5632
 4693 23f6 03F10E03 		add	r3, r3, #14
 4694 23fa 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4695 23fc 1048     		ldr	r0, .L303+4
 4696 23fe 1346     		mov	r3, r2
 4697 2400 DB00     		lsls	r3, r3, #3
 4698 2402 9B1A     		subs	r3, r3, r2
 4699 2404 1B01     		lsls	r3, r3, #4
 4700 2406 0344     		add	r3, r3, r0
 4701 2408 03F58873 		add	r3, r3, #272
 4702 240c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4703 240e 1846     		mov	r0, r3
 4704 2410 0A4A     		ldr	r2, .L303
 4705 2412 0346     		mov	r3, r0
 4706 2414 5B00     		lsls	r3, r3, #1
 4707 2416 0344     		add	r3, r3, r0
 4708 2418 1B01     		lsls	r3, r3, #4
 4709 241a 1344     		add	r3, r3, r2
 4710 241c 03F29513 		addw	r3, r3, #405
 4711 2420 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4712 2422 41FA03F2 		asr	r2, r1, r3
 4713 2426 07F11803 		add	r3, r7, #24
 4714 242a 043B     		subs	r3, r3, #4
 4715 242c 1A60     		str	r2, [r3]
 666:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 4716              		.loc 1 666 0
 4717 242e 0023     		movs	r3, #0
 4718 2430 07F5B052 		add	r2, r7, #5632
 4719 2434 02F11602 		add	r2, r2, #22
 4720 2438 1370     		strb	r3, [r2]
 4721 243a 38E0     		b	.L195
 4722              	.L304:
 4723              		.align	2
 4724              	.L303:
 4725 243c 00000000 		.word	c_mem
 4726 2440 00000000 		.word	g_mem
 4727              	.L196:
 667:..\src/command_processing.c ****                             packet_data[(4 + PARAM_BYTE_SLOT*idx + sod) + sod - j -1] = ((char*)(&a
 4728              		.loc 1 667 0 discriminator 3
 4729 2444 07F5B053 		add	r3, r7, #5632
 4730 2448 03F11503 		add	r3, r3, #21
 4731 244c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4732 244e 3222     		movs	r2, #50
 4733 2450 02FB03F3 		mul	r3, r2, r3
 4734 2454 1A1D     		adds	r2, r3, #4
 4735 2456 07F5B053 		add	r3, r7, #5632
 4736 245a 03F11303 		add	r3, r3, #19
 4737 245e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4738 2460 1A44     		add	r2, r2, r3
 4739 2462 07F5B053 		add	r3, r7, #5632
 4740 2466 03F11303 		add	r3, r3, #19
 4741 246a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4742 246c 1A44     		add	r2, r2, r3
 4743 246e 07F5B053 		add	r3, r7, #5632
 4744 2472 03F11603 		add	r3, r3, #22
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 114


 4745 2476 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4746 2478 D31A     		subs	r3, r2, r3
 4747 247a 5A1E     		subs	r2, r3, #1
 4748 247c 07F5B053 		add	r3, r7, #5632
 4749 2480 03F11603 		add	r3, r3, #22
 4750 2484 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4751 2486 07F11803 		add	r3, r7, #24
 4752 248a 043B     		subs	r3, r3, #4
 4753 248c 0B44     		add	r3, r3, r1
 4754 248e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4755 2490 07F15803 		add	r3, r7, #88
 4756 2494 043B     		subs	r3, r3, #4
 4757 2496 9954     		strb	r1, [r3, r2]
 666:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 4758              		.loc 1 666 0 discriminator 3
 4759 2498 07F5B053 		add	r3, r7, #5632
 4760 249c 03F11603 		add	r3, r3, #22
 4761 24a0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4762 24a2 0133     		adds	r3, r3, #1
 4763 24a4 07F5B052 		add	r2, r7, #5632
 4764 24a8 02F11602 		add	r2, r2, #22
 4765 24ac 1370     		strb	r3, [r2]
 4766              	.L195:
 666:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 4767              		.loc 1 666 0 is_stmt 0 discriminator 1
 4768 24ae 07F5B053 		add	r3, r7, #5632
 4769 24b2 03F11603 		add	r3, r3, #22
 4770 24b6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4771 24b8 07F5B053 		add	r3, r7, #5632
 4772 24bc 03F11303 		add	r3, r3, #19
 4773 24c0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4774 24c2 9A42     		cmp	r2, r3
 4775 24c4 BED3     		bcc	.L196
 668:..\src/command_processing.c ****                         }
 669:..\src/command_processing.c ****                         break;
 4776              		.loc 1 669 0 is_stmt 1
 4777 24c6 00E0     		b	.L113
 4778              	.L283:
 670:..\src/command_processing.c ****                         
 671:..\src/command_processing.c ****                     default:
 672:..\src/command_processing.c ****                         break;
 4779              		.loc 1 672 0
 4780 24c8 00BF     		nop
 4781              	.L113:
 673:..\src/command_processing.c ****                 }
 674:..\src/command_processing.c **** // END OF MODIFY CUSTOM PARAM  
 675:..\src/command_processing.c ****                         
 676:..\src/command_processing.c **** // DO NOT MODIFY THE FUNCTION UNDER THIS LINE
 677:..\src/command_processing.c ****         }
 678:..\src/command_processing.c ****         
 679:..\src/command_processing.c ****         sprintf(aux_str, (char*)PARAMS_STR[idx]);
 4782              		.loc 1 679 0
 4783 24ca 07F5B053 		add	r3, r7, #5632
 4784 24ce 03F11503 		add	r3, r3, #21
 4785 24d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4786 24d4 9B00     		lsls	r3, r3, #2
 4787 24d6 07F5B152 		add	r2, r7, #5664
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 115


 4788 24da 02F11402 		add	r2, r2, #20
 4789 24de 1268     		ldr	r2, [r2]
 4790 24e0 1344     		add	r3, r3, r2
 4791 24e2 1A68     		ldr	r2, [r3]
 4792 24e4 07F13803 		add	r3, r7, #56
 4793 24e8 183B     		subs	r3, r3, #24
 4794 24ea 1146     		mov	r1, r2
 4795 24ec 1846     		mov	r0, r3
 4796 24ee FFF7FEFF 		bl	sprintf
 680:..\src/command_processing.c ****         string_lenght = strlen(aux_str);
 4797              		.loc 1 680 0
 4798 24f2 07F13803 		add	r3, r7, #56
 4799 24f6 183B     		subs	r3, r3, #24
 4800 24f8 1846     		mov	r0, r3
 4801 24fa FFF7FEFF 		bl	strlen
 4802 24fe 0346     		mov	r3, r0
 4803 2500 07F5B052 		add	r2, r7, #5632
 4804 2504 02F11202 		add	r2, r2, #18
 4805 2508 1370     		strb	r3, [r2]
 681:..\src/command_processing.c ****         
 682:..\src/command_processing.c ****         // Parameters with a menu
 683:..\src/command_processing.c ****         if (TYPES[idx] == TYPE_FLAG){
 4806              		.loc 1 683 0
 4807 250a 07F5B053 		add	r3, r7, #5632
 4808 250e 03F11503 		add	r3, r3, #21
 4809 2512 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4810 2514 07F11803 		add	r3, r7, #24
 4811 2518 103B     		subs	r3, r3, #16
 4812 251a 1B68     		ldr	r3, [r3]
 4813 251c 1344     		add	r3, r3, r2
 4814 251e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4815 2520 002B     		cmp	r3, #0
 4816 2522 40F0D984 		bne	.L197
 684:..\src/command_processing.c ****             switch(NUM_MENU[idx_menu]){
 4817              		.loc 1 684 0
 4818 2526 07F5B053 		add	r3, r7, #5632
 4819 252a 03F11403 		add	r3, r3, #20
 4820 252e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4821 2530 07F5B152 		add	r2, r7, #5664
 4822 2534 02F11002 		add	r2, r2, #16
 4823 2538 1268     		ldr	r2, [r2]
 4824 253a 1344     		add	r3, r3, r2
 4825 253c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4826 253e 013B     		subs	r3, r3, #1
 4827 2540 0B2B     		cmp	r3, #11
 4828 2542 00F2BB84 		bhi	.L198
 4829 2546 01A2     		adr	r2, .L200
 4830 2548 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4831              		.p2align 2
 4832              	.L200:
 4833 254c 7D250000 		.word	.L199+1
 4834 2550 27270000 		.word	.L201+1
 4835 2554 FD270000 		.word	.L202+1
 4836 2558 51280000 		.word	.L203+1
 4837 255c B5280000 		.word	.L204+1
 4838 2560 11290000 		.word	.L205+1
 4839 2564 2D2A0000 		.word	.L206+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 116


 4840 2568 B52A0000 		.word	.L207+1
 4841 256c 492B0000 		.word	.L208+1
 4842 2570 F32B0000 		.word	.L209+1
 4843 2574 472D0000 		.word	.L210+1
 4844 2578 3B2E0000 		.word	.L211+1
 4845              		.p2align 1
 4846              	.L199:
 685:..\src/command_processing.c ****                 case 1:     // input mode menu
 686:..\src/command_processing.c ****                     switch(*m_addr) {
 4847              		.loc 1 686 0
 4848 257c 07F5B053 		add	r3, r7, #5632
 4849 2580 03F10803 		add	r3, r3, #8
 4850 2584 1B68     		ldr	r3, [r3]
 4851 2586 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4852 2588 072B     		cmp	r3, #7
 4853 258a 00F29084 		bhi	.L284
 4854 258e 01A2     		adr	r2, .L214
 4855 2590 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4856              		.p2align 2
 4857              	.L214:
 4858 2594 B5250000 		.word	.L213+1
 4859 2598 D9250000 		.word	.L215+1
 4860 259c FF250000 		.word	.L216+1
 4861 25a0 2D260000 		.word	.L217+1
 4862 25a4 59260000 		.word	.L218+1
 4863 25a8 83260000 		.word	.L219+1
 4864 25ac B7260000 		.word	.L220+1
 4865 25b0 E1260000 		.word	.L221+1
 4866              		.p2align 1
 4867              	.L213:
 687:..\src/command_processing.c ****                         case INPUT_MODE_EXTERNAL:
 688:..\src/command_processing.c ****                             strcat(aux_str, " Usb");
 4868              		.loc 1 688 0
 4869 25b4 07F13803 		add	r3, r7, #56
 4870 25b8 183B     		subs	r3, r3, #24
 4871 25ba 1846     		mov	r0, r3
 4872 25bc FFF7FEFF 		bl	strlen
 4873 25c0 0346     		mov	r3, r0
 4874 25c2 1A46     		mov	r2, r3
 4875 25c4 07F13803 		add	r3, r7, #56
 4876 25c8 183B     		subs	r3, r3, #24
 4877 25ca 1344     		add	r3, r3, r2
 4878 25cc DA4A     		ldr	r2, .L305
 4879 25ce 1068     		ldr	r0, [r2]	@ unaligned
 4880 25d0 1860     		str	r0, [r3]	@ unaligned
 4881 25d2 1279     		ldrb	r2, [r2, #4]
 4882 25d4 1A71     		strb	r2, [r3, #4]
 689:..\src/command_processing.c ****                         break;
 4883              		.loc 1 689 0
 4884 25d6 A5E0     		b	.L212
 4885              	.L215:
 690:..\src/command_processing.c ****                         case INPUT_MODE_ENCODER3:
 691:..\src/command_processing.c ****                             strcat(aux_str, " Handle");
 4886              		.loc 1 691 0
 4887 25d8 07F13803 		add	r3, r7, #56
 4888 25dc 183B     		subs	r3, r3, #24
 4889 25de 1846     		mov	r0, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 117


 4890 25e0 FFF7FEFF 		bl	strlen
 4891 25e4 0346     		mov	r3, r0
 4892 25e6 1A46     		mov	r2, r3
 4893 25e8 07F13803 		add	r3, r7, #56
 4894 25ec 183B     		subs	r3, r3, #24
 4895 25ee 1344     		add	r3, r3, r2
 4896 25f0 D249     		ldr	r1, .L305+4
 4897 25f2 1A46     		mov	r2, r3
 4898 25f4 0B46     		mov	r3, r1
 4899 25f6 03CB     		ldmia	r3!, {r0, r1}
 4900 25f8 1060     		str	r0, [r2]	@ unaligned
 4901 25fa 5160     		str	r1, [r2, #4]	@ unaligned
 692:..\src/command_processing.c ****                         break;
 4902              		.loc 1 692 0
 4903 25fc 92E0     		b	.L212
 4904              	.L216:
 693:..\src/command_processing.c ****                         case INPUT_MODE_EMG_PROPORTIONAL:
 694:..\src/command_processing.c ****                             strcat(aux_str, " EMG proportional");
 4905              		.loc 1 694 0
 4906 25fe 07F13803 		add	r3, r7, #56
 4907 2602 183B     		subs	r3, r3, #24
 4908 2604 1846     		mov	r0, r3
 4909 2606 FFF7FEFF 		bl	strlen
 4910 260a 0346     		mov	r3, r0
 4911 260c 1A46     		mov	r2, r3
 4912 260e 07F13803 		add	r3, r7, #56
 4913 2612 183B     		subs	r3, r3, #24
 4914 2614 1344     		add	r3, r3, r2
 4915 2616 CA4A     		ldr	r2, .L305+8
 4916 2618 1D46     		mov	r5, r3
 4917 261a 1446     		mov	r4, r2
 4918 261c 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 4919 261e 2860     		str	r0, [r5]	@ unaligned
 4920 2620 6960     		str	r1, [r5, #4]	@ unaligned
 4921 2622 AA60     		str	r2, [r5, #8]	@ unaligned
 4922 2624 EB60     		str	r3, [r5, #12]	@ unaligned
 4923 2626 2388     		ldrh	r3, [r4]	@ unaligned
 4924 2628 2B82     		strh	r3, [r5, #16]	@ unaligned
 695:..\src/command_processing.c ****                         break;
 4925              		.loc 1 695 0
 4926 262a 7BE0     		b	.L212
 4927              	.L217:
 696:..\src/command_processing.c ****                         case INPUT_MODE_EMG_INTEGRAL:
 697:..\src/command_processing.c ****                             strcat(aux_str, " EMG integral");
 4928              		.loc 1 697 0
 4929 262c 07F13803 		add	r3, r7, #56
 4930 2630 183B     		subs	r3, r3, #24
 4931 2632 1846     		mov	r0, r3
 4932 2634 FFF7FEFF 		bl	strlen
 4933 2638 0346     		mov	r3, r0
 4934 263a 1A46     		mov	r2, r3
 4935 263c 07F13803 		add	r3, r7, #56
 4936 2640 183B     		subs	r3, r3, #24
 4937 2642 1344     		add	r3, r3, r2
 4938 2644 BF4A     		ldr	r2, .L305+12
 4939 2646 1C46     		mov	r4, r3
 4940 2648 1346     		mov	r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 118


 4941 264a 07CB     		ldmia	r3!, {r0, r1, r2}
 4942 264c 2060     		str	r0, [r4]	@ unaligned
 4943 264e 6160     		str	r1, [r4, #4]	@ unaligned
 4944 2650 A260     		str	r2, [r4, #8]	@ unaligned
 4945 2652 1B88     		ldrh	r3, [r3]	@ unaligned
 4946 2654 A381     		strh	r3, [r4, #12]	@ unaligned
 698:..\src/command_processing.c ****                         break;
 4947              		.loc 1 698 0
 4948 2656 65E0     		b	.L212
 4949              	.L218:
 699:..\src/command_processing.c ****                         case INPUT_MODE_EMG_FCFS:
 700:..\src/command_processing.c ****                             strcat(aux_str, " EMG FCFS");
 4950              		.loc 1 700 0
 4951 2658 07F13803 		add	r3, r7, #56
 4952 265c 183B     		subs	r3, r3, #24
 4953 265e 1846     		mov	r0, r3
 4954 2660 FFF7FEFF 		bl	strlen
 4955 2664 0346     		mov	r3, r0
 4956 2666 1A46     		mov	r2, r3
 4957 2668 07F13803 		add	r3, r7, #56
 4958 266c 183B     		subs	r3, r3, #24
 4959 266e 1344     		add	r3, r3, r2
 4960 2670 B549     		ldr	r1, .L305+16
 4961 2672 1A46     		mov	r2, r3
 4962 2674 0B46     		mov	r3, r1
 4963 2676 03CB     		ldmia	r3!, {r0, r1}
 4964 2678 1060     		str	r0, [r2]	@ unaligned
 4965 267a 5160     		str	r1, [r2, #4]	@ unaligned
 4966 267c 1B88     		ldrh	r3, [r3]	@ unaligned
 4967 267e 1381     		strh	r3, [r2, #8]	@ unaligned
 701:..\src/command_processing.c ****                         break;
 4968              		.loc 1 701 0
 4969 2680 50E0     		b	.L212
 4970              	.L219:
 702:..\src/command_processing.c ****                         case INPUT_MODE_EMG_FCFS_ADV:
 703:..\src/command_processing.c ****                             strcat(aux_str, " EMG FCFS Advanced");
 4971              		.loc 1 703 0
 4972 2682 07F13803 		add	r3, r7, #56
 4973 2686 183B     		subs	r3, r3, #24
 4974 2688 1846     		mov	r0, r3
 4975 268a FFF7FEFF 		bl	strlen
 4976 268e 0346     		mov	r3, r0
 4977 2690 1A46     		mov	r2, r3
 4978 2692 07F13803 		add	r3, r7, #56
 4979 2696 183B     		subs	r3, r3, #24
 4980 2698 1344     		add	r3, r3, r2
 4981 269a AC4A     		ldr	r2, .L305+20
 4982 269c 1D46     		mov	r5, r3
 4983 269e 1446     		mov	r4, r2
 4984 26a0 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 4985 26a2 2860     		str	r0, [r5]	@ unaligned
 4986 26a4 6960     		str	r1, [r5, #4]	@ unaligned
 4987 26a6 AA60     		str	r2, [r5, #8]	@ unaligned
 4988 26a8 EB60     		str	r3, [r5, #12]	@ unaligned
 4989 26aa 2388     		ldrh	r3, [r4]	@ unaligned
 4990 26ac A278     		ldrb	r2, [r4, #2]
 4991 26ae 2B82     		strh	r3, [r5, #16]	@ unaligned
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 119


 4992 26b0 1346     		mov	r3, r2
 4993 26b2 AB74     		strb	r3, [r5, #18]
 704:..\src/command_processing.c ****                         break;
 4994              		.loc 1 704 0
 4995 26b4 36E0     		b	.L212
 4996              	.L220:
 705:..\src/command_processing.c ****                         case INPUT_MODE_JOYSTICK:
 706:..\src/command_processing.c ****                             strcat(aux_str, " Joystick");
 4997              		.loc 1 706 0
 4998 26b6 07F13803 		add	r3, r7, #56
 4999 26ba 183B     		subs	r3, r3, #24
 5000 26bc 1846     		mov	r0, r3
 5001 26be FFF7FEFF 		bl	strlen
 5002 26c2 0346     		mov	r3, r0
 5003 26c4 1A46     		mov	r2, r3
 5004 26c6 07F13803 		add	r3, r7, #56
 5005 26ca 183B     		subs	r3, r3, #24
 5006 26cc 1344     		add	r3, r3, r2
 5007 26ce A049     		ldr	r1, .L305+24
 5008 26d0 1A46     		mov	r2, r3
 5009 26d2 0B46     		mov	r3, r1
 5010 26d4 03CB     		ldmia	r3!, {r0, r1}
 5011 26d6 1060     		str	r0, [r2]	@ unaligned
 5012 26d8 5160     		str	r1, [r2, #4]	@ unaligned
 5013 26da 1B88     		ldrh	r3, [r3]	@ unaligned
 5014 26dc 1381     		strh	r3, [r2, #8]	@ unaligned
 707:..\src/command_processing.c ****                         break;
 5015              		.loc 1 707 0
 5016 26de 21E0     		b	.L212
 5017              	.L221:
 708:..\src/command_processing.c ****                         case INPUT_MODE_EMG_PROPORTIONAL_NC:
 709:..\src/command_processing.c ****                             strcat(aux_str, " EMG proportional Normally Closed");
 5018              		.loc 1 709 0
 5019 26e0 07F13803 		add	r3, r7, #56
 5020 26e4 183B     		subs	r3, r3, #24
 5021 26e6 1846     		mov	r0, r3
 5022 26e8 FFF7FEFF 		bl	strlen
 5023 26ec 0346     		mov	r3, r0
 5024 26ee 1A46     		mov	r2, r3
 5025 26f0 07F13803 		add	r3, r7, #56
 5026 26f4 183B     		subs	r3, r3, #24
 5027 26f6 1344     		add	r3, r3, r2
 5028 26f8 964A     		ldr	r2, .L305+28
 5029 26fa 1446     		mov	r4, r2
 5030 26fc 9E46     		mov	lr, r3
 5031 26fe 04F1200C 		add	ip, r4, #32
 5032              	.L222:
 5033 2702 7546     		mov	r5, lr
 5034 2704 2646     		mov	r6, r4
 5035 2706 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 5036 2708 2860     		str	r0, [r5]	@ unaligned
 5037 270a 6960     		str	r1, [r5, #4]	@ unaligned
 5038 270c AA60     		str	r2, [r5, #8]	@ unaligned
 5039 270e EB60     		str	r3, [r5, #12]	@ unaligned
 5040 2710 1034     		adds	r4, r4, #16
 5041 2712 0EF1100E 		add	lr, lr, #16
 5042 2716 6445     		cmp	r4, ip
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 120


 5043 2718 F3D1     		bne	.L222
 5044 271a 7246     		mov	r2, lr
 5045 271c 2346     		mov	r3, r4
 5046 271e 1B88     		ldrh	r3, [r3]	@ unaligned
 5047 2720 1380     		strh	r3, [r2]	@ unaligned
 710:..\src/command_processing.c ****                         break;
 5048              		.loc 1 710 0
 5049 2722 00BF     		nop
 5050              	.L212:
 711:..\src/command_processing.c ****                     }
 712:..\src/command_processing.c ****                     break;
 5051              		.loc 1 712 0
 5052 2724 C3E3     		b	.L284
 5053              	.L201:
 713:..\src/command_processing.c ****                 case 2:     // control mode menu
 714:..\src/command_processing.c ****                     switch(*m_addr){
 5054              		.loc 1 714 0
 5055 2726 07F5B053 		add	r3, r7, #5632
 5056 272a 03F10803 		add	r3, r3, #8
 5057 272e 1B68     		ldr	r3, [r3]
 5058 2730 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5059 2732 032B     		cmp	r3, #3
 5060 2734 00F2BD83 		bhi	.L285
 5061 2738 01A2     		adr	r2, .L225
 5062 273a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5063 273e 00BF     		.p2align 2
 5064              	.L225:
 5065 2740 51270000 		.word	.L224+1
 5066 2744 7B270000 		.word	.L226+1
 5067 2748 9F270000 		.word	.L227+1
 5068 274c C9270000 		.word	.L228+1
 5069              		.p2align 1
 5070              	.L224:
 715:..\src/command_processing.c ****                         case CONTROL_ANGLE:
 716:..\src/command_processing.c ****                             strcat(aux_str, " Position");
 5071              		.loc 1 716 0
 5072 2750 07F13803 		add	r3, r7, #56
 5073 2754 183B     		subs	r3, r3, #24
 5074 2756 1846     		mov	r0, r3
 5075 2758 FFF7FEFF 		bl	strlen
 5076 275c 0346     		mov	r3, r0
 5077 275e 1A46     		mov	r2, r3
 5078 2760 07F13803 		add	r3, r7, #56
 5079 2764 183B     		subs	r3, r3, #24
 5080 2766 1344     		add	r3, r3, r2
 5081 2768 7B49     		ldr	r1, .L305+32
 5082 276a 1A46     		mov	r2, r3
 5083 276c 0B46     		mov	r3, r1
 5084 276e 03CB     		ldmia	r3!, {r0, r1}
 5085 2770 1060     		str	r0, [r2]	@ unaligned
 5086 2772 5160     		str	r1, [r2, #4]	@ unaligned
 5087 2774 1B88     		ldrh	r3, [r3]	@ unaligned
 5088 2776 1381     		strh	r3, [r2, #8]	@ unaligned
 717:..\src/command_processing.c ****                         break;
 5089              		.loc 1 717 0
 5090 2778 3FE0     		b	.L223
 5091              	.L226:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 121


 718:..\src/command_processing.c ****                         case CONTROL_PWM:
 719:..\src/command_processing.c ****                             strcat(aux_str, " PWM");
 5092              		.loc 1 719 0
 5093 277a 07F13803 		add	r3, r7, #56
 5094 277e 183B     		subs	r3, r3, #24
 5095 2780 1846     		mov	r0, r3
 5096 2782 FFF7FEFF 		bl	strlen
 5097 2786 0346     		mov	r3, r0
 5098 2788 1A46     		mov	r2, r3
 5099 278a 07F13803 		add	r3, r7, #56
 5100 278e 183B     		subs	r3, r3, #24
 5101 2790 1344     		add	r3, r3, r2
 5102 2792 724A     		ldr	r2, .L305+36
 5103 2794 1068     		ldr	r0, [r2]	@ unaligned
 5104 2796 1860     		str	r0, [r3]	@ unaligned
 5105 2798 1279     		ldrb	r2, [r2, #4]
 5106 279a 1A71     		strb	r2, [r3, #4]
 720:..\src/command_processing.c ****                         break;
 5107              		.loc 1 720 0
 5108 279c 2DE0     		b	.L223
 5109              	.L227:
 721:..\src/command_processing.c ****                         case CONTROL_CURRENT:
 722:..\src/command_processing.c ****                             strcat(aux_str, " Current");
 5110              		.loc 1 722 0
 5111 279e 07F13803 		add	r3, r7, #56
 5112 27a2 183B     		subs	r3, r3, #24
 5113 27a4 1846     		mov	r0, r3
 5114 27a6 FFF7FEFF 		bl	strlen
 5115 27aa 0346     		mov	r3, r0
 5116 27ac 1A46     		mov	r2, r3
 5117 27ae 07F13803 		add	r3, r7, #56
 5118 27b2 183B     		subs	r3, r3, #24
 5119 27b4 1344     		add	r3, r3, r2
 5120 27b6 6A49     		ldr	r1, .L305+40
 5121 27b8 1A46     		mov	r2, r3
 5122 27ba 0B46     		mov	r3, r1
 5123 27bc 03CB     		ldmia	r3!, {r0, r1}
 5124 27be 1060     		str	r0, [r2]	@ unaligned
 5125 27c0 5160     		str	r1, [r2, #4]	@ unaligned
 5126 27c2 1B78     		ldrb	r3, [r3]
 5127 27c4 1372     		strb	r3, [r2, #8]
 723:..\src/command_processing.c ****                         break;
 5128              		.loc 1 723 0
 5129 27c6 18E0     		b	.L223
 5130              	.L228:
 724:..\src/command_processing.c ****                         case CURR_AND_POS_CONTROL:
 725:..\src/command_processing.c ****                             strcat(aux_str, " Position and Current");
 5131              		.loc 1 725 0
 5132 27c8 07F13803 		add	r3, r7, #56
 5133 27cc 183B     		subs	r3, r3, #24
 5134 27ce 1846     		mov	r0, r3
 5135 27d0 FFF7FEFF 		bl	strlen
 5136 27d4 0346     		mov	r3, r0
 5137 27d6 1A46     		mov	r2, r3
 5138 27d8 07F13803 		add	r3, r7, #56
 5139 27dc 183B     		subs	r3, r3, #24
 5140 27de 1344     		add	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 122


 5141 27e0 604A     		ldr	r2, .L305+44
 5142 27e2 1D46     		mov	r5, r3
 5143 27e4 1446     		mov	r4, r2
 5144 27e6 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 5145 27e8 2860     		str	r0, [r5]	@ unaligned
 5146 27ea 6960     		str	r1, [r5, #4]	@ unaligned
 5147 27ec AA60     		str	r2, [r5, #8]	@ unaligned
 5148 27ee EB60     		str	r3, [r5, #12]	@ unaligned
 5149 27f0 2068     		ldr	r0, [r4]	@ unaligned
 5150 27f2 2861     		str	r0, [r5, #16]	@ unaligned
 5151 27f4 A388     		ldrh	r3, [r4, #4]	@ unaligned
 5152 27f6 AB82     		strh	r3, [r5, #20]	@ unaligned
 726:..\src/command_processing.c ****                         break;
 5153              		.loc 1 726 0
 5154 27f8 00BF     		nop
 5155              	.L223:
 727:..\src/command_processing.c ****                     }
 728:..\src/command_processing.c ****                     break;
 5156              		.loc 1 728 0
 5157 27fa 5AE3     		b	.L285
 5158              	.L202:
 729:..\src/command_processing.c ****                 case 3:     // yes/no menu
 730:..\src/command_processing.c ****                     if(*m_addr){
 5159              		.loc 1 730 0
 5160 27fc 07F5B053 		add	r3, r7, #5632
 5161 2800 03F10803 		add	r3, r3, #8
 5162 2804 1B68     		ldr	r3, [r3]
 5163 2806 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5164 2808 002B     		cmp	r3, #0
 5165 280a 11D0     		beq	.L229
 731:..\src/command_processing.c ****                         strcat(aux_str, " YES\0");
 5166              		.loc 1 731 0
 5167 280c 07F13803 		add	r3, r7, #56
 5168 2810 183B     		subs	r3, r3, #24
 5169 2812 1846     		mov	r0, r3
 5170 2814 FFF7FEFF 		bl	strlen
 5171 2818 0346     		mov	r3, r0
 5172 281a 1A46     		mov	r2, r3
 5173 281c 07F13803 		add	r3, r7, #56
 5174 2820 183B     		subs	r3, r3, #24
 5175 2822 1344     		add	r3, r3, r2
 5176 2824 504A     		ldr	r2, .L305+48
 5177 2826 1068     		ldr	r0, [r2]	@ unaligned
 5178 2828 1860     		str	r0, [r3]	@ unaligned
 5179 282a 1279     		ldrb	r2, [r2, #4]
 5180 282c 1A71     		strb	r2, [r3, #4]
 732:..\src/command_processing.c ****                     }
 733:..\src/command_processing.c ****                     else {
 734:..\src/command_processing.c ****                         strcat(aux_str, " NO\0");
 735:..\src/command_processing.c ****                     }
 736:..\src/command_processing.c ****                     break;    
 5181              		.loc 1 736 0
 5182 282e 45E3     		b	.L198
 5183              	.L229:
 734:..\src/command_processing.c ****                     }
 5184              		.loc 1 734 0
 5185 2830 07F13803 		add	r3, r7, #56
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 123


 5186 2834 183B     		subs	r3, r3, #24
 5187 2836 1846     		mov	r0, r3
 5188 2838 FFF7FEFF 		bl	strlen
 5189 283c 0346     		mov	r3, r0
 5190 283e 1A46     		mov	r2, r3
 5191 2840 07F13803 		add	r3, r7, #56
 5192 2844 183B     		subs	r3, r3, #24
 5193 2846 1344     		add	r3, r3, r2
 5194 2848 484A     		ldr	r2, .L305+52
 5195 284a 1068     		ldr	r0, [r2]	@ unaligned
 5196 284c 1860     		str	r0, [r3]	@ unaligned
 5197              		.loc 1 736 0
 5198 284e 35E3     		b	.L198
 5199              	.L203:
 737:..\src/command_processing.c ****                 case 4:     // right/lef menu
 738:..\src/command_processing.c ****                     switch(*m_addr){
 5200              		.loc 1 738 0
 5201 2850 07F5B053 		add	r3, r7, #5632
 5202 2854 03F10803 		add	r3, r3, #8
 5203 2858 1B68     		ldr	r3, [r3]
 5204 285a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5205 285c 002B     		cmp	r3, #0
 5206 285e 02D0     		beq	.L232
 5207 2860 012B     		cmp	r3, #1
 5208 2862 14D0     		beq	.L233
 739:..\src/command_processing.c ****                         case RIGHT_HAND:
 740:..\src/command_processing.c ****                             strcat(aux_str, " Right\0");
 741:..\src/command_processing.c ****                         break;
 742:..\src/command_processing.c ****                         case LEFT_HAND:
 743:..\src/command_processing.c ****                             strcat(aux_str, " Left\0");
 744:..\src/command_processing.c ****                         break;
 745:..\src/command_processing.c ****                     }
 746:..\src/command_processing.c ****                     break;
 5209              		.loc 1 746 0
 5210 2864 2AE3     		b	.L198
 5211              	.L232:
 740:..\src/command_processing.c ****                         break;
 5212              		.loc 1 740 0
 5213 2866 07F13803 		add	r3, r7, #56
 5214 286a 183B     		subs	r3, r3, #24
 5215 286c 1846     		mov	r0, r3
 5216 286e FFF7FEFF 		bl	strlen
 5217 2872 0346     		mov	r3, r0
 5218 2874 1A46     		mov	r2, r3
 5219 2876 07F13803 		add	r3, r7, #56
 5220 287a 183B     		subs	r3, r3, #24
 5221 287c 1344     		add	r3, r3, r2
 5222 287e 3C4A     		ldr	r2, .L305+56
 5223 2880 1068     		ldr	r0, [r2]	@ unaligned
 5224 2882 1860     		str	r0, [r3]	@ unaligned
 5225 2884 9188     		ldrh	r1, [r2, #4]	@ unaligned
 5226 2886 9279     		ldrb	r2, [r2, #6]
 5227 2888 9980     		strh	r1, [r3, #4]	@ unaligned
 5228 288a 9A71     		strb	r2, [r3, #6]
 741:..\src/command_processing.c ****                         case LEFT_HAND:
 5229              		.loc 1 741 0
 5230 288c 11E0     		b	.L231
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 124


 5231              	.L233:
 743:..\src/command_processing.c ****                         break;
 5232              		.loc 1 743 0
 5233 288e 07F13803 		add	r3, r7, #56
 5234 2892 183B     		subs	r3, r3, #24
 5235 2894 1846     		mov	r0, r3
 5236 2896 FFF7FEFF 		bl	strlen
 5237 289a 0346     		mov	r3, r0
 5238 289c 1A46     		mov	r2, r3
 5239 289e 07F13803 		add	r3, r7, #56
 5240 28a2 183B     		subs	r3, r3, #24
 5241 28a4 1344     		add	r3, r3, r2
 5242 28a6 334A     		ldr	r2, .L305+60
 5243 28a8 1068     		ldr	r0, [r2]	@ unaligned
 5244 28aa 1860     		str	r0, [r3]	@ unaligned
 5245 28ac 9288     		ldrh	r2, [r2, #4]	@ unaligned
 5246 28ae 9A80     		strh	r2, [r3, #4]	@ unaligned
 744:..\src/command_processing.c ****                     }
 5247              		.loc 1 744 0
 5248 28b0 00BF     		nop
 5249              	.L231:
 5250              		.loc 1 746 0
 5251 28b2 03E3     		b	.L198
 5252              	.L204:
 747:..\src/command_processing.c ****                 case 5:     // on/off menu
 748:..\src/command_processing.c ****                     switch(*m_addr){
 5253              		.loc 1 748 0
 5254 28b4 07F5B053 		add	r3, r7, #5632
 5255 28b8 03F10803 		add	r3, r3, #8
 5256 28bc 1B68     		ldr	r3, [r3]
 5257 28be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5258 28c0 002B     		cmp	r3, #0
 5259 28c2 02D0     		beq	.L235
 5260 28c4 012B     		cmp	r3, #1
 5261 28c6 12D0     		beq	.L236
 749:..\src/command_processing.c ****                         case 0:
 750:..\src/command_processing.c ****                             strcat(aux_str, " OFF\0");
 751:..\src/command_processing.c ****                         break;
 752:..\src/command_processing.c ****                         case 1:
 753:..\src/command_processing.c ****                             strcat(aux_str, " ON\0");
 754:..\src/command_processing.c ****                         break;
 755:..\src/command_processing.c ****                     }
 756:..\src/command_processing.c ****                     break;
 5262              		.loc 1 756 0
 5263 28c8 F8E2     		b	.L198
 5264              	.L235:
 750:..\src/command_processing.c ****                         break;
 5265              		.loc 1 750 0
 5266 28ca 07F13803 		add	r3, r7, #56
 5267 28ce 183B     		subs	r3, r3, #24
 5268 28d0 1846     		mov	r0, r3
 5269 28d2 FFF7FEFF 		bl	strlen
 5270 28d6 0346     		mov	r3, r0
 5271 28d8 1A46     		mov	r2, r3
 5272 28da 07F13803 		add	r3, r7, #56
 5273 28de 183B     		subs	r3, r3, #24
 5274 28e0 1344     		add	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 125


 5275 28e2 254A     		ldr	r2, .L305+64
 5276 28e4 1068     		ldr	r0, [r2]	@ unaligned
 5277 28e6 1860     		str	r0, [r3]	@ unaligned
 5278 28e8 1279     		ldrb	r2, [r2, #4]
 5279 28ea 1A71     		strb	r2, [r3, #4]
 751:..\src/command_processing.c ****                         case 1:
 5280              		.loc 1 751 0
 5281 28ec 0FE0     		b	.L234
 5282              	.L236:
 753:..\src/command_processing.c ****                         break;
 5283              		.loc 1 753 0
 5284 28ee 07F13803 		add	r3, r7, #56
 5285 28f2 183B     		subs	r3, r3, #24
 5286 28f4 1846     		mov	r0, r3
 5287 28f6 FFF7FEFF 		bl	strlen
 5288 28fa 0346     		mov	r3, r0
 5289 28fc 1A46     		mov	r2, r3
 5290 28fe 07F13803 		add	r3, r7, #56
 5291 2902 183B     		subs	r3, r3, #24
 5292 2904 1344     		add	r3, r3, r2
 5293 2906 1D4A     		ldr	r2, .L305+68
 5294 2908 1068     		ldr	r0, [r2]	@ unaligned
 5295 290a 1860     		str	r0, [r3]	@ unaligned
 754:..\src/command_processing.c ****                     }
 5296              		.loc 1 754 0
 5297 290c 00BF     		nop
 5298              	.L234:
 5299              		.loc 1 756 0
 5300 290e D5E2     		b	.L198
 5301              	.L205:
 757:..\src/command_processing.c ****                 case 6:     // expansion port menu
 758:..\src/command_processing.c ****                     switch(*m_addr){
 5302              		.loc 1 758 0
 5303 2910 07F5B053 		add	r3, r7, #5632
 5304 2914 03F10803 		add	r3, r3, #8
 5305 2918 1B68     		ldr	r3, [r3]
 5306 291a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5307 291c 032B     		cmp	r3, #3
 5308 291e 00F2CA82 		bhi	.L286
 5309 2922 01A2     		adr	r2, .L239
 5310 2924 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5311              		.p2align 2
 5312              	.L239:
 5313 2928 81290000 		.word	.L238+1
 5314 292c A5290000 		.word	.L240+1
 5315 2930 D1290000 		.word	.L241+1
 5316 2934 FF290000 		.word	.L242+1
 5317              		.p2align 1
 5318              	.L306:
 5319              		.align	2
 5320              	.L305:
 5321 2938 00000000 		.word	.LC88
 5322 293c 08000000 		.word	.LC89
 5323 2940 10000000 		.word	.LC90
 5324 2944 24000000 		.word	.LC91
 5325 2948 34000000 		.word	.LC92
 5326 294c 40000000 		.word	.LC93
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 126


 5327 2950 54000000 		.word	.LC94
 5328 2954 60000000 		.word	.LC95
 5329 2958 84000000 		.word	.LC96
 5330 295c 90000000 		.word	.LC97
 5331 2960 98000000 		.word	.LC98
 5332 2964 A4000000 		.word	.LC99
 5333 2968 BC000000 		.word	.LC100
 5334 296c C4000000 		.word	.LC101
 5335 2970 CC000000 		.word	.LC102
 5336 2974 D4000000 		.word	.LC103
 5337 2978 DC000000 		.word	.LC104
 5338 297c E4000000 		.word	.LC105
 5339              	.L238:
 759:..\src/command_processing.c ****                         case EXP_NONE:
 760:..\src/command_processing.c ****                             strcat(aux_str, " None\0");
 5340              		.loc 1 760 0
 5341 2980 07F13803 		add	r3, r7, #56
 5342 2984 183B     		subs	r3, r3, #24
 5343 2986 1846     		mov	r0, r3
 5344 2988 FFF7FEFF 		bl	strlen
 5345 298c 0346     		mov	r3, r0
 5346 298e 1A46     		mov	r2, r3
 5347 2990 07F13803 		add	r3, r7, #56
 5348 2994 183B     		subs	r3, r3, #24
 5349 2996 1344     		add	r3, r3, r2
 5350 2998 CD4A     		ldr	r2, .L307
 5351 299a 1068     		ldr	r0, [r2]	@ unaligned
 5352 299c 1860     		str	r0, [r3]	@ unaligned
 5353 299e 9288     		ldrh	r2, [r2, #4]	@ unaligned
 5354 29a0 9A80     		strh	r2, [r3, #4]	@ unaligned
 761:..\src/command_processing.c ****                             break;
 5355              		.loc 1 761 0
 5356 29a2 42E0     		b	.L237
 5357              	.L240:
 762:..\src/command_processing.c ****                         case EXP_SD_RTC:
 763:..\src/command_processing.c ****                             strcat(aux_str, " SD/RTC board\0");
 5358              		.loc 1 763 0
 5359 29a4 07F13803 		add	r3, r7, #56
 5360 29a8 183B     		subs	r3, r3, #24
 5361 29aa 1846     		mov	r0, r3
 5362 29ac FFF7FEFF 		bl	strlen
 5363 29b0 0346     		mov	r3, r0
 5364 29b2 1A46     		mov	r2, r3
 5365 29b4 07F13803 		add	r3, r7, #56
 5366 29b8 183B     		subs	r3, r3, #24
 5367 29ba 1344     		add	r3, r3, r2
 5368 29bc C54A     		ldr	r2, .L307+4
 5369 29be 1C46     		mov	r4, r3
 5370 29c0 1346     		mov	r3, r2
 5371 29c2 07CB     		ldmia	r3!, {r0, r1, r2}
 5372 29c4 2060     		str	r0, [r4]	@ unaligned
 5373 29c6 6160     		str	r1, [r4, #4]	@ unaligned
 5374 29c8 A260     		str	r2, [r4, #8]	@ unaligned
 5375 29ca 1B88     		ldrh	r3, [r3]	@ unaligned
 5376 29cc A381     		strh	r3, [r4, #12]	@ unaligned
 764:..\src/command_processing.c ****                             break;
 5377              		.loc 1 764 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 127


 5378 29ce 2CE0     		b	.L237
 5379              	.L241:
 765:..\src/command_processing.c ****                         case EXP_WIFI:
 766:..\src/command_processing.c ****         					strcat(aux_str, " WiFi board [N/A]\0");
 5380              		.loc 1 766 0
 5381 29d0 07F13803 		add	r3, r7, #56
 5382 29d4 183B     		subs	r3, r3, #24
 5383 29d6 1846     		mov	r0, r3
 5384 29d8 FFF7FEFF 		bl	strlen
 5385 29dc 0346     		mov	r3, r0
 5386 29de 1A46     		mov	r2, r3
 5387 29e0 07F13803 		add	r3, r7, #56
 5388 29e4 183B     		subs	r3, r3, #24
 5389 29e6 1344     		add	r3, r3, r2
 5390 29e8 BB4A     		ldr	r2, .L307+8
 5391 29ea 1D46     		mov	r5, r3
 5392 29ec 1446     		mov	r4, r2
 5393 29ee 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 5394 29f0 2860     		str	r0, [r5]	@ unaligned
 5395 29f2 6960     		str	r1, [r5, #4]	@ unaligned
 5396 29f4 AA60     		str	r2, [r5, #8]	@ unaligned
 5397 29f6 EB60     		str	r3, [r5, #12]	@ unaligned
 5398 29f8 2388     		ldrh	r3, [r4]	@ unaligned
 5399 29fa 2B82     		strh	r3, [r5, #16]	@ unaligned
 767:..\src/command_processing.c ****         					break;
 5400              		.loc 1 767 0
 5401 29fc 15E0     		b	.L237
 5402              	.L242:
 768:..\src/command_processing.c ****                         case EXP_OTHER:
 769:..\src/command_processing.c ****         					strcat(aux_str, " Other [N/A]\0");
 5403              		.loc 1 769 0
 5404 29fe 07F13803 		add	r3, r7, #56
 5405 2a02 183B     		subs	r3, r3, #24
 5406 2a04 1846     		mov	r0, r3
 5407 2a06 FFF7FEFF 		bl	strlen
 5408 2a0a 0346     		mov	r3, r0
 5409 2a0c 1A46     		mov	r2, r3
 5410 2a0e 07F13803 		add	r3, r7, #56
 5411 2a12 183B     		subs	r3, r3, #24
 5412 2a14 1344     		add	r3, r3, r2
 5413 2a16 B14A     		ldr	r2, .L307+12
 5414 2a18 1C46     		mov	r4, r3
 5415 2a1a 1346     		mov	r3, r2
 5416 2a1c 07CB     		ldmia	r3!, {r0, r1, r2}
 5417 2a1e 2060     		str	r0, [r4]	@ unaligned
 5418 2a20 6160     		str	r1, [r4, #4]	@ unaligned
 5419 2a22 A260     		str	r2, [r4, #8]	@ unaligned
 5420 2a24 1B78     		ldrb	r3, [r3]
 5421 2a26 2373     		strb	r3, [r4, #12]
 770:..\src/command_processing.c ****         					break;
 5422              		.loc 1 770 0
 5423 2a28 00BF     		nop
 5424              	.L237:
 771:..\src/command_processing.c ****                     }
 772:..\src/command_processing.c ****                     break;
 5425              		.loc 1 772 0
 5426 2a2a 44E2     		b	.L286
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 128


 5427              	.L206:
 773:..\src/command_processing.c ****                 case 7:     // spi read delay menu
 774:..\src/command_processing.c ****                     switch(*m_addr){
 5428              		.loc 1 774 0
 5429 2a2c 07F5B053 		add	r3, r7, #5632
 5430 2a30 03F10803 		add	r3, r3, #8
 5431 2a34 1B68     		ldr	r3, [r3]
 5432 2a36 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5433 2a38 012B     		cmp	r3, #1
 5434 2a3a 16D0     		beq	.L244
 5435 2a3c 022B     		cmp	r3, #2
 5436 2a3e 26D0     		beq	.L245
 5437 2a40 002B     		cmp	r3, #0
 5438 2a42 00D0     		beq	.L246
 775:..\src/command_processing.c ****                         case 0: 
 776:..\src/command_processing.c ****                             strcat(aux_str, " None\0"); 
 777:..\src/command_processing.c ****                             break;
 778:..\src/command_processing.c ****                         case 1: 
 779:..\src/command_processing.c ****                             strcat(aux_str, " Low\0"); 
 780:..\src/command_processing.c ****                             break;
 781:..\src/command_processing.c ****                         case 2: 
 782:..\src/command_processing.c ****                             strcat(aux_str, " High\0");
 783:..\src/command_processing.c ****                             break;
 784:..\src/command_processing.c ****                         default:
 785:..\src/command_processing.c ****                             break;
 5439              		.loc 1 785 0
 5440 2a44 35E0     		b	.L247
 5441              	.L246:
 776:..\src/command_processing.c ****                             break;
 5442              		.loc 1 776 0
 5443 2a46 07F13803 		add	r3, r7, #56
 5444 2a4a 183B     		subs	r3, r3, #24
 5445 2a4c 1846     		mov	r0, r3
 5446 2a4e FFF7FEFF 		bl	strlen
 5447 2a52 0346     		mov	r3, r0
 5448 2a54 1A46     		mov	r2, r3
 5449 2a56 07F13803 		add	r3, r7, #56
 5450 2a5a 183B     		subs	r3, r3, #24
 5451 2a5c 1344     		add	r3, r3, r2
 5452 2a5e 9C4A     		ldr	r2, .L307
 5453 2a60 1068     		ldr	r0, [r2]	@ unaligned
 5454 2a62 1860     		str	r0, [r3]	@ unaligned
 5455 2a64 9288     		ldrh	r2, [r2, #4]	@ unaligned
 5456 2a66 9A80     		strh	r2, [r3, #4]	@ unaligned
 777:..\src/command_processing.c ****                         case 1: 
 5457              		.loc 1 777 0
 5458 2a68 23E0     		b	.L247
 5459              	.L244:
 779:..\src/command_processing.c ****                             break;
 5460              		.loc 1 779 0
 5461 2a6a 07F13803 		add	r3, r7, #56
 5462 2a6e 183B     		subs	r3, r3, #24
 5463 2a70 1846     		mov	r0, r3
 5464 2a72 FFF7FEFF 		bl	strlen
 5465 2a76 0346     		mov	r3, r0
 5466 2a78 1A46     		mov	r2, r3
 5467 2a7a 07F13803 		add	r3, r7, #56
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 129


 5468 2a7e 183B     		subs	r3, r3, #24
 5469 2a80 1344     		add	r3, r3, r2
 5470 2a82 974A     		ldr	r2, .L307+16
 5471 2a84 1068     		ldr	r0, [r2]	@ unaligned
 5472 2a86 1860     		str	r0, [r3]	@ unaligned
 5473 2a88 1279     		ldrb	r2, [r2, #4]
 5474 2a8a 1A71     		strb	r2, [r3, #4]
 780:..\src/command_processing.c ****                         case 2: 
 5475              		.loc 1 780 0
 5476 2a8c 11E0     		b	.L247
 5477              	.L245:
 782:..\src/command_processing.c ****                             break;
 5478              		.loc 1 782 0
 5479 2a8e 07F13803 		add	r3, r7, #56
 5480 2a92 183B     		subs	r3, r3, #24
 5481 2a94 1846     		mov	r0, r3
 5482 2a96 FFF7FEFF 		bl	strlen
 5483 2a9a 0346     		mov	r3, r0
 5484 2a9c 1A46     		mov	r2, r3
 5485 2a9e 07F13803 		add	r3, r7, #56
 5486 2aa2 183B     		subs	r3, r3, #24
 5487 2aa4 1344     		add	r3, r3, r2
 5488 2aa6 8F4A     		ldr	r2, .L307+20
 5489 2aa8 1068     		ldr	r0, [r2]	@ unaligned
 5490 2aaa 1860     		str	r0, [r3]	@ unaligned
 5491 2aac 9288     		ldrh	r2, [r2, #4]	@ unaligned
 5492 2aae 9A80     		strh	r2, [r3, #4]	@ unaligned
 783:..\src/command_processing.c ****                         default:
 5493              		.loc 1 783 0
 5494 2ab0 00BF     		nop
 5495              	.L247:
 786:..\src/command_processing.c ****                     } 
 787:..\src/command_processing.c ****                     break;
 5496              		.loc 1 787 0 discriminator 12
 5497 2ab2 03E2     		b	.L198
 5498              	.L207:
 788:..\src/command_processing.c ****                 case 8:     // user menu          
 789:..\src/command_processing.c ****                     switch(*m_addr){
 5499              		.loc 1 789 0
 5500 2ab4 07F5B053 		add	r3, r7, #5632
 5501 2ab8 03F10803 		add	r3, r3, #8
 5502 2abc 1B68     		ldr	r3, [r3]
 5503 2abe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5504 2ac0 012B     		cmp	r3, #1
 5505 2ac2 1AD0     		beq	.L249
 5506 2ac4 022B     		cmp	r3, #2
 5507 2ac6 2CD0     		beq	.L250
 5508 2ac8 002B     		cmp	r3, #0
 5509 2aca 00D0     		beq	.L251
 790:..\src/command_processing.c ****                         case GENERIC_USER:
 791:..\src/command_processing.c ****                             strcat(aux_str, " GENERIC USER\0");
 792:..\src/command_processing.c ****                         break;
 793:..\src/command_processing.c ****                         case MARIA:
 794:..\src/command_processing.c ****                             strcat(aux_str, " MARIA\0");
 795:..\src/command_processing.c ****                         break;
 796:..\src/command_processing.c ****                         case R01:
 797:..\src/command_processing.c ****                             strcat(aux_str, " R01\0");
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 130


 798:..\src/command_processing.c ****                         break;
 799:..\src/command_processing.c ****                     }   
 800:..\src/command_processing.c ****                     break;                    
 5510              		.loc 1 800 0
 5511 2acc F6E1     		b	.L198
 5512              	.L251:
 791:..\src/command_processing.c ****                         break;
 5513              		.loc 1 791 0
 5514 2ace 07F13803 		add	r3, r7, #56
 5515 2ad2 183B     		subs	r3, r3, #24
 5516 2ad4 1846     		mov	r0, r3
 5517 2ad6 FFF7FEFF 		bl	strlen
 5518 2ada 0346     		mov	r3, r0
 5519 2adc 1A46     		mov	r2, r3
 5520 2ade 07F13803 		add	r3, r7, #56
 5521 2ae2 183B     		subs	r3, r3, #24
 5522 2ae4 1344     		add	r3, r3, r2
 5523 2ae6 804A     		ldr	r2, .L307+24
 5524 2ae8 1C46     		mov	r4, r3
 5525 2aea 1346     		mov	r3, r2
 5526 2aec 07CB     		ldmia	r3!, {r0, r1, r2}
 5527 2aee 2060     		str	r0, [r4]	@ unaligned
 5528 2af0 6160     		str	r1, [r4, #4]	@ unaligned
 5529 2af2 A260     		str	r2, [r4, #8]	@ unaligned
 5530 2af4 1B88     		ldrh	r3, [r3]	@ unaligned
 5531 2af6 A381     		strh	r3, [r4, #12]	@ unaligned
 792:..\src/command_processing.c ****                         case MARIA:
 5532              		.loc 1 792 0
 5533 2af8 25E0     		b	.L248
 5534              	.L249:
 794:..\src/command_processing.c ****                         break;
 5535              		.loc 1 794 0
 5536 2afa 07F13803 		add	r3, r7, #56
 5537 2afe 183B     		subs	r3, r3, #24
 5538 2b00 1846     		mov	r0, r3
 5539 2b02 FFF7FEFF 		bl	strlen
 5540 2b06 0346     		mov	r3, r0
 5541 2b08 1A46     		mov	r2, r3
 5542 2b0a 07F13803 		add	r3, r7, #56
 5543 2b0e 183B     		subs	r3, r3, #24
 5544 2b10 1344     		add	r3, r3, r2
 5545 2b12 764A     		ldr	r2, .L307+28
 5546 2b14 1068     		ldr	r0, [r2]	@ unaligned
 5547 2b16 1860     		str	r0, [r3]	@ unaligned
 5548 2b18 9188     		ldrh	r1, [r2, #4]	@ unaligned
 5549 2b1a 9279     		ldrb	r2, [r2, #6]
 5550 2b1c 9980     		strh	r1, [r3, #4]	@ unaligned
 5551 2b1e 9A71     		strb	r2, [r3, #6]
 795:..\src/command_processing.c ****                         case R01:
 5552              		.loc 1 795 0
 5553 2b20 11E0     		b	.L248
 5554              	.L250:
 797:..\src/command_processing.c ****                         break;
 5555              		.loc 1 797 0
 5556 2b22 07F13803 		add	r3, r7, #56
 5557 2b26 183B     		subs	r3, r3, #24
 5558 2b28 1846     		mov	r0, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 131


 5559 2b2a FFF7FEFF 		bl	strlen
 5560 2b2e 0346     		mov	r3, r0
 5561 2b30 1A46     		mov	r2, r3
 5562 2b32 07F13803 		add	r3, r7, #56
 5563 2b36 183B     		subs	r3, r3, #24
 5564 2b38 1344     		add	r3, r3, r2
 5565 2b3a 6D4A     		ldr	r2, .L307+32
 5566 2b3c 1068     		ldr	r0, [r2]	@ unaligned
 5567 2b3e 1860     		str	r0, [r3]	@ unaligned
 5568 2b40 1279     		ldrb	r2, [r2, #4]
 5569 2b42 1A71     		strb	r2, [r3, #4]
 798:..\src/command_processing.c ****                     }   
 5570              		.loc 1 798 0
 5571 2b44 00BF     		nop
 5572              	.L248:
 5573              		.loc 1 800 0
 5574 2b46 B9E1     		b	.L198
 5575              	.L208:
 801:..\src/command_processing.c ****                 case 9:     // driver type menu
 802:..\src/command_processing.c ****                     switch(*m_addr){
 5576              		.loc 1 802 0
 5577 2b48 07F5B053 		add	r3, r7, #5632
 5578 2b4c 03F10803 		add	r3, r3, #8
 5579 2b50 1B68     		ldr	r3, [r3]
 5580 2b52 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5581 2b54 012B     		cmp	r3, #1
 5582 2b56 1BD0     		beq	.L253
 5583 2b58 022B     		cmp	r3, #2
 5584 2b5a 32D0     		beq	.L254
 5585 2b5c 002B     		cmp	r3, #0
 5586 2b5e 00D0     		beq	.L255
 803:..\src/command_processing.c ****                         case 0:
 804:..\src/command_processing.c ****                             strcat(aux_str, " MC33887 (Standard)\0");
 805:..\src/command_processing.c ****                         break;
 806:..\src/command_processing.c ****                         case 1:
 807:..\src/command_processing.c ****                             strcat(aux_str, " VNH5019 (High power)\0");
 808:..\src/command_processing.c ****                         break;
 809:..\src/command_processing.c ****                         case 2:
 810:..\src/command_processing.c ****                             strcat(aux_str, " ESC (Brushless)\0");
 811:..\src/command_processing.c ****                         break;
 812:..\src/command_processing.c ****                     }
 813:..\src/command_processing.c ****                     break;
 5587              		.loc 1 813 0
 5588 2b60 ACE1     		b	.L198
 5589              	.L255:
 804:..\src/command_processing.c ****                         break;
 5590              		.loc 1 804 0
 5591 2b62 07F13803 		add	r3, r7, #56
 5592 2b66 183B     		subs	r3, r3, #24
 5593 2b68 1846     		mov	r0, r3
 5594 2b6a FFF7FEFF 		bl	strlen
 5595 2b6e 0346     		mov	r3, r0
 5596 2b70 1A46     		mov	r2, r3
 5597 2b72 07F13803 		add	r3, r7, #56
 5598 2b76 183B     		subs	r3, r3, #24
 5599 2b78 1344     		add	r3, r3, r2
 5600 2b7a 5E4A     		ldr	r2, .L307+36
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 132


 5601 2b7c 1D46     		mov	r5, r3
 5602 2b7e 1446     		mov	r4, r2
 5603 2b80 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 5604 2b82 2860     		str	r0, [r5]	@ unaligned
 5605 2b84 6960     		str	r1, [r5, #4]	@ unaligned
 5606 2b86 AA60     		str	r2, [r5, #8]	@ unaligned
 5607 2b88 EB60     		str	r3, [r5, #12]	@ unaligned
 5608 2b8a 2068     		ldr	r0, [r4]	@ unaligned
 5609 2b8c 2861     		str	r0, [r5, #16]	@ unaligned
 805:..\src/command_processing.c ****                         case 1:
 5610              		.loc 1 805 0
 5611 2b8e 2FE0     		b	.L252
 5612              	.L253:
 807:..\src/command_processing.c ****                         break;
 5613              		.loc 1 807 0
 5614 2b90 07F13803 		add	r3, r7, #56
 5615 2b94 183B     		subs	r3, r3, #24
 5616 2b96 1846     		mov	r0, r3
 5617 2b98 FFF7FEFF 		bl	strlen
 5618 2b9c 0346     		mov	r3, r0
 5619 2b9e 1A46     		mov	r2, r3
 5620 2ba0 07F13803 		add	r3, r7, #56
 5621 2ba4 183B     		subs	r3, r3, #24
 5622 2ba6 1344     		add	r3, r3, r2
 5623 2ba8 534A     		ldr	r2, .L307+40
 5624 2baa 1D46     		mov	r5, r3
 5625 2bac 1446     		mov	r4, r2
 5626 2bae 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 5627 2bb0 2860     		str	r0, [r5]	@ unaligned
 5628 2bb2 6960     		str	r1, [r5, #4]	@ unaligned
 5629 2bb4 AA60     		str	r2, [r5, #8]	@ unaligned
 5630 2bb6 EB60     		str	r3, [r5, #12]	@ unaligned
 5631 2bb8 2068     		ldr	r0, [r4]	@ unaligned
 5632 2bba 2861     		str	r0, [r5, #16]	@ unaligned
 5633 2bbc A388     		ldrh	r3, [r4, #4]	@ unaligned
 5634 2bbe AB82     		strh	r3, [r5, #20]	@ unaligned
 808:..\src/command_processing.c ****                         case 2:
 5635              		.loc 1 808 0
 5636 2bc0 16E0     		b	.L252
 5637              	.L254:
 810:..\src/command_processing.c ****                         break;
 5638              		.loc 1 810 0
 5639 2bc2 07F13803 		add	r3, r7, #56
 5640 2bc6 183B     		subs	r3, r3, #24
 5641 2bc8 1846     		mov	r0, r3
 5642 2bca FFF7FEFF 		bl	strlen
 5643 2bce 0346     		mov	r3, r0
 5644 2bd0 1A46     		mov	r2, r3
 5645 2bd2 07F13803 		add	r3, r7, #56
 5646 2bd6 183B     		subs	r3, r3, #24
 5647 2bd8 1344     		add	r3, r3, r2
 5648 2bda 484A     		ldr	r2, .L307+44
 5649 2bdc 1D46     		mov	r5, r3
 5650 2bde 1446     		mov	r4, r2
 5651 2be0 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 5652 2be2 2860     		str	r0, [r5]	@ unaligned
 5653 2be4 6960     		str	r1, [r5, #4]	@ unaligned
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 133


 5654 2be6 AA60     		str	r2, [r5, #8]	@ unaligned
 5655 2be8 EB60     		str	r3, [r5, #12]	@ unaligned
 5656 2bea 2378     		ldrb	r3, [r4]
 5657 2bec 2B74     		strb	r3, [r5, #16]
 811:..\src/command_processing.c ****                     }
 5658              		.loc 1 811 0
 5659 2bee 00BF     		nop
 5660              	.L252:
 5661              		.loc 1 813 0
 5662 2bf0 64E1     		b	.L198
 5663              	.L209:
 814:..\src/command_processing.c ****                 case 10:    // device type menu
 815:..\src/command_processing.c ****                     switch(*m_addr){
 5664              		.loc 1 815 0
 5665 2bf2 07F5B053 		add	r3, r7, #5632
 5666 2bf6 03F10803 		add	r3, r3, #8
 5667 2bfa 1B68     		ldr	r3, [r3]
 5668 2bfc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5669 2bfe 042B     		cmp	r3, #4
 5670 2c00 00F25B81 		bhi	.L287
 5671 2c04 01A2     		adr	r2, .L258
 5672 2c06 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5673 2c0a 00BF     		.p2align 2
 5674              	.L258:
 5675 2c0c 212C0000 		.word	.L257+1
 5676 2c10 4D2C0000 		.word	.L259+1
 5677 2c14 7B2C0000 		.word	.L260+1
 5678 2c18 A72C0000 		.word	.L261+1
 5679 2c1c 112D0000 		.word	.L262+1
 5680              		.p2align 1
 5681              	.L257:
 816:..\src/command_processing.c ****                         case 0:
 817:..\src/command_processing.c ****                             strcat(aux_str, " SOFTHAND PRO\0");
 5682              		.loc 1 817 0
 5683 2c20 07F13803 		add	r3, r7, #56
 5684 2c24 183B     		subs	r3, r3, #24
 5685 2c26 1846     		mov	r0, r3
 5686 2c28 FFF7FEFF 		bl	strlen
 5687 2c2c 0346     		mov	r3, r0
 5688 2c2e 1A46     		mov	r2, r3
 5689 2c30 07F13803 		add	r3, r7, #56
 5690 2c34 183B     		subs	r3, r3, #24
 5691 2c36 1344     		add	r3, r3, r2
 5692 2c38 314A     		ldr	r2, .L307+48
 5693 2c3a 1C46     		mov	r4, r3
 5694 2c3c 1346     		mov	r3, r2
 5695 2c3e 07CB     		ldmia	r3!, {r0, r1, r2}
 5696 2c40 2060     		str	r0, [r4]	@ unaligned
 5697 2c42 6160     		str	r1, [r4, #4]	@ unaligned
 5698 2c44 A260     		str	r2, [r4, #8]	@ unaligned
 5699 2c46 1B88     		ldrh	r3, [r3]	@ unaligned
 5700 2c48 A381     		strh	r3, [r4, #12]	@ unaligned
 818:..\src/command_processing.c ****                         break;
 5701              		.loc 1 818 0
 5702 2c4a 7BE0     		b	.L256
 5703              	.L259:
 819:..\src/command_processing.c ****                         case 1:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 134


 820:..\src/command_processing.c ****                             strcat(aux_str, " GENERIC 2 MOTORS\0");
 5704              		.loc 1 820 0
 5705 2c4c 07F13803 		add	r3, r7, #56
 5706 2c50 183B     		subs	r3, r3, #24
 5707 2c52 1846     		mov	r0, r3
 5708 2c54 FFF7FEFF 		bl	strlen
 5709 2c58 0346     		mov	r3, r0
 5710 2c5a 1A46     		mov	r2, r3
 5711 2c5c 07F13803 		add	r3, r7, #56
 5712 2c60 183B     		subs	r3, r3, #24
 5713 2c62 1344     		add	r3, r3, r2
 5714 2c64 274A     		ldr	r2, .L307+52
 5715 2c66 1D46     		mov	r5, r3
 5716 2c68 1446     		mov	r4, r2
 5717 2c6a 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 5718 2c6c 2860     		str	r0, [r5]	@ unaligned
 5719 2c6e 6960     		str	r1, [r5, #4]	@ unaligned
 5720 2c70 AA60     		str	r2, [r5, #8]	@ unaligned
 5721 2c72 EB60     		str	r3, [r5, #12]	@ unaligned
 5722 2c74 2388     		ldrh	r3, [r4]	@ unaligned
 5723 2c76 2B82     		strh	r3, [r5, #16]	@ unaligned
 821:..\src/command_processing.c ****                         break;
 5724              		.loc 1 821 0
 5725 2c78 64E0     		b	.L256
 5726              	.L260:
 822:..\src/command_processing.c ****                         case 2:
 823:..\src/command_processing.c ****                             strcat(aux_str, " AIR CHAMBERS\0");
 5727              		.loc 1 823 0
 5728 2c7a 07F13803 		add	r3, r7, #56
 5729 2c7e 183B     		subs	r3, r3, #24
 5730 2c80 1846     		mov	r0, r3
 5731 2c82 FFF7FEFF 		bl	strlen
 5732 2c86 0346     		mov	r3, r0
 5733 2c88 1A46     		mov	r2, r3
 5734 2c8a 07F13803 		add	r3, r7, #56
 5735 2c8e 183B     		subs	r3, r3, #24
 5736 2c90 1344     		add	r3, r3, r2
 5737 2c92 1D4A     		ldr	r2, .L307+56
 5738 2c94 1C46     		mov	r4, r3
 5739 2c96 1346     		mov	r3, r2
 5740 2c98 07CB     		ldmia	r3!, {r0, r1, r2}
 5741 2c9a 2060     		str	r0, [r4]	@ unaligned
 5742 2c9c 6160     		str	r1, [r4, #4]	@ unaligned
 5743 2c9e A260     		str	r2, [r4, #8]	@ unaligned
 5744 2ca0 1B88     		ldrh	r3, [r3]	@ unaligned
 5745 2ca2 A381     		strh	r3, [r4, #12]	@ unaligned
 824:..\src/command_processing.c ****                         break;
 5746              		.loc 1 824 0
 5747 2ca4 4EE0     		b	.L256
 5748              	.L261:
 825:..\src/command_processing.c ****                         case 3:
 826:..\src/command_processing.c ****                             strcat(aux_str, " OTTOBOCK WRIST\0");
 5749              		.loc 1 826 0
 5750 2ca6 07F13803 		add	r3, r7, #56
 5751 2caa 183B     		subs	r3, r3, #24
 5752 2cac 1846     		mov	r0, r3
 5753 2cae FFF7FEFF 		bl	strlen
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 135


 5754 2cb2 0346     		mov	r3, r0
 5755 2cb4 1A46     		mov	r2, r3
 5756 2cb6 07F13803 		add	r3, r7, #56
 5757 2cba 183B     		subs	r3, r3, #24
 5758 2cbc 1344     		add	r3, r3, r2
 5759 2cbe 134A     		ldr	r2, .L307+60
 5760 2cc0 1C46     		mov	r4, r3
 5761 2cc2 1546     		mov	r5, r2
 5762 2cc4 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 5763 2cc6 2060     		str	r0, [r4]	@ unaligned
 5764 2cc8 6160     		str	r1, [r4, #4]	@ unaligned
 5765 2cca A260     		str	r2, [r4, #8]	@ unaligned
 5766 2ccc E360     		str	r3, [r4, #12]	@ unaligned
 827:..\src/command_processing.c ****                         break;
 5767              		.loc 1 827 0
 5768 2cce 39E0     		b	.L256
 5769              	.L308:
 5770              		.align	2
 5771              	.L307:
 5772 2cd0 EC000000 		.word	.LC106
 5773 2cd4 F4000000 		.word	.LC107
 5774 2cd8 04010000 		.word	.LC108
 5775 2cdc 18010000 		.word	.LC109
 5776 2ce0 28010000 		.word	.LC110
 5777 2ce4 30010000 		.word	.LC111
 5778 2ce8 38010000 		.word	.LC112
 5779 2cec 48010000 		.word	.LC113
 5780 2cf0 50010000 		.word	.LC114
 5781 2cf4 58010000 		.word	.LC115
 5782 2cf8 70010000 		.word	.LC116
 5783 2cfc 88010000 		.word	.LC117
 5784 2d00 9C010000 		.word	.LC118
 5785 2d04 AC010000 		.word	.LC119
 5786 2d08 C0010000 		.word	.LC120
 5787 2d0c D0010000 		.word	.LC121
 5788              	.L262:
 828:..\src/command_processing.c ****                         case 4:
 829:..\src/command_processing.c ****                             strcat(aux_str, " SOFTHAND 2 MOTORS\0");
 5789              		.loc 1 829 0
 5790 2d10 07F13803 		add	r3, r7, #56
 5791 2d14 183B     		subs	r3, r3, #24
 5792 2d16 1846     		mov	r0, r3
 5793 2d18 FFF7FEFF 		bl	strlen
 5794 2d1c 0346     		mov	r3, r0
 5795 2d1e 1A46     		mov	r2, r3
 5796 2d20 07F13803 		add	r3, r7, #56
 5797 2d24 183B     		subs	r3, r3, #24
 5798 2d26 1344     		add	r3, r3, r2
 5799 2d28 714A     		ldr	r2, .L309
 5800 2d2a 1D46     		mov	r5, r3
 5801 2d2c 1446     		mov	r4, r2
 5802 2d2e 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 5803 2d30 2860     		str	r0, [r5]	@ unaligned
 5804 2d32 6960     		str	r1, [r5, #4]	@ unaligned
 5805 2d34 AA60     		str	r2, [r5, #8]	@ unaligned
 5806 2d36 EB60     		str	r3, [r5, #12]	@ unaligned
 5807 2d38 2388     		ldrh	r3, [r4]	@ unaligned
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 136


 5808 2d3a A278     		ldrb	r2, [r4, #2]
 5809 2d3c 2B82     		strh	r3, [r5, #16]	@ unaligned
 5810 2d3e 1346     		mov	r3, r2
 5811 2d40 AB74     		strb	r3, [r5, #18]
 830:..\src/command_processing.c ****                         break;
 5812              		.loc 1 830 0
 5813 2d42 00BF     		nop
 5814              	.L256:
 831:..\src/command_processing.c ****                     }
 832:..\src/command_processing.c ****                     break;
 5815              		.loc 1 832 0
 5816 2d44 B9E0     		b	.L287
 5817              	.L210:
 833:..\src/command_processing.c ****                 case 11:    // fsm activation mode menu
 834:..\src/command_processing.c ****                     switch(*m_addr){
 5818              		.loc 1 834 0
 5819 2d46 07F5B053 		add	r3, r7, #5632
 5820 2d4a 03F10803 		add	r3, r3, #8
 5821 2d4e 1B68     		ldr	r3, [r3]
 5822 2d50 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5823 2d52 002B     		cmp	r3, #0
 5824 2d54 02D0     		beq	.L264
 5825 2d56 012B     		cmp	r3, #1
 5826 2d58 37D0     		beq	.L265
 835:..\src/command_processing.c ****                         case 0:
 836:..\src/command_processing.c ****                             if (c_mem.dev.dev_type == SOFTHAND_2_MOTORS){
 837:..\src/command_processing.c ****                                 strcat(aux_str, " Fast:syn2, Slow:syn1\0");
 838:..\src/command_processing.c ****                             }
 839:..\src/command_processing.c ****                             else {
 840:..\src/command_processing.c ****                                 strcat(aux_str, " Fast:wrist,Slow:hand\0");
 841:..\src/command_processing.c ****                             }                            
 842:..\src/command_processing.c ****                         break;
 843:..\src/command_processing.c ****                         case 1:
 844:..\src/command_processing.c ****                             if (c_mem.dev.dev_type == SOFTHAND_2_MOTORS){
 845:..\src/command_processing.c ****                                 strcat(aux_str, " Slow:syn2, Fast:syn1\0");
 846:..\src/command_processing.c ****                             }
 847:..\src/command_processing.c ****                             else {
 848:..\src/command_processing.c ****                                 strcat(aux_str, " Slow:wrist,Fast:hand\0");
 849:..\src/command_processing.c ****                             }
 850:..\src/command_processing.c ****                         break;
 851:..\src/command_processing.c ****                     }
 852:..\src/command_processing.c ****                     break;
 5827              		.loc 1 852 0
 5828 2d5a AFE0     		b	.L198
 5829              	.L264:
 836:..\src/command_processing.c ****                                 strcat(aux_str, " Fast:syn2, Slow:syn1\0");
 5830              		.loc 1 836 0
 5831 2d5c 654B     		ldr	r3, .L309+4
 5832 2d5e 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 5833 2d62 042B     		cmp	r3, #4
 5834 2d64 18D1     		bne	.L266
 837:..\src/command_processing.c ****                             }
 5835              		.loc 1 837 0
 5836 2d66 07F13803 		add	r3, r7, #56
 5837 2d6a 183B     		subs	r3, r3, #24
 5838 2d6c 1846     		mov	r0, r3
 5839 2d6e FFF7FEFF 		bl	strlen
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 137


 5840 2d72 0346     		mov	r3, r0
 5841 2d74 1A46     		mov	r2, r3
 5842 2d76 07F13803 		add	r3, r7, #56
 5843 2d7a 183B     		subs	r3, r3, #24
 5844 2d7c 1344     		add	r3, r3, r2
 5845 2d7e 5E4A     		ldr	r2, .L309+8
 5846 2d80 1D46     		mov	r5, r3
 5847 2d82 1446     		mov	r4, r2
 5848 2d84 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 5849 2d86 2860     		str	r0, [r5]	@ unaligned
 5850 2d88 6960     		str	r1, [r5, #4]	@ unaligned
 5851 2d8a AA60     		str	r2, [r5, #8]	@ unaligned
 5852 2d8c EB60     		str	r3, [r5, #12]	@ unaligned
 5853 2d8e 2068     		ldr	r0, [r4]	@ unaligned
 5854 2d90 2861     		str	r0, [r5, #16]	@ unaligned
 5855 2d92 A388     		ldrh	r3, [r4, #4]	@ unaligned
 5856 2d94 AB82     		strh	r3, [r5, #20]	@ unaligned
 842:..\src/command_processing.c ****                         case 1:
 5857              		.loc 1 842 0
 5858 2d96 4FE0     		b	.L263
 5859              	.L266:
 840:..\src/command_processing.c ****                             }                            
 5860              		.loc 1 840 0
 5861 2d98 07F13803 		add	r3, r7, #56
 5862 2d9c 183B     		subs	r3, r3, #24
 5863 2d9e 1846     		mov	r0, r3
 5864 2da0 FFF7FEFF 		bl	strlen
 5865 2da4 0346     		mov	r3, r0
 5866 2da6 1A46     		mov	r2, r3
 5867 2da8 07F13803 		add	r3, r7, #56
 5868 2dac 183B     		subs	r3, r3, #24
 5869 2dae 1344     		add	r3, r3, r2
 5870 2db0 524A     		ldr	r2, .L309+12
 5871 2db2 1D46     		mov	r5, r3
 5872 2db4 1446     		mov	r4, r2
 5873 2db6 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 5874 2db8 2860     		str	r0, [r5]	@ unaligned
 5875 2dba 6960     		str	r1, [r5, #4]	@ unaligned
 5876 2dbc AA60     		str	r2, [r5, #8]	@ unaligned
 5877 2dbe EB60     		str	r3, [r5, #12]	@ unaligned
 5878 2dc0 2068     		ldr	r0, [r4]	@ unaligned
 5879 2dc2 2861     		str	r0, [r5, #16]	@ unaligned
 5880 2dc4 A388     		ldrh	r3, [r4, #4]	@ unaligned
 5881 2dc6 AB82     		strh	r3, [r5, #20]	@ unaligned
 842:..\src/command_processing.c ****                         case 1:
 5882              		.loc 1 842 0
 5883 2dc8 36E0     		b	.L263
 5884              	.L265:
 844:..\src/command_processing.c ****                                 strcat(aux_str, " Slow:syn2, Fast:syn1\0");
 5885              		.loc 1 844 0
 5886 2dca 4A4B     		ldr	r3, .L309+4
 5887 2dcc 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 5888 2dd0 042B     		cmp	r3, #4
 5889 2dd2 18D1     		bne	.L268
 845:..\src/command_processing.c ****                             }
 5890              		.loc 1 845 0
 5891 2dd4 07F13803 		add	r3, r7, #56
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 138


 5892 2dd8 183B     		subs	r3, r3, #24
 5893 2dda 1846     		mov	r0, r3
 5894 2ddc FFF7FEFF 		bl	strlen
 5895 2de0 0346     		mov	r3, r0
 5896 2de2 1A46     		mov	r2, r3
 5897 2de4 07F13803 		add	r3, r7, #56
 5898 2de8 183B     		subs	r3, r3, #24
 5899 2dea 1344     		add	r3, r3, r2
 5900 2dec 444A     		ldr	r2, .L309+16
 5901 2dee 1D46     		mov	r5, r3
 5902 2df0 1446     		mov	r4, r2
 5903 2df2 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 5904 2df4 2860     		str	r0, [r5]	@ unaligned
 5905 2df6 6960     		str	r1, [r5, #4]	@ unaligned
 5906 2df8 AA60     		str	r2, [r5, #8]	@ unaligned
 5907 2dfa EB60     		str	r3, [r5, #12]	@ unaligned
 5908 2dfc 2068     		ldr	r0, [r4]	@ unaligned
 5909 2dfe 2861     		str	r0, [r5, #16]	@ unaligned
 5910 2e00 A388     		ldrh	r3, [r4, #4]	@ unaligned
 5911 2e02 AB82     		strh	r3, [r5, #20]	@ unaligned
 850:..\src/command_processing.c ****                     }
 5912              		.loc 1 850 0
 5913 2e04 17E0     		b	.L288
 5914              	.L268:
 848:..\src/command_processing.c ****                             }
 5915              		.loc 1 848 0
 5916 2e06 07F13803 		add	r3, r7, #56
 5917 2e0a 183B     		subs	r3, r3, #24
 5918 2e0c 1846     		mov	r0, r3
 5919 2e0e FFF7FEFF 		bl	strlen
 5920 2e12 0346     		mov	r3, r0
 5921 2e14 1A46     		mov	r2, r3
 5922 2e16 07F13803 		add	r3, r7, #56
 5923 2e1a 183B     		subs	r3, r3, #24
 5924 2e1c 1344     		add	r3, r3, r2
 5925 2e1e 394A     		ldr	r2, .L309+20
 5926 2e20 1D46     		mov	r5, r3
 5927 2e22 1446     		mov	r4, r2
 5928 2e24 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 5929 2e26 2860     		str	r0, [r5]	@ unaligned
 5930 2e28 6960     		str	r1, [r5, #4]	@ unaligned
 5931 2e2a AA60     		str	r2, [r5, #8]	@ unaligned
 5932 2e2c EB60     		str	r3, [r5, #12]	@ unaligned
 5933 2e2e 2068     		ldr	r0, [r4]	@ unaligned
 5934 2e30 2861     		str	r0, [r5, #16]	@ unaligned
 5935 2e32 A388     		ldrh	r3, [r4, #4]	@ unaligned
 5936 2e34 AB82     		strh	r3, [r5, #20]	@ unaligned
 5937              	.L288:
 850:..\src/command_processing.c ****                     }
 5938              		.loc 1 850 0
 5939 2e36 00BF     		nop
 5940              	.L263:
 5941              		.loc 1 852 0 discriminator 13
 5942 2e38 40E0     		b	.L198
 5943              	.L211:
 853:..\src/command_processing.c ****                 case 12:    // wrist direction association menu
 854:..\src/command_processing.c ****                     switch(*m_addr){
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 139


 5944              		.loc 1 854 0
 5945 2e3a 07F5B053 		add	r3, r7, #5632
 5946 2e3e 03F10803 		add	r3, r3, #8
 5947 2e42 1B68     		ldr	r3, [r3]
 5948 2e44 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5949 2e46 002B     		cmp	r3, #0
 5950 2e48 02D0     		beq	.L271
 5951 2e4a 012B     		cmp	r3, #1
 5952 2e4c 17D0     		beq	.L272
 855:..\src/command_processing.c ****                         case 0:
 856:..\src/command_processing.c ****                             strcat(aux_str, " Close:CW, Open:CCW\0");
 857:..\src/command_processing.c ****                         break;
 858:..\src/command_processing.c ****                         case 1:
 859:..\src/command_processing.c ****                             strcat(aux_str, " Close:CCW, Open:CW\0");
 860:..\src/command_processing.c ****                         break;
 861:..\src/command_processing.c ****                     }
 862:..\src/command_processing.c ****                     break;
 5953              		.loc 1 862 0
 5954 2e4e 35E0     		b	.L198
 5955              	.L271:
 856:..\src/command_processing.c ****                         break;
 5956              		.loc 1 856 0
 5957 2e50 07F13803 		add	r3, r7, #56
 5958 2e54 183B     		subs	r3, r3, #24
 5959 2e56 1846     		mov	r0, r3
 5960 2e58 FFF7FEFF 		bl	strlen
 5961 2e5c 0346     		mov	r3, r0
 5962 2e5e 1A46     		mov	r2, r3
 5963 2e60 07F13803 		add	r3, r7, #56
 5964 2e64 183B     		subs	r3, r3, #24
 5965 2e66 1344     		add	r3, r3, r2
 5966 2e68 274A     		ldr	r2, .L309+24
 5967 2e6a 1D46     		mov	r5, r3
 5968 2e6c 1446     		mov	r4, r2
 5969 2e6e 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 5970 2e70 2860     		str	r0, [r5]	@ unaligned
 5971 2e72 6960     		str	r1, [r5, #4]	@ unaligned
 5972 2e74 AA60     		str	r2, [r5, #8]	@ unaligned
 5973 2e76 EB60     		str	r3, [r5, #12]	@ unaligned
 5974 2e78 2068     		ldr	r0, [r4]	@ unaligned
 5975 2e7a 2861     		str	r0, [r5, #16]	@ unaligned
 857:..\src/command_processing.c ****                         case 1:
 5976              		.loc 1 857 0
 5977 2e7c 16E0     		b	.L270
 5978              	.L272:
 859:..\src/command_processing.c ****                         break;
 5979              		.loc 1 859 0
 5980 2e7e 07F13803 		add	r3, r7, #56
 5981 2e82 183B     		subs	r3, r3, #24
 5982 2e84 1846     		mov	r0, r3
 5983 2e86 FFF7FEFF 		bl	strlen
 5984 2e8a 0346     		mov	r3, r0
 5985 2e8c 1A46     		mov	r2, r3
 5986 2e8e 07F13803 		add	r3, r7, #56
 5987 2e92 183B     		subs	r3, r3, #24
 5988 2e94 1344     		add	r3, r3, r2
 5989 2e96 1D4A     		ldr	r2, .L309+28
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 140


 5990 2e98 1D46     		mov	r5, r3
 5991 2e9a 1446     		mov	r4, r2
 5992 2e9c 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 5993 2e9e 2860     		str	r0, [r5]	@ unaligned
 5994 2ea0 6960     		str	r1, [r5, #4]	@ unaligned
 5995 2ea2 AA60     		str	r2, [r5, #8]	@ unaligned
 5996 2ea4 EB60     		str	r3, [r5, #12]	@ unaligned
 5997 2ea6 2068     		ldr	r0, [r4]	@ unaligned
 5998 2ea8 2861     		str	r0, [r5, #16]	@ unaligned
 860:..\src/command_processing.c ****                     }
 5999              		.loc 1 860 0
 6000 2eaa 00BF     		nop
 6001              	.L270:
 6002              		.loc 1 862 0
 6003 2eac 06E0     		b	.L198
 6004              	.L284:
 712:..\src/command_processing.c ****                 case 2:     // control mode menu
 6005              		.loc 1 712 0
 6006 2eae 00BF     		nop
 6007 2eb0 04E0     		b	.L198
 6008              	.L285:
 728:..\src/command_processing.c ****                 case 3:     // yes/no menu
 6009              		.loc 1 728 0
 6010 2eb2 00BF     		nop
 6011 2eb4 02E0     		b	.L198
 6012              	.L286:
 772:..\src/command_processing.c ****                 case 7:     // spi read delay menu
 6013              		.loc 1 772 0
 6014 2eb6 00BF     		nop
 6015 2eb8 00E0     		b	.L198
 6016              	.L287:
 832:..\src/command_processing.c ****                 case 11:    // fsm activation mode menu
 6017              		.loc 1 832 0
 6018 2eba 00BF     		nop
 6019              	.L198:
 863:..\src/command_processing.c ****             }
 864:..\src/command_processing.c ****             //Recomputes string lenght
 865:..\src/command_processing.c ****             string_lenght = strlen(aux_str)+1;
 6020              		.loc 1 865 0
 6021 2ebc 07F13803 		add	r3, r7, #56
 6022 2ec0 183B     		subs	r3, r3, #24
 6023 2ec2 1846     		mov	r0, r3
 6024 2ec4 FFF7FEFF 		bl	strlen
 6025 2ec8 0346     		mov	r3, r0
 6026 2eca DBB2     		uxtb	r3, r3
 6027 2ecc 0133     		adds	r3, r3, #1
 6028 2ece 07F5B052 		add	r2, r7, #5632
 6029 2ed2 02F11202 		add	r2, r2, #18
 6030 2ed6 1370     		strb	r3, [r2]
 6031              	.L197:
 866:..\src/command_processing.c ****         }
 867:..\src/command_processing.c **** 
 868:..\src/command_processing.c ****         // Add parameter string to packet
 869:..\src/command_processing.c ****         for(i = string_lenght; i != 0; i--)
 6032              		.loc 1 869 0
 6033 2ed8 07F5B053 		add	r3, r7, #5632
 6034 2edc 03F11203 		add	r3, r3, #18
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 141


 6035 2ee0 1B78     		ldrb	r3, [r3]
 6036 2ee2 07F5B052 		add	r2, r7, #5632
 6037 2ee6 02F11702 		add	r2, r2, #23
 6038 2eea 1370     		strb	r3, [r2]
 6039 2eec 56E0     		b	.L273
 6040              	.L310:
 6041 2eee 00BF     		.align	2
 6042              	.L309:
 6043 2ef0 E4010000 		.word	.LC122
 6044 2ef4 00000000 		.word	c_mem
 6045 2ef8 F8010000 		.word	.LC123
 6046 2efc 10020000 		.word	.LC124
 6047 2f00 28020000 		.word	.LC125
 6048 2f04 40020000 		.word	.LC126
 6049 2f08 58020000 		.word	.LC127
 6050 2f0c 70020000 		.word	.LC128
 6051              	.L274:
 870:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*NUM_ITEMS[idx]) + string_lenght - i] = aux
 6052              		.loc 1 870 0 discriminator 3
 6053 2f10 07F5B053 		add	r3, r7, #5632
 6054 2f14 03F11503 		add	r3, r3, #21
 6055 2f18 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6056 2f1a 3222     		movs	r2, #50
 6057 2f1c 02FB03F3 		mul	r3, r2, r3
 6058 2f20 1A1D     		adds	r2, r3, #4
 6059 2f22 07F5B053 		add	r3, r7, #5632
 6060 2f26 03F11303 		add	r3, r3, #19
 6061 2f2a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 6062 2f2c 07F5B053 		add	r3, r7, #5632
 6063 2f30 03F11503 		add	r3, r3, #21
 6064 2f34 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6065 2f36 07F11803 		add	r3, r7, #24
 6066 2f3a 143B     		subs	r3, r3, #20
 6067 2f3c 1B68     		ldr	r3, [r3]
 6068 2f3e 0344     		add	r3, r3, r0
 6069 2f40 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6070 2f42 03FB01F3 		mul	r3, r3, r1
 6071 2f46 1A44     		add	r2, r2, r3
 6072 2f48 07F5B053 		add	r3, r7, #5632
 6073 2f4c 03F11203 		add	r3, r3, #18
 6074 2f50 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6075 2f52 1A44     		add	r2, r2, r3
 6076 2f54 07F5B053 		add	r3, r7, #5632
 6077 2f58 03F11703 		add	r3, r3, #23
 6078 2f5c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6079 2f5e D21A     		subs	r2, r2, r3
 6080 2f60 07F5B053 		add	r3, r7, #5632
 6081 2f64 03F11203 		add	r3, r3, #18
 6082 2f68 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 6083 2f6a 07F5B053 		add	r3, r7, #5632
 6084 2f6e 03F11703 		add	r3, r3, #23
 6085 2f72 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6086 2f74 C91A     		subs	r1, r1, r3
 6087 2f76 07F13803 		add	r3, r7, #56
 6088 2f7a 183B     		subs	r3, r3, #24
 6089 2f7c 595C     		ldrb	r1, [r3, r1]	@ zero_extendqisi2
 6090 2f7e 07F15803 		add	r3, r7, #88
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 142


 6091 2f82 043B     		subs	r3, r3, #4
 6092 2f84 9954     		strb	r1, [r3, r2]
 869:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*NUM_ITEMS[idx]) + string_lenght - i] = aux
 6093              		.loc 1 869 0 discriminator 3
 6094 2f86 07F5B053 		add	r3, r7, #5632
 6095 2f8a 03F11703 		add	r3, r3, #23
 6096 2f8e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6097 2f90 013B     		subs	r3, r3, #1
 6098 2f92 07F5B052 		add	r2, r7, #5632
 6099 2f96 02F11702 		add	r2, r2, #23
 6100 2f9a 1370     		strb	r3, [r2]
 6101              	.L273:
 869:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*NUM_ITEMS[idx]) + string_lenght - i] = aux
 6102              		.loc 1 869 0 is_stmt 0 discriminator 1
 6103 2f9c 07F5B053 		add	r3, r7, #5632
 6104 2fa0 03F11703 		add	r3, r3, #23
 6105 2fa4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6106 2fa6 002B     		cmp	r3, #0
 6107 2fa8 B2D1     		bne	.L274
 871:..\src/command_processing.c ****         //The following byte indicates the number of menus at the end of the packet to send
 872:..\src/command_processing.c ****         if (TYPES[idx] == TYPE_FLAG){
 6108              		.loc 1 872 0 is_stmt 1
 6109 2faa 07F5B053 		add	r3, r7, #5632
 6110 2fae 03F11503 		add	r3, r3, #21
 6111 2fb2 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6112 2fb4 07F11803 		add	r3, r7, #24
 6113 2fb8 103B     		subs	r3, r3, #16
 6114 2fba 1B68     		ldr	r3, [r3]
 6115 2fbc 1344     		add	r3, r3, r2
 6116 2fbe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6117 2fc0 002B     		cmp	r3, #0
 6118 2fc2 3CD1     		bne	.L275
 873:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*NUM_ITEMS[idx]) + string_lenght] = NUM_MEN
 6119              		.loc 1 873 0
 6120 2fc4 07F5B053 		add	r3, r7, #5632
 6121 2fc8 03F11503 		add	r3, r3, #21
 6122 2fcc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6123 2fce 3222     		movs	r2, #50
 6124 2fd0 02FB03F3 		mul	r3, r2, r3
 6125 2fd4 1A1D     		adds	r2, r3, #4
 6126 2fd6 07F5B053 		add	r3, r7, #5632
 6127 2fda 03F11303 		add	r3, r3, #19
 6128 2fde 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 6129 2fe0 07F5B053 		add	r3, r7, #5632
 6130 2fe4 03F11503 		add	r3, r3, #21
 6131 2fe8 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6132 2fea 07F11803 		add	r3, r7, #24
 6133 2fee 143B     		subs	r3, r3, #20
 6134 2ff0 1B68     		ldr	r3, [r3]
 6135 2ff2 0344     		add	r3, r3, r0
 6136 2ff4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6137 2ff6 03FB01F3 		mul	r3, r3, r1
 6138 2ffa 1A44     		add	r2, r2, r3
 6139 2ffc 07F5B053 		add	r3, r7, #5632
 6140 3000 03F11203 		add	r3, r3, #18
 6141 3004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6142 3006 1A44     		add	r2, r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 143


 6143 3008 07F5B053 		add	r3, r7, #5632
 6144 300c 03F11403 		add	r3, r3, #20
 6145 3010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6146 3012 07F5B151 		add	r1, r7, #5664
 6147 3016 01F11001 		add	r1, r1, #16
 6148 301a 0968     		ldr	r1, [r1]
 6149 301c 0B44     		add	r3, r3, r1
 6150 301e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 6151 3020 07F15803 		add	r3, r7, #88
 6152 3024 043B     		subs	r3, r3, #4
 6153 3026 9954     		strb	r1, [r3, r2]
 874:..\src/command_processing.c ****             idx_menu = idx_menu + 1;
 6154              		.loc 1 874 0
 6155 3028 07F5B053 		add	r3, r7, #5632
 6156 302c 03F11403 		add	r3, r3, #20
 6157 3030 1B78     		ldrb	r3, [r3]
 6158 3032 0133     		adds	r3, r3, #1
 6159 3034 07F5B052 		add	r2, r7, #5632
 6160 3038 02F11402 		add	r2, r2, #20
 6161 303c 1370     		strb	r3, [r2]
 6162              	.L275:
 875:..\src/command_processing.c ****         }      
 876:..\src/command_processing.c ****         
 877:..\src/command_processing.c ****         // Add struct index after an empty bit
 878:..\src/command_processing.c ****         // Note: added here at the end of packets is transparent to old parameters retrieving versi
 879:..\src/command_processing.c ****         if (TYPES[idx] == TYPE_FLAG){
 6163              		.loc 1 879 0
 6164 303e 07F5B053 		add	r3, r7, #5632
 6165 3042 03F11503 		add	r3, r3, #21
 6166 3046 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6167 3048 07F11803 		add	r3, r7, #24
 6168 304c 103B     		subs	r3, r3, #16
 6169 304e 1B68     		ldr	r3, [r3]
 6170 3050 1344     		add	r3, r3, r2
 6171 3052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6172 3054 002B     		cmp	r3, #0
 6173 3056 32D1     		bne	.L276
 880:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*NUM_ITEMS[idx]) + string_lenght + 2] = NUM
 6174              		.loc 1 880 0
 6175 3058 07F5B053 		add	r3, r7, #5632
 6176 305c 03F11503 		add	r3, r3, #21
 6177 3060 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6178 3062 3222     		movs	r2, #50
 6179 3064 02FB03F3 		mul	r3, r2, r3
 6180 3068 1A1D     		adds	r2, r3, #4
 6181 306a 07F5B053 		add	r3, r7, #5632
 6182 306e 03F11303 		add	r3, r3, #19
 6183 3072 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 6184 3074 07F5B053 		add	r3, r7, #5632
 6185 3078 03F11503 		add	r3, r3, #21
 6186 307c 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6187 307e 07F11803 		add	r3, r7, #24
 6188 3082 143B     		subs	r3, r3, #20
 6189 3084 1B68     		ldr	r3, [r3]
 6190 3086 0344     		add	r3, r3, r0
 6191 3088 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6192 308a 03FB01F3 		mul	r3, r3, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 144


 6193 308e 1A44     		add	r2, r2, r3
 6194 3090 07F5B053 		add	r3, r7, #5632
 6195 3094 03F11203 		add	r3, r3, #18
 6196 3098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6197 309a 1344     		add	r3, r3, r2
 6198 309c 9A1C     		adds	r2, r3, #2
 6199 309e 07F5B053 		add	r3, r7, #5632
 6200 30a2 03F11503 		add	r3, r3, #21
 6201 30a6 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 6202 30a8 07F11803 		add	r3, r7, #24
 6203 30ac 183B     		subs	r3, r3, #24
 6204 30ae 1B68     		ldr	r3, [r3]
 6205 30b0 0B44     		add	r3, r3, r1
 6206 30b2 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 6207 30b4 07F15803 		add	r3, r7, #88
 6208 30b8 043B     		subs	r3, r3, #4
 6209 30ba 9954     		strb	r1, [r3, r2]
 6210 30bc 31E0     		b	.L277
 6211              	.L276:
 881:..\src/command_processing.c ****         }
 882:..\src/command_processing.c ****         else {
 883:..\src/command_processing.c ****             packet_data[(4 + PARAM_BYTE_SLOT*idx) + (sod*NUM_ITEMS[idx]) + string_lenght + 1] = NUM
 6212              		.loc 1 883 0
 6213 30be 07F5B053 		add	r3, r7, #5632
 6214 30c2 03F11503 		add	r3, r3, #21
 6215 30c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6216 30c8 3222     		movs	r2, #50
 6217 30ca 02FB03F3 		mul	r3, r2, r3
 6218 30ce 1A1D     		adds	r2, r3, #4
 6219 30d0 07F5B053 		add	r3, r7, #5632
 6220 30d4 03F11303 		add	r3, r3, #19
 6221 30d8 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 6222 30da 07F5B053 		add	r3, r7, #5632
 6223 30de 03F11503 		add	r3, r3, #21
 6224 30e2 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6225 30e4 07F11803 		add	r3, r7, #24
 6226 30e8 143B     		subs	r3, r3, #20
 6227 30ea 1B68     		ldr	r3, [r3]
 6228 30ec 0344     		add	r3, r3, r0
 6229 30ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6230 30f0 03FB01F3 		mul	r3, r3, r1
 6231 30f4 1A44     		add	r2, r2, r3
 6232 30f6 07F5B053 		add	r3, r7, #5632
 6233 30fa 03F11203 		add	r3, r3, #18
 6234 30fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6235 3100 1344     		add	r3, r3, r2
 6236 3102 5A1C     		adds	r2, r3, #1
 6237 3104 07F5B053 		add	r3, r7, #5632
 6238 3108 03F11503 		add	r3, r3, #21
 6239 310c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 6240 310e 07F11803 		add	r3, r7, #24
 6241 3112 183B     		subs	r3, r3, #24
 6242 3114 1B68     		ldr	r3, [r3]
 6243 3116 0B44     		add	r3, r3, r1
 6244 3118 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 6245 311a 07F15803 		add	r3, r7, #88
 6246 311e 043B     		subs	r3, r3, #4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 145


 6247 3120 9954     		strb	r1, [r3, r2]
 6248              	.L277:
 413:..\src/command_processing.c ****         
 6249              		.loc 1 413 0 discriminator 2
 6250 3122 07F5B053 		add	r3, r7, #5632
 6251 3126 03F11503 		add	r3, r3, #21
 6252 312a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6253 312c 0133     		adds	r3, r3, #1
 6254 312e 07F5B052 		add	r2, r7, #5632
 6255 3132 02F11502 		add	r2, r2, #21
 6256 3136 1370     		strb	r3, [r2]
 6257              	.L73:
 413:..\src/command_processing.c ****         
 6258              		.loc 1 413 0 is_stmt 0 discriminator 1
 6259 3138 07F5B053 		add	r3, r7, #5632
 6260 313c 03F11503 		add	r3, r3, #21
 6261 3140 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6262 3142 4C2B     		cmp	r3, #76
 6263 3144 7CF6D3AF 		bls	.L278
 884:..\src/command_processing.c ****         }
 885:..\src/command_processing.c ****     }
 886:..\src/command_processing.c **** 
 887:..\src/command_processing.c ****     // Add menu
 888:..\src/command_processing.c ****     for (j = 0; j < NUM_OF_DEV_PARAM_MENUS; j++) {
 6264              		.loc 1 888 0 is_stmt 1
 6265 3148 0023     		movs	r3, #0
 6266 314a 07F5B052 		add	r2, r7, #5632
 6267 314e 02F11602 		add	r2, r2, #22
 6268 3152 1370     		strb	r3, [r2]
 6269 3154 71E0     		b	.L279
 6270              	.L282:
 889:..\src/command_processing.c ****         string_lenght = strlen((char*)MENU_STR[j]);
 6271              		.loc 1 889 0
 6272 3156 07F5B053 		add	r3, r7, #5632
 6273 315a 03F11603 		add	r3, r3, #22
 6274 315e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6275 3160 9B00     		lsls	r3, r3, #2
 6276 3162 07F5B152 		add	r2, r7, #5664
 6277 3166 02F11C02 		add	r2, r2, #28
 6278 316a 1268     		ldr	r2, [r2]
 6279 316c 1344     		add	r3, r3, r2
 6280 316e 1B68     		ldr	r3, [r3]
 6281 3170 1846     		mov	r0, r3
 6282 3172 FFF7FEFF 		bl	strlen
 6283 3176 0346     		mov	r3, r0
 6284 3178 07F5B052 		add	r2, r7, #5632
 6285 317c 02F11202 		add	r2, r2, #18
 6286 3180 1370     		strb	r3, [r2]
 890:..\src/command_processing.c ****         for(i = string_lenght; i != 0; i--)
 6287              		.loc 1 890 0
 6288 3182 07F5B053 		add	r3, r7, #5632
 6289 3186 03F11203 		add	r3, r3, #18
 6290 318a 1B78     		ldrb	r3, [r3]
 6291 318c 07F5B052 		add	r2, r7, #5632
 6292 3190 02F11702 		add	r2, r2, #23
 6293 3194 1370     		strb	r3, [r2]
 6294 3196 3EE0     		b	.L280
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 146


 6295              	.L281:
 891:..\src/command_processing.c ****             packet_data[PARAM_BYTE_SLOT*NUM_OF_DEV_PARAMS + 2 + j*PARAM_MENU_SLOT + string_lenght -
 6296              		.loc 1 891 0 discriminator 3
 6297 3198 07F5B053 		add	r3, r7, #5632
 6298 319c 03F11603 		add	r3, r3, #22
 6299 31a0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6300 31a2 9622     		movs	r2, #150
 6301 31a4 02FB03F3 		mul	r3, r2, r3
 6302 31a8 03F60C72 		addw	r2, r3, #3852
 6303 31ac 07F5B053 		add	r3, r7, #5632
 6304 31b0 03F11203 		add	r3, r3, #18
 6305 31b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6306 31b6 1A44     		add	r2, r2, r3
 6307 31b8 07F5B053 		add	r3, r7, #5632
 6308 31bc 03F11703 		add	r3, r3, #23
 6309 31c0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6310 31c2 D21A     		subs	r2, r2, r3
 6311 31c4 07F5B053 		add	r3, r7, #5632
 6312 31c8 03F11603 		add	r3, r3, #22
 6313 31cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6314 31ce 9B00     		lsls	r3, r3, #2
 6315 31d0 07F5B151 		add	r1, r7, #5664
 6316 31d4 01F11C01 		add	r1, r1, #28
 6317 31d8 0968     		ldr	r1, [r1]
 6318 31da 0B44     		add	r3, r3, r1
 6319 31dc 1B68     		ldr	r3, [r3]
 6320 31de 07F5B051 		add	r1, r7, #5632
 6321 31e2 01F11201 		add	r1, r1, #18
 6322 31e6 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 6323 31e8 07F5B051 		add	r1, r7, #5632
 6324 31ec 01F11701 		add	r1, r1, #23
 6325 31f0 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 6326 31f2 411A     		subs	r1, r0, r1
 6327 31f4 0B44     		add	r3, r3, r1
 6328 31f6 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 6329 31f8 07F15803 		add	r3, r7, #88
 6330 31fc 043B     		subs	r3, r3, #4
 6331 31fe 9954     		strb	r1, [r3, r2]
 890:..\src/command_processing.c ****         for(i = string_lenght; i != 0; i--)
 6332              		.loc 1 890 0 discriminator 3
 6333 3200 07F5B053 		add	r3, r7, #5632
 6334 3204 03F11703 		add	r3, r3, #23
 6335 3208 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6336 320a 013B     		subs	r3, r3, #1
 6337 320c 07F5B052 		add	r2, r7, #5632
 6338 3210 02F11702 		add	r2, r2, #23
 6339 3214 1370     		strb	r3, [r2]
 6340              	.L280:
 890:..\src/command_processing.c ****         for(i = string_lenght; i != 0; i--)
 6341              		.loc 1 890 0 is_stmt 0 discriminator 1
 6342 3216 07F5B053 		add	r3, r7, #5632
 6343 321a 03F11703 		add	r3, r3, #23
 6344 321e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6345 3220 002B     		cmp	r3, #0
 6346 3222 B9D1     		bne	.L281
 888:..\src/command_processing.c ****         string_lenght = strlen((char*)MENU_STR[j]);
 6347              		.loc 1 888 0 is_stmt 1 discriminator 2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 147


 6348 3224 07F5B053 		add	r3, r7, #5632
 6349 3228 03F11603 		add	r3, r3, #22
 6350 322c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6351 322e 0133     		adds	r3, r3, #1
 6352 3230 07F5B052 		add	r2, r7, #5632
 6353 3234 02F11602 		add	r2, r2, #22
 6354 3238 1370     		strb	r3, [r2]
 6355              	.L279:
 888:..\src/command_processing.c ****         string_lenght = strlen((char*)MENU_STR[j]);
 6356              		.loc 1 888 0 is_stmt 0 discriminator 1
 6357 323a 07F5B053 		add	r3, r7, #5632
 6358 323e 03F11603 		add	r3, r3, #22
 6359 3242 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6360 3244 0A2B     		cmp	r3, #10
 6361 3246 86D9     		bls	.L282
 892:..\src/command_processing.c ****     }
 893:..\src/command_processing.c ****     
 894:..\src/command_processing.c ****     packet_data[packet_lenght - 1] = LCRChecksum(packet_data,packet_lenght - 1);
 6362              		.loc 1 894 0 is_stmt 1
 6363 3248 07F5B053 		add	r3, r7, #5632
 6364 324c 03F11003 		add	r3, r3, #16
 6365 3250 1B88     		ldrh	r3, [r3]
 6366 3252 5C1E     		subs	r4, r3, #1
 6367 3254 07F5B053 		add	r3, r7, #5632
 6368 3258 03F11003 		add	r3, r3, #16
 6369 325c 1B88     		ldrh	r3, [r3]	@ movhi
 6370 325e DBB2     		uxtb	r3, r3
 6371 3260 013B     		subs	r3, r3, #1
 6372 3262 DAB2     		uxtb	r2, r3
 6373 3264 07F15803 		add	r3, r7, #88
 6374 3268 043B     		subs	r3, r3, #4
 6375 326a 1146     		mov	r1, r2
 6376 326c 1846     		mov	r0, r3
 6377 326e FFF7FEFF 		bl	LCRChecksum
 6378 3272 0346     		mov	r3, r0
 6379 3274 1A46     		mov	r2, r3
 6380 3276 07F15803 		add	r3, r7, #88
 6381 327a 043B     		subs	r3, r3, #4
 6382 327c 1A55     		strb	r2, [r3, r4]
 895:..\src/command_processing.c ****     commWrite(packet_data, packet_lenght);
 6383              		.loc 1 895 0
 6384 327e 07F5B053 		add	r3, r7, #5632
 6385 3282 03F11003 		add	r3, r3, #16
 6386 3286 1A88     		ldrh	r2, [r3]
 6387 3288 07F15803 		add	r3, r7, #88
 6388 328c 043B     		subs	r3, r3, #4
 6389 328e 1146     		mov	r1, r2
 6390 3290 1846     		mov	r0, r3
 6391 3292 FFF7FEFF 		bl	commWrite
 896:..\src/command_processing.c **** }
 6392              		.loc 1 896 0
 6393 3296 00BF     		nop
 6394 3298 07F5B057 		add	r7, r7, #5632
 6395 329c 1C37     		adds	r7, r7, #28
 6396              		.cfi_def_cfa_offset 20
 6397 329e BD46     		mov	sp, r7
 6398              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 148


 6399              		@ sp needed
 6400 32a0 F0BD     		pop	{r4, r5, r6, r7, pc}
 6401              		.cfi_endproc
 6402              	.LFE67:
 6403              		.size	get_param_list, .-get_param_list
 6404 32a2 00BF     		.section	.rodata
 6405 0285 000000   		.align	2
 6406              	.LC130:
 6407 0288 30202D3E 		.ascii	"0 -> None\0121 -> Low (%u us delay for each 8-bit r"
 6407      204E6F6E 
 6407      650A3120 
 6407      2D3E204C 
 6407      6F772028 
 6408 02b8 65676973 		.ascii	"egister read)\0122 -> High (%u us delay for each 8-"
 6408      74657220 
 6408      72656164 
 6408      290A3220 
 6408      2D3E2048 
 6409 02e8 62697420 		.ascii	"bit register read)\012\000"
 6409      72656769 
 6409      73746572 
 6409      20726561 
 6409      64290A00 
 6410              		.align	2
 6411              	.LC131:
 6412 02fc 30202D3E 		.ascii	"0 -> Fast:syn2, Slow:syn1\0121 -> Slow:syn2, Fast:s"
 6412      20466173 
 6412      743A7379 
 6412      6E322C20 
 6412      536C6F77 
 6413 032c 796E310A 		.ascii	"yn1\012\000"
 6413      00
 6414 0331 000000   		.align	2
 6415              	.LC132:
 6416 0334 30202D3E 		.ascii	"0 -> Fast:wrist,Slow:hand\0121 -> Slow:wrist,Fast:h"
 6416      20466173 
 6416      743A7772 
 6416      6973742C 
 6416      536C6F77 
 6417 0364 616E640A 		.ascii	"and\012\000"
 6417      00
 6418 0369 000000   		.align	2
 6419              	.LC133:
 6420 036c 30202D3E 		.ascii	"0 -> Usb\0121 -> Handle\0122 -> EMG proportional\012"
 6420      20557362 
 6420      0A31202D 
 6420      3E204861 
 6420      6E646C65 
 6421 0397 33202D3E 		.ascii	"3 -> EMG Integral\0124 -> EMG FCFS\0125 -> EMG FCFS"
 6421      20454D47 
 6421      20496E74 
 6421      65677261 
 6421      6C0A3420 
 6422 03c4 20416476 		.ascii	" Advanced\0126 -> Joystick\0127 -> EMG proportional"
 6422      616E6365 
 6422      640A3620 
 6422      2D3E204A 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 149


 6422      6F797374 
 6423 03f1 204E430A 		.ascii	" NC\012\000"
 6423      00
 6424 03f6 0000     		.align	2
 6425              	.LC134:
 6426 03f8 30202D3E 		.ascii	"0 -> Position\0121 -> PWM\0122 -> Current\0123 -> P"
 6426      20506F73 
 6426      6974696F 
 6426      6E0A3120 
 6426      2D3E2050 
 6427 0422 6F736974 		.ascii	"osition and Current\012\000"
 6427      696F6E20 
 6427      616E6420 
 6427      43757272 
 6427      656E740A 
 6428 0437 00       		.align	2
 6429              	.LC135:
 6430 0438 30202D3E 		.ascii	"0 -> Deactivate [NO]\0121 -> Activate [YES]\012\000"
 6430      20446561 
 6430      63746976 
 6430      61746520 
 6430      5B4E4F5D 
 6431 0462 0000     		.align	2
 6432              	.LC136:
 6433 0464 30202D3E 		.ascii	"0 -> Right\0121 -> Left\012\000"
 6433      20526967 
 6433      68740A31 
 6433      202D3E20 
 6433      4C656674 
 6434 047a 0000     		.align	2
 6435              	.LC137:
 6436 047c 30202D3E 		.ascii	"0 -> OFF\0121 -> ON\012The board will reset\012\000"
 6436      204F4646 
 6436      0A31202D 
 6436      3E204F4E 
 6436      0A546865 
 6437 04a3 00       		.align	2
 6438              	.LC138:
 6439 04a4 30202D3E 		.ascii	"0 -> None\0121 -> SD/RTC board\0122 -> WiFi board ["
 6439      204E6F6E 
 6439      650A3120 
 6439      2D3E2053 
 6439      442F5254 
 6440 04d1 4E2F415D 		.ascii	"N/A]\0123 -> Other [N/A]\012The board will reset\012"
 6440      0A33202D 
 6440      3E204F74 
 6440      68657220 
 6440      5B4E2F41 
 6441 04fc 00       		.ascii	"\000"
 6442 04fd 000000   		.align	2
 6443              	.LC139:
 6444 0500 30202D3E 		.ascii	"0 -> Generic user\0121 -> Maria\0122 -> R01\012The "
 6444      2047656E 
 6444      65726963 
 6444      20757365 
 6444      720A3120 
 6445 052a 626F6172 		.ascii	"board will reset\012\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 150


 6445      64207769 
 6445      6C6C2072 
 6445      65736574 
 6445      0A00
 6446              		.align	2
 6447              	.LC140:
 6448 053c 30202D3E 		.ascii	"0 -> MC33887 (Standard)\0121 -> VNH5019 (High power"
 6448      204D4333 
 6448      33383837 
 6448      20285374 
 6448      616E6461 
 6449 056c 290A3220 		.ascii	")\0122 -> ESC (Brushless)\012The board will reset\012"
 6449      2D3E2045 
 6449      53432028 
 6449      42727573 
 6449      686C6573 
 6450 0598 00       		.ascii	"\000"
 6451 0599 000000   		.align	2
 6452              	.LC141:
 6453 059c 30202D3E 		.ascii	"0 -> SOFTHAND PRO\0121 -> GENERIC 2 MOTORS\0122 -> "
 6453      20534F46 
 6453      5448414E 
 6453      44205052 
 6453      4F0A3120 
 6454 05c9 41495220 		.ascii	"AIR CHAMBERS\0123 -> OTTOBOCK WRIST\0124 -> SOFTHAN"
 6454      4348414D 
 6454      42455253 
 6454      0A33202D 
 6454      3E204F54 
 6455 05f6 44203220 		.ascii	"D 2 MOTORS\012The board will reset\012\000"
 6455      4D4F544F 
 6455      52530A54 
 6455      68652062 
 6455      6F617264 
 6456 0617 00       		.align	2
 6457              	.LC142:
 6458 0618 30202D3E 		.ascii	"0 -> Close:CW, Open:CCW\0121 -> Close:CCW, Open:CW\012"
 6458      20436C6F 
 6458      73653A43 
 6458      572C204F 
 6458      70656E3A 
 6459 0648 00       		.ascii	"\000"
 6460 0649 000000   		.align	2
 6461              	.LC0:
 6462 064c 02       		.byte	2
 6463 064d 07       		.byte	7
 6464 064e 07       		.byte	7
 6465 064f 00       		.byte	0
 6466 0650 00       		.byte	0
 6467 0651 00       		.byte	0
 6468 0652 02       		.byte	2
 6469 0653 03       		.byte	3
 6470 0654 07       		.byte	7
 6471 0655 00       		.byte	0
 6472 0656 05       		.byte	5
 6473 0657 05       		.byte	5
 6474 0658 03       		.byte	3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 151


 6475 0659 04       		.byte	4
 6476 065a 00       		.byte	0
 6477 065b 06       		.byte	6
 6478 065c 02       		.byte	2
 6479 065d 00       		.byte	0
 6480 065e 01       		.byte	1
 6481 065f 00       		.byte	0
 6482 0660 07       		.byte	7
 6483 0661 02       		.byte	2
 6484 0662 05       		.byte	5
 6485 0663 05       		.byte	5
 6486 0664 05       		.byte	5
 6487 0665 00       		.byte	0
 6488 0666 00       		.byte	0
 6489 0667 00       		.byte	0
 6490 0668 00       		.byte	0
 6491 0669 00       		.byte	0
 6492 066a 00       		.byte	0
 6493 066b 02       		.byte	2
 6494 066c 00       		.byte	0
 6495 066d 02       		.byte	2
 6496 066e 00       		.byte	0
 6497 066f 09       		.byte	9
 6498 0670 02       		.byte	2
 6499 0671 00       		.byte	0
 6500 0672 02       		.byte	2
 6501 0673 00       		.byte	0
 6502 0674 02       		.byte	2
 6503 0675 01       		.byte	1
 6504 0676 00       		.byte	0
 6505 0677 07       		.byte	7
 6506 0678 07       		.byte	7
 6507 0679 00       		.byte	0
 6508 067a 00       		.byte	0
 6509 067b 00       		.byte	0
 6510 067c 02       		.byte	2
 6511 067d 03       		.byte	3
 6512 067e 07       		.byte	7
 6513 067f 00       		.byte	0
 6514 0680 05       		.byte	5
 6515 0681 05       		.byte	5
 6516 0682 03       		.byte	3
 6517 0683 00       		.byte	0
 6518 0684 01       		.byte	1
 6519 0685 00       		.byte	0
 6520 0686 07       		.byte	7
 6521 0687 02       		.byte	2
 6522 0688 00       		.byte	0
 6523 0689 02       		.byte	2
 6524 068a 00       		.byte	0
 6525 068b 02       		.byte	2
 6526 068c 01       		.byte	1
 6527 068d 02       		.byte	2
 6528 068e 02       		.byte	2
 6529 068f 00       		.byte	0
 6530 0690 02       		.byte	2
 6531 0691 02       		.byte	2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 152


 6532 0692 00       		.byte	0
 6533 0693 04       		.byte	4
 6534 0694 03       		.byte	3
 6535 0695 04       		.byte	4
 6536 0696 00       		.byte	0
 6537 0697 00       		.byte	0
 6538 0698 04       		.byte	4
 6539 0699 00       		.byte	0
 6540 069a 00       		.byte	0
 6541 069b 02       		.byte	2
 6542 069c 05       		.byte	5
 6543 069d 07       		.byte	7
 6544 069e 07       		.byte	7
 6545 069f 00       		.align	2
 6546              	.LC1:
 6547 06a0 31202D20 		.ascii	"1 - Device ID:\000"
 6547      44657669 
 6547      63652049 
 6547      443A00
 6548 06af 00       		.align	2
 6549              	.LC2:
 6550 06b0 32202D20 		.ascii	"2 - Position PID [P, I, D]:\000"
 6550      506F7369 
 6550      74696F6E 
 6550      20504944 
 6550      205B502C 
 6551              		.align	2
 6552              	.LC3:
 6553 06cc 33202D20 		.ascii	"3 - Current PID [P, I, D]:\000"
 6553      43757272 
 6553      656E7420 
 6553      50494420 
 6553      5B502C20 
 6554 06e7 00       		.align	2
 6555              	.LC4:
 6556 06e8 34202D20 		.ascii	"4 - Startup Activation:\000"
 6556      53746172 
 6556      74757020 
 6556      41637469 
 6556      76617469 
 6557              		.align	2
 6558              	.LC5:
 6559 0700 35202D20 		.ascii	"5 - Input mode:\000"
 6559      496E7075 
 6559      74206D6F 
 6559      64653A00 
 6560              		.align	2
 6561              	.LC6:
 6562 0710 36202D20 		.ascii	"6 - Control mode:\000"
 6562      436F6E74 
 6562      726F6C20 
 6562      6D6F6465 
 6562      3A00
 6563 0722 0000     		.align	2
 6564              	.LC7:
 6565 0724 37202D20 		.ascii	"7 - Resolutions:\000"
 6565      5265736F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 153


 6565      6C757469 
 6565      6F6E733A 
 6565      00
 6566 0735 000000   		.align	2
 6567              	.LC8:
 6568 0738 38202D20 		.ascii	"8 - Measurement Offsets:\000"
 6568      4D656173 
 6568      7572656D 
 6568      656E7420 
 6568      4F666673 
 6569 0751 000000   		.align	2
 6570              	.LC9:
 6571 0754 39202D20 		.ascii	"9 - Multipliers:\000"
 6571      4D756C74 
 6571      69706C69 
 6571      6572733A 
 6571      00
 6572 0765 000000   		.align	2
 6573              	.LC10:
 6574 0768 3130202D 		.ascii	"10 - Pos. limit active:\000"
 6574      20506F73 
 6574      2E206C69 
 6574      6D697420 
 6574      61637469 
 6575              		.align	2
 6576              	.LC11:
 6577 0780 3131202D 		.ascii	"11 - Pos. limits [inf, sup]:\000"
 6577      20506F73 
 6577      2E206C69 
 6577      6D697473 
 6577      205B696E 
 6578 079d 000000   		.align	2
 6579              	.LC12:
 6580 07a0 3132202D 		.ascii	"12 - Max steps [neg, pos]:\000"
 6580      204D6178 
 6580      20737465 
 6580      7073205B 
 6580      6E65672C 
 6581 07bb 00       		.align	2
 6582              	.LC13:
 6583 07bc 3133202D 		.ascii	"13 - Current limit:\000"
 6583      20437572 
 6583      72656E74 
 6583      206C696D 
 6583      69743A00 
 6584              		.align	2
 6585              	.LC14:
 6586 07d0 3134202D 		.ascii	"14 - EMG thresholds:\000"
 6586      20454D47 
 6586      20746872 
 6586      6573686F 
 6586      6C64733A 
 6587 07e5 000000   		.align	2
 6588              	.LC15:
 6589 07e8 3135202D 		.ascii	"15 - EMG calibration on startup:\000"
 6589      20454D47 
 6589      2063616C 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 154


 6589      69627261 
 6589      74696F6E 
 6590 0809 000000   		.align	2
 6591              	.LC16:
 6592 080c 3136202D 		.ascii	"16 - EMG max values:\000"
 6592      20454D47 
 6592      206D6178 
 6592      2076616C 
 6592      7565733A 
 6593 0821 000000   		.align	2
 6594              	.LC17:
 6595 0824 3137202D 		.ascii	"17 - EMG max speeds:\000"
 6595      20454D47 
 6595      206D6178 
 6595      20737065 
 6595      6564733A 
 6596 0839 000000   		.align	2
 6597              	.LC18:
 6598 083c 3138202D 		.ascii	"18 - Absolute encoder position:\000"
 6598      20416273 
 6598      6F6C7574 
 6598      6520656E 
 6598      636F6465 
 6599              		.align	2
 6600              	.LC19:
 6601 085c 3139202D 		.ascii	"19 - Motor handle ratio:\000"
 6601      204D6F74 
 6601      6F722068 
 6601      616E646C 
 6601      65207261 
 6602 0875 000000   		.align	2
 6603              	.LC20:
 6604 0878 3230202D 		.ascii	"20 - PWM rescaling:\000"
 6604      2050574D 
 6604      20726573 
 6604      63616C69 
 6604      6E673A00 
 6605              		.align	2
 6606              	.LC21:
 6607 088c 3231202D 		.ascii	"21 - Current lookup:\000"
 6607      20437572 
 6607      72656E74 
 6607      206C6F6F 
 6607      6B75703A 
 6608 08a1 000000   		.align	2
 6609              	.LC22:
 6610 08a4 3232202D 		.ascii	"22 - Date of maintenance [D/M/Y]:\000"
 6610      20446174 
 6610      65206F66 
 6610      206D6169 
 6610      6E74656E 
 6611 08c6 0000     		.align	2
 6612              	.LC23:
 6613 08c8 3233202D 		.ascii	"23 - Rest position:\000"
 6613      20526573 
 6613      7420706F 
 6613      73697469 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 155


 6613      6F6E3A00 
 6614              		.align	2
 6615              	.LC24:
 6616 08dc 3234202D 		.ascii	"24 - Rest position time delay (ms):\000"
 6616      20526573 
 6616      7420706F 
 6616      73697469 
 6616      6F6E2074 
 6617              		.align	2
 6618              	.LC25:
 6619 0900 3235202D 		.ascii	"25 - Rest vel closure (ticks/sec):\000"
 6619      20526573 
 6619      74207665 
 6619      6C20636C 
 6619      6F737572 
 6620 0923 00       		.align	2
 6621              	.LC26:
 6622 0924 3236202D 		.ascii	"26 - Rest position enabled:\000"
 6622      20526573 
 6622      7420706F 
 6622      73697469 
 6622      6F6E2065 
 6623              		.align	2
 6624              	.LC27:
 6625 0940 3237202D 		.ascii	"27 - EMG inversion:\000"
 6625      20454D47 
 6625      20696E76 
 6625      65727369 
 6625      6F6E3A00 
 6626              		.align	2
 6627              	.LC28:
 6628 0954 3238202D 		.ascii	"28 - Hand side:\000"
 6628      2048616E 
 6628      64207369 
 6628      64653A00 
 6629              		.align	2
 6630              	.LC29:
 6631 0964 3239202D 		.ascii	"29 - Enable IMUs:\000"
 6631      20456E61 
 6631      626C6520 
 6631      494D5573 
 6631      3A00
 6632 0976 0000     		.align	2
 6633              	.LC30:
 6634 0978 3330202D 		.ascii	"30 - Read Expansion port:\000"
 6634      20526561 
 6634      64204578 
 6634      70616E73 
 6634      696F6E20 
 6635 0992 0000     		.align	2
 6636              	.LC31:
 6637 0994 3331202D 		.ascii	"31 - Reset counters:\000"
 6637      20526573 
 6637      65742063 
 6637      6F756E74 
 6637      6572733A 
 6638 09a9 000000   		.align	2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 156


 6639              	.LC32:
 6640 09ac 3332202D 		.ascii	"32 - Last checked Time [D/M/Y H:M:S]:\000"
 6640      204C6173 
 6640      74206368 
 6640      65636B65 
 6640      64205469 
 6641 09d2 0000     		.align	2
 6642              	.LC33:
 6643 09d4 3333202D 		.ascii	"33 - SPI read delay (IMU):\000"
 6643      20535049 
 6643      20726561 
 6643      64206465 
 6643      6C617920 
 6644 09ef 00       		.align	2
 6645              	.LC34:
 6646 09f0 3334202D 		.ascii	"34 - On board IMU conf. [a,g,m,q,t]:\000"
 6646      204F6E20 
 6646      626F6172 
 6646      6420494D 
 6646      5520636F 
 6647 0a15 000000   		.align	2
 6648              	.LC35:
 6649 0a18 3335202D 		.ascii	"35 - User ID:\000"
 6649      20557365 
 6649      72204944 
 6649      3A00
 6650 0a26 0000     		.align	2
 6651              	.LC36:
 6652 0a28 3336202D 		.ascii	"36 - User code:\000"
 6652      20557365 
 6652      7220636F 
 6652      64653A00 
 6653              		.align	2
 6654              	.LC37:
 6655 0a38 3337202D 		.ascii	"37 - Associated encoder line:\000"
 6655      20417373 
 6655      6F636961 
 6655      74656420 
 6655      656E636F 
 6656 0a56 0000     		.align	2
 6657              	.LC38:
 6658 0a58 3338202D 		.ascii	"38 - Driver type:\000"
 6658      20447269 
 6658      76657220 
 6658      74797065 
 6658      3A00
 6659 0a6a 0000     		.align	2
 6660              	.LC39:
 6661 0a6c 3339202D 		.ascii	"39 - PWM rate limiter:\000"
 6661      2050574D 
 6661      20726174 
 6661      65206C69 
 6661      6D697465 
 6662 0a83 00       		.align	2
 6663              	.LC40:
 6664 0a84 3430202D 		.ascii	"40 - Not reversible:\000"
 6664      204E6F74 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 157


 6664      20726576 
 6664      65727369 
 6664      626C653A 
 6665 0a99 000000   		.align	2
 6666              	.LC41:
 6667 0a9c 3431202D 		.ascii	"41 - Enc idx used for control:\000"
 6667      20456E63 
 6667      20696478 
 6667      20757365 
 6667      6420666F 
 6668 0abb 00       		.align	2
 6669              	.LC42:
 6670 0abc 3432202D 		.ascii	"42 - Gear params[N1, N2, I1]:\000"
 6670      20476561 
 6670      72207061 
 6670      72616D73 
 6670      5B4E312C 
 6671 0ada 0000     		.align	2
 6672              	.LC43:
 6673 0adc 3433202D 		.ascii	"43 - Use second motor:\000"
 6673      20557365 
 6673      20736563 
 6673      6F6E6420 
 6673      6D6F746F 
 6674 0af3 00       		.align	2
 6675              	.LC44:
 6676 0af4 3434202D 		.ascii	"44 - Position PID [P, I, D]:\000"
 6676      20506F73 
 6676      6974696F 
 6676      6E205049 
 6676      44205B50 
 6677 0b11 000000   		.align	2
 6678              	.LC45:
 6679 0b14 3435202D 		.ascii	"45 - Current PID [P, I, D]:\000"
 6679      20437572 
 6679      72656E74 
 6679      20504944 
 6679      205B502C 
 6680              		.align	2
 6681              	.LC46:
 6682 0b30 3436202D 		.ascii	"46 - Startup Activation:\000"
 6682      20537461 
 6682      72747570 
 6682      20416374 
 6682      69766174 
 6683 0b49 000000   		.align	2
 6684              	.LC47:
 6685 0b4c 3437202D 		.ascii	"47 - Input mode:\000"
 6685      20496E70 
 6685      7574206D 
 6685      6F64653A 
 6685      00
 6686 0b5d 000000   		.align	2
 6687              	.LC48:
 6688 0b60 3438202D 		.ascii	"48 - Control mode:\000"
 6688      20436F6E 
 6688      74726F6C 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 158


 6688      206D6F64 
 6688      653A00
 6689 0b73 00       		.align	2
 6690              	.LC49:
 6691 0b74 3439202D 		.ascii	"49 - Resolutions:\000"
 6691      20526573 
 6691      6F6C7574 
 6691      696F6E73 
 6691      3A00
 6692 0b86 0000     		.align	2
 6693              	.LC50:
 6694 0b88 3530202D 		.ascii	"50 - Measurement Offsets:\000"
 6694      204D6561 
 6694      73757265 
 6694      6D656E74 
 6694      204F6666 
 6695 0ba2 0000     		.align	2
 6696              	.LC51:
 6697 0ba4 3531202D 		.ascii	"51 - Multipliers:\000"
 6697      204D756C 
 6697      7469706C 
 6697      69657273 
 6697      3A00
 6698 0bb6 0000     		.align	2
 6699              	.LC52:
 6700 0bb8 3532202D 		.ascii	"52 - Pos. limit active:\000"
 6700      20506F73 
 6700      2E206C69 
 6700      6D697420 
 6700      61637469 
 6701              		.align	2
 6702              	.LC53:
 6703 0bd0 3533202D 		.ascii	"53 - Pos. limits [inf, sup]:\000"
 6703      20506F73 
 6703      2E206C69 
 6703      6D697473 
 6703      205B696E 
 6704 0bed 000000   		.align	2
 6705              	.LC54:
 6706 0bf0 3534202D 		.ascii	"54 - Max steps [neg, pos]:\000"
 6706      204D6178 
 6706      20737465 
 6706      7073205B 
 6706      6E65672C 
 6707 0c0b 00       		.align	2
 6708              	.LC55:
 6709 0c0c 3535202D 		.ascii	"55 - Current limit:\000"
 6709      20437572 
 6709      72656E74 
 6709      206C696D 
 6709      69743A00 
 6710              		.align	2
 6711              	.LC56:
 6712 0c20 3536202D 		.ascii	"56 - Absolute encoder position:\000"
 6712      20416273 
 6712      6F6C7574 
 6712      6520656E 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 159


 6712      636F6465 
 6713              		.align	2
 6714              	.LC57:
 6715 0c40 3537202D 		.ascii	"57 - Motor handle ratio:\000"
 6715      204D6F74 
 6715      6F722068 
 6715      616E646C 
 6715      65207261 
 6716 0c59 000000   		.align	2
 6717              	.LC58:
 6718 0c5c 3538202D 		.ascii	"58 - PWM rescaling:\000"
 6718      2050574D 
 6718      20726573 
 6718      63616C69 
 6718      6E673A00 
 6719              		.align	2
 6720              	.LC59:
 6721 0c70 3539202D 		.ascii	"59 - Current lookup:\000"
 6721      20437572 
 6721      72656E74 
 6721      206C6F6F 
 6721      6B75703A 
 6722 0c85 000000   		.align	2
 6723              	.LC60:
 6724 0c88 3630202D 		.ascii	"60 - Associated encoder line:\000"
 6724      20417373 
 6724      6F636961 
 6724      74656420 
 6724      656E636F 
 6725 0ca6 0000     		.align	2
 6726              	.LC61:
 6727 0ca8 3631202D 		.ascii	"61 - Driver type:\000"
 6727      20447269 
 6727      76657220 
 6727      74797065 
 6727      3A00
 6728 0cba 0000     		.align	2
 6729              	.LC62:
 6730 0cbc 3632202D 		.ascii	"62 - PWM rate limiter:\000"
 6730      2050574D 
 6730      20726174 
 6730      65206C69 
 6730      6D697465 
 6731 0cd3 00       		.align	2
 6732              	.LC63:
 6733 0cd4 3633202D 		.ascii	"63 - Not reversible:\000"
 6733      204E6F74 
 6733      20726576 
 6733      65727369 
 6733      626C653A 
 6734 0ce9 000000   		.align	2
 6735              	.LC64:
 6736 0cec 3634202D 		.ascii	"64 - Enc idx used for control:\000"
 6736      20456E63 
 6736      20696478 
 6736      20757365 
 6736      6420666F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 160


 6737 0d0b 00       		.align	2
 6738              	.LC65:
 6739 0d0c 3635202D 		.ascii	"65 - Gear params[N1, N2, I1]:\000"
 6739      20476561 
 6739      72207061 
 6739      72616D73 
 6739      5B4E312C 
 6740 0d2a 0000     		.align	2
 6741              	.LC66:
 6742 0d2c 3636202D 		.ascii	"66 - Read enc raw line 0:\000"
 6742      20526561 
 6742      6420656E 
 6742      63207261 
 6742      77206C69 
 6743 0d46 0000     		.align	2
 6744              	.LC67:
 6745 0d48 3637202D 		.ascii	"67 - Read enc raw line 1:\000"
 6745      20526561 
 6745      6420656E 
 6745      63207261 
 6745      77206C69 
 6746 0d62 0000     		.align	2
 6747              	.LC68:
 6748 0d64 3638202D 		.ascii	"68 - Read additional ADC port:\000"
 6748      20526561 
 6748      64206164 
 6748      64697469 
 6748      6F6E616C 
 6749 0d83 00       		.align	2
 6750              	.LC69:
 6751 0d84 3639202D 		.ascii	"69 - ADC channel [1-6]:\000"
 6751      20414443 
 6751      20636861 
 6751      6E6E656C 
 6751      205B312D 
 6752              		.align	2
 6753              	.LC70:
 6754 0d9c 3730202D 		.ascii	"70 - ADC channel [7-12]:\000"
 6754      20414443 
 6754      20636861 
 6754      6E6E656C 
 6754      205B372D 
 6755 0db5 000000   		.align	2
 6756              	.LC71:
 6757 0db8 3731202D 		.ascii	"71 - Record EMG on SD card:\000"
 6757      20526563 
 6757      6F726420 
 6757      454D4720 
 6757      6F6E2053 
 6758              		.align	2
 6759              	.LC72:
 6760 0dd4 3732202D 		.ascii	"72 - Joystick closure speed:\000"
 6760      204A6F79 
 6760      73746963 
 6760      6B20636C 
 6760      6F737572 
 6761 0df1 000000   		.align	2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 161


 6762              	.LC73:
 6763 0df4 3733202D 		.ascii	"73 - Joystick threshold:\000"
 6763      204A6F79 
 6763      73746963 
 6763      6B207468 
 6763      72657368 
 6764 0e0d 000000   		.align	2
 6765              	.LC74:
 6766 0e10 3734202D 		.ascii	"74 - Joystick gains:\000"
 6766      204A6F79 
 6766      73746963 
 6766      6B206761 
 6766      696E733A 
 6767 0e25 000000   		.align	2
 6768              	.LC75:
 6769 0e28 3735202D 		.ascii	"75 - Device type:\000"
 6769      20446576 
 6769      69636520 
 6769      74797065 
 6769      3A00
 6770 0e3a 0000     		.align	2
 6771              	.LC76:
 6772 0e3c 3736202D 		.ascii	"76 - EMG FSM act.mode:\000"
 6772      20454D47 
 6772      2046534D 
 6772      20616374 
 6772      2E6D6F64 
 6773 0e53 00       		.align	2
 6774              	.LC77:
 6775 0e54 3737202D 		.ascii	"77 - Fast act.thresholds:\000"
 6775      20466173 
 6775      74206163 
 6775      742E7468 
 6775      72657368 
 6776 0e6e 0000     		.align	2
 6777              	.LC78:
 6778 0e70 3738202D 		.ascii	"78 - Wrist direction:\000"
 6778      20577269 
 6778      73742064 
 6778      69726563 
 6778      74696F6E 
 6779 0e86 0000     		.align	2
 6780              	.LC79:
 6781 0e88 3739202D 		.ascii	"79 - Slave communication active:\000"
 6781      20536C61 
 6781      76652063 
 6781      6F6D6D75 
 6781      6E696361 
 6782 0ea9 000000   		.align	2
 6783              	.LC80:
 6784 0eac 3830202D 		.ascii	"80 - Slave ID:\000"
 6784      20536C61 
 6784      76652049 
 6784      443A00
 6785 0ebb 00       		.align	2
 6786              	.LC81:
 6787 0ebc 3831202D 		.ascii	"81 - Maximum slave residual current:\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 162


 6787      204D6178 
 6787      696D756D 
 6787      20736C61 
 6787      76652072 
 6788 0ee1 000000   		.align	2
 6789              	.LC82:
 6790 0ee4 3832202D 		.ascii	"82 - Maximum pressure feedback (kPa):\000"
 6790      204D6178 
 6790      696D756D 
 6790      20707265 
 6790      73737572 
 6791 0f0a 0000     		.align	2
 6792              	.LC83:
 6793 0f0c 3833202D 		.ascii	"83 - Proportional pressure error gain:\000"
 6793      2050726F 
 6793      706F7274 
 6793      696F6E61 
 6793      6C207072 
 6794 0f33 00       		.align	2
 6795              	.LC129:
 6796 0f34 A0060000 		.word	.LC1
 6797 0f38 B0060000 		.word	.LC2
 6798 0f3c CC060000 		.word	.LC3
 6799 0f40 E8060000 		.word	.LC4
 6800 0f44 00070000 		.word	.LC5
 6801 0f48 10070000 		.word	.LC6
 6802 0f4c 24070000 		.word	.LC7
 6803 0f50 38070000 		.word	.LC8
 6804 0f54 54070000 		.word	.LC9
 6805 0f58 68070000 		.word	.LC10
 6806 0f5c 80070000 		.word	.LC11
 6807 0f60 A0070000 		.word	.LC12
 6808 0f64 BC070000 		.word	.LC13
 6809 0f68 D0070000 		.word	.LC14
 6810 0f6c E8070000 		.word	.LC15
 6811 0f70 0C080000 		.word	.LC16
 6812 0f74 24080000 		.word	.LC17
 6813 0f78 3C080000 		.word	.LC18
 6814 0f7c 5C080000 		.word	.LC19
 6815 0f80 78080000 		.word	.LC20
 6816 0f84 8C080000 		.word	.LC21
 6817 0f88 A4080000 		.word	.LC22
 6818 0f8c C8080000 		.word	.LC23
 6819 0f90 DC080000 		.word	.LC24
 6820 0f94 00090000 		.word	.LC25
 6821 0f98 24090000 		.word	.LC26
 6822 0f9c 40090000 		.word	.LC27
 6823 0fa0 54090000 		.word	.LC28
 6824 0fa4 64090000 		.word	.LC29
 6825 0fa8 78090000 		.word	.LC30
 6826 0fac 94090000 		.word	.LC31
 6827 0fb0 AC090000 		.word	.LC32
 6828 0fb4 D4090000 		.word	.LC33
 6829 0fb8 F0090000 		.word	.LC34
 6830 0fbc 180A0000 		.word	.LC35
 6831 0fc0 280A0000 		.word	.LC36
 6832 0fc4 380A0000 		.word	.LC37
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 163


 6833 0fc8 580A0000 		.word	.LC38
 6834 0fcc 6C0A0000 		.word	.LC39
 6835 0fd0 840A0000 		.word	.LC40
 6836 0fd4 9C0A0000 		.word	.LC41
 6837 0fd8 BC0A0000 		.word	.LC42
 6838 0fdc DC0A0000 		.word	.LC43
 6839 0fe0 F40A0000 		.word	.LC44
 6840 0fe4 140B0000 		.word	.LC45
 6841 0fe8 300B0000 		.word	.LC46
 6842 0fec 4C0B0000 		.word	.LC47
 6843 0ff0 600B0000 		.word	.LC48
 6844 0ff4 740B0000 		.word	.LC49
 6845 0ff8 880B0000 		.word	.LC50
 6846 0ffc A40B0000 		.word	.LC51
 6847 1000 B80B0000 		.word	.LC52
 6848 1004 D00B0000 		.word	.LC53
 6849 1008 F00B0000 		.word	.LC54
 6850 100c 0C0C0000 		.word	.LC55
 6851 1010 200C0000 		.word	.LC56
 6852 1014 400C0000 		.word	.LC57
 6853 1018 5C0C0000 		.word	.LC58
 6854 101c 700C0000 		.word	.LC59
 6855 1020 880C0000 		.word	.LC60
 6856 1024 A80C0000 		.word	.LC61
 6857 1028 BC0C0000 		.word	.LC62
 6858 102c D40C0000 		.word	.LC63
 6859 1030 EC0C0000 		.word	.LC64
 6860 1034 0C0D0000 		.word	.LC65
 6861 1038 2C0D0000 		.word	.LC66
 6862 103c 480D0000 		.word	.LC67
 6863 1040 640D0000 		.word	.LC68
 6864 1044 840D0000 		.word	.LC69
 6865 1048 9C0D0000 		.word	.LC70
 6866 104c B80D0000 		.word	.LC71
 6867 1050 D40D0000 		.word	.LC72
 6868 1054 F40D0000 		.word	.LC73
 6869 1058 100E0000 		.word	.LC74
 6870 105c 280E0000 		.word	.LC75
 6871 1060 3C0E0000 		.word	.LC76
 6872 1064 540E0000 		.word	.LC77
 6873 1068 700E0000 		.word	.LC78
 6874 106c 880E0000 		.word	.LC79
 6875 1070 AC0E0000 		.word	.LC80
 6876 1074 BC0E0000 		.word	.LC81
 6877 1078 E40E0000 		.word	.LC82
 6878 107c 0C0F0000 		.word	.LC83
 6879              		.align	2
 6880              	.LC85:
 6881 1080 03       		.byte	3
 6882 1081 01       		.byte	1
 6883 1082 02       		.byte	2
 6884 1083 03       		.byte	3
 6885 1084 03       		.byte	3
 6886 1085 03       		.byte	3
 6887 1086 03       		.byte	3
 6888 1087 03       		.byte	3
 6889 1088 03       		.byte	3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 164


 6890 1089 04       		.byte	4
 6891 108a 05       		.byte	5
 6892 108b 06       		.byte	6
 6893 108c 03       		.byte	3
 6894 108d 07       		.byte	7
 6895 108e 08       		.byte	8
 6896 108f 09       		.byte	9
 6897 1090 03       		.byte	3
 6898 1091 05       		.byte	5
 6899 1092 03       		.byte	3
 6900 1093 01       		.byte	1
 6901 1094 02       		.byte	2
 6902 1095 03       		.byte	3
 6903 1096 03       		.byte	3
 6904 1097 03       		.byte	3
 6905 1098 09       		.byte	9
 6906 1099 03       		.byte	3
 6907 109a 05       		.byte	5
 6908 109b 03       		.byte	3
 6909 109c 0A       		.byte	10
 6910 109d 0B       		.byte	11
 6911 109e 0C       		.byte	12
 6912 109f 03       		.byte	3
 6913              		.align	2
 6914              	.LC86:
 6915 10a0 02       		.byte	2
 6916 10a1 03       		.byte	3
 6917 10a2 08       		.byte	8
 6918 10a3 0B       		.byte	11
 6919 10a4 17       		.byte	23
 6920 10a5 2C       		.byte	44
 6921 10a6 2D       		.byte	45
 6922 10a7 32       		.byte	50
 6923 10a8 35       		.byte	53
 6924 10a9 000000   		.align	2
 6925              	.LC87:
 6926 10ac 02       		.byte	2
 6927 10ad 03       		.byte	3
 6928 10ae 05       		.byte	5
 6929 10af 08       		.byte	8
 6930 10b0 0B       		.byte	11
 6931 10b1 17       		.byte	23
 6932 10b2 18       		.byte	24
 6933 10b3 1C       		.byte	28
 6934 10b4 1F       		.byte	31
 6935 10b5 20       		.byte	32
 6936 10b6 26       		.byte	38
 6937 10b7 2C       		.byte	44
 6938 10b8 2D       		.byte	45
 6939 10b9 2F       		.byte	47
 6940 10ba 32       		.byte	50
 6941 10bb 35       		.byte	53
 6942 10bc 3D       		.byte	61
 6943 10bd 4B       		.byte	75
 6944              		.section	.text.manage_param_list,"ax",%progbits
 6945              		.align	2
 6946              		.global	manage_param_list
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 165


 6947              		.thumb
 6948              		.thumb_func
 6949              		.type	manage_param_list, %function
 6950              	manage_param_list:
 6951              	.LFB68:
 897:..\src/command_processing.c **** 
 898:..\src/command_processing.c **** //==============================================================================
 899:..\src/command_processing.c **** //                                                             MANAGE PARAM LIST
 900:..\src/command_processing.c **** //==============================================================================
 901:..\src/command_processing.c **** 
 902:..\src/command_processing.c **** void manage_param_list(uint16 index) {
 6952              		.loc 1 902 0
 6953              		.cfi_startproc
 6954              		@ args = 0, pretend = 0, frame = 1416
 6955              		@ frame_needed = 1, uses_anonymous_args = 0
 6956 0000 B0B5     		push	{r4, r5, r7, lr}
 6957              		.cfi_def_cfa_offset 16
 6958              		.cfi_offset 4, -16
 6959              		.cfi_offset 5, -12
 6960              		.cfi_offset 7, -8
 6961              		.cfi_offset 14, -4
 6962 0002 ADF5B36D 		sub	sp, sp, #1432
 6963              		.cfi_def_cfa_offset 1448
 6964 0006 04AF     		add	r7, sp, #16
 6965              		.cfi_def_cfa 7, 1432
 6966 0008 0246     		mov	r2, r0
 6967 000a BB1D     		adds	r3, r7, #6
 6968 000c 1A80     		strh	r2, [r3]	@ movhi
 903:..\src/command_processing.c ****     uint8 CYDATA i, j;
 904:..\src/command_processing.c ****     uint8 CYDATA sod;
 905:..\src/command_processing.c ****     uint8 PARAM_IDX;
 906:..\src/command_processing.c ****     int16 aux_int16;
 907:..\src/command_processing.c ****     uint16 aux_uint16;
 908:..\src/command_processing.c ****     int32 aux_int32;
 909:..\src/command_processing.c ****     uint32 aux_uint32;
 910:..\src/command_processing.c ****     float aux_float;
 911:..\src/command_processing.c ****  
 912:..\src/command_processing.c ****     uint8 MOTOR_IDX = 0;
 6969              		.loc 1 912 0
 6970 000e 0023     		movs	r3, #0
 6971 0010 87F87D35 		strb	r3, [r7, #1405]
 913:..\src/command_processing.c ****     uint8 SECOND_MOTOR_IDX = 1;
 6972              		.loc 1 913 0
 6973 0014 0123     		movs	r3, #1
 6974 0016 87F87C35 		strb	r3, [r7, #1404]
 914:..\src/command_processing.c ****     
 915:..\src/command_processing.c ****     // Arrays
 916:..\src/command_processing.c ****     struct st_eeprom* MEM_P = &c_mem;   // c_mem is used for param reading
 6975              		.loc 1 916 0
 6976 001a 054B     		ldr	r3, .L375
 6977 001c C7F88035 		str	r3, [r7, #1408]
 917:..\src/command_processing.c ****     
 918:..\src/command_processing.c ****     if (index){                         // Switch from c_mem to g_mem
 6978              		.loc 1 918 0
 6979 0020 BB1D     		adds	r3, r7, #6
 6980 0022 1B88     		ldrh	r3, [r3]
 6981 0024 002B     		cmp	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 166


 6982 0026 07D0     		beq	.L312
 919:..\src/command_processing.c ****         MEM_P = &g_mem;                 // g_mem is used for param setting
 6983              		.loc 1 919 0
 6984 0028 024B     		ldr	r3, .L375+4
 6985 002a C7F88035 		str	r3, [r7, #1408]
 6986 002e 03E0     		b	.L376
 6987              	.L377:
 6988              		.align	2
 6989              	.L375:
 6990 0030 00000000 		.word	c_mem
 6991 0034 00000000 		.word	g_mem
 6992              	.L376:
 6993              	.L312:
 920:..\src/command_processing.c ****     }
 921:..\src/command_processing.c ****  
 922:..\src/command_processing.c ****     
 923:..\src/command_processing.c **** //------------------ BEGIN OF PARAMETERS VARIABLES --------------------//    
 924:..\src/command_processing.c ****     uint8* VAR_P[NUM_OF_PARAMS] = { 
 925:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 6994              		.loc 1 925 0
 6995 0038 D7F88035 		ldr	r3, [r7, #1408]
 6996 003c 03F1A002 		add	r2, r3, #160
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 6997              		.loc 1 924 0
 6998 0040 07F21C43 		addw	r3, r7, #1052
 6999 0044 1A60     		str	r2, [r3]
 926:..\src/command_processing.c ****     	(uint8*)&(MEM_P->motor[MOTOR_IDX].k_p),
 7000              		.loc 1 926 0
 7001 0046 97F87D25 		ldrb	r2, [r7, #1405]	@ zero_extendqisi2
 7002 004a 1346     		mov	r3, r2
 7003 004c DB00     		lsls	r3, r3, #3
 7004 004e 9B1A     		subs	r3, r3, r2
 7005 0050 1B01     		lsls	r3, r3, #4
 7006 0052 B033     		adds	r3, r3, #176
 7007 0054 D7F88025 		ldr	r2, [r7, #1408]
 7008 0058 1A44     		add	r2, r2, r3
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7009              		.loc 1 924 0
 7010 005a 07F21C43 		addw	r3, r7, #1052
 7011 005e 5A60     		str	r2, [r3, #4]
 927:..\src/command_processing.c ****     	(uint8*)&(MEM_P->motor[MOTOR_IDX].k_p_c), 
 7012              		.loc 1 927 0
 7013 0060 97F87D25 		ldrb	r2, [r7, #1405]	@ zero_extendqisi2
 7014 0064 1346     		mov	r3, r2
 7015 0066 DB00     		lsls	r3, r3, #3
 7016 0068 9B1A     		subs	r3, r3, r2
 7017 006a 1B01     		lsls	r3, r3, #4
 7018 006c B833     		adds	r3, r3, #184
 7019 006e D7F88025 		ldr	r2, [r7, #1408]
 7020 0072 1344     		add	r3, r3, r2
 7021 0074 1A1D     		adds	r2, r3, #4
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7022              		.loc 1 924 0
 7023 0076 07F21C43 		addw	r3, r7, #1052
 7024 007a 9A60     		str	r2, [r3, #8]
 928:..\src/command_processing.c ****     	(uint8*)&(MEM_P->motor[MOTOR_IDX].activ),
 7025              		.loc 1 928 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 167


 7026 007c 97F87D25 		ldrb	r2, [r7, #1405]	@ zero_extendqisi2
 7027 0080 1346     		mov	r3, r2
 7028 0082 DB00     		lsls	r3, r3, #3
 7029 0084 9B1A     		subs	r3, r3, r2
 7030 0086 1B01     		lsls	r3, r3, #4
 7031 0088 E033     		adds	r3, r3, #224
 7032 008a D7F88025 		ldr	r2, [r7, #1408]
 7033 008e 1A44     		add	r2, r2, r3
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7034              		.loc 1 924 0
 7035 0090 07F21C43 		addw	r3, r7, #1052
 7036 0094 DA60     		str	r2, [r3, #12]
 929:..\src/command_processing.c ****     	(uint8*)&(MEM_P->motor[MOTOR_IDX].input_mode),
 7037              		.loc 1 929 0
 7038 0096 97F87D25 		ldrb	r2, [r7, #1405]	@ zero_extendqisi2
 7039 009a 1346     		mov	r3, r2
 7040 009c DB00     		lsls	r3, r3, #3
 7041 009e 9B1A     		subs	r3, r3, r2
 7042 00a0 1B01     		lsls	r3, r3, #4
 7043 00a2 03F58473 		add	r3, r3, #264
 7044 00a6 D7F88025 		ldr	r2, [r7, #1408]
 7045 00aa 1344     		add	r3, r3, r2
 7046 00ac 9A1D     		adds	r2, r3, #6
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7047              		.loc 1 924 0
 7048 00ae 07F21C43 		addw	r3, r7, #1052
 7049 00b2 1A61     		str	r2, [r3, #16]
 930:..\src/command_processing.c ****     	(uint8*)&(MEM_P->motor[MOTOR_IDX].control_mode), 
 7050              		.loc 1 930 0
 7051 00b4 97F87D25 		ldrb	r2, [r7, #1405]	@ zero_extendqisi2
 7052 00b8 1346     		mov	r3, r2
 7053 00ba DB00     		lsls	r3, r3, #3
 7054 00bc 9B1A     		subs	r3, r3, r2
 7055 00be 1B01     		lsls	r3, r3, #4
 7056 00c0 03F58473 		add	r3, r3, #264
 7057 00c4 D7F88025 		ldr	r2, [r7, #1408]
 7058 00c8 1344     		add	r3, r3, r2
 7059 00ca DA1D     		adds	r2, r3, #7
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7060              		.loc 1 924 0
 7061 00cc 07F21C43 		addw	r3, r7, #1052
 7062 00d0 5A61     		str	r2, [r3, #20]
 931:..\src/command_processing.c ****     	(uint8*)&(MEM_P->enc[MEM_P->motor[MOTOR_IDX].encoder_line].res),
 7063              		.loc 1 931 0
 7064 00d2 97F87D25 		ldrb	r2, [r7, #1405]	@ zero_extendqisi2
 7065 00d6 D7F88015 		ldr	r1, [r7, #1408]
 7066 00da 1346     		mov	r3, r2
 7067 00dc DB00     		lsls	r3, r3, #3
 7068 00de 9B1A     		subs	r3, r3, r2
 7069 00e0 1B01     		lsls	r3, r3, #4
 7070 00e2 0B44     		add	r3, r3, r1
 7071 00e4 03F58873 		add	r3, r3, #272
 7072 00e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7073 00ea 1A46     		mov	r2, r3
 7074 00ec 1346     		mov	r3, r2
 7075 00ee 5B00     		lsls	r3, r3, #1
 7076 00f0 1344     		add	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 168


 7077 00f2 1B01     		lsls	r3, r3, #4
 7078 00f4 03F5C873 		add	r3, r3, #400
 7079 00f8 D7F88025 		ldr	r2, [r7, #1408]
 7080 00fc 1344     		add	r3, r3, r2
 7081 00fe 5A1D     		adds	r2, r3, #5
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7082              		.loc 1 924 0
 7083 0100 07F21C43 		addw	r3, r7, #1052
 7084 0104 9A61     		str	r2, [r3, #24]
 932:..\src/command_processing.c ****     	(uint8*)&(MEM_P->enc[MEM_P->motor[MOTOR_IDX].encoder_line].m_off[0]),
 7085              		.loc 1 932 0
 7086 0106 97F87D25 		ldrb	r2, [r7, #1405]	@ zero_extendqisi2
 7087 010a D7F88015 		ldr	r1, [r7, #1408]
 7088 010e 1346     		mov	r3, r2
 7089 0110 DB00     		lsls	r3, r3, #3
 7090 0112 9B1A     		subs	r3, r3, r2
 7091 0114 1B01     		lsls	r3, r3, #4
 7092 0116 0B44     		add	r3, r3, r1
 7093 0118 03F58873 		add	r3, r3, #272
 7094 011c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7095 011e 1A46     		mov	r2, r3
 7096 0120 1346     		mov	r3, r2
 7097 0122 5B00     		lsls	r3, r3, #1
 7098 0124 1344     		add	r3, r3, r2
 7099 0126 1B01     		lsls	r3, r3, #4
 7100 0128 03F5CC73 		add	r3, r3, #408
 7101 012c D7F88025 		ldr	r2, [r7, #1408]
 7102 0130 1A44     		add	r2, r2, r3
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7103              		.loc 1 924 0
 7104 0132 07F21C43 		addw	r3, r7, #1052
 7105 0136 DA61     		str	r2, [r3, #28]
 933:..\src/command_processing.c ****     	(uint8*)&(MEM_P->enc[MEM_P->motor[MOTOR_IDX].encoder_line].m_mult[0]),
 7106              		.loc 1 933 0
 7107 0138 97F87D25 		ldrb	r2, [r7, #1405]	@ zero_extendqisi2
 7108 013c D7F88015 		ldr	r1, [r7, #1408]
 7109 0140 1346     		mov	r3, r2
 7110 0142 DB00     		lsls	r3, r3, #3
 7111 0144 9B1A     		subs	r3, r3, r2
 7112 0146 1B01     		lsls	r3, r3, #4
 7113 0148 0B44     		add	r3, r3, r1
 7114 014a 03F58873 		add	r3, r3, #272
 7115 014e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7116 0150 1A46     		mov	r2, r3
 7117 0152 1346     		mov	r3, r2
 7118 0154 5B00     		lsls	r3, r3, #1
 7119 0156 1344     		add	r3, r3, r2
 7120 0158 1B01     		lsls	r3, r3, #4
 7121 015a 03F5D073 		add	r3, r3, #416
 7122 015e D7F88025 		ldr	r2, [r7, #1408]
 7123 0162 1344     		add	r3, r3, r2
 7124 0164 1A1D     		adds	r2, r3, #4
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7125              		.loc 1 924 0
 7126 0166 07F21C43 		addw	r3, r7, #1052
 7127 016a 1A62     		str	r2, [r3, #32]
 934:..\src/command_processing.c ****     	(uint8*)&(MEM_P->motor[MOTOR_IDX].pos_lim_flag),                                    //10
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 169


 7128              		.loc 1 934 0
 7129 016c 97F87D25 		ldrb	r2, [r7, #1405]	@ zero_extendqisi2
 7130 0170 1346     		mov	r3, r2
 7131 0172 DB00     		lsls	r3, r3, #3
 7132 0174 9B1A     		subs	r3, r3, r2
 7133 0176 1B01     		lsls	r3, r3, #4
 7134 0178 E033     		adds	r3, r3, #224
 7135 017a D7F88025 		ldr	r2, [r7, #1408]
 7136 017e 1344     		add	r3, r3, r2
 7137 0180 DA1C     		adds	r2, r3, #3
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7138              		.loc 1 924 0
 7139 0182 07F21C43 		addw	r3, r7, #1052
 7140 0186 5A62     		str	r2, [r3, #36]
 935:..\src/command_processing.c ****     	(uint8*)&(MEM_P->motor[MOTOR_IDX].pos_lim_inf), 
 7141              		.loc 1 935 0
 7142 0188 97F87D25 		ldrb	r2, [r7, #1405]	@ zero_extendqisi2
 7143 018c 1346     		mov	r3, r2
 7144 018e DB00     		lsls	r3, r3, #3
 7145 0190 9B1A     		subs	r3, r3, r2
 7146 0192 1B01     		lsls	r3, r3, #4
 7147 0194 E033     		adds	r3, r3, #224
 7148 0196 D7F88025 		ldr	r2, [r7, #1408]
 7149 019a 1344     		add	r3, r3, r2
 7150 019c 1A1D     		adds	r2, r3, #4
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7151              		.loc 1 924 0
 7152 019e 07F21C43 		addw	r3, r7, #1052
 7153 01a2 9A62     		str	r2, [r3, #40]
 936:..\src/command_processing.c ****     	(uint8*)&(MEM_P->motor[MOTOR_IDX].max_step_neg),
 7154              		.loc 1 936 0
 7155 01a4 97F87D25 		ldrb	r2, [r7, #1405]	@ zero_extendqisi2
 7156 01a8 1346     		mov	r3, r2
 7157 01aa DB00     		lsls	r3, r3, #3
 7158 01ac 9B1A     		subs	r3, r3, r2
 7159 01ae 1B01     		lsls	r3, r3, #4
 7160 01b0 E833     		adds	r3, r3, #232
 7161 01b2 D7F88025 		ldr	r2, [r7, #1408]
 7162 01b6 1344     		add	r3, r3, r2
 7163 01b8 1A1D     		adds	r2, r3, #4
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7164              		.loc 1 924 0
 7165 01ba 07F21C43 		addw	r3, r7, #1052
 7166 01be DA62     		str	r2, [r3, #44]
 937:..\src/command_processing.c ****     	(uint8*)&(MEM_P->motor[MOTOR_IDX].current_limit),
 7167              		.loc 1 937 0
 7168 01c0 97F87D25 		ldrb	r2, [r7, #1405]	@ zero_extendqisi2
 7169 01c4 1346     		mov	r3, r2
 7170 01c6 DB00     		lsls	r3, r3, #3
 7171 01c8 9B1A     		subs	r3, r3, r2
 7172 01ca 1B01     		lsls	r3, r3, #4
 7173 01cc 03F58473 		add	r3, r3, #264
 7174 01d0 D7F88025 		ldr	r2, [r7, #1408]
 7175 01d4 1344     		add	r3, r3, r2
 7176 01d6 1A1D     		adds	r2, r3, #4
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7177              		.loc 1 924 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 170


 7178 01d8 07F21C43 		addw	r3, r7, #1052
 7179 01dc 1A63     		str	r2, [r3, #48]
 938:..\src/command_processing.c ****     	(uint8*)&(MEM_P->emg.emg_threshold[0]),
 7180              		.loc 1 938 0
 7181 01de D7F88035 		ldr	r3, [r7, #1408]
 7182 01e2 03F5F872 		add	r2, r3, #496
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7183              		.loc 1 924 0
 7184 01e6 07F21C43 		addw	r3, r7, #1052
 7185 01ea 5A63     		str	r2, [r3, #52]
 939:..\src/command_processing.c ****     	(uint8*)&(MEM_P->emg.emg_calibration_flag),
 7186              		.loc 1 939 0
 7187 01ec D7F88035 		ldr	r3, [r7, #1408]
 7188 01f0 03F5FF72 		add	r2, r3, #510
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7189              		.loc 1 924 0
 7190 01f4 07F21C43 		addw	r3, r7, #1052
 7191 01f8 9A63     		str	r2, [r3, #56]
 940:..\src/command_processing.c ****     	(uint8*)&(MEM_P->emg.emg_max_value[0]),
 7192              		.loc 1 940 0
 7193 01fa D7F88035 		ldr	r3, [r7, #1408]
 7194 01fe 03F5FA72 		add	r2, r3, #500
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7195              		.loc 1 924 0
 7196 0202 07F21C43 		addw	r3, r7, #1052
 7197 0206 DA63     		str	r2, [r3, #60]
 941:..\src/command_processing.c ****     	(uint8*)&(MEM_P->emg.emg_speed[0]), 
 7198              		.loc 1 941 0
 7199 0208 D7F88035 		ldr	r3, [r7, #1408]
 7200 020c 03F5FE72 		add	r2, r3, #508
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7201              		.loc 1 924 0
 7202 0210 07F21C43 		addw	r3, r7, #1052
 7203 0214 1A64     		str	r2, [r3, #64]
 942:..\src/command_processing.c ****     	(uint8*)&(MEM_P->enc[MEM_P->motor[MOTOR_IDX].encoder_line].double_encoder_on_off),
 7204              		.loc 1 942 0
 7205 0216 97F87D25 		ldrb	r2, [r7, #1405]	@ zero_extendqisi2
 7206 021a D7F88015 		ldr	r1, [r7, #1408]
 7207 021e 1346     		mov	r3, r2
 7208 0220 DB00     		lsls	r3, r3, #3
 7209 0222 9B1A     		subs	r3, r3, r2
 7210 0224 1B01     		lsls	r3, r3, #4
 7211 0226 0B44     		add	r3, r3, r1
 7212 0228 03F58873 		add	r3, r3, #272
 7213 022c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7214 022e 1A46     		mov	r2, r3
 7215 0230 1346     		mov	r3, r2
 7216 0232 5B00     		lsls	r3, r3, #1
 7217 0234 1344     		add	r3, r3, r2
 7218 0236 1B01     		lsls	r3, r3, #4
 7219 0238 03F5D873 		add	r3, r3, #432
 7220 023c D7F88025 		ldr	r2, [r7, #1408]
 7221 0240 1A44     		add	r2, r2, r3
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7222              		.loc 1 924 0
 7223 0242 07F21C43 		addw	r3, r7, #1052
 7224 0246 5A64     		str	r2, [r3, #68]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 171


 943:..\src/command_processing.c ****     	(uint8*)&(MEM_P->enc[MEM_P->motor[MOTOR_IDX].encoder_line].motor_handle_ratio),
 7225              		.loc 1 943 0
 7226 0248 97F87D25 		ldrb	r2, [r7, #1405]	@ zero_extendqisi2
 7227 024c D7F88015 		ldr	r1, [r7, #1408]
 7228 0250 1346     		mov	r3, r2
 7229 0252 DB00     		lsls	r3, r3, #3
 7230 0254 9B1A     		subs	r3, r3, r2
 7231 0256 1B01     		lsls	r3, r3, #4
 7232 0258 0B44     		add	r3, r3, r1
 7233 025a 03F58873 		add	r3, r3, #272
 7234 025e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7235 0260 1A46     		mov	r2, r3
 7236 0262 1346     		mov	r3, r2
 7237 0264 5B00     		lsls	r3, r3, #1
 7238 0266 1344     		add	r3, r3, r2
 7239 0268 1B01     		lsls	r3, r3, #4
 7240 026a 03F5D873 		add	r3, r3, #432
 7241 026e D7F88025 		ldr	r2, [r7, #1408]
 7242 0272 1344     		add	r3, r3, r2
 7243 0274 1A1D     		adds	r2, r3, #4
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7244              		.loc 1 924 0
 7245 0276 07F21C43 		addw	r3, r7, #1052
 7246 027a 9A64     		str	r2, [r3, #72]
 944:..\src/command_processing.c ****     	(uint8*)&(MEM_P->motor[MOTOR_IDX].activate_pwm_rescaling),                          //20
 7247              		.loc 1 944 0
 7248 027c 97F87D25 		ldrb	r2, [r7, #1405]	@ zero_extendqisi2
 7249 0280 1346     		mov	r3, r2
 7250 0282 DB00     		lsls	r3, r3, #3
 7251 0284 9B1A     		subs	r3, r3, r2
 7252 0286 1B01     		lsls	r3, r3, #4
 7253 0288 E033     		adds	r3, r3, #224
 7254 028a D7F88025 		ldr	r2, [r7, #1408]
 7255 028e 1344     		add	r3, r3, r2
 7256 0290 5A1C     		adds	r2, r3, #1
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7257              		.loc 1 924 0
 7258 0292 07F21C43 		addw	r3, r7, #1052
 7259 0296 DA64     		str	r2, [r3, #76]
 945:..\src/command_processing.c ****     	(uint8*)&(MEM_P->motor[MOTOR_IDX].curr_lookup[0]),
 7260              		.loc 1 945 0
 7261 0298 97F87D25 		ldrb	r2, [r7, #1405]	@ zero_extendqisi2
 7262 029c 1346     		mov	r3, r2
 7263 029e DB00     		lsls	r3, r3, #3
 7264 02a0 9B1A     		subs	r3, r3, r2
 7265 02a2 1B01     		lsls	r3, r3, #4
 7266 02a4 F033     		adds	r3, r3, #240
 7267 02a6 D7F88025 		ldr	r2, [r7, #1408]
 7268 02aa 1344     		add	r3, r3, r2
 7269 02ac 1A1D     		adds	r2, r3, #4
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7270              		.loc 1 924 0
 7271 02ae 07F21C43 		addw	r3, r7, #1052
 7272 02b2 1A65     		str	r2, [r3, #80]
 946:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.hw_maint_date),
 7273              		.loc 1 946 0
 7274 02b4 D7F88035 		ldr	r3, [r7, #1408]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 172


 7275 02b8 03F1A102 		add	r2, r3, #161
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7276              		.loc 1 924 0
 7277 02bc 07F21C43 		addw	r3, r7, #1052
 7278 02c0 5A65     		str	r2, [r3, #84]
 947:..\src/command_processing.c ****     	(uint8*)&(MEM_P->SH.rest_pos), 
 7279              		.loc 1 947 0
 7280 02c2 D7F88035 		ldr	r3, [r7, #1408]
 7281 02c6 03F52872 		add	r2, r3, #672
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7282              		.loc 1 924 0
 7283 02ca 07F21C43 		addw	r3, r7, #1052
 7284 02ce 9A65     		str	r2, [r3, #88]
 948:..\src/command_processing.c ****     	(uint8*)&(MEM_P->SH.rest_delay),
 7285              		.loc 1 948 0
 7286 02d0 D7F88035 		ldr	r3, [r7, #1408]
 7287 02d4 03F52972 		add	r2, r3, #676
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7288              		.loc 1 924 0
 7289 02d8 07F21C43 		addw	r3, r7, #1052
 7290 02dc DA65     		str	r2, [r3, #92]
 949:..\src/command_processing.c ****     	(uint8*)&(MEM_P->SH.rest_vel),
 7291              		.loc 1 949 0
 7292 02de D7F88035 		ldr	r3, [r7, #1408]
 7293 02e2 03F52A72 		add	r2, r3, #680
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7294              		.loc 1 924 0
 7295 02e6 07F21C43 		addw	r3, r7, #1052
 7296 02ea 1A66     		str	r2, [r3, #96]
 950:..\src/command_processing.c ****     	(uint8*)&(MEM_P->SH.rest_position_flag),
 7297              		.loc 1 950 0
 7298 02ec D7F88035 		ldr	r3, [r7, #1408]
 7299 02f0 03F52B72 		add	r2, r3, #684
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7300              		.loc 1 924 0
 7301 02f4 07F21C43 		addw	r3, r7, #1052
 7302 02f8 5A66     		str	r2, [r3, #100]
 951:..\src/command_processing.c ****     	(uint8*)&(MEM_P->emg.switch_emg), 
 7303              		.loc 1 951 0
 7304 02fa D7F88035 		ldr	r3, [r7, #1408]
 7305 02fe 03F2FF12 		addw	r2, r3, #511
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7306              		.loc 1 924 0
 7307 0302 07F21C43 		addw	r3, r7, #1052
 7308 0306 9A66     		str	r2, [r3, #104]
 952:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.right_left),
 7309              		.loc 1 952 0
 7310 0308 D7F88035 		ldr	r3, [r7, #1408]
 7311 030c 03F1A702 		add	r2, r3, #167
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7312              		.loc 1 924 0
 7313 0310 07F21C43 		addw	r3, r7, #1052
 7314 0314 DA66     		str	r2, [r3, #108]
 953:..\src/command_processing.c ****     	(uint8*)&(MEM_P->imu.read_imu_flag),
 7315              		.loc 1 953 0
 7316 0316 D7F88035 		ldr	r3, [r7, #1408]
 7317 031a 03F50072 		add	r2, r3, #512
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 173


 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7318              		.loc 1 924 0
 7319 031e 07F21C43 		addw	r3, r7, #1052
 7320 0322 1A67     		str	r2, [r3, #112]
 954:..\src/command_processing.c ****     	(uint8*)&(MEM_P->exp.read_exp_port_flag),                                   //30
 7321              		.loc 1 954 0
 7322 0324 D7F88035 		ldr	r3, [r7, #1408]
 7323 0328 03F22622 		addw	r2, r3, #550
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7324              		.loc 1 924 0
 7325 032c 07F21C43 		addw	r3, r7, #1052
 7326 0330 5A67     		str	r2, [r3, #116]
 955:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.reset_counters),
 7327              		.loc 1 955 0
 7328 0332 D7F88035 		ldr	r3, [r7, #1408]
 7329 0336 03F1A802 		add	r2, r3, #168
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7330              		.loc 1 924 0
 7331 033a 07F21C43 		addw	r3, r7, #1052
 7332 033e 9A67     		str	r2, [r3, #120]
 956:..\src/command_processing.c ****     	(uint8*)&(MEM_P->exp.curr_time[0]),
 7333              		.loc 1 956 0
 7334 0340 D7F88035 		ldr	r3, [r7, #1408]
 7335 0344 03F50872 		add	r2, r3, #544
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7336              		.loc 1 924 0
 7337 0348 07F21C43 		addw	r3, r7, #1052
 7338 034c DA67     		str	r2, [r3, #124]
 957:..\src/command_processing.c ****     	(uint8*)&(MEM_P->imu.SPI_read_delay),
 7339              		.loc 1 957 0
 7340 034e D7F88035 		ldr	r3, [r7, #1408]
 7341 0352 03F20122 		addw	r2, r3, #513
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7342              		.loc 1 924 0
 7343 0356 07F21C43 		addw	r3, r7, #1052
 7344 035a C3F88020 		str	r2, [r3, #128]
 958:..\src/command_processing.c ****     	(uint8*)&(MEM_P->imu.IMU_conf[0][0]),
 7345              		.loc 1 958 0
 7346 035e D7F88035 		ldr	r3, [r7, #1408]
 7347 0362 03F20222 		addw	r2, r3, #514
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7348              		.loc 1 924 0
 7349 0366 07F21C43 		addw	r3, r7, #1052
 7350 036a C3F88420 		str	r2, [r3, #132]
 959:..\src/command_processing.c ****         (uint8*)&(MEM_P->dev.user_id),
 7351              		.loc 1 959 0
 7352 036e D7F88035 		ldr	r3, [r7, #1408]
 7353 0372 03F1AB02 		add	r2, r3, #171
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7354              		.loc 1 924 0
 7355 0376 07F21C43 		addw	r3, r7, #1052
 7356 037a C3F88820 		str	r2, [r3, #136]
 960:..\src/command_processing.c ****         (uint8*)&(MEM_P->user[MEM_P->dev.user_id].user_code_string),
 7357              		.loc 1 960 0
 7358 037e D7F88035 		ldr	r3, [r7, #1408]
 7359 0382 93F8AB30 		ldrb	r3, [r3, #171]	@ zero_extendqisi2
 7360 0386 1233     		adds	r3, r3, #18
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 174


 7361 0388 5B01     		lsls	r3, r3, #5
 7362 038a D7F88025 		ldr	r2, [r7, #1408]
 7363 038e 1A44     		add	r2, r2, r3
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7364              		.loc 1 924 0
 7365 0390 07F21C43 		addw	r3, r7, #1052
 7366 0394 C3F88C20 		str	r2, [r3, #140]
 961:..\src/command_processing.c ****         
 962:..\src/command_processing.c ****         // GENERIC PARAMS
 963:..\src/command_processing.c **** 		(uint8*)&(MEM_P->motor[MOTOR_IDX].encoder_line),			// other params of 1st motor
 7367              		.loc 1 963 0
 7368 0398 97F87D25 		ldrb	r2, [r7, #1405]	@ zero_extendqisi2
 7369 039c 1346     		mov	r3, r2
 7370 039e DB00     		lsls	r3, r3, #3
 7371 03a0 9B1A     		subs	r3, r3, r2
 7372 03a2 1B01     		lsls	r3, r3, #4
 7373 03a4 03F58873 		add	r3, r3, #272
 7374 03a8 D7F88025 		ldr	r2, [r7, #1408]
 7375 03ac 1A44     		add	r2, r2, r3
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7376              		.loc 1 924 0
 7377 03ae 07F21C43 		addw	r3, r7, #1052
 7378 03b2 C3F89020 		str	r2, [r3, #144]
 964:..\src/command_processing.c ****     	(uint8*)&(MEM_P->motor[MOTOR_IDX].motor_driver_type),
 7379              		.loc 1 964 0
 7380 03b6 97F87D25 		ldrb	r2, [r7, #1405]	@ zero_extendqisi2
 7381 03ba 1346     		mov	r3, r2
 7382 03bc DB00     		lsls	r3, r3, #3
 7383 03be 9B1A     		subs	r3, r3, r2
 7384 03c0 1B01     		lsls	r3, r3, #4
 7385 03c2 E033     		adds	r3, r3, #224
 7386 03c4 D7F88025 		ldr	r2, [r7, #1408]
 7387 03c8 1344     		add	r3, r3, r2
 7388 03ca 9A1C     		adds	r2, r3, #2
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7389              		.loc 1 924 0
 7390 03cc 07F21C43 		addw	r3, r7, #1052
 7391 03d0 C3F89420 		str	r2, [r3, #148]
 965:..\src/command_processing.c ****         (uint8*)&(MEM_P->motor[MOTOR_IDX].pwm_rate_limiter),
 7392              		.loc 1 965 0
 7393 03d4 97F87D25 		ldrb	r2, [r7, #1405]	@ zero_extendqisi2
 7394 03d8 1346     		mov	r3, r2
 7395 03da DB00     		lsls	r3, r3, #3
 7396 03dc 9B1A     		subs	r3, r3, r2
 7397 03de 1B01     		lsls	r3, r3, #4
 7398 03e0 03F58873 		add	r3, r3, #272
 7399 03e4 D7F88025 		ldr	r2, [r7, #1408]
 7400 03e8 1344     		add	r3, r3, r2
 7401 03ea 5A1C     		adds	r2, r3, #1
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7402              		.loc 1 924 0
 7403 03ec 07F21C43 		addw	r3, r7, #1052
 7404 03f0 C3F89820 		str	r2, [r3, #152]
 966:..\src/command_processing.c ****         (uint8*)&(MEM_P->motor[MOTOR_IDX].not_revers_motor_flag), 	//40 
 7405              		.loc 1 966 0
 7406 03f4 97F87D25 		ldrb	r2, [r7, #1405]	@ zero_extendqisi2
 7407 03f8 1346     		mov	r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 175


 7408 03fa DB00     		lsls	r3, r3, #3
 7409 03fc 9B1A     		subs	r3, r3, r2
 7410 03fe 1B01     		lsls	r3, r3, #4
 7411 0400 03F58873 		add	r3, r3, #272
 7412 0404 D7F88025 		ldr	r2, [r7, #1408]
 7413 0408 1344     		add	r3, r3, r2
 7414 040a 9A1C     		adds	r2, r3, #2
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7415              		.loc 1 924 0
 7416 040c 07F21C43 		addw	r3, r7, #1052
 7417 0410 C3F89C20 		str	r2, [r3, #156]
 967:..\src/command_processing.c ****         (uint8*)&(MEM_P->enc[MEM_P->motor[MOTOR_IDX].encoder_line].Enc_idx_use_for_control),
 7418              		.loc 1 967 0
 7419 0414 97F87D25 		ldrb	r2, [r7, #1405]	@ zero_extendqisi2
 7420 0418 D7F88015 		ldr	r1, [r7, #1408]
 7421 041c 1346     		mov	r3, r2
 7422 041e DB00     		lsls	r3, r3, #3
 7423 0420 9B1A     		subs	r3, r3, r2
 7424 0422 1B01     		lsls	r3, r3, #4
 7425 0424 0B44     		add	r3, r3, r1
 7426 0426 03F58873 		add	r3, r3, #272
 7427 042a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7428 042c 1A46     		mov	r2, r3
 7429 042e 1346     		mov	r3, r2
 7430 0430 5B00     		lsls	r3, r3, #1
 7431 0432 1344     		add	r3, r3, r2
 7432 0434 1B01     		lsls	r3, r3, #4
 7433 0436 03F5D873 		add	r3, r3, #432
 7434 043a D7F88025 		ldr	r2, [r7, #1408]
 7435 043e 1344     		add	r3, r3, r2
 7436 0440 5A1C     		adds	r2, r3, #1
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7437              		.loc 1 924 0
 7438 0442 07F21C43 		addw	r3, r7, #1052
 7439 0446 C3F8A020 		str	r2, [r3, #160]
 968:..\src/command_processing.c ****         (uint8*)&(MEM_P->enc[MEM_P->motor[MOTOR_IDX].encoder_line].gears_params),        
 7440              		.loc 1 968 0
 7441 044a 97F87D25 		ldrb	r2, [r7, #1405]	@ zero_extendqisi2
 7442 044e D7F88015 		ldr	r1, [r7, #1408]
 7443 0452 1346     		mov	r3, r2
 7444 0454 DB00     		lsls	r3, r3, #3
 7445 0456 9B1A     		subs	r3, r3, r2
 7446 0458 1B01     		lsls	r3, r3, #4
 7447 045a 0B44     		add	r3, r3, r1
 7448 045c 03F58873 		add	r3, r3, #272
 7449 0460 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7450 0462 1A46     		mov	r2, r3
 7451 0464 1346     		mov	r3, r2
 7452 0466 5B00     		lsls	r3, r3, #1
 7453 0468 1344     		add	r3, r3, r2
 7454 046a 1B01     		lsls	r3, r3, #4
 7455 046c 03F5D873 		add	r3, r3, #432
 7456 0470 D7F88025 		ldr	r2, [r7, #1408]
 7457 0474 1344     		add	r3, r3, r2
 7458 0476 5A1D     		adds	r2, r3, #5
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7459              		.loc 1 924 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 176


 7460 0478 07F21C43 		addw	r3, r7, #1052
 7461 047c C3F8A420 		str	r2, [r3, #164]
 969:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.use_2nd_motor_flag),					// second motor config and params
 7462              		.loc 1 969 0
 7463 0480 D7F88035 		ldr	r3, [r7, #1408]
 7464 0484 03F1A902 		add	r2, r3, #169
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7465              		.loc 1 924 0
 7466 0488 07F21C43 		addw	r3, r7, #1052
 7467 048c C3F8A820 		str	r2, [r3, #168]
 970:..\src/command_processing.c ****         (uint8*)&(MEM_P->motor[SECOND_MOTOR_IDX].k_p),
 7468              		.loc 1 970 0
 7469 0490 97F87C25 		ldrb	r2, [r7, #1404]	@ zero_extendqisi2
 7470 0494 1346     		mov	r3, r2
 7471 0496 DB00     		lsls	r3, r3, #3
 7472 0498 9B1A     		subs	r3, r3, r2
 7473 049a 1B01     		lsls	r3, r3, #4
 7474 049c B033     		adds	r3, r3, #176
 7475 049e D7F88025 		ldr	r2, [r7, #1408]
 7476 04a2 1A44     		add	r2, r2, r3
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7477              		.loc 1 924 0
 7478 04a4 07F21C43 		addw	r3, r7, #1052
 7479 04a8 C3F8AC20 		str	r2, [r3, #172]
 971:..\src/command_processing.c ****     	(uint8*)&(MEM_P->motor[SECOND_MOTOR_IDX].k_p_c), 
 7480              		.loc 1 971 0
 7481 04ac 97F87C25 		ldrb	r2, [r7, #1404]	@ zero_extendqisi2
 7482 04b0 1346     		mov	r3, r2
 7483 04b2 DB00     		lsls	r3, r3, #3
 7484 04b4 9B1A     		subs	r3, r3, r2
 7485 04b6 1B01     		lsls	r3, r3, #4
 7486 04b8 B833     		adds	r3, r3, #184
 7487 04ba D7F88025 		ldr	r2, [r7, #1408]
 7488 04be 1344     		add	r3, r3, r2
 7489 04c0 1A1D     		adds	r2, r3, #4
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7490              		.loc 1 924 0
 7491 04c2 07F21C43 		addw	r3, r7, #1052
 7492 04c6 C3F8B020 		str	r2, [r3, #176]
 972:..\src/command_processing.c ****     	(uint8*)&(MEM_P->motor[SECOND_MOTOR_IDX].activ),
 7493              		.loc 1 972 0
 7494 04ca 97F87C25 		ldrb	r2, [r7, #1404]	@ zero_extendqisi2
 7495 04ce 1346     		mov	r3, r2
 7496 04d0 DB00     		lsls	r3, r3, #3
 7497 04d2 9B1A     		subs	r3, r3, r2
 7498 04d4 1B01     		lsls	r3, r3, #4
 7499 04d6 E033     		adds	r3, r3, #224
 7500 04d8 D7F88025 		ldr	r2, [r7, #1408]
 7501 04dc 1A44     		add	r2, r2, r3
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7502              		.loc 1 924 0
 7503 04de 07F21C43 		addw	r3, r7, #1052
 7504 04e2 C3F8B420 		str	r2, [r3, #180]
 973:..\src/command_processing.c ****     	(uint8*)&(MEM_P->motor[SECOND_MOTOR_IDX].input_mode),
 7505              		.loc 1 973 0
 7506 04e6 97F87C25 		ldrb	r2, [r7, #1404]	@ zero_extendqisi2
 7507 04ea 1346     		mov	r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 177


 7508 04ec DB00     		lsls	r3, r3, #3
 7509 04ee 9B1A     		subs	r3, r3, r2
 7510 04f0 1B01     		lsls	r3, r3, #4
 7511 04f2 03F58473 		add	r3, r3, #264
 7512 04f6 D7F88025 		ldr	r2, [r7, #1408]
 7513 04fa 1344     		add	r3, r3, r2
 7514 04fc 9A1D     		adds	r2, r3, #6
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7515              		.loc 1 924 0
 7516 04fe 07F21C43 		addw	r3, r7, #1052
 7517 0502 C3F8B820 		str	r2, [r3, #184]
 974:..\src/command_processing.c ****     	(uint8*)&(MEM_P->motor[SECOND_MOTOR_IDX].control_mode), 
 7518              		.loc 1 974 0
 7519 0506 97F87C25 		ldrb	r2, [r7, #1404]	@ zero_extendqisi2
 7520 050a 1346     		mov	r3, r2
 7521 050c DB00     		lsls	r3, r3, #3
 7522 050e 9B1A     		subs	r3, r3, r2
 7523 0510 1B01     		lsls	r3, r3, #4
 7524 0512 03F58473 		add	r3, r3, #264
 7525 0516 D7F88025 		ldr	r2, [r7, #1408]
 7526 051a 1344     		add	r3, r3, r2
 7527 051c DA1D     		adds	r2, r3, #7
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7528              		.loc 1 924 0
 7529 051e 07F21C43 		addw	r3, r7, #1052
 7530 0522 C3F8BC20 		str	r2, [r3, #188]
 975:..\src/command_processing.c ****     	(uint8*)&(MEM_P->enc[MEM_P->motor[SECOND_MOTOR_IDX].encoder_line].res),
 7531              		.loc 1 975 0
 7532 0526 97F87C25 		ldrb	r2, [r7, #1404]	@ zero_extendqisi2
 7533 052a D7F88015 		ldr	r1, [r7, #1408]
 7534 052e 1346     		mov	r3, r2
 7535 0530 DB00     		lsls	r3, r3, #3
 7536 0532 9B1A     		subs	r3, r3, r2
 7537 0534 1B01     		lsls	r3, r3, #4
 7538 0536 0B44     		add	r3, r3, r1
 7539 0538 03F58873 		add	r3, r3, #272
 7540 053c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7541 053e 1A46     		mov	r2, r3
 7542 0540 1346     		mov	r3, r2
 7543 0542 5B00     		lsls	r3, r3, #1
 7544 0544 1344     		add	r3, r3, r2
 7545 0546 1B01     		lsls	r3, r3, #4
 7546 0548 03F5C873 		add	r3, r3, #400
 7547 054c D7F88025 		ldr	r2, [r7, #1408]
 7548 0550 1344     		add	r3, r3, r2
 7549 0552 5A1D     		adds	r2, r3, #5
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7550              		.loc 1 924 0
 7551 0554 07F21C43 		addw	r3, r7, #1052
 7552 0558 C3F8C020 		str	r2, [r3, #192]
 976:..\src/command_processing.c ****     	(uint8*)&(MEM_P->enc[MEM_P->motor[SECOND_MOTOR_IDX].encoder_line].m_off[0]),    //50
 7553              		.loc 1 976 0
 7554 055c 97F87C25 		ldrb	r2, [r7, #1404]	@ zero_extendqisi2
 7555 0560 D7F88015 		ldr	r1, [r7, #1408]
 7556 0564 1346     		mov	r3, r2
 7557 0566 DB00     		lsls	r3, r3, #3
 7558 0568 9B1A     		subs	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 178


 7559 056a 1B01     		lsls	r3, r3, #4
 7560 056c 0B44     		add	r3, r3, r1
 7561 056e 03F58873 		add	r3, r3, #272
 7562 0572 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7563 0574 1A46     		mov	r2, r3
 7564 0576 1346     		mov	r3, r2
 7565 0578 5B00     		lsls	r3, r3, #1
 7566 057a 1344     		add	r3, r3, r2
 7567 057c 1B01     		lsls	r3, r3, #4
 7568 057e 03F5CC73 		add	r3, r3, #408
 7569 0582 D7F88025 		ldr	r2, [r7, #1408]
 7570 0586 1A44     		add	r2, r2, r3
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7571              		.loc 1 924 0
 7572 0588 07F21C43 		addw	r3, r7, #1052
 7573 058c C3F8C420 		str	r2, [r3, #196]
 977:..\src/command_processing.c ****     	(uint8*)&(MEM_P->enc[MEM_P->motor[SECOND_MOTOR_IDX].encoder_line].m_mult[0]),
 7574              		.loc 1 977 0
 7575 0590 97F87C25 		ldrb	r2, [r7, #1404]	@ zero_extendqisi2
 7576 0594 D7F88015 		ldr	r1, [r7, #1408]
 7577 0598 1346     		mov	r3, r2
 7578 059a DB00     		lsls	r3, r3, #3
 7579 059c 9B1A     		subs	r3, r3, r2
 7580 059e 1B01     		lsls	r3, r3, #4
 7581 05a0 0B44     		add	r3, r3, r1
 7582 05a2 03F58873 		add	r3, r3, #272
 7583 05a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7584 05a8 1A46     		mov	r2, r3
 7585 05aa 1346     		mov	r3, r2
 7586 05ac 5B00     		lsls	r3, r3, #1
 7587 05ae 1344     		add	r3, r3, r2
 7588 05b0 1B01     		lsls	r3, r3, #4
 7589 05b2 03F5D073 		add	r3, r3, #416
 7590 05b6 D7F88025 		ldr	r2, [r7, #1408]
 7591 05ba 1344     		add	r3, r3, r2
 7592 05bc 1A1D     		adds	r2, r3, #4
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7593              		.loc 1 924 0
 7594 05be 07F21C43 		addw	r3, r7, #1052
 7595 05c2 C3F8C820 		str	r2, [r3, #200]
 978:..\src/command_processing.c ****     	(uint8*)&(MEM_P->motor[SECOND_MOTOR_IDX].pos_lim_flag),
 7596              		.loc 1 978 0
 7597 05c6 97F87C25 		ldrb	r2, [r7, #1404]	@ zero_extendqisi2
 7598 05ca 1346     		mov	r3, r2
 7599 05cc DB00     		lsls	r3, r3, #3
 7600 05ce 9B1A     		subs	r3, r3, r2
 7601 05d0 1B01     		lsls	r3, r3, #4
 7602 05d2 E033     		adds	r3, r3, #224
 7603 05d4 D7F88025 		ldr	r2, [r7, #1408]
 7604 05d8 1344     		add	r3, r3, r2
 7605 05da DA1C     		adds	r2, r3, #3
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7606              		.loc 1 924 0
 7607 05dc 07F21C43 		addw	r3, r7, #1052
 7608 05e0 C3F8CC20 		str	r2, [r3, #204]
 979:..\src/command_processing.c ****     	(uint8*)&(MEM_P->motor[SECOND_MOTOR_IDX].pos_lim_inf), 
 7609              		.loc 1 979 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 179


 7610 05e4 97F87C25 		ldrb	r2, [r7, #1404]	@ zero_extendqisi2
 7611 05e8 1346     		mov	r3, r2
 7612 05ea DB00     		lsls	r3, r3, #3
 7613 05ec 9B1A     		subs	r3, r3, r2
 7614 05ee 1B01     		lsls	r3, r3, #4
 7615 05f0 E033     		adds	r3, r3, #224
 7616 05f2 D7F88025 		ldr	r2, [r7, #1408]
 7617 05f6 1344     		add	r3, r3, r2
 7618 05f8 1A1D     		adds	r2, r3, #4
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7619              		.loc 1 924 0
 7620 05fa 07F21C43 		addw	r3, r7, #1052
 7621 05fe C3F8D020 		str	r2, [r3, #208]
 980:..\src/command_processing.c ****     	(uint8*)&(MEM_P->motor[SECOND_MOTOR_IDX].max_step_neg),
 7622              		.loc 1 980 0
 7623 0602 97F87C25 		ldrb	r2, [r7, #1404]	@ zero_extendqisi2
 7624 0606 1346     		mov	r3, r2
 7625 0608 DB00     		lsls	r3, r3, #3
 7626 060a 9B1A     		subs	r3, r3, r2
 7627 060c 1B01     		lsls	r3, r3, #4
 7628 060e E833     		adds	r3, r3, #232
 7629 0610 D7F88025 		ldr	r2, [r7, #1408]
 7630 0614 1344     		add	r3, r3, r2
 7631 0616 1A1D     		adds	r2, r3, #4
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7632              		.loc 1 924 0
 7633 0618 07F21C43 		addw	r3, r7, #1052
 7634 061c C3F8D420 		str	r2, [r3, #212]
 981:..\src/command_processing.c ****     	(uint8*)&(MEM_P->motor[SECOND_MOTOR_IDX].current_limit),
 7635              		.loc 1 981 0
 7636 0620 97F87C25 		ldrb	r2, [r7, #1404]	@ zero_extendqisi2
 7637 0624 1346     		mov	r3, r2
 7638 0626 DB00     		lsls	r3, r3, #3
 7639 0628 9B1A     		subs	r3, r3, r2
 7640 062a 1B01     		lsls	r3, r3, #4
 7641 062c 03F58473 		add	r3, r3, #264
 7642 0630 D7F88025 		ldr	r2, [r7, #1408]
 7643 0634 1344     		add	r3, r3, r2
 7644 0636 1A1D     		adds	r2, r3, #4
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7645              		.loc 1 924 0
 7646 0638 07F21C43 		addw	r3, r7, #1052
 7647 063c C3F8D820 		str	r2, [r3, #216]
 982:..\src/command_processing.c ****     	(uint8*)&(MEM_P->enc[MEM_P->motor[SECOND_MOTOR_IDX].encoder_line].double_encoder_on_off),
 7648              		.loc 1 982 0
 7649 0640 97F87C25 		ldrb	r2, [r7, #1404]	@ zero_extendqisi2
 7650 0644 D7F88015 		ldr	r1, [r7, #1408]
 7651 0648 1346     		mov	r3, r2
 7652 064a DB00     		lsls	r3, r3, #3
 7653 064c 9B1A     		subs	r3, r3, r2
 7654 064e 1B01     		lsls	r3, r3, #4
 7655 0650 0B44     		add	r3, r3, r1
 7656 0652 03F58873 		add	r3, r3, #272
 7657 0656 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7658 0658 1A46     		mov	r2, r3
 7659 065a 1346     		mov	r3, r2
 7660 065c 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 180


 7661 065e 1344     		add	r3, r3, r2
 7662 0660 1B01     		lsls	r3, r3, #4
 7663 0662 03F5D873 		add	r3, r3, #432
 7664 0666 D7F88025 		ldr	r2, [r7, #1408]
 7665 066a 1A44     		add	r2, r2, r3
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7666              		.loc 1 924 0
 7667 066c 07F21C43 		addw	r3, r7, #1052
 7668 0670 C3F8DC20 		str	r2, [r3, #220]
 983:..\src/command_processing.c ****     	(uint8*)&(MEM_P->enc[MEM_P->motor[SECOND_MOTOR_IDX].encoder_line].motor_handle_ratio),
 7669              		.loc 1 983 0
 7670 0674 97F87C25 		ldrb	r2, [r7, #1404]	@ zero_extendqisi2
 7671 0678 D7F88015 		ldr	r1, [r7, #1408]
 7672 067c 1346     		mov	r3, r2
 7673 067e DB00     		lsls	r3, r3, #3
 7674 0680 9B1A     		subs	r3, r3, r2
 7675 0682 1B01     		lsls	r3, r3, #4
 7676 0684 0B44     		add	r3, r3, r1
 7677 0686 03F58873 		add	r3, r3, #272
 7678 068a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7679 068c 1A46     		mov	r2, r3
 7680 068e 1346     		mov	r3, r2
 7681 0690 5B00     		lsls	r3, r3, #1
 7682 0692 1344     		add	r3, r3, r2
 7683 0694 1B01     		lsls	r3, r3, #4
 7684 0696 03F5D873 		add	r3, r3, #432
 7685 069a D7F88025 		ldr	r2, [r7, #1408]
 7686 069e 1344     		add	r3, r3, r2
 7687 06a0 1A1D     		adds	r2, r3, #4
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7688              		.loc 1 924 0
 7689 06a2 07F21C43 		addw	r3, r7, #1052
 7690 06a6 C3F8E020 		str	r2, [r3, #224]
 984:..\src/command_processing.c ****     	(uint8*)&(MEM_P->motor[SECOND_MOTOR_IDX].activate_pwm_rescaling),
 7691              		.loc 1 984 0
 7692 06aa 97F87C25 		ldrb	r2, [r7, #1404]	@ zero_extendqisi2
 7693 06ae 1346     		mov	r3, r2
 7694 06b0 DB00     		lsls	r3, r3, #3
 7695 06b2 9B1A     		subs	r3, r3, r2
 7696 06b4 1B01     		lsls	r3, r3, #4
 7697 06b6 E033     		adds	r3, r3, #224
 7698 06b8 D7F88025 		ldr	r2, [r7, #1408]
 7699 06bc 1344     		add	r3, r3, r2
 7700 06be 5A1C     		adds	r2, r3, #1
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7701              		.loc 1 924 0
 7702 06c0 07F21C43 		addw	r3, r7, #1052
 7703 06c4 C3F8E420 		str	r2, [r3, #228]
 985:..\src/command_processing.c ****     	(uint8*)&(MEM_P->motor[SECOND_MOTOR_IDX].curr_lookup[0]),
 7704              		.loc 1 985 0
 7705 06c8 97F87C25 		ldrb	r2, [r7, #1404]	@ zero_extendqisi2
 7706 06cc 1346     		mov	r3, r2
 7707 06ce DB00     		lsls	r3, r3, #3
 7708 06d0 9B1A     		subs	r3, r3, r2
 7709 06d2 1B01     		lsls	r3, r3, #4
 7710 06d4 F033     		adds	r3, r3, #240
 7711 06d6 D7F88025 		ldr	r2, [r7, #1408]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 181


 7712 06da 1344     		add	r3, r3, r2
 7713 06dc 1A1D     		adds	r2, r3, #4
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7714              		.loc 1 924 0
 7715 06de 07F21C43 		addw	r3, r7, #1052
 7716 06e2 C3F8E820 		str	r2, [r3, #232]
 986:..\src/command_processing.c **** 		(uint8*)&(MEM_P->motor[SECOND_MOTOR_IDX].encoder_line),         //60
 7717              		.loc 1 986 0
 7718 06e6 97F87C25 		ldrb	r2, [r7, #1404]	@ zero_extendqisi2
 7719 06ea 1346     		mov	r3, r2
 7720 06ec DB00     		lsls	r3, r3, #3
 7721 06ee 9B1A     		subs	r3, r3, r2
 7722 06f0 1B01     		lsls	r3, r3, #4
 7723 06f2 03F58873 		add	r3, r3, #272
 7724 06f6 D7F88025 		ldr	r2, [r7, #1408]
 7725 06fa 1A44     		add	r2, r2, r3
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7726              		.loc 1 924 0
 7727 06fc 07F21C43 		addw	r3, r7, #1052
 7728 0700 C3F8EC20 		str	r2, [r3, #236]
 987:..\src/command_processing.c **** 		(uint8*)&(MEM_P->motor[SECOND_MOTOR_IDX].motor_driver_type),
 7729              		.loc 1 987 0
 7730 0704 97F87C25 		ldrb	r2, [r7, #1404]	@ zero_extendqisi2
 7731 0708 1346     		mov	r3, r2
 7732 070a DB00     		lsls	r3, r3, #3
 7733 070c 9B1A     		subs	r3, r3, r2
 7734 070e 1B01     		lsls	r3, r3, #4
 7735 0710 E033     		adds	r3, r3, #224
 7736 0712 D7F88025 		ldr	r2, [r7, #1408]
 7737 0716 1344     		add	r3, r3, r2
 7738 0718 9A1C     		adds	r2, r3, #2
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7739              		.loc 1 924 0
 7740 071a 07F21C43 		addw	r3, r7, #1052
 7741 071e C3F8F020 		str	r2, [r3, #240]
 988:..\src/command_processing.c ****         (uint8*)&(MEM_P->motor[SECOND_MOTOR_IDX].pwm_rate_limiter),
 7742              		.loc 1 988 0
 7743 0722 97F87C25 		ldrb	r2, [r7, #1404]	@ zero_extendqisi2
 7744 0726 1346     		mov	r3, r2
 7745 0728 DB00     		lsls	r3, r3, #3
 7746 072a 9B1A     		subs	r3, r3, r2
 7747 072c 1B01     		lsls	r3, r3, #4
 7748 072e 03F58873 		add	r3, r3, #272
 7749 0732 D7F88025 		ldr	r2, [r7, #1408]
 7750 0736 1344     		add	r3, r3, r2
 7751 0738 5A1C     		adds	r2, r3, #1
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7752              		.loc 1 924 0
 7753 073a 07F21C43 		addw	r3, r7, #1052
 7754 073e C3F8F420 		str	r2, [r3, #244]
 989:..\src/command_processing.c ****         (uint8*)&(MEM_P->motor[SECOND_MOTOR_IDX].not_revers_motor_flag),
 7755              		.loc 1 989 0
 7756 0742 97F87C25 		ldrb	r2, [r7, #1404]	@ zero_extendqisi2
 7757 0746 1346     		mov	r3, r2
 7758 0748 DB00     		lsls	r3, r3, #3
 7759 074a 9B1A     		subs	r3, r3, r2
 7760 074c 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 182


 7761 074e 03F58873 		add	r3, r3, #272
 7762 0752 D7F88025 		ldr	r2, [r7, #1408]
 7763 0756 1344     		add	r3, r3, r2
 7764 0758 9A1C     		adds	r2, r3, #2
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7765              		.loc 1 924 0
 7766 075a 07F21C43 		addw	r3, r7, #1052
 7767 075e C3F8F820 		str	r2, [r3, #248]
 990:..\src/command_processing.c ****         (uint8*)&(MEM_P->enc[MEM_P->motor[SECOND_MOTOR_IDX].encoder_line].Enc_idx_use_for_control),
 7768              		.loc 1 990 0
 7769 0762 97F87C25 		ldrb	r2, [r7, #1404]	@ zero_extendqisi2
 7770 0766 D7F88015 		ldr	r1, [r7, #1408]
 7771 076a 1346     		mov	r3, r2
 7772 076c DB00     		lsls	r3, r3, #3
 7773 076e 9B1A     		subs	r3, r3, r2
 7774 0770 1B01     		lsls	r3, r3, #4
 7775 0772 0B44     		add	r3, r3, r1
 7776 0774 03F58873 		add	r3, r3, #272
 7777 0778 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7778 077a 1A46     		mov	r2, r3
 7779 077c 1346     		mov	r3, r2
 7780 077e 5B00     		lsls	r3, r3, #1
 7781 0780 1344     		add	r3, r3, r2
 7782 0782 1B01     		lsls	r3, r3, #4
 7783 0784 03F5D873 		add	r3, r3, #432
 7784 0788 D7F88025 		ldr	r2, [r7, #1408]
 7785 078c 1344     		add	r3, r3, r2
 7786 078e 5A1C     		adds	r2, r3, #1
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7787              		.loc 1 924 0
 7788 0790 07F21C43 		addw	r3, r7, #1052
 7789 0794 C3F8FC20 		str	r2, [r3, #252]
 991:..\src/command_processing.c ****         (uint8*)&(MEM_P->enc[MEM_P->motor[SECOND_MOTOR_IDX].encoder_line].gears_params),
 7790              		.loc 1 991 0
 7791 0798 97F87C25 		ldrb	r2, [r7, #1404]	@ zero_extendqisi2
 7792 079c D7F88015 		ldr	r1, [r7, #1408]
 7793 07a0 1346     		mov	r3, r2
 7794 07a2 DB00     		lsls	r3, r3, #3
 7795 07a4 9B1A     		subs	r3, r3, r2
 7796 07a6 1B01     		lsls	r3, r3, #4
 7797 07a8 0B44     		add	r3, r3, r1
 7798 07aa 03F58873 		add	r3, r3, #272
 7799 07ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7800 07b0 1A46     		mov	r2, r3
 7801 07b2 1346     		mov	r3, r2
 7802 07b4 5B00     		lsls	r3, r3, #1
 7803 07b6 1344     		add	r3, r3, r2
 7804 07b8 1B01     		lsls	r3, r3, #4
 7805 07ba 03F5D873 		add	r3, r3, #432
 7806 07be D7F88025 		ldr	r2, [r7, #1408]
 7807 07c2 1344     		add	r3, r3, r2
 7808 07c4 5A1D     		adds	r2, r3, #5
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7809              		.loc 1 924 0
 7810 07c6 07F21C43 		addw	r3, r7, #1052
 7811 07ca C3F80021 		str	r2, [r3, #256]
 992:..\src/command_processing.c ****         
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 183


 993:..\src/command_processing.c **** 		(uint8*)&(MEM_P->enc[0].Enc_raw_read_conf[0]),					// additional generic params
 7812              		.loc 1 993 0
 7813 07ce D7F88035 		ldr	r3, [r7, #1408]
 7814 07d2 03F5C872 		add	r2, r3, #400
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7815              		.loc 1 924 0
 7816 07d6 07F21C43 		addw	r3, r7, #1052
 7817 07da C3F80421 		str	r2, [r3, #260]
 994:..\src/command_processing.c ****     	(uint8*)&(MEM_P->enc[1].Enc_raw_read_conf[0]),
 7818              		.loc 1 994 0
 7819 07de D7F88035 		ldr	r3, [r7, #1408]
 7820 07e2 03F5E072 		add	r2, r3, #448
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7821              		.loc 1 924 0
 7822 07e6 07F21C43 		addw	r3, r7, #1052
 7823 07ea C3F80821 		str	r2, [r3, #264]
 995:..\src/command_processing.c ****         (uint8*)&(MEM_P->exp.read_ADC_sensors_port_flag),		
 7824              		.loc 1 995 0
 7825 07ee D7F88035 		ldr	r3, [r7, #1408]
 7826 07f2 03F22722 		addw	r2, r3, #551
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7827              		.loc 1 924 0
 7828 07f6 07F21C43 		addw	r3, r7, #1052
 7829 07fa C3F80C21 		str	r2, [r3, #268]
 996:..\src/command_processing.c ****     	(uint8*)&(MEM_P->exp.ADC_conf[0]),
 7830              		.loc 1 996 0
 7831 07fe D7F88035 		ldr	r3, [r7, #1408]
 7832 0802 03F50A72 		add	r2, r3, #552
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7833              		.loc 1 924 0
 7834 0806 07F21C43 		addw	r3, r7, #1052
 7835 080a C3F81021 		str	r2, [r3, #272]
 997:..\src/command_processing.c ****     	(uint8*)&(MEM_P->exp.ADC_conf[6]),                          //70  
 7836              		.loc 1 997 0
 7837 080e D7F88035 		ldr	r3, [r7, #1408]
 7838 0812 03F22E22 		addw	r2, r3, #558
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7839              		.loc 1 924 0
 7840 0816 07F21C43 		addw	r3, r7, #1052
 7841 081a C3F81421 		str	r2, [r3, #276]
 998:..\src/command_processing.c ****         (uint8*)&(MEM_P->exp.record_EMG_history_on_SD),
 7842              		.loc 1 998 0
 7843 081e D7F88035 		ldr	r3, [r7, #1408]
 7844 0822 03F50D72 		add	r2, r3, #564
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7845              		.loc 1 924 0
 7846 0826 07F21C43 		addw	r3, r7, #1052
 7847 082a C3F81821 		str	r2, [r3, #280]
 999:..\src/command_processing.c ****         (uint8*)&(MEM_P->JOY_spec.joystick_closure_speed),
 7848              		.loc 1 999 0
 7849 082e D7F88035 		ldr	r3, [r7, #1408]
 7850 0832 03F52C72 		add	r2, r3, #688
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7851              		.loc 1 924 0
 7852 0836 07F21C43 		addw	r3, r7, #1052
 7853 083a C3F81C21 		str	r2, [r3, #284]
1000:..\src/command_processing.c ****         (uint8*)&(MEM_P->JOY_spec.joystick_threshold),
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 184


 7854              		.loc 1 1000 0
 7855 083e D7F88035 		ldr	r3, [r7, #1408]
 7856 0842 03F2B222 		addw	r2, r3, #690
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7857              		.loc 1 924 0
 7858 0846 07F21C43 		addw	r3, r7, #1052
 7859 084a C3F82021 		str	r2, [r3, #288]
1001:..\src/command_processing.c ****         (uint8*)&(MEM_P->JOY_spec.joystick_gains[0]),
 7860              		.loc 1 1001 0
 7861 084e D7F88035 		ldr	r3, [r7, #1408]
 7862 0852 03F52D72 		add	r2, r3, #692
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7863              		.loc 1 924 0
 7864 0856 07F21C43 		addw	r3, r7, #1052
 7865 085a C3F82421 		str	r2, [r3, #292]
1002:..\src/command_processing.c ****         (uint8*)&(MEM_P->dev.dev_type),
 7866              		.loc 1 1002 0
 7867 085e D7F88035 		ldr	r3, [r7, #1408]
 7868 0862 03F1AC02 		add	r2, r3, #172
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7869              		.loc 1 924 0
 7870 0866 07F21C43 		addw	r3, r7, #1052
 7871 086a C3F82821 		str	r2, [r3, #296]
1003:..\src/command_processing.c ****         (uint8*)&(MEM_P->WR.activation_mode),                           
 7872              		.loc 1 1003 0
 7873 086e D7F88035 		ldr	r3, [r7, #1408]
 7874 0872 03F53872 		add	r2, r3, #736
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7875              		.loc 1 924 0
 7876 0876 07F21C43 		addw	r3, r7, #1052
 7877 087a C3F82C21 		str	r2, [r3, #300]
1004:..\src/command_processing.c ****         (uint8*)&(MEM_P->WR.fast_act_threshold[0]),
 7878              		.loc 1 1004 0
 7879 087e D7F88035 		ldr	r3, [r7, #1408]
 7880 0882 03F2E222 		addw	r2, r3, #738
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7881              		.loc 1 924 0
 7882 0886 07F21C43 		addw	r3, r7, #1052
 7883 088a C3F83021 		str	r2, [r3, #304]
1005:..\src/command_processing.c ****         
1006:..\src/command_processing.c ****         (uint8*)&(MEM_P->WR.wrist_direction_association),              // additional wrist params
 7884              		.loc 1 1006 0
 7885 088e D7F88035 		ldr	r3, [r7, #1408]
 7886 0892 03F2E622 		addw	r2, r3, #742
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7887              		.loc 1 924 0
 7888 0896 07F21C43 		addw	r3, r7, #1052
 7889 089a C3F83421 		str	r2, [r3, #308]
1007:..\src/command_processing.c ****         
1008:..\src/command_processing.c ****         (uint8*)&(MEM_P->MS.slave_comm_active),                        // additional master params
 7890              		.loc 1 1008 0
 7891 089e D7F88035 		ldr	r3, [r7, #1408]
 7892 08a2 03F53072 		add	r2, r3, #704
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7893              		.loc 1 924 0
 7894 08a6 07F21C43 		addw	r3, r7, #1052
 7895 08aa C3F83821 		str	r2, [r3, #312]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 185


1009:..\src/command_processing.c ****         (uint8*)&(MEM_P->MS.slave_ID),
 7896              		.loc 1 1009 0
 7897 08ae D7F88035 		ldr	r3, [r7, #1408]
 7898 08b2 03F2C122 		addw	r2, r3, #705
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7899              		.loc 1 924 0
 7900 08b6 07F21C43 		addw	r3, r7, #1052
 7901 08ba C3F83C21 		str	r2, [r3, #316]
1010:..\src/command_processing.c ****         
1011:..\src/command_processing.c ****         (uint8*)&(MEM_P->FB.max_residual_current),                     // additional feedback param
 7902              		.loc 1 1011 0
 7903 08be D7F88035 		ldr	r3, [r7, #1408]
 7904 08c2 03F53472 		add	r2, r3, #720
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7905              		.loc 1 924 0
 7906 08c6 07F21C43 		addw	r3, r7, #1052
 7907 08ca C3F84021 		str	r2, [r3, #320]
1012:..\src/command_processing.c ****         (uint8*)&(MEM_P->FB.maximum_pressure_kPa),
 7908              		.loc 1 1012 0
 7909 08ce D7F88035 		ldr	r3, [r7, #1408]
 7910 08d2 03F53572 		add	r2, r3, #724
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7911              		.loc 1 924 0
 7912 08d6 07F21C43 		addw	r3, r7, #1052
 7913 08da C3F84421 		str	r2, [r3, #324]
1013:..\src/command_processing.c ****         (uint8*)&(MEM_P->FB.prop_err_fb_gain)
 7914              		.loc 1 1013 0
 7915 08de D7F88035 		ldr	r3, [r7, #1408]
 7916 08e2 03F53672 		add	r2, r3, #728
 924:..\src/command_processing.c ****     	(uint8*)&(MEM_P->dev.id),                                                   
 7917              		.loc 1 924 0
 7918 08e6 07F21C43 		addw	r3, r7, #1052
 7919 08ea C3F84821 		str	r2, [r3, #328]
1014:..\src/command_processing.c ****         
1015:..\src/command_processing.c **** 
1016:..\src/command_processing.c ****     };
1017:..\src/command_processing.c ****     
1018:..\src/command_processing.c ****     uint8 TYPES[NUM_OF_PARAMS] = {
 7920              		.loc 1 1018 0
 7921 08ee 07F57273 		add	r3, r7, #968
 7922 08f2 F64A     		ldr	r2, .L378
 7923 08f4 1846     		mov	r0, r3
 7924 08f6 1146     		mov	r1, r2
 7925 08f8 5323     		movs	r3, #83
 7926 08fa 1A46     		mov	r2, r3
 7927 08fc FFF7FEFF 		bl	memcpy
1019:..\src/command_processing.c ****         TYPE_UINT8, TYPE_FLOAT, TYPE_FLOAT, TYPE_FLAG, 
1020:..\src/command_processing.c ****         TYPE_FLAG, TYPE_FLAG, TYPE_UINT8, TYPE_INT16, 
1021:..\src/command_processing.c ****         TYPE_FLOAT, TYPE_FLAG, TYPE_INT32, TYPE_INT32, 
1022:..\src/command_processing.c ****         TYPE_INT16, TYPE_UINT16, TYPE_FLAG, TYPE_UINT32, 
1023:..\src/command_processing.c ****         TYPE_UINT8, TYPE_FLAG, TYPE_INT8, TYPE_FLAG, 
1024:..\src/command_processing.c ****         TYPE_FLOAT, TYPE_UINT8, TYPE_INT32, TYPE_INT32,
1025:..\src/command_processing.c ****         TYPE_INT32, TYPE_FLAG, TYPE_FLAG, TYPE_FLAG, 
1026:..\src/command_processing.c ****         TYPE_FLAG, TYPE_FLAG, TYPE_FLAG, TYPE_UINT8, 
1027:..\src/command_processing.c ****         TYPE_FLAG, TYPE_UINT8, TYPE_FLAG, TYPE_STRING,
1028:..\src/command_processing.c ****         
1029:..\src/command_processing.c ****         // GENERIC PARAMS
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 186


1030:..\src/command_processing.c ****         TYPE_UINT8, TYPE_FLAG, TYPE_UINT8, TYPE_FLAG,
1031:..\src/command_processing.c ****         TYPE_UINT8, TYPE_INT8, TYPE_FLAG, TYPE_FLOAT, 
1032:..\src/command_processing.c ****         TYPE_FLOAT, TYPE_FLAG, TYPE_FLAG, TYPE_FLAG,
1033:..\src/command_processing.c ****         TYPE_UINT8, TYPE_INT16, TYPE_FLOAT, TYPE_FLAG, 
1034:..\src/command_processing.c ****         TYPE_INT32, TYPE_INT32, TYPE_INT16, TYPE_FLAG,
1035:..\src/command_processing.c ****         TYPE_INT8,  TYPE_FLAG, TYPE_FLOAT, TYPE_UINT8,
1036:..\src/command_processing.c ****         TYPE_FLAG,  TYPE_UINT8, TYPE_FLAG, TYPE_UINT8,
1037:..\src/command_processing.c ****         TYPE_INT8, TYPE_UINT8, TYPE_UINT8, TYPE_FLAG,
1038:..\src/command_processing.c ****         TYPE_UINT8, TYPE_UINT8, TYPE_FLAG, TYPE_UINT16, 
1039:..\src/command_processing.c ****         TYPE_INT16, TYPE_UINT16, TYPE_FLAG, TYPE_FLAG,
1040:..\src/command_processing.c ****         TYPE_UINT16,
1041:..\src/command_processing.c ****         
1042:..\src/command_processing.c ****                     TYPE_FLAG, TYPE_FLAG, TYPE_UINT8,
1043:..\src/command_processing.c ****         TYPE_INT32, TYPE_FLOAT, TYPE_FLOAT
1044:..\src/command_processing.c ****     };
1045:..\src/command_processing.c **** 
1046:..\src/command_processing.c ****     uint8 NUM_ITEMS[NUM_OF_PARAMS] = {
 7928              		.loc 1 1046 0
 7929 0900 07F55D73 		add	r3, r7, #884
 7930 0904 0122     		movs	r2, #1
 7931 0906 1A70     		strb	r2, [r3]
 7932 0908 07F55D73 		add	r3, r7, #884
 7933 090c 0322     		movs	r2, #3
 7934 090e 5A70     		strb	r2, [r3, #1]
 7935 0910 07F55D73 		add	r3, r7, #884
 7936 0914 0322     		movs	r2, #3
 7937 0916 9A70     		strb	r2, [r3, #2]
 7938 0918 07F55D73 		add	r3, r7, #884
 7939 091c 0122     		movs	r2, #1
 7940 091e DA70     		strb	r2, [r3, #3]
 7941 0920 07F55D73 		add	r3, r7, #884
 7942 0924 0122     		movs	r2, #1
 7943 0926 1A71     		strb	r2, [r3, #4]
 7944 0928 07F55D73 		add	r3, r7, #884
 7945 092c 0122     		movs	r2, #1
 7946 092e 5A71     		strb	r2, [r3, #5]
 7947 0930 07F55D73 		add	r3, r7, #884
 7948 0934 0322     		movs	r2, #3
 7949 0936 9A71     		strb	r2, [r3, #6]
 7950 0938 07F55D73 		add	r3, r7, #884
 7951 093c 0322     		movs	r2, #3
 7952 093e DA71     		strb	r2, [r3, #7]
 7953 0940 07F55D73 		add	r3, r7, #884
 7954 0944 0322     		movs	r2, #3
 7955 0946 1A72     		strb	r2, [r3, #8]
 7956 0948 07F55D73 		add	r3, r7, #884
 7957 094c 0122     		movs	r2, #1
 7958 094e 5A72     		strb	r2, [r3, #9]
 7959 0950 07F55D73 		add	r3, r7, #884
 7960 0954 0222     		movs	r2, #2
 7961 0956 9A72     		strb	r2, [r3, #10]
 7962 0958 07F55D73 		add	r3, r7, #884
 7963 095c 0222     		movs	r2, #2
 7964 095e DA72     		strb	r2, [r3, #11]
 7965 0960 07F55D73 		add	r3, r7, #884
 7966 0964 0122     		movs	r2, #1
 7967 0966 1A73     		strb	r2, [r3, #12]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 187


 7968 0968 07F55D73 		add	r3, r7, #884
 7969 096c 0222     		movs	r2, #2
 7970 096e 5A73     		strb	r2, [r3, #13]
 7971 0970 07F55D73 		add	r3, r7, #884
 7972 0974 0122     		movs	r2, #1
 7973 0976 9A73     		strb	r2, [r3, #14]
 7974 0978 07F55D73 		add	r3, r7, #884
 7975 097c 0222     		movs	r2, #2
 7976 097e DA73     		strb	r2, [r3, #15]
 7977 0980 07F55D73 		add	r3, r7, #884
 7978 0984 0222     		movs	r2, #2
 7979 0986 1A74     		strb	r2, [r3, #16]
 7980 0988 07F55D73 		add	r3, r7, #884
 7981 098c 0122     		movs	r2, #1
 7982 098e 5A74     		strb	r2, [r3, #17]
 7983 0990 07F55D73 		add	r3, r7, #884
 7984 0994 0122     		movs	r2, #1
 7985 0996 9A74     		strb	r2, [r3, #18]
 7986 0998 07F55D73 		add	r3, r7, #884
 7987 099c 0122     		movs	r2, #1
 7988 099e DA74     		strb	r2, [r3, #19]
 7989 09a0 07F55D73 		add	r3, r7, #884
 7990 09a4 0622     		movs	r2, #6
 7991 09a6 1A75     		strb	r2, [r3, #20]
 7992 09a8 07F55D73 		add	r3, r7, #884
 7993 09ac 0322     		movs	r2, #3
 7994 09ae 5A75     		strb	r2, [r3, #21]
 7995 09b0 07F55D73 		add	r3, r7, #884
 7996 09b4 0122     		movs	r2, #1
 7997 09b6 9A75     		strb	r2, [r3, #22]
 7998 09b8 07F55D73 		add	r3, r7, #884
 7999 09bc 0122     		movs	r2, #1
 8000 09be DA75     		strb	r2, [r3, #23]
 8001 09c0 07F55D73 		add	r3, r7, #884
 8002 09c4 0122     		movs	r2, #1
 8003 09c6 1A76     		strb	r2, [r3, #24]
 8004 09c8 07F55D73 		add	r3, r7, #884
 8005 09cc 0122     		movs	r2, #1
 8006 09ce 5A76     		strb	r2, [r3, #25]
 8007 09d0 07F55D73 		add	r3, r7, #884
 8008 09d4 0122     		movs	r2, #1
 8009 09d6 9A76     		strb	r2, [r3, #26]
 8010 09d8 07F55D73 		add	r3, r7, #884
 8011 09dc 0122     		movs	r2, #1
 8012 09de DA76     		strb	r2, [r3, #27]
 8013 09e0 07F55D73 		add	r3, r7, #884
 8014 09e4 0122     		movs	r2, #1
 8015 09e6 1A77     		strb	r2, [r3, #28]
 8016 09e8 07F55D73 		add	r3, r7, #884
 8017 09ec 0122     		movs	r2, #1
 8018 09ee 5A77     		strb	r2, [r3, #29]
 8019 09f0 07F55D73 		add	r3, r7, #884
 8020 09f4 0122     		movs	r2, #1
 8021 09f6 9A77     		strb	r2, [r3, #30]
 8022 09f8 07F55D73 		add	r3, r7, #884
 8023 09fc 0622     		movs	r2, #6
 8024 09fe DA77     		strb	r2, [r3, #31]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 188


 8025 0a00 07F55D73 		add	r3, r7, #884
 8026 0a04 0122     		movs	r2, #1
 8027 0a06 83F82020 		strb	r2, [r3, #32]
 8028 0a0a 07F55D73 		add	r3, r7, #884
 8029 0a0e 0522     		movs	r2, #5
 8030 0a10 83F82120 		strb	r2, [r3, #33]
 8031 0a14 07F55D73 		add	r3, r7, #884
 8032 0a18 0122     		movs	r2, #1
 8033 0a1a 83F82220 		strb	r2, [r3, #34]
 8034 0a1e 07F55D73 		add	r3, r7, #884
 8035 0a22 0622     		movs	r2, #6
 8036 0a24 83F82320 		strb	r2, [r3, #35]
 8037 0a28 07F55D73 		add	r3, r7, #884
 8038 0a2c 0122     		movs	r2, #1
 8039 0a2e 83F82420 		strb	r2, [r3, #36]
 8040 0a32 07F55D73 		add	r3, r7, #884
 8041 0a36 0122     		movs	r2, #1
 8042 0a38 83F82520 		strb	r2, [r3, #37]
 8043 0a3c 07F55D73 		add	r3, r7, #884
 8044 0a40 0122     		movs	r2, #1
 8045 0a42 83F82620 		strb	r2, [r3, #38]
 8046 0a46 07F55D73 		add	r3, r7, #884
 8047 0a4a 0122     		movs	r2, #1
 8048 0a4c 83F82720 		strb	r2, [r3, #39]
 8049 0a50 07F55D73 		add	r3, r7, #884
 8050 0a54 0322     		movs	r2, #3
 8051 0a56 83F82820 		strb	r2, [r3, #40]
 8052 0a5a 07F55D73 		add	r3, r7, #884
 8053 0a5e 0322     		movs	r2, #3
 8054 0a60 83F82920 		strb	r2, [r3, #41]
 8055 0a64 07F55D73 		add	r3, r7, #884
 8056 0a68 0122     		movs	r2, #1
 8057 0a6a 83F82A20 		strb	r2, [r3, #42]
 8058 0a6e 07F55D73 		add	r3, r7, #884
 8059 0a72 0322     		movs	r2, #3
 8060 0a74 83F82B20 		strb	r2, [r3, #43]
 8061 0a78 07F55D73 		add	r3, r7, #884
 8062 0a7c 0322     		movs	r2, #3
 8063 0a7e 83F82C20 		strb	r2, [r3, #44]
 8064 0a82 07F55D73 		add	r3, r7, #884
 8065 0a86 0122     		movs	r2, #1
 8066 0a88 83F82D20 		strb	r2, [r3, #45]
 8067 0a8c 07F55D73 		add	r3, r7, #884
 8068 0a90 0122     		movs	r2, #1
 8069 0a92 83F82E20 		strb	r2, [r3, #46]
 8070 0a96 07F55D73 		add	r3, r7, #884
 8071 0a9a 0122     		movs	r2, #1
 8072 0a9c 83F82F20 		strb	r2, [r3, #47]
 8073 0aa0 07F55D73 		add	r3, r7, #884
 8074 0aa4 0322     		movs	r2, #3
 8075 0aa6 83F83020 		strb	r2, [r3, #48]
 8076 0aaa 07F55D73 		add	r3, r7, #884
 8077 0aae 0322     		movs	r2, #3
 8078 0ab0 83F83120 		strb	r2, [r3, #49]
 8079 0ab4 07F55D73 		add	r3, r7, #884
 8080 0ab8 0322     		movs	r2, #3
 8081 0aba 83F83220 		strb	r2, [r3, #50]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 189


 8082 0abe 07F55D73 		add	r3, r7, #884
 8083 0ac2 0122     		movs	r2, #1
 8084 0ac4 83F83320 		strb	r2, [r3, #51]
 8085 0ac8 07F55D73 		add	r3, r7, #884
 8086 0acc 0222     		movs	r2, #2
 8087 0ace 83F83420 		strb	r2, [r3, #52]
 8088 0ad2 07F55D73 		add	r3, r7, #884
 8089 0ad6 0222     		movs	r2, #2
 8090 0ad8 83F83520 		strb	r2, [r3, #53]
 8091 0adc 07F55D73 		add	r3, r7, #884
 8092 0ae0 0122     		movs	r2, #1
 8093 0ae2 83F83620 		strb	r2, [r3, #54]
 8094 0ae6 07F55D73 		add	r3, r7, #884
 8095 0aea 0122     		movs	r2, #1
 8096 0aec 83F83720 		strb	r2, [r3, #55]
 8097 0af0 07F55D73 		add	r3, r7, #884
 8098 0af4 0122     		movs	r2, #1
 8099 0af6 83F83820 		strb	r2, [r3, #56]
 8100 0afa 07F55D73 		add	r3, r7, #884
 8101 0afe 0122     		movs	r2, #1
 8102 0b00 83F83920 		strb	r2, [r3, #57]
 8103 0b04 07F55D73 		add	r3, r7, #884
 8104 0b08 0622     		movs	r2, #6
 8105 0b0a 83F83A20 		strb	r2, [r3, #58]
 8106 0b0e 07F55D73 		add	r3, r7, #884
 8107 0b12 0122     		movs	r2, #1
 8108 0b14 83F83B20 		strb	r2, [r3, #59]
 8109 0b18 07F55D73 		add	r3, r7, #884
 8110 0b1c 0122     		movs	r2, #1
 8111 0b1e 83F83C20 		strb	r2, [r3, #60]
 8112 0b22 07F55D73 		add	r3, r7, #884
 8113 0b26 0122     		movs	r2, #1
 8114 0b28 83F83D20 		strb	r2, [r3, #61]
 8115 0b2c 07F55D73 		add	r3, r7, #884
 8116 0b30 0122     		movs	r2, #1
 8117 0b32 83F83E20 		strb	r2, [r3, #62]
 8118 0b36 07F55D73 		add	r3, r7, #884
 8119 0b3a 0322     		movs	r2, #3
 8120 0b3c 83F83F20 		strb	r2, [r3, #63]
 8121 0b40 07F55D73 		add	r3, r7, #884
 8122 0b44 0322     		movs	r2, #3
 8123 0b46 83F84020 		strb	r2, [r3, #64]
1047:..\src/command_processing.c ****         1, 3, 3, 1, 
1048:..\src/command_processing.c ****         1, 1, 3, 3,
1049:..\src/command_processing.c ****         3, 1, 2, 2, 
1050:..\src/command_processing.c ****         1, 2, 1, 2,
1051:..\src/command_processing.c ****         2, 1, 1, 1, 
1052:..\src/command_processing.c ****         6, 3, 1, 1,
1053:..\src/command_processing.c ****         1, 1, 1, 1, 
1054:..\src/command_processing.c ****         1, 1, 1, 6,
1055:..\src/command_processing.c ****         1, 5, 1, 6,
1056:..\src/command_processing.c ****         
1057:..\src/command_processing.c ****         // GENERIC PARAMS
1058:..\src/command_processing.c ****         1, 1, 1, 1,
1059:..\src/command_processing.c ****         3, 3, 1, 3,
1060:..\src/command_processing.c ****         3, 1, 1, 1,
1061:..\src/command_processing.c ****         3, 3, 3, 1,
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 190


1062:..\src/command_processing.c ****         2, 2, 1, 1,
1063:..\src/command_processing.c ****         1, 1, 6, 1,
1064:..\src/command_processing.c ****         1, 1, 1, 3, 
1065:..\src/command_processing.c ****         3, N_Encoder_Line_Connected[0], N_Encoder_Line_Connected[1], 1,
 8124              		.loc 1 1065 0
 8125 0b4a 614B     		ldr	r3, .L378+4
 8126 0b4c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
1046:..\src/command_processing.c ****         1, 3, 3, 1, 
 8127              		.loc 1 1046 0
 8128 0b4e 07F55D73 		add	r3, r7, #884
 8129 0b52 83F84120 		strb	r2, [r3, #65]
 8130              		.loc 1 1065 0
 8131 0b56 5E4B     		ldr	r3, .L378+4
 8132 0b58 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
1046:..\src/command_processing.c ****         1, 3, 3, 1, 
 8133              		.loc 1 1046 0
 8134 0b5a 07F55D73 		add	r3, r7, #884
 8135 0b5e 83F84220 		strb	r2, [r3, #66]
 8136 0b62 07F55D73 		add	r3, r7, #884
 8137 0b66 0122     		movs	r2, #1
 8138 0b68 83F84320 		strb	r2, [r3, #67]
 8139 0b6c 07F55D73 		add	r3, r7, #884
 8140 0b70 0622     		movs	r2, #6
 8141 0b72 83F84420 		strb	r2, [r3, #68]
 8142 0b76 07F55D73 		add	r3, r7, #884
 8143 0b7a 0622     		movs	r2, #6
 8144 0b7c 83F84520 		strb	r2, [r3, #69]
 8145 0b80 07F55D73 		add	r3, r7, #884
 8146 0b84 0122     		movs	r2, #1
 8147 0b86 83F84620 		strb	r2, [r3, #70]
 8148 0b8a 07F55D73 		add	r3, r7, #884
 8149 0b8e 0122     		movs	r2, #1
 8150 0b90 83F84720 		strb	r2, [r3, #71]
 8151 0b94 07F55D73 		add	r3, r7, #884
 8152 0b98 0122     		movs	r2, #1
 8153 0b9a 83F84820 		strb	r2, [r3, #72]
 8154 0b9e 07F55D73 		add	r3, r7, #884
 8155 0ba2 0222     		movs	r2, #2
 8156 0ba4 83F84920 		strb	r2, [r3, #73]
 8157 0ba8 07F55D73 		add	r3, r7, #884
 8158 0bac 0122     		movs	r2, #1
 8159 0bae 83F84A20 		strb	r2, [r3, #74]
 8160 0bb2 07F55D73 		add	r3, r7, #884
 8161 0bb6 0122     		movs	r2, #1
 8162 0bb8 83F84B20 		strb	r2, [r3, #75]
 8163 0bbc 07F55D73 		add	r3, r7, #884
 8164 0bc0 0222     		movs	r2, #2
 8165 0bc2 83F84C20 		strb	r2, [r3, #76]
 8166 0bc6 07F55D73 		add	r3, r7, #884
 8167 0bca 0122     		movs	r2, #1
 8168 0bcc 83F84D20 		strb	r2, [r3, #77]
 8169 0bd0 07F55D73 		add	r3, r7, #884
 8170 0bd4 0122     		movs	r2, #1
 8171 0bd6 83F84E20 		strb	r2, [r3, #78]
 8172 0bda 07F55D73 		add	r3, r7, #884
 8173 0bde 0122     		movs	r2, #1
 8174 0be0 83F84F20 		strb	r2, [r3, #79]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 191


 8175 0be4 07F55D73 		add	r3, r7, #884
 8176 0be8 0122     		movs	r2, #1
 8177 0bea 83F85020 		strb	r2, [r3, #80]
 8178 0bee 07F55D73 		add	r3, r7, #884
 8179 0bf2 0122     		movs	r2, #1
 8180 0bf4 83F85120 		strb	r2, [r3, #81]
 8181 0bf8 07F55D73 		add	r3, r7, #884
 8182 0bfc 0122     		movs	r2, #1
 8183 0bfe 83F85220 		strb	r2, [r3, #82]
1066:..\src/command_processing.c ****         6, 6, 1, 1,
1067:..\src/command_processing.c ****         1, 2, 1, 1,
1068:..\src/command_processing.c ****         2,
1069:..\src/command_processing.c ****         
1070:..\src/command_processing.c ****            1, 1, 1, 
1071:..\src/command_processing.c ****         1, 1, 1
1072:..\src/command_processing.c ****     };
1073:..\src/command_processing.c ****     
1074:..\src/command_processing.c ****     uint8 NUM_STRUCT[NUM_OF_PARAMS] = {     // see STRUCTURES INDEX in globals.h
 8184              		.loc 1 1074 0
 8185 0c02 07F54873 		add	r3, r7, #800
 8186 0c06 0022     		movs	r2, #0
 8187 0c08 1A70     		strb	r2, [r3]
 8188 0c0a 97F87D35 		ldrb	r3, [r7, #1405]
 8189 0c0e 0A33     		adds	r3, r3, #10
 8190 0c10 DAB2     		uxtb	r2, r3
 8191 0c12 07F54873 		add	r3, r7, #800
 8192 0c16 5A70     		strb	r2, [r3, #1]
 8193 0c18 97F87D35 		ldrb	r3, [r7, #1405]
 8194 0c1c 0A33     		adds	r3, r3, #10
 8195 0c1e DAB2     		uxtb	r2, r3
 8196 0c20 07F54873 		add	r3, r7, #800
 8197 0c24 9A70     		strb	r2, [r3, #2]
 8198 0c26 97F87D35 		ldrb	r3, [r7, #1405]
 8199 0c2a 0A33     		adds	r3, r3, #10
 8200 0c2c DAB2     		uxtb	r2, r3
 8201 0c2e 07F54873 		add	r3, r7, #800
 8202 0c32 DA70     		strb	r2, [r3, #3]
 8203 0c34 97F87D35 		ldrb	r3, [r7, #1405]
 8204 0c38 0A33     		adds	r3, r3, #10
 8205 0c3a DAB2     		uxtb	r2, r3
 8206 0c3c 07F54873 		add	r3, r7, #800
 8207 0c40 1A71     		strb	r2, [r3, #4]
 8208 0c42 97F87D35 		ldrb	r3, [r7, #1405]
 8209 0c46 0A33     		adds	r3, r3, #10
 8210 0c48 DAB2     		uxtb	r2, r3
 8211 0c4a 07F54873 		add	r3, r7, #800
 8212 0c4e 5A71     		strb	r2, [r3, #5]
1075:..\src/command_processing.c ****         ST_DEVICE, ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, 
1076:..\src/command_processing.c ****         ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, ST_ENCODER+(MEM_P->motor[MOTOR_IDX].encoder_line), 
 8213              		.loc 1 1076 0
 8214 0c50 97F87D25 		ldrb	r2, [r7, #1405]	@ zero_extendqisi2
 8215 0c54 D7F88015 		ldr	r1, [r7, #1408]
 8216 0c58 1346     		mov	r3, r2
 8217 0c5a DB00     		lsls	r3, r3, #3
 8218 0c5c 9B1A     		subs	r3, r3, r2
 8219 0c5e 1B01     		lsls	r3, r3, #4
 8220 0c60 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 192


 8221 0c62 03F58873 		add	r3, r3, #272
 8222 0c66 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1074:..\src/command_processing.c ****         ST_DEVICE, ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, 
 8223              		.loc 1 1074 0
 8224 0c68 1433     		adds	r3, r3, #20
 8225 0c6a DAB2     		uxtb	r2, r3
 8226 0c6c 07F54873 		add	r3, r7, #800
 8227 0c70 9A71     		strb	r2, [r3, #6]
 8228              		.loc 1 1076 0
 8229 0c72 97F87D25 		ldrb	r2, [r7, #1405]	@ zero_extendqisi2
 8230 0c76 D7F88015 		ldr	r1, [r7, #1408]
 8231 0c7a 1346     		mov	r3, r2
 8232 0c7c DB00     		lsls	r3, r3, #3
 8233 0c7e 9B1A     		subs	r3, r3, r2
 8234 0c80 1B01     		lsls	r3, r3, #4
 8235 0c82 0B44     		add	r3, r3, r1
 8236 0c84 03F58873 		add	r3, r3, #272
 8237 0c88 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1074:..\src/command_processing.c ****         ST_DEVICE, ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, 
 8238              		.loc 1 1074 0
 8239 0c8a 1433     		adds	r3, r3, #20
 8240 0c8c DAB2     		uxtb	r2, r3
 8241 0c8e 07F54873 		add	r3, r7, #800
 8242 0c92 DA71     		strb	r2, [r3, #7]
1077:..\src/command_processing.c ****         ST_ENCODER+(MEM_P->motor[MOTOR_IDX].encoder_line), ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, 
 8243              		.loc 1 1077 0
 8244 0c94 97F87D25 		ldrb	r2, [r7, #1405]	@ zero_extendqisi2
 8245 0c98 D7F88015 		ldr	r1, [r7, #1408]
 8246 0c9c 1346     		mov	r3, r2
 8247 0c9e DB00     		lsls	r3, r3, #3
 8248 0ca0 9B1A     		subs	r3, r3, r2
 8249 0ca2 1B01     		lsls	r3, r3, #4
 8250 0ca4 0B44     		add	r3, r3, r1
 8251 0ca6 03F58873 		add	r3, r3, #272
 8252 0caa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1074:..\src/command_processing.c ****         ST_DEVICE, ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, 
 8253              		.loc 1 1074 0
 8254 0cac 1433     		adds	r3, r3, #20
 8255 0cae DAB2     		uxtb	r2, r3
 8256 0cb0 07F54873 		add	r3, r7, #800
 8257 0cb4 1A72     		strb	r2, [r3, #8]
 8258 0cb6 97F87D35 		ldrb	r3, [r7, #1405]
 8259 0cba 0A33     		adds	r3, r3, #10
 8260 0cbc DAB2     		uxtb	r2, r3
 8261 0cbe 07F54873 		add	r3, r7, #800
 8262 0cc2 5A72     		strb	r2, [r3, #9]
 8263 0cc4 97F87D35 		ldrb	r3, [r7, #1405]
 8264 0cc8 04E0     		b	.L379
 8265              	.L380:
 8266 0cca 00BF     		.align	2
 8267              	.L378:
 8268 0ccc 4C060000 		.word	.LC0
 8269 0cd0 00000000 		.word	N_Encoder_Line_Connected
 8270              	.L379:
 8271 0cd4 0A33     		adds	r3, r3, #10
 8272 0cd6 DAB2     		uxtb	r2, r3
 8273 0cd8 07F54873 		add	r3, r7, #800
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 193


 8274 0cdc 9A72     		strb	r2, [r3, #10]
 8275 0cde 97F87D35 		ldrb	r3, [r7, #1405]
 8276 0ce2 0A33     		adds	r3, r3, #10
 8277 0ce4 DAB2     		uxtb	r2, r3
 8278 0ce6 07F54873 		add	r3, r7, #800
 8279 0cea DA72     		strb	r2, [r3, #11]
 8280 0cec 97F87D35 		ldrb	r3, [r7, #1405]
 8281 0cf0 0A33     		adds	r3, r3, #10
 8282 0cf2 DAB2     		uxtb	r2, r3
 8283 0cf4 07F54873 		add	r3, r7, #800
 8284 0cf8 1A73     		strb	r2, [r3, #12]
 8285 0cfa 07F54873 		add	r3, r7, #800
 8286 0cfe 1E22     		movs	r2, #30
 8287 0d00 5A73     		strb	r2, [r3, #13]
 8288 0d02 07F54873 		add	r3, r7, #800
 8289 0d06 1E22     		movs	r2, #30
 8290 0d08 9A73     		strb	r2, [r3, #14]
 8291 0d0a 07F54873 		add	r3, r7, #800
 8292 0d0e 1E22     		movs	r2, #30
 8293 0d10 DA73     		strb	r2, [r3, #15]
 8294 0d12 07F54873 		add	r3, r7, #800
 8295 0d16 1E22     		movs	r2, #30
 8296 0d18 1A74     		strb	r2, [r3, #16]
1078:..\src/command_processing.c ****         ST_MOTOR+MOTOR_IDX, ST_EMG, ST_EMG, ST_EMG, 
1079:..\src/command_processing.c ****         ST_EMG, ST_ENCODER+(MEM_P->motor[MOTOR_IDX].encoder_line), ST_ENCODER+(MEM_P->motor[MOTOR_I
 8297              		.loc 1 1079 0
 8298 0d1a 97F87D25 		ldrb	r2, [r7, #1405]	@ zero_extendqisi2
 8299 0d1e D7F88015 		ldr	r1, [r7, #1408]
 8300 0d22 1346     		mov	r3, r2
 8301 0d24 DB00     		lsls	r3, r3, #3
 8302 0d26 9B1A     		subs	r3, r3, r2
 8303 0d28 1B01     		lsls	r3, r3, #4
 8304 0d2a 0B44     		add	r3, r3, r1
 8305 0d2c 03F58873 		add	r3, r3, #272
 8306 0d30 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1074:..\src/command_processing.c ****         ST_DEVICE, ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, 
 8307              		.loc 1 1074 0
 8308 0d32 1433     		adds	r3, r3, #20
 8309 0d34 DAB2     		uxtb	r2, r3
 8310 0d36 07F54873 		add	r3, r7, #800
 8311 0d3a 5A74     		strb	r2, [r3, #17]
 8312              		.loc 1 1079 0
 8313 0d3c 97F87D25 		ldrb	r2, [r7, #1405]	@ zero_extendqisi2
 8314 0d40 D7F88015 		ldr	r1, [r7, #1408]
 8315 0d44 1346     		mov	r3, r2
 8316 0d46 DB00     		lsls	r3, r3, #3
 8317 0d48 9B1A     		subs	r3, r3, r2
 8318 0d4a 1B01     		lsls	r3, r3, #4
 8319 0d4c 0B44     		add	r3, r3, r1
 8320 0d4e 03F58873 		add	r3, r3, #272
 8321 0d52 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1074:..\src/command_processing.c ****         ST_DEVICE, ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, 
 8322              		.loc 1 1074 0
 8323 0d54 1433     		adds	r3, r3, #20
 8324 0d56 DAB2     		uxtb	r2, r3
 8325 0d58 07F54873 		add	r3, r7, #800
 8326 0d5c 9A74     		strb	r2, [r3, #18]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 194


 8327 0d5e 97F87D35 		ldrb	r3, [r7, #1405]
 8328 0d62 0A33     		adds	r3, r3, #10
 8329 0d64 DAB2     		uxtb	r2, r3
 8330 0d66 07F54873 		add	r3, r7, #800
 8331 0d6a DA74     		strb	r2, [r3, #19]
 8332 0d6c 97F87D35 		ldrb	r3, [r7, #1405]
 8333 0d70 0A33     		adds	r3, r3, #10
 8334 0d72 DAB2     		uxtb	r2, r3
 8335 0d74 07F54873 		add	r3, r7, #800
 8336 0d78 1A75     		strb	r2, [r3, #20]
 8337 0d7a 07F54873 		add	r3, r7, #800
 8338 0d7e 0022     		movs	r2, #0
 8339 0d80 5A75     		strb	r2, [r3, #21]
 8340 0d82 07F54873 		add	r3, r7, #800
 8341 0d86 4622     		movs	r2, #70
 8342 0d88 9A75     		strb	r2, [r3, #22]
 8343 0d8a 07F54873 		add	r3, r7, #800
 8344 0d8e 4622     		movs	r2, #70
 8345 0d90 DA75     		strb	r2, [r3, #23]
 8346 0d92 07F54873 		add	r3, r7, #800
 8347 0d96 4622     		movs	r2, #70
 8348 0d98 1A76     		strb	r2, [r3, #24]
 8349 0d9a 07F54873 		add	r3, r7, #800
 8350 0d9e 4622     		movs	r2, #70
 8351 0da0 5A76     		strb	r2, [r3, #25]
 8352 0da2 07F54873 		add	r3, r7, #800
 8353 0da6 1E22     		movs	r2, #30
 8354 0da8 9A76     		strb	r2, [r3, #26]
 8355 0daa 07F54873 		add	r3, r7, #800
 8356 0dae 0022     		movs	r2, #0
 8357 0db0 DA76     		strb	r2, [r3, #27]
 8358 0db2 07F54873 		add	r3, r7, #800
 8359 0db6 2822     		movs	r2, #40
 8360 0db8 1A77     		strb	r2, [r3, #28]
 8361 0dba 07F54873 		add	r3, r7, #800
 8362 0dbe 3222     		movs	r2, #50
 8363 0dc0 5A77     		strb	r2, [r3, #29]
 8364 0dc2 07F54873 		add	r3, r7, #800
 8365 0dc6 0022     		movs	r2, #0
 8366 0dc8 9A77     		strb	r2, [r3, #30]
 8367 0dca 07F54873 		add	r3, r7, #800
 8368 0dce 3222     		movs	r2, #50
 8369 0dd0 DA77     		strb	r2, [r3, #31]
 8370 0dd2 07F54873 		add	r3, r7, #800
 8371 0dd6 2822     		movs	r2, #40
 8372 0dd8 83F82020 		strb	r2, [r3, #32]
 8373 0ddc 07F54873 		add	r3, r7, #800
 8374 0de0 2822     		movs	r2, #40
 8375 0de2 83F82120 		strb	r2, [r3, #33]
 8376 0de6 07F54873 		add	r3, r7, #800
 8377 0dea 0022     		movs	r2, #0
 8378 0dec 83F82220 		strb	r2, [r3, #34]
1080:..\src/command_processing.c ****         ST_MOTOR+MOTOR_IDX, ST_DEVICE, ST_SH_SPEC, ST_SH_SPEC,
1081:..\src/command_processing.c ****         ST_SH_SPEC, ST_SH_SPEC, ST_EMG, ST_DEVICE,
1082:..\src/command_processing.c ****         ST_IMU, ST_EXPANSION, ST_DEVICE, ST_EXPANSION,
1083:..\src/command_processing.c ****         ST_IMU, ST_IMU, ST_DEVICE, ST_USER+(MEM_P->dev.user_id),
 8379              		.loc 1 1083 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 195


 8380 0df0 D7F88035 		ldr	r3, [r7, #1408]
 8381 0df4 93F8AB30 		ldrb	r3, [r3, #171]	@ zero_extendqisi2
1074:..\src/command_processing.c ****         ST_DEVICE, ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, 
 8382              		.loc 1 1074 0
 8383 0df8 3C33     		adds	r3, r3, #60
 8384 0dfa DAB2     		uxtb	r2, r3
 8385 0dfc 07F54873 		add	r3, r7, #800
 8386 0e00 83F82320 		strb	r2, [r3, #35]
 8387 0e04 97F87D35 		ldrb	r3, [r7, #1405]
 8388 0e08 0A33     		adds	r3, r3, #10
 8389 0e0a DAB2     		uxtb	r2, r3
 8390 0e0c 07F54873 		add	r3, r7, #800
 8391 0e10 83F82420 		strb	r2, [r3, #36]
 8392 0e14 97F87D35 		ldrb	r3, [r7, #1405]
 8393 0e18 0A33     		adds	r3, r3, #10
 8394 0e1a DAB2     		uxtb	r2, r3
 8395 0e1c 07F54873 		add	r3, r7, #800
 8396 0e20 83F82520 		strb	r2, [r3, #37]
 8397 0e24 97F87D35 		ldrb	r3, [r7, #1405]
 8398 0e28 0A33     		adds	r3, r3, #10
 8399 0e2a DAB2     		uxtb	r2, r3
 8400 0e2c 07F54873 		add	r3, r7, #800
 8401 0e30 83F82620 		strb	r2, [r3, #38]
 8402 0e34 97F87D35 		ldrb	r3, [r7, #1405]
 8403 0e38 0A33     		adds	r3, r3, #10
 8404 0e3a DAB2     		uxtb	r2, r3
 8405 0e3c 07F54873 		add	r3, r7, #800
 8406 0e40 83F82720 		strb	r2, [r3, #39]
1084:..\src/command_processing.c ****         
1085:..\src/command_processing.c ****         // GENERIC PARAMS
1086:..\src/command_processing.c ****         ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX,
1087:..\src/command_processing.c ****         ST_ENCODER+(MEM_P->motor[MOTOR_IDX].encoder_line), ST_ENCODER+(MEM_P->motor[MOTOR_IDX].enco
 8407              		.loc 1 1087 0
 8408 0e44 97F87D25 		ldrb	r2, [r7, #1405]	@ zero_extendqisi2
 8409 0e48 D7F88015 		ldr	r1, [r7, #1408]
 8410 0e4c 1346     		mov	r3, r2
 8411 0e4e DB00     		lsls	r3, r3, #3
 8412 0e50 9B1A     		subs	r3, r3, r2
 8413 0e52 1B01     		lsls	r3, r3, #4
 8414 0e54 0B44     		add	r3, r3, r1
 8415 0e56 03F58873 		add	r3, r3, #272
 8416 0e5a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1074:..\src/command_processing.c ****         ST_DEVICE, ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, 
 8417              		.loc 1 1074 0
 8418 0e5c 1433     		adds	r3, r3, #20
 8419 0e5e DAB2     		uxtb	r2, r3
 8420 0e60 07F54873 		add	r3, r7, #800
 8421 0e64 83F82820 		strb	r2, [r3, #40]
 8422              		.loc 1 1087 0
 8423 0e68 97F87D25 		ldrb	r2, [r7, #1405]	@ zero_extendqisi2
 8424 0e6c D7F88015 		ldr	r1, [r7, #1408]
 8425 0e70 1346     		mov	r3, r2
 8426 0e72 DB00     		lsls	r3, r3, #3
 8427 0e74 9B1A     		subs	r3, r3, r2
 8428 0e76 1B01     		lsls	r3, r3, #4
 8429 0e78 0B44     		add	r3, r3, r1
 8430 0e7a 03F58873 		add	r3, r3, #272
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 196


 8431 0e7e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1074:..\src/command_processing.c ****         ST_DEVICE, ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, 
 8432              		.loc 1 1074 0
 8433 0e80 1433     		adds	r3, r3, #20
 8434 0e82 DAB2     		uxtb	r2, r3
 8435 0e84 07F54873 		add	r3, r7, #800
 8436 0e88 83F82920 		strb	r2, [r3, #41]
 8437 0e8c 07F54873 		add	r3, r7, #800
 8438 0e90 0022     		movs	r2, #0
 8439 0e92 83F82A20 		strb	r2, [r3, #42]
 8440 0e96 97F87C35 		ldrb	r3, [r7, #1404]
 8441 0e9a 0A33     		adds	r3, r3, #10
 8442 0e9c DAB2     		uxtb	r2, r3
 8443 0e9e 07F54873 		add	r3, r7, #800
 8444 0ea2 83F82B20 		strb	r2, [r3, #43]
 8445 0ea6 97F87C35 		ldrb	r3, [r7, #1404]
 8446 0eaa 0A33     		adds	r3, r3, #10
 8447 0eac DAB2     		uxtb	r2, r3
 8448 0eae 07F54873 		add	r3, r7, #800
 8449 0eb2 83F82C20 		strb	r2, [r3, #44]
 8450 0eb6 97F87C35 		ldrb	r3, [r7, #1404]
 8451 0eba 0A33     		adds	r3, r3, #10
 8452 0ebc DAB2     		uxtb	r2, r3
 8453 0ebe 07F54873 		add	r3, r7, #800
 8454 0ec2 83F82D20 		strb	r2, [r3, #45]
 8455 0ec6 97F87C35 		ldrb	r3, [r7, #1404]
 8456 0eca 0A33     		adds	r3, r3, #10
 8457 0ecc DAB2     		uxtb	r2, r3
 8458 0ece 07F54873 		add	r3, r7, #800
 8459 0ed2 83F82E20 		strb	r2, [r3, #46]
 8460 0ed6 97F87C35 		ldrb	r3, [r7, #1404]
 8461 0eda 0A33     		adds	r3, r3, #10
 8462 0edc DAB2     		uxtb	r2, r3
 8463 0ede 07F54873 		add	r3, r7, #800
 8464 0ee2 83F82F20 		strb	r2, [r3, #47]
1088:..\src/command_processing.c ****         ST_MOTOR+SECOND_MOTOR_IDX, ST_MOTOR+SECOND_MOTOR_IDX, ST_MOTOR+SECOND_MOTOR_IDX, ST_MOTOR+S
1089:..\src/command_processing.c ****         ST_ENCODER+(MEM_P->motor[SECOND_MOTOR_IDX].encoder_line), ST_ENCODER+(MEM_P->motor[SECOND_M
 8465              		.loc 1 1089 0
 8466 0ee6 97F87C25 		ldrb	r2, [r7, #1404]	@ zero_extendqisi2
 8467 0eea D7F88015 		ldr	r1, [r7, #1408]
 8468 0eee 1346     		mov	r3, r2
 8469 0ef0 DB00     		lsls	r3, r3, #3
 8470 0ef2 9B1A     		subs	r3, r3, r2
 8471 0ef4 1B01     		lsls	r3, r3, #4
 8472 0ef6 0B44     		add	r3, r3, r1
 8473 0ef8 03F58873 		add	r3, r3, #272
 8474 0efc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1074:..\src/command_processing.c ****         ST_DEVICE, ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, 
 8475              		.loc 1 1074 0
 8476 0efe 1433     		adds	r3, r3, #20
 8477 0f00 DAB2     		uxtb	r2, r3
 8478 0f02 07F54873 		add	r3, r7, #800
 8479 0f06 83F83020 		strb	r2, [r3, #48]
 8480              		.loc 1 1089 0
 8481 0f0a 97F87C25 		ldrb	r2, [r7, #1404]	@ zero_extendqisi2
 8482 0f0e D7F88015 		ldr	r1, [r7, #1408]
 8483 0f12 1346     		mov	r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 197


 8484 0f14 DB00     		lsls	r3, r3, #3
 8485 0f16 9B1A     		subs	r3, r3, r2
 8486 0f18 1B01     		lsls	r3, r3, #4
 8487 0f1a 0B44     		add	r3, r3, r1
 8488 0f1c 03F58873 		add	r3, r3, #272
 8489 0f20 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1074:..\src/command_processing.c ****         ST_DEVICE, ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, 
 8490              		.loc 1 1074 0
 8491 0f22 1433     		adds	r3, r3, #20
 8492 0f24 DAB2     		uxtb	r2, r3
 8493 0f26 07F54873 		add	r3, r7, #800
 8494 0f2a 83F83120 		strb	r2, [r3, #49]
 8495              		.loc 1 1089 0
 8496 0f2e 97F87C25 		ldrb	r2, [r7, #1404]	@ zero_extendqisi2
 8497 0f32 D7F88015 		ldr	r1, [r7, #1408]
 8498 0f36 1346     		mov	r3, r2
 8499 0f38 DB00     		lsls	r3, r3, #3
 8500 0f3a 9B1A     		subs	r3, r3, r2
 8501 0f3c 1B01     		lsls	r3, r3, #4
 8502 0f3e 0B44     		add	r3, r3, r1
 8503 0f40 03F58873 		add	r3, r3, #272
 8504 0f44 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1074:..\src/command_processing.c ****         ST_DEVICE, ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, 
 8505              		.loc 1 1074 0
 8506 0f46 1433     		adds	r3, r3, #20
 8507 0f48 DAB2     		uxtb	r2, r3
 8508 0f4a 07F54873 		add	r3, r7, #800
 8509 0f4e 83F83220 		strb	r2, [r3, #50]
 8510 0f52 97F87C35 		ldrb	r3, [r7, #1404]
 8511 0f56 0A33     		adds	r3, r3, #10
 8512 0f58 DAB2     		uxtb	r2, r3
 8513 0f5a 07F54873 		add	r3, r7, #800
 8514 0f5e 83F83320 		strb	r2, [r3, #51]
 8515 0f62 97F87C35 		ldrb	r3, [r7, #1404]
 8516 0f66 0A33     		adds	r3, r3, #10
 8517 0f68 DAB2     		uxtb	r2, r3
 8518 0f6a 07F54873 		add	r3, r7, #800
 8519 0f6e 83F83420 		strb	r2, [r3, #52]
 8520 0f72 97F87C35 		ldrb	r3, [r7, #1404]
 8521 0f76 0A33     		adds	r3, r3, #10
 8522 0f78 DAB2     		uxtb	r2, r3
 8523 0f7a 07F54873 		add	r3, r7, #800
 8524 0f7e 83F83520 		strb	r2, [r3, #53]
 8525 0f82 97F87C35 		ldrb	r3, [r7, #1404]
 8526 0f86 0A33     		adds	r3, r3, #10
 8527 0f88 DAB2     		uxtb	r2, r3
 8528 0f8a 07F54873 		add	r3, r7, #800
 8529 0f8e 83F83620 		strb	r2, [r3, #54]
1090:..\src/command_processing.c ****         ST_MOTOR+SECOND_MOTOR_IDX, ST_MOTOR+SECOND_MOTOR_IDX, ST_MOTOR+SECOND_MOTOR_IDX, ST_ENCODER
 8530              		.loc 1 1090 0
 8531 0f92 97F87C25 		ldrb	r2, [r7, #1404]	@ zero_extendqisi2
 8532 0f96 D7F88015 		ldr	r1, [r7, #1408]
 8533 0f9a 1346     		mov	r3, r2
 8534 0f9c DB00     		lsls	r3, r3, #3
 8535 0f9e 9B1A     		subs	r3, r3, r2
 8536 0fa0 1B01     		lsls	r3, r3, #4
 8537 0fa2 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 198


 8538 0fa4 03F58873 		add	r3, r3, #272
 8539 0fa8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1074:..\src/command_processing.c ****         ST_DEVICE, ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, 
 8540              		.loc 1 1074 0
 8541 0faa 1433     		adds	r3, r3, #20
 8542 0fac DAB2     		uxtb	r2, r3
 8543 0fae 07F54873 		add	r3, r7, #800
 8544 0fb2 83F83720 		strb	r2, [r3, #55]
1091:..\src/command_processing.c ****         ST_ENCODER+(MEM_P->motor[SECOND_MOTOR_IDX].encoder_line), ST_MOTOR+SECOND_MOTOR_IDX, ST_MOT
 8545              		.loc 1 1091 0
 8546 0fb6 97F87C25 		ldrb	r2, [r7, #1404]	@ zero_extendqisi2
 8547 0fba D7F88015 		ldr	r1, [r7, #1408]
 8548 0fbe 1346     		mov	r3, r2
 8549 0fc0 DB00     		lsls	r3, r3, #3
 8550 0fc2 9B1A     		subs	r3, r3, r2
 8551 0fc4 1B01     		lsls	r3, r3, #4
 8552 0fc6 0B44     		add	r3, r3, r1
 8553 0fc8 03F58873 		add	r3, r3, #272
 8554 0fcc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1074:..\src/command_processing.c ****         ST_DEVICE, ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, 
 8555              		.loc 1 1074 0
 8556 0fce 1433     		adds	r3, r3, #20
 8557 0fd0 DAB2     		uxtb	r2, r3
 8558 0fd2 07F54873 		add	r3, r7, #800
 8559 0fd6 83F83820 		strb	r2, [r3, #56]
 8560 0fda 97F87C35 		ldrb	r3, [r7, #1404]
 8561 0fde 0A33     		adds	r3, r3, #10
 8562 0fe0 DAB2     		uxtb	r2, r3
 8563 0fe2 07F54873 		add	r3, r7, #800
 8564 0fe6 83F83920 		strb	r2, [r3, #57]
 8565 0fea 97F87C35 		ldrb	r3, [r7, #1404]
 8566 0fee 0A33     		adds	r3, r3, #10
 8567 0ff0 DAB2     		uxtb	r2, r3
 8568 0ff2 07F54873 		add	r3, r7, #800
 8569 0ff6 83F83A20 		strb	r2, [r3, #58]
 8570 0ffa 97F87C35 		ldrb	r3, [r7, #1404]
 8571 0ffe 0A33     		adds	r3, r3, #10
 8572 1000 DAB2     		uxtb	r2, r3
 8573 1002 07F54873 		add	r3, r7, #800
 8574 1006 83F83B20 		strb	r2, [r3, #59]
 8575 100a 97F87C35 		ldrb	r3, [r7, #1404]
 8576 100e 0A33     		adds	r3, r3, #10
 8577 1010 DAB2     		uxtb	r2, r3
 8578 1012 07F54873 		add	r3, r7, #800
 8579 1016 83F83C20 		strb	r2, [r3, #60]
 8580 101a 97F87C35 		ldrb	r3, [r7, #1404]
 8581 101e 0A33     		adds	r3, r3, #10
 8582 1020 DAB2     		uxtb	r2, r3
 8583 1022 07F54873 		add	r3, r7, #800
 8584 1026 83F83D20 		strb	r2, [r3, #61]
 8585 102a 97F87C35 		ldrb	r3, [r7, #1404]
 8586 102e 0A33     		adds	r3, r3, #10
 8587 1030 DAB2     		uxtb	r2, r3
 8588 1032 07F54873 		add	r3, r7, #800
 8589 1036 83F83E20 		strb	r2, [r3, #62]
1092:..\src/command_processing.c ****         ST_MOTOR+SECOND_MOTOR_IDX, ST_MOTOR+SECOND_MOTOR_IDX, ST_MOTOR+SECOND_MOTOR_IDX, ST_ENCODER
 8590              		.loc 1 1092 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 199


 8591 103a 97F87C25 		ldrb	r2, [r7, #1404]	@ zero_extendqisi2
 8592 103e D7F88015 		ldr	r1, [r7, #1408]
 8593 1042 1346     		mov	r3, r2
 8594 1044 DB00     		lsls	r3, r3, #3
 8595 1046 9B1A     		subs	r3, r3, r2
 8596 1048 1B01     		lsls	r3, r3, #4
 8597 104a 0B44     		add	r3, r3, r1
 8598 104c 03F58873 		add	r3, r3, #272
 8599 1050 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1074:..\src/command_processing.c ****         ST_DEVICE, ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, 
 8600              		.loc 1 1074 0
 8601 1052 1433     		adds	r3, r3, #20
 8602 1054 DAB2     		uxtb	r2, r3
 8603 1056 07F54873 		add	r3, r7, #800
 8604 105a 83F83F20 		strb	r2, [r3, #63]
1093:..\src/command_processing.c ****         ST_ENCODER+(MEM_P->motor[SECOND_MOTOR_IDX].encoder_line), ST_ENCODER+0, ST_ENCODER+1, ST_EX
 8605              		.loc 1 1093 0
 8606 105e 97F87C25 		ldrb	r2, [r7, #1404]	@ zero_extendqisi2
 8607 1062 D7F88015 		ldr	r1, [r7, #1408]
 8608 1066 1346     		mov	r3, r2
 8609 1068 DB00     		lsls	r3, r3, #3
 8610 106a 9B1A     		subs	r3, r3, r2
 8611 106c 1B01     		lsls	r3, r3, #4
 8612 106e 0B44     		add	r3, r3, r1
 8613 1070 03F58873 		add	r3, r3, #272
 8614 1074 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1074:..\src/command_processing.c ****         ST_DEVICE, ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, ST_MOTOR+MOTOR_IDX, 
 8615              		.loc 1 1074 0
 8616 1076 1433     		adds	r3, r3, #20
 8617 1078 DAB2     		uxtb	r2, r3
 8618 107a 07F54873 		add	r3, r7, #800
 8619 107e 83F84020 		strb	r2, [r3, #64]
 8620 1082 07F54873 		add	r3, r7, #800
 8621 1086 1422     		movs	r2, #20
 8622 1088 83F84120 		strb	r2, [r3, #65]
 8623 108c 07F54873 		add	r3, r7, #800
 8624 1090 1522     		movs	r2, #21
 8625 1092 83F84220 		strb	r2, [r3, #66]
 8626 1096 07F54873 		add	r3, r7, #800
 8627 109a 3222     		movs	r2, #50
 8628 109c 83F84320 		strb	r2, [r3, #67]
 8629 10a0 07F54873 		add	r3, r7, #800
 8630 10a4 3222     		movs	r2, #50
 8631 10a6 83F84420 		strb	r2, [r3, #68]
 8632 10aa 07F54873 		add	r3, r7, #800
 8633 10ae 3222     		movs	r2, #50
 8634 10b0 83F84520 		strb	r2, [r3, #69]
 8635 10b4 07F54873 		add	r3, r7, #800
 8636 10b8 3222     		movs	r2, #50
 8637 10ba 83F84620 		strb	r2, [r3, #70]
 8638 10be 07F54873 		add	r3, r7, #800
 8639 10c2 6E22     		movs	r2, #110
 8640 10c4 83F84720 		strb	r2, [r3, #71]
 8641 10c8 07F54873 		add	r3, r7, #800
 8642 10cc 6E22     		movs	r2, #110
 8643 10ce 83F84820 		strb	r2, [r3, #72]
 8644 10d2 07F54873 		add	r3, r7, #800
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 200


 8645 10d6 6E22     		movs	r2, #110
 8646 10d8 83F84920 		strb	r2, [r3, #73]
 8647 10dc 07F54873 		add	r3, r7, #800
 8648 10e0 0022     		movs	r2, #0
 8649 10e2 83F84A20 		strb	r2, [r3, #74]
 8650 10e6 07F54873 		add	r3, r7, #800
 8651 10ea 6422     		movs	r2, #100
 8652 10ec 83F84B20 		strb	r2, [r3, #75]
 8653 10f0 07F54873 		add	r3, r7, #800
 8654 10f4 6422     		movs	r2, #100
 8655 10f6 83F84C20 		strb	r2, [r3, #76]
 8656 10fa 07F54873 		add	r3, r7, #800
 8657 10fe 6422     		movs	r2, #100
 8658 1100 83F84D20 		strb	r2, [r3, #77]
 8659 1104 07F54873 		add	r3, r7, #800
 8660 1108 5022     		movs	r2, #80
 8661 110a 83F84E20 		strb	r2, [r3, #78]
 8662 110e 07F54873 		add	r3, r7, #800
 8663 1112 5022     		movs	r2, #80
 8664 1114 83F84F20 		strb	r2, [r3, #79]
 8665 1118 07F54873 		add	r3, r7, #800
 8666 111c 5A22     		movs	r2, #90
 8667 111e 83F85020 		strb	r2, [r3, #80]
 8668 1122 07F54873 		add	r3, r7, #800
 8669 1126 5A22     		movs	r2, #90
 8670 1128 83F85120 		strb	r2, [r3, #81]
 8671 112c 07F54873 		add	r3, r7, #800
 8672 1130 5A22     		movs	r2, #90
 8673 1132 83F85220 		strb	r2, [r3, #82]
1094:..\src/command_processing.c ****         ST_EXPANSION, ST_EXPANSION, ST_EXPANSION, ST_JOY_SPEC,
1095:..\src/command_processing.c ****         ST_JOY_SPEC, ST_JOY_SPEC, ST_DEVICE, ST_WR_SPEC, 
1096:..\src/command_processing.c ****         ST_WR_SPEC,
1097:..\src/command_processing.c ****         
1098:..\src/command_processing.c ****                     ST_WR_SPEC, ST_MS_SPEC, ST_MS_SPEC,
1099:..\src/command_processing.c ****         ST_FB_SPEC, ST_FB_SPEC, ST_FB_SPEC
1100:..\src/command_processing.c ****         
1101:..\src/command_processing.c ****     };
1102:..\src/command_processing.c ****     
1103:..\src/command_processing.c ****     const char* PARAMS_STR[NUM_OF_PARAMS] = {
 8674              		.loc 1 1103 0
 8675 1136 07F5EA73 		add	r3, r7, #468
 8676 113a CD4A     		ldr	r2, .L381
 8677 113c 1846     		mov	r0, r3
 8678 113e 1146     		mov	r1, r2
 8679 1140 4FF4A673 		mov	r3, #332
 8680 1144 1A46     		mov	r2, r3
 8681 1146 FFF7FEFF 		bl	memcpy
1104:..\src/command_processing.c ****         "1 - Device ID:", "2 - Position PID [P, I, D]:", "3 - Current PID [P, I, D]:", "4 - Startup
1105:..\src/command_processing.c ****         "5 - Input mode:", "6 - Control mode:", "7 - Resolutions:", "8 - Measurement Offsets:", 
1106:..\src/command_processing.c ****         "9 - Multipliers:", "10 - Pos. limit active:", "11 - Pos. limits [inf, sup]:", "12 - Max st
1107:..\src/command_processing.c ****         "13 - Current limit:", "14 - EMG thresholds:", "15 - EMG calibration on startup:", "16 - EM
1108:..\src/command_processing.c ****         "17 - EMG max speeds:", "18 - Absolute encoder position:", "19 - Motor handle ratio:", "20 
1109:..\src/command_processing.c ****         "21 - Current lookup:", "22 - Date of maintenance [D/M/Y]:", "23 - Rest position:", "24 - R
1110:..\src/command_processing.c ****         "25 - Rest vel closure (ticks/sec):", "26 - Rest position enabled:", "27 - EMG inversion:",
1111:..\src/command_processing.c ****         "29 - Enable IMUs:", "30 - Read Expansion port:", "31 - Reset counters:", "32 - Last checke
1112:..\src/command_processing.c ****         "33 - SPI read delay (IMU):", "34 - On board IMU conf. [a,g,m,q,t]:", "35 - User ID:", "36 
1113:..\src/command_processing.c ****         
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 201


1114:..\src/command_processing.c ****         // GENERIC PARAMS
1115:..\src/command_processing.c ****         "37 - Associated encoder line:", "38 - Driver type:", "39 - PWM rate limiter:", "40 - Not r
1116:..\src/command_processing.c ****         "41 - Enc idx used for control:", "42 - Gear params[N1, N2, I1]:", "43 - Use second motor:"
1117:..\src/command_processing.c ****         "45 - Current PID [P, I, D]:", "46 - Startup Activation:", "47 - Input mode:", "48 - Contro
1118:..\src/command_processing.c ****         "49 - Resolutions:", "50 - Measurement Offsets:", "51 - Multipliers:", "52 - Pos. limit act
1119:..\src/command_processing.c ****         "53 - Pos. limits [inf, sup]:", "54 - Max steps [neg, pos]:", "55 - Current limit:", "56 - 
1120:..\src/command_processing.c ****         "57 - Motor handle ratio:", "58 - PWM rescaling:", "59 - Current lookup:", "60 - Associated
1121:..\src/command_processing.c ****         "61 - Driver type:", "62 - PWM rate limiter:", "63 - Not reversible:", "64 - Enc idx used f
1122:..\src/command_processing.c ****         "65 - Gear params[N1, N2, I1]:", "66 - Read enc raw line 0:", "67 - Read enc raw line 1:", 
1123:..\src/command_processing.c ****         "69 - ADC channel [1-6]:", "70 - ADC channel [7-12]:", "71 - Record EMG on SD card:", "72 -
1124:..\src/command_processing.c ****         "73 - Joystick threshold:", "74 - Joystick gains:", "75 - Device type:", "76 - EMG FSM act.
1125:..\src/command_processing.c ****         "77 - Fast act.thresholds:",
1126:..\src/command_processing.c ****         
1127:..\src/command_processing.c ****                                      "78 - Wrist direction:", "79 - Slave communication active:", "
1128:..\src/command_processing.c ****         "81 - Maximum slave residual current:", "82 - Maximum pressure feedback (kPa):", "83 - Prop
1129:..\src/command_processing.c ****     };
1130:..\src/command_processing.c **** 
1131:..\src/command_processing.c ****     //Parameters menu
1132:..\src/command_processing.c ****     char spi_delay_menu[118]    = ""; 
 8682              		.loc 1 1132 0
 8683 114a 07F5AE73 		add	r3, r7, #348
 8684 114e 0022     		movs	r2, #0
 8685 1150 1A60     		str	r2, [r3]
 8686 1152 0433     		adds	r3, r3, #4
 8687 1154 7222     		movs	r2, #114
 8688 1156 0021     		movs	r1, #0
 8689 1158 1846     		mov	r0, r3
 8690 115a FFF7FEFF 		bl	memset
1133:..\src/command_processing.c ****     sprintf(spi_delay_menu, "0 -> None\n1 -> Low (%u us delay for each 8-bit register read)\n2 -> H
 8691              		.loc 1 1133 0
 8692 115e 07F5AE70 		add	r0, r7, #348
 8693 1162 6423     		movs	r3, #100
 8694 1164 0A22     		movs	r2, #10
 8695 1166 C349     		ldr	r1, .L381+4
 8696 1168 FFF7FEFF 		bl	sprintf
1134:..\src/command_processing.c **** 
1135:..\src/command_processing.c ****     char fsm_activation_mode_menu[56] = "";
 8697              		.loc 1 1135 0
 8698 116c 07F59273 		add	r3, r7, #292
 8699 1170 0022     		movs	r2, #0
 8700 1172 1A60     		str	r2, [r3]
 8701 1174 0433     		adds	r3, r3, #4
 8702 1176 3422     		movs	r2, #52
 8703 1178 0021     		movs	r1, #0
 8704 117a 1846     		mov	r0, r3
 8705 117c FFF7FEFF 		bl	memset
1136:..\src/command_processing.c ****     if (MEM_P->dev.dev_type == SOFTHAND_2_MOTORS){
 8706              		.loc 1 1136 0
 8707 1180 D7F88035 		ldr	r3, [r7, #1408]
 8708 1184 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 8709 1188 042B     		cmp	r3, #4
 8710 118a 10D1     		bne	.L313
1137:..\src/command_processing.c ****         sprintf(fsm_activation_mode_menu, "0 -> Fast:syn2, Slow:syn1\n1 -> Slow:syn2, Fast:syn1\n")
 8711              		.loc 1 1137 0
 8712 118c 07F59273 		add	r3, r7, #292
 8713 1190 B94A     		ldr	r2, .L381+8
 8714 1192 1C46     		mov	r4, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 202


 8715 1194 1546     		mov	r5, r2
 8716 1196 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 8717 1198 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 8718 119a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 8719 119c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 8720 119e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 8721 11a0 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 8722 11a2 95E80300 		ldmia	r5, {r0, r1}
 8723 11a6 2060     		str	r0, [r4]
 8724 11a8 0434     		adds	r4, r4, #4
 8725 11aa 2170     		strb	r1, [r4]
 8726 11ac 0FE0     		b	.L314
 8727              	.L313:
1138:..\src/command_processing.c ****     }
1139:..\src/command_processing.c ****     else {
1140:..\src/command_processing.c ****         sprintf(fsm_activation_mode_menu, "0 -> Fast:wrist,Slow:hand\n1 -> Slow:wrist,Fast:hand\n")
 8728              		.loc 1 1140 0
 8729 11ae 07F59273 		add	r3, r7, #292
 8730 11b2 B24A     		ldr	r2, .L381+12
 8731 11b4 1C46     		mov	r4, r3
 8732 11b6 1546     		mov	r5, r2
 8733 11b8 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 8734 11ba 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 8735 11bc 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 8736 11be 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 8737 11c0 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 8738 11c2 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 8739 11c4 95E80300 		ldmia	r5, {r0, r1}
 8740 11c8 2060     		str	r0, [r4]
 8741 11ca 0434     		adds	r4, r4, #4
 8742 11cc 2170     		strb	r1, [r4]
 8743              	.L314:
1141:..\src/command_processing.c ****     }
1142:..\src/command_processing.c ****     
1143:..\src/command_processing.c ****     const char* MENU_STR[NUM_OF_PARAMS_MENU] = {
 8744              		.loc 1 1143 0
 8745 11ce 07F1F403 		add	r3, r7, #244
 8746 11d2 AB4A     		ldr	r2, .L381+16
 8747 11d4 1A60     		str	r2, [r3]
 8748 11d6 07F1F403 		add	r3, r7, #244
 8749 11da AA4A     		ldr	r2, .L381+20
 8750 11dc 5A60     		str	r2, [r3, #4]
 8751 11de 07F1F403 		add	r3, r7, #244
 8752 11e2 A94A     		ldr	r2, .L381+24
 8753 11e4 9A60     		str	r2, [r3, #8]
 8754 11e6 07F1F403 		add	r3, r7, #244
 8755 11ea A84A     		ldr	r2, .L381+28
 8756 11ec DA60     		str	r2, [r3, #12]
 8757 11ee 07F1F403 		add	r3, r7, #244
 8758 11f2 A74A     		ldr	r2, .L381+32
 8759 11f4 1A61     		str	r2, [r3, #16]
 8760 11f6 07F1F403 		add	r3, r7, #244
 8761 11fa A64A     		ldr	r2, .L381+36
 8762 11fc 5A61     		str	r2, [r3, #20]
 8763 11fe 07F1F403 		add	r3, r7, #244
 8764 1202 07F5AE72 		add	r2, r7, #348
 8765 1206 9A61     		str	r2, [r3, #24]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 203


 8766 1208 07F1F403 		add	r3, r7, #244
 8767 120c A24A     		ldr	r2, .L381+40
 8768 120e DA61     		str	r2, [r3, #28]
 8769 1210 07F1F403 		add	r3, r7, #244
 8770 1214 A14A     		ldr	r2, .L381+44
 8771 1216 1A62     		str	r2, [r3, #32]
 8772 1218 07F1F403 		add	r3, r7, #244
 8773 121c A04A     		ldr	r2, .L381+48
 8774 121e 5A62     		str	r2, [r3, #36]
 8775 1220 07F1F403 		add	r3, r7, #244
 8776 1224 07F59272 		add	r2, r7, #292
 8777 1228 9A62     		str	r2, [r3, #40]
 8778 122a 07F1F403 		add	r3, r7, #244
 8779 122e 9D4A     		ldr	r2, .L381+52
 8780 1230 DA62     		str	r2, [r3, #44]
1144:..\src/command_processing.c ****         "0 -> Usb\n1 -> Handle\n2 -> EMG proportional\n3 -> EMG Integral\n4 -> EMG FCFS\n5 -> EMG F
1145:..\src/command_processing.c ****         "0 -> Position\n1 -> PWM\n2 -> Current\n3 -> Position and Current\n",                      
1146:..\src/command_processing.c ****         "0 -> Deactivate [NO]\n1 -> Activate [YES]\n",                                             
1147:..\src/command_processing.c ****         "0 -> Right\n1 -> Left\n",                                                                 
1148:..\src/command_processing.c ****         "0 -> OFF\n1 -> ON\nThe board will reset\n",                                               
1149:..\src/command_processing.c ****         "0 -> None\n1 -> SD/RTC board\n2 -> WiFi board [N/A]\n3 -> Other [N/A]\nThe board will rese
1150:..\src/command_processing.c ****         spi_delay_menu,                                                                            
1151:..\src/command_processing.c ****         "0 -> Generic user\n1 -> Maria\n2 -> R01\nThe board will reset\n",                         
1152:..\src/command_processing.c ****         "0 -> MC33887 (Standard)\n1 -> VNH5019 (High power)\n2 -> ESC (Brushless)\nThe board will r
1153:..\src/command_processing.c ****         "0 -> SOFTHAND PRO\n1 -> GENERIC 2 MOTORS\n2 -> AIR CHAMBERS\n3 -> OTTOBOCK WRIST\n4 -> SOF
1154:..\src/command_processing.c ****         fsm_activation_mode_menu,                                                                  
1155:..\src/command_processing.c ****         "0 -> Close:CW, Open:CCW\n1 -> Close:CCW, Open:CW\n"                                       
1156:..\src/command_processing.c ****     };   
1157:..\src/command_processing.c ****     
1158:..\src/command_processing.c ****     uint8 NUM_MENU[32] = {3, 1, 2, 3, 3, 3, 3, 3, 3, 4, 5, 6, 3, 7, 8, 9, 3, 5, 3, 1, 2, 3, 3, 3, 9
 8781              		.loc 1 1158 0
 8782 1232 07F1D403 		add	r3, r7, #212
 8783 1236 9C4A     		ldr	r2, .L381+56
 8784 1238 1C46     		mov	r4, r3
 8785 123a 1546     		mov	r5, r2
 8786 123c 2868     		ldr	r0, [r5]	@ unaligned
 8787 123e 6968     		ldr	r1, [r5, #4]	@ unaligned
 8788 1240 AA68     		ldr	r2, [r5, #8]	@ unaligned
 8789 1242 EB68     		ldr	r3, [r5, #12]	@ unaligned
 8790 1244 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 8791 1246 2869     		ldr	r0, [r5, #16]	@ unaligned
 8792 1248 6969     		ldr	r1, [r5, #20]	@ unaligned
 8793 124a AA69     		ldr	r2, [r5, #24]	@ unaligned
 8794 124c EB69     		ldr	r3, [r5, #28]	@ unaligned
 8795 124e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
1159:..\src/command_processing.c ****     uint8 CUSTOM_PARAM_GET_LIST[9]  = {2, 3, 8, 11, 23, 44, 45, 50, 53};
 8796              		.loc 1 1159 0
 8797 1250 07F1C803 		add	r3, r7, #200
 8798 1254 954A     		ldr	r2, .L381+60
 8799 1256 1068     		ldr	r0, [r2]	@ unaligned
 8800 1258 5168     		ldr	r1, [r2, #4]	@ unaligned
 8801 125a 03C3     		stmia	r3!, {r0, r1}
 8802 125c 127A     		ldrb	r2, [r2, #8]
 8803 125e 1A70     		strb	r2, [r3]
1160:..\src/command_processing.c ****     uint8 CUSTOM_PARAM_SET_LIST[18] = {2, 3, 5, 8, 11, 23, 24, 28, 31, 32, 38, 44, 45, 47, 50, 53, 
 8804              		.loc 1 1160 0
 8805 1260 07F1B403 		add	r3, r7, #180
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 204


 8806 1264 924A     		ldr	r2, .L381+64
 8807 1266 1C46     		mov	r4, r3
 8808 1268 1546     		mov	r5, r2
 8809 126a 2868     		ldr	r0, [r5]	@ unaligned
 8810 126c 6968     		ldr	r1, [r5, #4]	@ unaligned
 8811 126e AA68     		ldr	r2, [r5, #8]	@ unaligned
 8812 1270 EB68     		ldr	r3, [r5, #12]	@ unaligned
 8813 1272 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 8814 1274 2B8A     		ldrh	r3, [r5, #16]	@ unaligned
 8815 1276 2380     		strh	r3, [r4]	@ unaligned
1161:..\src/command_processing.c ****     uint8 USER_ID_PARAM = 35;
 8816              		.loc 1 1161 0
 8817 1278 2323     		movs	r3, #35
 8818 127a 87F87B35 		strb	r3, [r7, #1403]
1162:..\src/command_processing.c **** 
1163:..\src/command_processing.c **** // Note: If a custom parameter change is needed, add to CUSTOM_PARAM_LIST, then change it
1164:..\src/command_processing.c **** // in the dedicated function set_custom_param()    
1165:..\src/command_processing.c ****     
1166:..\src/command_processing.c **** //------------------ END OF PARAMETERS VARIABLES --------------------//        
1167:..\src/command_processing.c **** 
1168:..\src/command_processing.c **** // DO NOT MODIFY THE FUNCTION UNDER THIS LINE
1169:..\src/command_processing.c ****     
1170:..\src/command_processing.c ****     uint8 CUSTOM_PARAM_GET[NUM_OF_PARAMS];
1171:..\src/command_processing.c ****     j = 0;
 8819              		.loc 1 1171 0
 8820 127e 0023     		movs	r3, #0
 8821 1280 87F88635 		strb	r3, [r7, #1414]
1172:..\src/command_processing.c ****     for (i=0; i<NUM_OF_PARAMS; i++) {
 8822              		.loc 1 1172 0
 8823 1284 0023     		movs	r3, #0
 8824 1286 87F88735 		strb	r3, [r7, #1415]
 8825 128a 21E0     		b	.L315
 8826              	.L318:
1173:..\src/command_processing.c ****         if (CUSTOM_PARAM_GET_LIST[j] == i+1) {
 8827              		.loc 1 1173 0
 8828 128c 97F88635 		ldrb	r3, [r7, #1414]	@ zero_extendqisi2
 8829 1290 07F1C802 		add	r2, r7, #200
 8830 1294 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 8831 1296 1A46     		mov	r2, r3
 8832 1298 97F88735 		ldrb	r3, [r7, #1415]	@ zero_extendqisi2
 8833 129c 0133     		adds	r3, r3, #1
 8834 129e 9A42     		cmp	r2, r3
 8835 12a0 0BD1     		bne	.L316
1174:..\src/command_processing.c ****             CUSTOM_PARAM_GET[i] = TRUE;
 8836              		.loc 1 1174 0
 8837 12a2 97F88735 		ldrb	r3, [r7, #1415]	@ zero_extendqisi2
 8838 12a6 07F16002 		add	r2, r7, #96
 8839 12aa 0121     		movs	r1, #1
 8840 12ac D154     		strb	r1, [r2, r3]
1175:..\src/command_processing.c ****             j++;
 8841              		.loc 1 1175 0
 8842 12ae 97F88635 		ldrb	r3, [r7, #1414]	@ zero_extendqisi2
 8843 12b2 0133     		adds	r3, r3, #1
 8844 12b4 87F88635 		strb	r3, [r7, #1414]
 8845 12b8 05E0     		b	.L317
 8846              	.L316:
1176:..\src/command_processing.c ****         }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 205


1177:..\src/command_processing.c ****         else {
1178:..\src/command_processing.c ****             CUSTOM_PARAM_GET[i] = FALSE;
 8847              		.loc 1 1178 0
 8848 12ba 97F88735 		ldrb	r3, [r7, #1415]	@ zero_extendqisi2
 8849 12be 07F16002 		add	r2, r7, #96
 8850 12c2 0021     		movs	r1, #0
 8851 12c4 D154     		strb	r1, [r2, r3]
 8852              	.L317:
1172:..\src/command_processing.c ****         if (CUSTOM_PARAM_GET_LIST[j] == i+1) {
 8853              		.loc 1 1172 0 discriminator 2
 8854 12c6 97F88735 		ldrb	r3, [r7, #1415]	@ zero_extendqisi2
 8855 12ca 0133     		adds	r3, r3, #1
 8856 12cc 87F88735 		strb	r3, [r7, #1415]
 8857              	.L315:
1172:..\src/command_processing.c ****         if (CUSTOM_PARAM_GET_LIST[j] == i+1) {
 8858              		.loc 1 1172 0 is_stmt 0 discriminator 1
 8859 12d0 97F88735 		ldrb	r3, [r7, #1415]	@ zero_extendqisi2
 8860 12d4 522B     		cmp	r3, #82
 8861 12d6 D9D9     		bls	.L318
1179:..\src/command_processing.c ****         }
1180:..\src/command_processing.c ****     }   // All parameters can be get with default settings, except the following ones
1181:..\src/command_processing.c ****     uint8 CUSTOM_PARAM_SET[NUM_OF_PARAMS];
1182:..\src/command_processing.c ****     j = 0;
 8862              		.loc 1 1182 0 is_stmt 1
 8863 12d8 0023     		movs	r3, #0
 8864 12da 87F88635 		strb	r3, [r7, #1414]
1183:..\src/command_processing.c ****     for (i=0; i<NUM_OF_PARAMS; i++) {
 8865              		.loc 1 1183 0
 8866 12de 0023     		movs	r3, #0
 8867 12e0 87F88735 		strb	r3, [r7, #1415]
 8868 12e4 21E0     		b	.L319
 8869              	.L322:
1184:..\src/command_processing.c ****         if (CUSTOM_PARAM_SET_LIST[j] == i+1) {
 8870              		.loc 1 1184 0
 8871 12e6 97F88635 		ldrb	r3, [r7, #1414]	@ zero_extendqisi2
 8872 12ea 07F1B402 		add	r2, r7, #180
 8873 12ee D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 8874 12f0 1A46     		mov	r2, r3
 8875 12f2 97F88735 		ldrb	r3, [r7, #1415]	@ zero_extendqisi2
 8876 12f6 0133     		adds	r3, r3, #1
 8877 12f8 9A42     		cmp	r2, r3
 8878 12fa 0BD1     		bne	.L320
1185:..\src/command_processing.c ****             CUSTOM_PARAM_SET[i] = TRUE;
 8879              		.loc 1 1185 0
 8880 12fc 97F88735 		ldrb	r3, [r7, #1415]	@ zero_extendqisi2
 8881 1300 07F10C02 		add	r2, r7, #12
 8882 1304 0121     		movs	r1, #1
 8883 1306 D154     		strb	r1, [r2, r3]
1186:..\src/command_processing.c ****             j++;
 8884              		.loc 1 1186 0
 8885 1308 97F88635 		ldrb	r3, [r7, #1414]	@ zero_extendqisi2
 8886 130c 0133     		adds	r3, r3, #1
 8887 130e 87F88635 		strb	r3, [r7, #1414]
 8888 1312 05E0     		b	.L321
 8889              	.L320:
1187:..\src/command_processing.c ****         }
1188:..\src/command_processing.c ****         else {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 206


1189:..\src/command_processing.c ****             CUSTOM_PARAM_SET[i] = FALSE;
 8890              		.loc 1 1189 0
 8891 1314 97F88735 		ldrb	r3, [r7, #1415]	@ zero_extendqisi2
 8892 1318 07F10C02 		add	r2, r7, #12
 8893 131c 0021     		movs	r1, #0
 8894 131e D154     		strb	r1, [r2, r3]
 8895              	.L321:
1183:..\src/command_processing.c ****         if (CUSTOM_PARAM_SET_LIST[j] == i+1) {
 8896              		.loc 1 1183 0 discriminator 2
 8897 1320 97F88735 		ldrb	r3, [r7, #1415]	@ zero_extendqisi2
 8898 1324 0133     		adds	r3, r3, #1
 8899 1326 87F88735 		strb	r3, [r7, #1415]
 8900              	.L319:
1183:..\src/command_processing.c ****         if (CUSTOM_PARAM_SET_LIST[j] == i+1) {
 8901              		.loc 1 1183 0 is_stmt 0 discriminator 1
 8902 132a 97F88735 		ldrb	r3, [r7, #1415]	@ zero_extendqisi2
 8903 132e 522B     		cmp	r3, #82
 8904 1330 D9D9     		bls	.L322
1190:..\src/command_processing.c ****         }
1191:..\src/command_processing.c ****     }   // All parameters can be setted with default settings, except the following ones
1192:..\src/command_processing.c ****         
1193:..\src/command_processing.c ****     if (!index) {
 8905              		.loc 1 1193 0 is_stmt 1
 8906 1332 BB1D     		adds	r3, r7, #6
 8907 1334 1B88     		ldrh	r3, [r3]
 8908 1336 002B     		cmp	r3, #0
 8909 1338 17D1     		bne	.L323
1194:..\src/command_processing.c ****         // Get parameters list with relative types
1195:..\src/command_processing.c ****         get_param_list(VAR_P, TYPES, NUM_ITEMS, NUM_STRUCT, NUM_MENU, PARAMS_STR, CUSTOM_PARAM_GET,
 8910              		.loc 1 1195 0
 8911 133a 07F54874 		add	r4, r7, #800
 8912 133e 07F55D72 		add	r2, r7, #884
 8913 1342 07F57271 		add	r1, r7, #968
 8914 1346 07F21C40 		addw	r0, r7, #1052
 8915 134a 07F1F403 		add	r3, r7, #244
 8916 134e 0393     		str	r3, [sp, #12]
 8917 1350 07F16003 		add	r3, r7, #96
 8918 1354 0293     		str	r3, [sp, #8]
 8919 1356 07F5EA73 		add	r3, r7, #468
 8920 135a 0193     		str	r3, [sp, #4]
 8921 135c 07F1D403 		add	r3, r7, #212
 8922 1360 0093     		str	r3, [sp]
 8923 1362 2346     		mov	r3, r4
 8924 1364 FFF7FEFF 		bl	get_param_list
1196:..\src/command_processing.c ****     }
1197:..\src/command_processing.c ****     else {
1198:..\src/command_processing.c ****         // Set specific parameter        
1199:..\src/command_processing.c ****         PARAM_IDX = index -1;       // Get right vector param index
1200:..\src/command_processing.c ****         
1201:..\src/command_processing.c ****         // Find size of data
1202:..\src/command_processing.c ****         switch (TYPES[PARAM_IDX]) {
1203:..\src/command_processing.c ****             case TYPE_FLAG: case TYPE_INT8: case TYPE_UINT8: case TYPE_STRING:
1204:..\src/command_processing.c ****                 sod = 1; break;
1205:..\src/command_processing.c ****             case TYPE_INT16: case TYPE_UINT16:
1206:..\src/command_processing.c ****                 sod = 2; break;
1207:..\src/command_processing.c ****             case TYPE_INT32: case TYPE_UINT32: case TYPE_FLOAT:
1208:..\src/command_processing.c ****                 sod = 4; break;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 207


1209:..\src/command_processing.c ****         }   
1210:..\src/command_processing.c ****             
1211:..\src/command_processing.c ****         if (!CUSTOM_PARAM_SET[PARAM_IDX]) {
1212:..\src/command_processing.c ****             // Use default specifications for param setting
1213:..\src/command_processing.c ****             switch(TYPES[PARAM_IDX]) {
1214:..\src/command_processing.c ****                 case TYPE_FLAG: case TYPE_UINT8:
1215:..\src/command_processing.c ****                     for (i=0; i<NUM_ITEMS[PARAM_IDX]; i++){
1216:..\src/command_processing.c ****                         *(VAR_P[PARAM_IDX] + i*sod) = g_rx.buffer[3+i];
1217:..\src/command_processing.c ****                     }
1218:..\src/command_processing.c ****                     break;                
1219:..\src/command_processing.c ****                 case TYPE_STRING:
1220:..\src/command_processing.c ****                     for (i=0; i<NUM_ITEMS[PARAM_IDX]; i++){
1221:..\src/command_processing.c ****                         *(VAR_P[PARAM_IDX] + i*sod) = g_rx.buffer[3+i];
1222:..\src/command_processing.c ****                     }
1223:..\src/command_processing.c ****                     *(VAR_P[PARAM_IDX] + i*sod) = '\0';
1224:..\src/command_processing.c ****                 break; 
1225:..\src/command_processing.c ****                 case TYPE_INT8:
1226:..\src/command_processing.c ****                     for (i=0; i<NUM_ITEMS[PARAM_IDX]; i++){
1227:..\src/command_processing.c ****                         *(VAR_P[PARAM_IDX] + i*sod) = *((int8*) &g_rx.buffer[3 + i]);
1228:..\src/command_processing.c ****                     }
1229:..\src/command_processing.c ****                     break;                    
1230:..\src/command_processing.c ****                 case TYPE_INT16:
1231:..\src/command_processing.c ****                     for (i=0; i<NUM_ITEMS[PARAM_IDX]; i++){
1232:..\src/command_processing.c ****                         aux_int16 = *((int16 *) &g_rx.buffer[3 + i*sod]);
1233:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
1234:..\src/command_processing.c ****                             ((char*)(VAR_P[PARAM_IDX] + i*sod))[sod - j -1] = ((char*)(&aux_int16))
1235:..\src/command_processing.c ****                         }
1236:..\src/command_processing.c ****                     }                   
1237:..\src/command_processing.c ****                     break;
1238:..\src/command_processing.c ****                 case TYPE_UINT16:
1239:..\src/command_processing.c ****                     for (i=0; i<NUM_ITEMS[PARAM_IDX]; i++){
1240:..\src/command_processing.c ****                         aux_uint16 = *((uint16 *) &g_rx.buffer[3 + i*sod]);
1241:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
1242:..\src/command_processing.c ****                             ((char*)(VAR_P[PARAM_IDX] + i*sod))[sod - j -1] = ((char*)(&aux_uint16)
1243:..\src/command_processing.c ****                         }
1244:..\src/command_processing.c ****                     }
1245:..\src/command_processing.c ****                     break;
1246:..\src/command_processing.c ****                 case TYPE_INT32:
1247:..\src/command_processing.c ****                     for (i=0; i<NUM_ITEMS[PARAM_IDX]; i++){
1248:..\src/command_processing.c ****                         aux_int32 = *((int32 *) &g_rx.buffer[3 + i*sod]);
1249:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
1250:..\src/command_processing.c ****                             ((char*)(VAR_P[PARAM_IDX] + i*sod))[sod - j -1] = ((char*)(&aux_int32))
1251:..\src/command_processing.c ****                         }
1252:..\src/command_processing.c ****                     }
1253:..\src/command_processing.c ****                     break;
1254:..\src/command_processing.c ****                 case TYPE_UINT32:
1255:..\src/command_processing.c ****                     for (i=0; i<NUM_ITEMS[PARAM_IDX]; i++){
1256:..\src/command_processing.c ****                         aux_uint32 = *((uint32 *) &g_rx.buffer[3 + i*sod]);
1257:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
1258:..\src/command_processing.c ****                             ((char*)(VAR_P[PARAM_IDX] + i*sod))[sod - j -1] = ((char*)(&aux_uint32)
1259:..\src/command_processing.c ****                         }
1260:..\src/command_processing.c ****                     }
1261:..\src/command_processing.c ****                     break;
1262:..\src/command_processing.c ****                 case TYPE_FLOAT:
1263:..\src/command_processing.c ****                     for (i=0; i<NUM_ITEMS[PARAM_IDX]; i++){
1264:..\src/command_processing.c ****                         aux_float = *((float *) &g_rx.buffer[3 + i*sod]);
1265:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 208


1266:..\src/command_processing.c ****                             ((char*)(VAR_P[PARAM_IDX] + i*sod))[sod - j -1] = ((char*)(&aux_float))
1267:..\src/command_processing.c ****                         }
1268:..\src/command_processing.c ****                     }
1269:..\src/command_processing.c ****                     break;
1270:..\src/command_processing.c ****                 default:
1271:..\src/command_processing.c ****                     break;
1272:..\src/command_processing.c ****             }
1273:..\src/command_processing.c ****         }
1274:..\src/command_processing.c ****         else {  
1275:..\src/command_processing.c ****             // Use custom specifications for param setting
1276:..\src/command_processing.c ****             set_custom_param(index);
1277:..\src/command_processing.c ****         }
1278:..\src/command_processing.c ****         
1279:..\src/command_processing.c ****         // Store param also in user_emg structure
1280:..\src/command_processing.c ****         if (index != USER_ID_PARAM) {        // Not when changing user id
1281:..\src/command_processing.c ****             memcpy( &(MEM_P->user[MEM_P->dev.user_id].user_emg), &(MEM_P->emg), sizeof(MEM_P->emg) 
1282:..\src/command_processing.c ****         }
1283:..\src/command_processing.c ****         
1284:..\src/command_processing.c ****         // Perform chip reset if needed
1285:..\src/command_processing.c ****         if (TYPES[PARAM_IDX] == TYPE_FLAG){
1286:..\src/command_processing.c ****             uint8 idx = 0, menu_idx = -1;
1287:..\src/command_processing.c ****             do {
1288:..\src/command_processing.c ****                 if (TYPES[idx] == TYPE_FLAG) menu_idx++;    // Increment idx to find the right NUM_
1289:..\src/command_processing.c ****                 idx++;
1290:..\src/command_processing.c ****             } while (idx <= PARAM_IDX);
1291:..\src/command_processing.c ****             
1292:..\src/command_processing.c ****             if (NUM_MENU[menu_idx] == 5 || NUM_MENU[menu_idx] == 6 || NUM_MENU[menu_idx] == 8 || NU
1293:..\src/command_processing.c ****                 reset_PSoC_flag = TRUE;
1294:..\src/command_processing.c ****             }   
1295:..\src/command_processing.c ****         }
1296:..\src/command_processing.c ****     }
1297:..\src/command_processing.c **** } 
 8925              		.loc 1 1297 0
 8926 1368 E0E2     		b	.L374
 8927              	.L323:
1199:..\src/command_processing.c ****         
 8928              		.loc 1 1199 0
 8929 136a BB1D     		adds	r3, r7, #6
 8930 136c 1B88     		ldrh	r3, [r3]	@ movhi
 8931 136e DBB2     		uxtb	r3, r3
 8932 1370 013B     		subs	r3, r3, #1
 8933 1372 87F87A35 		strb	r3, [r7, #1402]
1202:..\src/command_processing.c ****             case TYPE_FLAG: case TYPE_INT8: case TYPE_UINT8: case TYPE_STRING:
 8934              		.loc 1 1202 0
 8935 1376 97F87A35 		ldrb	r3, [r7, #1402]	@ zero_extendqisi2
 8936 137a 07F57272 		add	r2, r7, #968
 8937 137e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 8938 1380 092B     		cmp	r3, #9
 8939 1382 23D8     		bhi	.L325
 8940 1384 01A2     		adr	r2, .L327
 8941 1386 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 8942 138a 00BF     		.p2align 2
 8943              	.L327:
 8944 138c B5130000 		.word	.L326+1
 8945 1390 B5130000 		.word	.L326+1
 8946 1394 B5130000 		.word	.L326+1
 8947 1398 BD130000 		.word	.L328+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 209


 8948 139c BD130000 		.word	.L328+1
 8949 13a0 C5130000 		.word	.L329+1
 8950 13a4 C5130000 		.word	.L329+1
 8951 13a8 C5130000 		.word	.L329+1
 8952 13ac CD130000 		.word	.L325+1
 8953 13b0 B5130000 		.word	.L326+1
 8954              		.p2align 1
 8955              	.L326:
1204:..\src/command_processing.c ****             case TYPE_INT16: case TYPE_UINT16:
 8956              		.loc 1 1204 0
 8957 13b4 0123     		movs	r3, #1
 8958 13b6 87F88535 		strb	r3, [r7, #1413]
 8959 13ba 07E0     		b	.L325
 8960              	.L328:
1206:..\src/command_processing.c ****             case TYPE_INT32: case TYPE_UINT32: case TYPE_FLOAT:
 8961              		.loc 1 1206 0
 8962 13bc 0223     		movs	r3, #2
 8963 13be 87F88535 		strb	r3, [r7, #1413]
 8964 13c2 03E0     		b	.L325
 8965              	.L329:
1208:..\src/command_processing.c ****         }   
 8966              		.loc 1 1208 0
 8967 13c4 0423     		movs	r3, #4
 8968 13c6 87F88535 		strb	r3, [r7, #1413]
 8969 13ca 00BF     		nop
 8970              	.L325:
1211:..\src/command_processing.c ****             // Use default specifications for param setting
 8971              		.loc 1 1211 0
 8972 13cc 97F87A35 		ldrb	r3, [r7, #1402]	@ zero_extendqisi2
 8973 13d0 07F10C02 		add	r2, r7, #12
 8974 13d4 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 8975 13d6 002B     		cmp	r3, #0
 8976 13d8 40F03B82 		bne	.L330
1213:..\src/command_processing.c ****                 case TYPE_FLAG: case TYPE_UINT8:
 8977              		.loc 1 1213 0
 8978 13dc 97F87A35 		ldrb	r3, [r7, #1402]	@ zero_extendqisi2
 8979 13e0 07F57272 		add	r2, r7, #968
 8980 13e4 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 8981 13e6 092B     		cmp	r3, #9
 8982 13e8 00F23C82 		bhi	.L373
 8983 13ec 01A2     		adr	r2, .L333
 8984 13ee 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 8985 13f2 00BF     		.p2align 2
 8986              	.L333:
 8987 13f4 1D140000 		.word	.L332+1
 8988 13f8 1B150000 		.word	.L334+1
 8989 13fc 1D140000 		.word	.L332+1
 8990 1400 6D150000 		.word	.L335+1
 8991 1404 03160000 		.word	.L336+1
 8992 1408 97160000 		.word	.L337+1
 8993 140c 2B170000 		.word	.L338+1
 8994 1410 BF170000 		.word	.L339+1
 8995 1414 65180000 		.word	.L373+1
 8996 1418 69140000 		.word	.L340+1
 8997              		.p2align 1
 8998              	.L332:
1215:..\src/command_processing.c ****                         *(VAR_P[PARAM_IDX] + i*sod) = g_rx.buffer[3+i];
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 210


 8999              		.loc 1 1215 0
 9000 141c 0023     		movs	r3, #0
 9001 141e 87F88735 		strb	r3, [r7, #1415]
 9002 1422 17E0     		b	.L341
 9003              	.L342:
1216:..\src/command_processing.c ****                     }
 9004              		.loc 1 1216 0 discriminator 3
 9005 1424 97F87A25 		ldrb	r2, [r7, #1402]	@ zero_extendqisi2
 9006 1428 07F21C43 		addw	r3, r7, #1052
 9007 142c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 9008 1430 97F88725 		ldrb	r2, [r7, #1415]	@ zero_extendqisi2
 9009 1434 97F88515 		ldrb	r1, [r7, #1413]	@ zero_extendqisi2
 9010 1438 01FB02F2 		mul	r2, r1, r2
 9011 143c 1344     		add	r3, r3, r2
 9012 143e 97F88725 		ldrb	r2, [r7, #1415]	@ zero_extendqisi2
 9013 1442 0332     		adds	r2, r2, #3
 9014 1444 1B49     		ldr	r1, .L381+68
 9015 1446 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 9016 1448 1A70     		strb	r2, [r3]
1215:..\src/command_processing.c ****                         *(VAR_P[PARAM_IDX] + i*sod) = g_rx.buffer[3+i];
 9017              		.loc 1 1215 0 discriminator 3
 9018 144a 97F88735 		ldrb	r3, [r7, #1415]	@ zero_extendqisi2
 9019 144e 0133     		adds	r3, r3, #1
 9020 1450 87F88735 		strb	r3, [r7, #1415]
 9021              	.L341:
1215:..\src/command_processing.c ****                         *(VAR_P[PARAM_IDX] + i*sod) = g_rx.buffer[3+i];
 9022              		.loc 1 1215 0 is_stmt 0 discriminator 1
 9023 1454 97F87A35 		ldrb	r3, [r7, #1402]	@ zero_extendqisi2
 9024 1458 07F55D72 		add	r2, r7, #884
 9025 145c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9026 145e 97F88725 		ldrb	r2, [r7, #1415]	@ zero_extendqisi2
 9027 1462 9A42     		cmp	r2, r3
 9028 1464 DED3     		bcc	.L342
1218:..\src/command_processing.c ****                 case TYPE_STRING:
 9029              		.loc 1 1218 0 is_stmt 1
 9030 1466 FEE1     		b	.L368
 9031              	.L340:
1220:..\src/command_processing.c ****                         *(VAR_P[PARAM_IDX] + i*sod) = g_rx.buffer[3+i];
 9032              		.loc 1 1220 0
 9033 1468 0023     		movs	r3, #0
 9034 146a 87F88735 		strb	r3, [r7, #1415]
 9035 146e 3BE0     		b	.L344
 9036              	.L382:
 9037              		.align	2
 9038              	.L381:
 9039 1470 340F0000 		.word	.LC129
 9040 1474 88020000 		.word	.LC130
 9041 1478 FC020000 		.word	.LC131
 9042 147c 34030000 		.word	.LC132
 9043 1480 6C030000 		.word	.LC133
 9044 1484 F8030000 		.word	.LC134
 9045 1488 38040000 		.word	.LC135
 9046 148c 64040000 		.word	.LC136
 9047 1490 7C040000 		.word	.LC137
 9048 1494 A4040000 		.word	.LC138
 9049 1498 00050000 		.word	.LC139
 9050 149c 3C050000 		.word	.LC140
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 211


 9051 14a0 9C050000 		.word	.LC141
 9052 14a4 18060000 		.word	.LC142
 9053 14a8 80100000 		.word	.LC85
 9054 14ac A0100000 		.word	.LC86
 9055 14b0 AC100000 		.word	.LC87
 9056 14b4 00000000 		.word	g_rx
 9057              	.L345:
1221:..\src/command_processing.c ****                     }
 9058              		.loc 1 1221 0 discriminator 3
 9059 14b8 97F87A25 		ldrb	r2, [r7, #1402]	@ zero_extendqisi2
 9060 14bc 07F21C43 		addw	r3, r7, #1052
 9061 14c0 53F82230 		ldr	r3, [r3, r2, lsl #2]
 9062 14c4 97F88725 		ldrb	r2, [r7, #1415]	@ zero_extendqisi2
 9063 14c8 97F88515 		ldrb	r1, [r7, #1413]	@ zero_extendqisi2
 9064 14cc 01FB02F2 		mul	r2, r1, r2
 9065 14d0 1344     		add	r3, r3, r2
 9066 14d2 97F88725 		ldrb	r2, [r7, #1415]	@ zero_extendqisi2
 9067 14d6 0332     		adds	r2, r2, #3
 9068 14d8 E149     		ldr	r1, .L383
 9069 14da 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 9070 14dc 1A70     		strb	r2, [r3]
1220:..\src/command_processing.c ****                         *(VAR_P[PARAM_IDX] + i*sod) = g_rx.buffer[3+i];
 9071              		.loc 1 1220 0 discriminator 3
 9072 14de 97F88735 		ldrb	r3, [r7, #1415]	@ zero_extendqisi2
 9073 14e2 0133     		adds	r3, r3, #1
 9074 14e4 87F88735 		strb	r3, [r7, #1415]
 9075              	.L344:
1220:..\src/command_processing.c ****                         *(VAR_P[PARAM_IDX] + i*sod) = g_rx.buffer[3+i];
 9076              		.loc 1 1220 0 is_stmt 0 discriminator 1
 9077 14e8 97F87A35 		ldrb	r3, [r7, #1402]	@ zero_extendqisi2
 9078 14ec 07F55D72 		add	r2, r7, #884
 9079 14f0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9080 14f2 97F88725 		ldrb	r2, [r7, #1415]	@ zero_extendqisi2
 9081 14f6 9A42     		cmp	r2, r3
 9082 14f8 DED3     		bcc	.L345
1223:..\src/command_processing.c ****                 break; 
 9083              		.loc 1 1223 0 is_stmt 1
 9084 14fa 97F87A25 		ldrb	r2, [r7, #1402]	@ zero_extendqisi2
 9085 14fe 07F21C43 		addw	r3, r7, #1052
 9086 1502 53F82230 		ldr	r3, [r3, r2, lsl #2]
 9087 1506 97F88725 		ldrb	r2, [r7, #1415]	@ zero_extendqisi2
 9088 150a 97F88515 		ldrb	r1, [r7, #1413]	@ zero_extendqisi2
 9089 150e 01FB02F2 		mul	r2, r1, r2
 9090 1512 1344     		add	r3, r3, r2
 9091 1514 0022     		movs	r2, #0
 9092 1516 1A70     		strb	r2, [r3]
1224:..\src/command_processing.c ****                 case TYPE_INT8:
 9093              		.loc 1 1224 0
 9094 1518 A5E1     		b	.L368
 9095              	.L334:
1226:..\src/command_processing.c ****                         *(VAR_P[PARAM_IDX] + i*sod) = *((int8*) &g_rx.buffer[3 + i]);
 9096              		.loc 1 1226 0
 9097 151a 0023     		movs	r3, #0
 9098 151c 87F88735 		strb	r3, [r7, #1415]
 9099 1520 1AE0     		b	.L346
 9100              	.L347:
1227:..\src/command_processing.c ****                     }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 212


 9101              		.loc 1 1227 0 discriminator 3
 9102 1522 97F87A25 		ldrb	r2, [r7, #1402]	@ zero_extendqisi2
 9103 1526 07F21C43 		addw	r3, r7, #1052
 9104 152a 53F82230 		ldr	r3, [r3, r2, lsl #2]
 9105 152e 97F88725 		ldrb	r2, [r7, #1415]	@ zero_extendqisi2
 9106 1532 97F88515 		ldrb	r1, [r7, #1413]	@ zero_extendqisi2
 9107 1536 01FB02F2 		mul	r2, r1, r2
 9108 153a 1344     		add	r3, r3, r2
 9109 153c 97F88725 		ldrb	r2, [r7, #1415]	@ zero_extendqisi2
 9110 1540 0332     		adds	r2, r2, #3
 9111 1542 C749     		ldr	r1, .L383
 9112 1544 0A44     		add	r2, r2, r1
 9113 1546 92F90020 		ldrsb	r2, [r2]
 9114 154a D2B2     		uxtb	r2, r2
 9115 154c 1A70     		strb	r2, [r3]
1226:..\src/command_processing.c ****                         *(VAR_P[PARAM_IDX] + i*sod) = *((int8*) &g_rx.buffer[3 + i]);
 9116              		.loc 1 1226 0 discriminator 3
 9117 154e 97F88735 		ldrb	r3, [r7, #1415]	@ zero_extendqisi2
 9118 1552 0133     		adds	r3, r3, #1
 9119 1554 87F88735 		strb	r3, [r7, #1415]
 9120              	.L346:
1226:..\src/command_processing.c ****                         *(VAR_P[PARAM_IDX] + i*sod) = *((int8*) &g_rx.buffer[3 + i]);
 9121              		.loc 1 1226 0 is_stmt 0 discriminator 1
 9122 1558 97F87A35 		ldrb	r3, [r7, #1402]	@ zero_extendqisi2
 9123 155c 07F55D72 		add	r2, r7, #884
 9124 1560 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9125 1562 97F88725 		ldrb	r2, [r7, #1415]	@ zero_extendqisi2
 9126 1566 9A42     		cmp	r2, r3
 9127 1568 DBD3     		bcc	.L347
1229:..\src/command_processing.c ****                 case TYPE_INT16:
 9128              		.loc 1 1229 0 is_stmt 1
 9129 156a 7CE1     		b	.L368
 9130              	.L335:
1231:..\src/command_processing.c ****                         aux_int16 = *((int16 *) &g_rx.buffer[3 + i*sod]);
 9131              		.loc 1 1231 0
 9132 156c 0023     		movs	r3, #0
 9133 156e 87F88735 		strb	r3, [r7, #1415]
 9134 1572 3CE0     		b	.L348
 9135              	.L351:
1232:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 9136              		.loc 1 1232 0
 9137 1574 97F88735 		ldrb	r3, [r7, #1415]	@ zero_extendqisi2
 9138 1578 97F88525 		ldrb	r2, [r7, #1413]	@ zero_extendqisi2
 9139 157c 02FB03F3 		mul	r3, r2, r3
 9140 1580 0333     		adds	r3, r3, #3
 9141 1582 B74A     		ldr	r2, .L383
 9142 1584 1344     		add	r3, r3, r2
 9143 1586 B3F90030 		ldrsh	r3, [r3]
 9144 158a A7F87835 		strh	r3, [r7, #1400]	@ movhi
1233:..\src/command_processing.c ****                             ((char*)(VAR_P[PARAM_IDX] + i*sod))[sod - j -1] = ((char*)(&aux_int16))
 9145              		.loc 1 1233 0
 9146 158e 0023     		movs	r3, #0
 9147 1590 87F88635 		strb	r3, [r7, #1414]
 9148 1594 20E0     		b	.L349
 9149              	.L350:
1234:..\src/command_processing.c ****                         }
 9150              		.loc 1 1234 0 discriminator 3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 213


 9151 1596 97F87A25 		ldrb	r2, [r7, #1402]	@ zero_extendqisi2
 9152 159a 07F21C43 		addw	r3, r7, #1052
 9153 159e 53F82220 		ldr	r2, [r3, r2, lsl #2]
 9154 15a2 97F88735 		ldrb	r3, [r7, #1415]	@ zero_extendqisi2
 9155 15a6 97F88515 		ldrb	r1, [r7, #1413]	@ zero_extendqisi2
 9156 15aa 01FB03F3 		mul	r3, r1, r3
 9157 15ae 1846     		mov	r0, r3
 9158 15b0 97F88515 		ldrb	r1, [r7, #1413]	@ zero_extendqisi2
 9159 15b4 97F88635 		ldrb	r3, [r7, #1414]	@ zero_extendqisi2
 9160 15b8 CB1A     		subs	r3, r1, r3
 9161 15ba 0344     		add	r3, r3, r0
 9162 15bc 013B     		subs	r3, r3, #1
 9163 15be 1344     		add	r3, r3, r2
 9164 15c0 97F88625 		ldrb	r2, [r7, #1414]	@ zero_extendqisi2
 9165 15c4 07F5AF61 		add	r1, r7, #1400
 9166 15c8 0A44     		add	r2, r2, r1
 9167 15ca 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 9168 15cc 1A70     		strb	r2, [r3]
1233:..\src/command_processing.c ****                             ((char*)(VAR_P[PARAM_IDX] + i*sod))[sod - j -1] = ((char*)(&aux_int16))
 9169              		.loc 1 1233 0 discriminator 3
 9170 15ce 97F88635 		ldrb	r3, [r7, #1414]	@ zero_extendqisi2
 9171 15d2 0133     		adds	r3, r3, #1
 9172 15d4 87F88635 		strb	r3, [r7, #1414]
 9173              	.L349:
1233:..\src/command_processing.c ****                             ((char*)(VAR_P[PARAM_IDX] + i*sod))[sod - j -1] = ((char*)(&aux_int16))
 9174              		.loc 1 1233 0 is_stmt 0 discriminator 1
 9175 15d8 97F88625 		ldrb	r2, [r7, #1414]	@ zero_extendqisi2
 9176 15dc 97F88535 		ldrb	r3, [r7, #1413]	@ zero_extendqisi2
 9177 15e0 9A42     		cmp	r2, r3
 9178 15e2 D8D3     		bcc	.L350
1231:..\src/command_processing.c ****                         aux_int16 = *((int16 *) &g_rx.buffer[3 + i*sod]);
 9179              		.loc 1 1231 0 is_stmt 1 discriminator 2
 9180 15e4 97F88735 		ldrb	r3, [r7, #1415]	@ zero_extendqisi2
 9181 15e8 0133     		adds	r3, r3, #1
 9182 15ea 87F88735 		strb	r3, [r7, #1415]
 9183              	.L348:
1231:..\src/command_processing.c ****                         aux_int16 = *((int16 *) &g_rx.buffer[3 + i*sod]);
 9184              		.loc 1 1231 0 is_stmt 0 discriminator 1
 9185 15ee 97F87A35 		ldrb	r3, [r7, #1402]	@ zero_extendqisi2
 9186 15f2 07F55D72 		add	r2, r7, #884
 9187 15f6 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9188 15f8 97F88725 		ldrb	r2, [r7, #1415]	@ zero_extendqisi2
 9189 15fc 9A42     		cmp	r2, r3
 9190 15fe B9D3     		bcc	.L351
1237:..\src/command_processing.c ****                 case TYPE_UINT16:
 9191              		.loc 1 1237 0 is_stmt 1
 9192 1600 31E1     		b	.L368
 9193              	.L336:
1239:..\src/command_processing.c ****                         aux_uint16 = *((uint16 *) &g_rx.buffer[3 + i*sod]);
 9194              		.loc 1 1239 0
 9195 1602 0023     		movs	r3, #0
 9196 1604 87F88735 		strb	r3, [r7, #1415]
 9197 1608 3BE0     		b	.L352
 9198              	.L355:
1240:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 9199              		.loc 1 1240 0
 9200 160a 97F88735 		ldrb	r3, [r7, #1415]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 214


 9201 160e 97F88525 		ldrb	r2, [r7, #1413]	@ zero_extendqisi2
 9202 1612 02FB03F3 		mul	r3, r2, r3
 9203 1616 0333     		adds	r3, r3, #3
 9204 1618 914A     		ldr	r2, .L383
 9205 161a 1344     		add	r3, r3, r2
 9206 161c 1B88     		ldrh	r3, [r3]
 9207 161e A7F87635 		strh	r3, [r7, #1398]	@ movhi
1241:..\src/command_processing.c ****                             ((char*)(VAR_P[PARAM_IDX] + i*sod))[sod - j -1] = ((char*)(&aux_uint16)
 9208              		.loc 1 1241 0
 9209 1622 0023     		movs	r3, #0
 9210 1624 87F88635 		strb	r3, [r7, #1414]
 9211 1628 20E0     		b	.L353
 9212              	.L354:
1242:..\src/command_processing.c ****                         }
 9213              		.loc 1 1242 0 discriminator 3
 9214 162a 97F87A25 		ldrb	r2, [r7, #1402]	@ zero_extendqisi2
 9215 162e 07F21C43 		addw	r3, r7, #1052
 9216 1632 53F82220 		ldr	r2, [r3, r2, lsl #2]
 9217 1636 97F88735 		ldrb	r3, [r7, #1415]	@ zero_extendqisi2
 9218 163a 97F88515 		ldrb	r1, [r7, #1413]	@ zero_extendqisi2
 9219 163e 01FB03F3 		mul	r3, r1, r3
 9220 1642 1846     		mov	r0, r3
 9221 1644 97F88515 		ldrb	r1, [r7, #1413]	@ zero_extendqisi2
 9222 1648 97F88635 		ldrb	r3, [r7, #1414]	@ zero_extendqisi2
 9223 164c CB1A     		subs	r3, r1, r3
 9224 164e 0344     		add	r3, r3, r0
 9225 1650 013B     		subs	r3, r3, #1
 9226 1652 1344     		add	r3, r3, r2
 9227 1654 97F88625 		ldrb	r2, [r7, #1414]	@ zero_extendqisi2
 9228 1658 07F27651 		addw	r1, r7, #1398
 9229 165c 0A44     		add	r2, r2, r1
 9230 165e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 9231 1660 1A70     		strb	r2, [r3]
1241:..\src/command_processing.c ****                             ((char*)(VAR_P[PARAM_IDX] + i*sod))[sod - j -1] = ((char*)(&aux_uint16)
 9232              		.loc 1 1241 0 discriminator 3
 9233 1662 97F88635 		ldrb	r3, [r7, #1414]	@ zero_extendqisi2
 9234 1666 0133     		adds	r3, r3, #1
 9235 1668 87F88635 		strb	r3, [r7, #1414]
 9236              	.L353:
1241:..\src/command_processing.c ****                             ((char*)(VAR_P[PARAM_IDX] + i*sod))[sod - j -1] = ((char*)(&aux_uint16)
 9237              		.loc 1 1241 0 is_stmt 0 discriminator 1
 9238 166c 97F88625 		ldrb	r2, [r7, #1414]	@ zero_extendqisi2
 9239 1670 97F88535 		ldrb	r3, [r7, #1413]	@ zero_extendqisi2
 9240 1674 9A42     		cmp	r2, r3
 9241 1676 D8D3     		bcc	.L354
1239:..\src/command_processing.c ****                         aux_uint16 = *((uint16 *) &g_rx.buffer[3 + i*sod]);
 9242              		.loc 1 1239 0 is_stmt 1 discriminator 2
 9243 1678 97F88735 		ldrb	r3, [r7, #1415]	@ zero_extendqisi2
 9244 167c 0133     		adds	r3, r3, #1
 9245 167e 87F88735 		strb	r3, [r7, #1415]
 9246              	.L352:
1239:..\src/command_processing.c ****                         aux_uint16 = *((uint16 *) &g_rx.buffer[3 + i*sod]);
 9247              		.loc 1 1239 0 is_stmt 0 discriminator 1
 9248 1682 97F87A35 		ldrb	r3, [r7, #1402]	@ zero_extendqisi2
 9249 1686 07F55D72 		add	r2, r7, #884
 9250 168a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9251 168c 97F88725 		ldrb	r2, [r7, #1415]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 215


 9252 1690 9A42     		cmp	r2, r3
 9253 1692 BAD3     		bcc	.L355
1245:..\src/command_processing.c ****                 case TYPE_INT32:
 9254              		.loc 1 1245 0 is_stmt 1
 9255 1694 E7E0     		b	.L368
 9256              	.L337:
1247:..\src/command_processing.c ****                         aux_int32 = *((int32 *) &g_rx.buffer[3 + i*sod]);
 9257              		.loc 1 1247 0
 9258 1696 0023     		movs	r3, #0
 9259 1698 87F88735 		strb	r3, [r7, #1415]
 9260 169c 3BE0     		b	.L356
 9261              	.L359:
1248:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 9262              		.loc 1 1248 0
 9263 169e 97F88735 		ldrb	r3, [r7, #1415]	@ zero_extendqisi2
 9264 16a2 97F88525 		ldrb	r2, [r7, #1413]	@ zero_extendqisi2
 9265 16a6 02FB03F3 		mul	r3, r2, r3
 9266 16aa 0333     		adds	r3, r3, #3
 9267 16ac 6C4A     		ldr	r2, .L383
 9268 16ae 1344     		add	r3, r3, r2
 9269 16b0 1B68     		ldr	r3, [r3]
 9270 16b2 C7F87035 		str	r3, [r7, #1392]
1249:..\src/command_processing.c ****                             ((char*)(VAR_P[PARAM_IDX] + i*sod))[sod - j -1] = ((char*)(&aux_int32))
 9271              		.loc 1 1249 0
 9272 16b6 0023     		movs	r3, #0
 9273 16b8 87F88635 		strb	r3, [r7, #1414]
 9274 16bc 20E0     		b	.L357
 9275              	.L358:
1250:..\src/command_processing.c ****                         }
 9276              		.loc 1 1250 0 discriminator 3
 9277 16be 97F87A25 		ldrb	r2, [r7, #1402]	@ zero_extendqisi2
 9278 16c2 07F21C43 		addw	r3, r7, #1052
 9279 16c6 53F82220 		ldr	r2, [r3, r2, lsl #2]
 9280 16ca 97F88735 		ldrb	r3, [r7, #1415]	@ zero_extendqisi2
 9281 16ce 97F88515 		ldrb	r1, [r7, #1413]	@ zero_extendqisi2
 9282 16d2 01FB03F3 		mul	r3, r1, r3
 9283 16d6 1846     		mov	r0, r3
 9284 16d8 97F88515 		ldrb	r1, [r7, #1413]	@ zero_extendqisi2
 9285 16dc 97F88635 		ldrb	r3, [r7, #1414]	@ zero_extendqisi2
 9286 16e0 CB1A     		subs	r3, r1, r3
 9287 16e2 0344     		add	r3, r3, r0
 9288 16e4 013B     		subs	r3, r3, #1
 9289 16e6 1344     		add	r3, r3, r2
 9290 16e8 97F88625 		ldrb	r2, [r7, #1414]	@ zero_extendqisi2
 9291 16ec 07F5AE61 		add	r1, r7, #1392
 9292 16f0 0A44     		add	r2, r2, r1
 9293 16f2 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 9294 16f4 1A70     		strb	r2, [r3]
1249:..\src/command_processing.c ****                             ((char*)(VAR_P[PARAM_IDX] + i*sod))[sod - j -1] = ((char*)(&aux_int32))
 9295              		.loc 1 1249 0 discriminator 3
 9296 16f6 97F88635 		ldrb	r3, [r7, #1414]	@ zero_extendqisi2
 9297 16fa 0133     		adds	r3, r3, #1
 9298 16fc 87F88635 		strb	r3, [r7, #1414]
 9299              	.L357:
1249:..\src/command_processing.c ****                             ((char*)(VAR_P[PARAM_IDX] + i*sod))[sod - j -1] = ((char*)(&aux_int32))
 9300              		.loc 1 1249 0 is_stmt 0 discriminator 1
 9301 1700 97F88625 		ldrb	r2, [r7, #1414]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 216


 9302 1704 97F88535 		ldrb	r3, [r7, #1413]	@ zero_extendqisi2
 9303 1708 9A42     		cmp	r2, r3
 9304 170a D8D3     		bcc	.L358
1247:..\src/command_processing.c ****                         aux_int32 = *((int32 *) &g_rx.buffer[3 + i*sod]);
 9305              		.loc 1 1247 0 is_stmt 1 discriminator 2
 9306 170c 97F88735 		ldrb	r3, [r7, #1415]	@ zero_extendqisi2
 9307 1710 0133     		adds	r3, r3, #1
 9308 1712 87F88735 		strb	r3, [r7, #1415]
 9309              	.L356:
1247:..\src/command_processing.c ****                         aux_int32 = *((int32 *) &g_rx.buffer[3 + i*sod]);
 9310              		.loc 1 1247 0 is_stmt 0 discriminator 1
 9311 1716 97F87A35 		ldrb	r3, [r7, #1402]	@ zero_extendqisi2
 9312 171a 07F55D72 		add	r2, r7, #884
 9313 171e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9314 1720 97F88725 		ldrb	r2, [r7, #1415]	@ zero_extendqisi2
 9315 1724 9A42     		cmp	r2, r3
 9316 1726 BAD3     		bcc	.L359
1253:..\src/command_processing.c ****                 case TYPE_UINT32:
 9317              		.loc 1 1253 0 is_stmt 1
 9318 1728 9DE0     		b	.L368
 9319              	.L338:
1255:..\src/command_processing.c ****                         aux_uint32 = *((uint32 *) &g_rx.buffer[3 + i*sod]);
 9320              		.loc 1 1255 0
 9321 172a 0023     		movs	r3, #0
 9322 172c 87F88735 		strb	r3, [r7, #1415]
 9323 1730 3BE0     		b	.L360
 9324              	.L363:
1256:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 9325              		.loc 1 1256 0
 9326 1732 97F88735 		ldrb	r3, [r7, #1415]	@ zero_extendqisi2
 9327 1736 97F88525 		ldrb	r2, [r7, #1413]	@ zero_extendqisi2
 9328 173a 02FB03F3 		mul	r3, r2, r3
 9329 173e 0333     		adds	r3, r3, #3
 9330 1740 474A     		ldr	r2, .L383
 9331 1742 1344     		add	r3, r3, r2
 9332 1744 1B68     		ldr	r3, [r3]
 9333 1746 C7F86C35 		str	r3, [r7, #1388]
1257:..\src/command_processing.c ****                             ((char*)(VAR_P[PARAM_IDX] + i*sod))[sod - j -1] = ((char*)(&aux_uint32)
 9334              		.loc 1 1257 0
 9335 174a 0023     		movs	r3, #0
 9336 174c 87F88635 		strb	r3, [r7, #1414]
 9337 1750 20E0     		b	.L361
 9338              	.L362:
1258:..\src/command_processing.c ****                         }
 9339              		.loc 1 1258 0 discriminator 3
 9340 1752 97F87A25 		ldrb	r2, [r7, #1402]	@ zero_extendqisi2
 9341 1756 07F21C43 		addw	r3, r7, #1052
 9342 175a 53F82220 		ldr	r2, [r3, r2, lsl #2]
 9343 175e 97F88735 		ldrb	r3, [r7, #1415]	@ zero_extendqisi2
 9344 1762 97F88515 		ldrb	r1, [r7, #1413]	@ zero_extendqisi2
 9345 1766 01FB03F3 		mul	r3, r1, r3
 9346 176a 1846     		mov	r0, r3
 9347 176c 97F88515 		ldrb	r1, [r7, #1413]	@ zero_extendqisi2
 9348 1770 97F88635 		ldrb	r3, [r7, #1414]	@ zero_extendqisi2
 9349 1774 CB1A     		subs	r3, r1, r3
 9350 1776 0344     		add	r3, r3, r0
 9351 1778 013B     		subs	r3, r3, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 217


 9352 177a 1344     		add	r3, r3, r2
 9353 177c 97F88625 		ldrb	r2, [r7, #1414]	@ zero_extendqisi2
 9354 1780 07F26C51 		addw	r1, r7, #1388
 9355 1784 0A44     		add	r2, r2, r1
 9356 1786 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 9357 1788 1A70     		strb	r2, [r3]
1257:..\src/command_processing.c ****                             ((char*)(VAR_P[PARAM_IDX] + i*sod))[sod - j -1] = ((char*)(&aux_uint32)
 9358              		.loc 1 1257 0 discriminator 3
 9359 178a 97F88635 		ldrb	r3, [r7, #1414]	@ zero_extendqisi2
 9360 178e 0133     		adds	r3, r3, #1
 9361 1790 87F88635 		strb	r3, [r7, #1414]
 9362              	.L361:
1257:..\src/command_processing.c ****                             ((char*)(VAR_P[PARAM_IDX] + i*sod))[sod - j -1] = ((char*)(&aux_uint32)
 9363              		.loc 1 1257 0 is_stmt 0 discriminator 1
 9364 1794 97F88625 		ldrb	r2, [r7, #1414]	@ zero_extendqisi2
 9365 1798 97F88535 		ldrb	r3, [r7, #1413]	@ zero_extendqisi2
 9366 179c 9A42     		cmp	r2, r3
 9367 179e D8D3     		bcc	.L362
1255:..\src/command_processing.c ****                         aux_uint32 = *((uint32 *) &g_rx.buffer[3 + i*sod]);
 9368              		.loc 1 1255 0 is_stmt 1 discriminator 2
 9369 17a0 97F88735 		ldrb	r3, [r7, #1415]	@ zero_extendqisi2
 9370 17a4 0133     		adds	r3, r3, #1
 9371 17a6 87F88735 		strb	r3, [r7, #1415]
 9372              	.L360:
1255:..\src/command_processing.c ****                         aux_uint32 = *((uint32 *) &g_rx.buffer[3 + i*sod]);
 9373              		.loc 1 1255 0 is_stmt 0 discriminator 1
 9374 17aa 97F87A35 		ldrb	r3, [r7, #1402]	@ zero_extendqisi2
 9375 17ae 07F55D72 		add	r2, r7, #884
 9376 17b2 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9377 17b4 97F88725 		ldrb	r2, [r7, #1415]	@ zero_extendqisi2
 9378 17b8 9A42     		cmp	r2, r3
 9379 17ba BAD3     		bcc	.L363
1261:..\src/command_processing.c ****                 case TYPE_FLOAT:
 9380              		.loc 1 1261 0 is_stmt 1
 9381 17bc 53E0     		b	.L368
 9382              	.L339:
1263:..\src/command_processing.c ****                         aux_float = *((float *) &g_rx.buffer[3 + i*sod]);
 9383              		.loc 1 1263 0
 9384 17be 0023     		movs	r3, #0
 9385 17c0 87F88735 		strb	r3, [r7, #1415]
 9386 17c4 3BE0     		b	.L364
 9387              	.L367:
1264:..\src/command_processing.c ****                         for(j = 0; j < sod; j++) {
 9388              		.loc 1 1264 0
 9389 17c6 97F88735 		ldrb	r3, [r7, #1415]	@ zero_extendqisi2
 9390 17ca 97F88525 		ldrb	r2, [r7, #1413]	@ zero_extendqisi2
 9391 17ce 02FB03F3 		mul	r3, r2, r3
 9392 17d2 0333     		adds	r3, r3, #3
 9393 17d4 224A     		ldr	r2, .L383
 9394 17d6 1344     		add	r3, r3, r2
 9395 17d8 1B68     		ldr	r3, [r3]	@ float
 9396 17da C7F86835 		str	r3, [r7, #1384]	@ float
1265:..\src/command_processing.c ****                             ((char*)(VAR_P[PARAM_IDX] + i*sod))[sod - j -1] = ((char*)(&aux_float))
 9397              		.loc 1 1265 0
 9398 17de 0023     		movs	r3, #0
 9399 17e0 87F88635 		strb	r3, [r7, #1414]
 9400 17e4 20E0     		b	.L365
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 218


 9401              	.L366:
1266:..\src/command_processing.c ****                         }
 9402              		.loc 1 1266 0 discriminator 3
 9403 17e6 97F87A25 		ldrb	r2, [r7, #1402]	@ zero_extendqisi2
 9404 17ea 07F21C43 		addw	r3, r7, #1052
 9405 17ee 53F82220 		ldr	r2, [r3, r2, lsl #2]
 9406 17f2 97F88735 		ldrb	r3, [r7, #1415]	@ zero_extendqisi2
 9407 17f6 97F88515 		ldrb	r1, [r7, #1413]	@ zero_extendqisi2
 9408 17fa 01FB03F3 		mul	r3, r1, r3
 9409 17fe 1846     		mov	r0, r3
 9410 1800 97F88515 		ldrb	r1, [r7, #1413]	@ zero_extendqisi2
 9411 1804 97F88635 		ldrb	r3, [r7, #1414]	@ zero_extendqisi2
 9412 1808 CB1A     		subs	r3, r1, r3
 9413 180a 0344     		add	r3, r3, r0
 9414 180c 013B     		subs	r3, r3, #1
 9415 180e 1344     		add	r3, r3, r2
 9416 1810 97F88625 		ldrb	r2, [r7, #1414]	@ zero_extendqisi2
 9417 1814 07F5AD61 		add	r1, r7, #1384
 9418 1818 0A44     		add	r2, r2, r1
 9419 181a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 9420 181c 1A70     		strb	r2, [r3]
1265:..\src/command_processing.c ****                             ((char*)(VAR_P[PARAM_IDX] + i*sod))[sod - j -1] = ((char*)(&aux_float))
 9421              		.loc 1 1265 0 discriminator 3
 9422 181e 97F88635 		ldrb	r3, [r7, #1414]	@ zero_extendqisi2
 9423 1822 0133     		adds	r3, r3, #1
 9424 1824 87F88635 		strb	r3, [r7, #1414]
 9425              	.L365:
1265:..\src/command_processing.c ****                             ((char*)(VAR_P[PARAM_IDX] + i*sod))[sod - j -1] = ((char*)(&aux_float))
 9426              		.loc 1 1265 0 is_stmt 0 discriminator 1
 9427 1828 97F88625 		ldrb	r2, [r7, #1414]	@ zero_extendqisi2
 9428 182c 97F88535 		ldrb	r3, [r7, #1413]	@ zero_extendqisi2
 9429 1830 9A42     		cmp	r2, r3
 9430 1832 D8D3     		bcc	.L366
1263:..\src/command_processing.c ****                         aux_float = *((float *) &g_rx.buffer[3 + i*sod]);
 9431              		.loc 1 1263 0 is_stmt 1 discriminator 2
 9432 1834 97F88735 		ldrb	r3, [r7, #1415]	@ zero_extendqisi2
 9433 1838 0133     		adds	r3, r3, #1
 9434 183a 87F88735 		strb	r3, [r7, #1415]
 9435              	.L364:
1263:..\src/command_processing.c ****                         aux_float = *((float *) &g_rx.buffer[3 + i*sod]);
 9436              		.loc 1 1263 0 is_stmt 0 discriminator 1
 9437 183e 97F87A35 		ldrb	r3, [r7, #1402]	@ zero_extendqisi2
 9438 1842 07F55D72 		add	r2, r7, #884
 9439 1846 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9440 1848 97F88725 		ldrb	r2, [r7, #1415]	@ zero_extendqisi2
 9441 184c 9A42     		cmp	r2, r3
 9442 184e BAD3     		bcc	.L367
1269:..\src/command_processing.c ****                 default:
 9443              		.loc 1 1269 0 is_stmt 1
 9444 1850 09E0     		b	.L368
 9445              	.L330:
1276:..\src/command_processing.c ****         }
 9446              		.loc 1 1276 0
 9447 1852 BB1D     		adds	r3, r7, #6
 9448 1854 1B88     		ldrh	r3, [r3]
 9449 1856 1846     		mov	r0, r3
 9450 1858 FFF7FEFF 		bl	set_custom_param
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 219


 9451 185c 03E0     		b	.L368
 9452              	.L384:
 9453 185e 00BF     		.align	2
 9454              	.L383:
 9455 1860 00000000 		.word	g_rx
 9456              	.L373:
1271:..\src/command_processing.c ****             }
 9457              		.loc 1 1271 0
 9458 1864 00BF     		nop
 9459              	.L368:
1280:..\src/command_processing.c ****             memcpy( &(MEM_P->user[MEM_P->dev.user_id].user_emg), &(MEM_P->emg), sizeof(MEM_P->emg) 
 9460              		.loc 1 1280 0
 9461 1866 97F87B35 		ldrb	r3, [r7, #1403]	@ zero_extendqisi2
 9462 186a 9BB2     		uxth	r3, r3
 9463 186c BA1D     		adds	r2, r7, #6
 9464 186e 1288     		ldrh	r2, [r2]
 9465 1870 9A42     		cmp	r2, r3
 9466 1872 11D0     		beq	.L369
1281:..\src/command_processing.c ****         }
 9467              		.loc 1 1281 0
 9468 1874 D7F88035 		ldr	r3, [r7, #1408]
 9469 1878 93F8AB30 		ldrb	r3, [r3, #171]	@ zero_extendqisi2
 9470 187c 5B01     		lsls	r3, r3, #5
 9471 187e 03F51273 		add	r3, r3, #584
 9472 1882 D7F88025 		ldr	r2, [r7, #1408]
 9473 1886 D018     		adds	r0, r2, r3
 9474 1888 D7F88035 		ldr	r3, [r7, #1408]
 9475 188c 03F5F873 		add	r3, r3, #496
 9476 1890 1022     		movs	r2, #16
 9477 1892 1946     		mov	r1, r3
 9478 1894 FFF7FEFF 		bl	memcpy
 9479              	.L369:
1285:..\src/command_processing.c ****             uint8 idx = 0, menu_idx = -1;
 9480              		.loc 1 1285 0
 9481 1898 97F87A35 		ldrb	r3, [r7, #1402]	@ zero_extendqisi2
 9482 189c 07F57272 		add	r2, r7, #968
 9483 18a0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9484 18a2 002B     		cmp	r3, #0
 9485 18a4 42D1     		bne	.L374
 9486              	.LBB22:
1286:..\src/command_processing.c ****             do {
 9487              		.loc 1 1286 0
 9488 18a6 0023     		movs	r3, #0
 9489 18a8 87F87F35 		strb	r3, [r7, #1407]
 9490 18ac FF23     		movs	r3, #255
 9491 18ae 87F87E35 		strb	r3, [r7, #1406]
 9492              	.L371:
1288:..\src/command_processing.c ****                 idx++;
 9493              		.loc 1 1288 0
 9494 18b2 97F87F35 		ldrb	r3, [r7, #1407]	@ zero_extendqisi2
 9495 18b6 07F57272 		add	r2, r7, #968
 9496 18ba D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9497 18bc 002B     		cmp	r3, #0
 9498 18be 04D1     		bne	.L370
1288:..\src/command_processing.c ****                 idx++;
 9499              		.loc 1 1288 0 is_stmt 0 discriminator 1
 9500 18c0 97F87E35 		ldrb	r3, [r7, #1406]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 220


 9501 18c4 0133     		adds	r3, r3, #1
 9502 18c6 87F87E35 		strb	r3, [r7, #1406]
 9503              	.L370:
1289:..\src/command_processing.c ****             } while (idx <= PARAM_IDX);
 9504              		.loc 1 1289 0 is_stmt 1
 9505 18ca 97F87F35 		ldrb	r3, [r7, #1407]	@ zero_extendqisi2
 9506 18ce 0133     		adds	r3, r3, #1
 9507 18d0 87F87F35 		strb	r3, [r7, #1407]
1290:..\src/command_processing.c ****             
 9508              		.loc 1 1290 0
 9509 18d4 97F87F25 		ldrb	r2, [r7, #1407]	@ zero_extendqisi2
 9510 18d8 97F87A35 		ldrb	r3, [r7, #1402]	@ zero_extendqisi2
 9511 18dc 9A42     		cmp	r2, r3
 9512 18de E8D9     		bls	.L371
1292:..\src/command_processing.c ****                 reset_PSoC_flag = TRUE;
 9513              		.loc 1 1292 0
 9514 18e0 97F87E35 		ldrb	r3, [r7, #1406]	@ zero_extendqisi2
 9515 18e4 07F1D402 		add	r2, r7, #212
 9516 18e8 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9517 18ea 052B     		cmp	r3, #5
 9518 18ec 1BD0     		beq	.L372
1292:..\src/command_processing.c ****                 reset_PSoC_flag = TRUE;
 9519              		.loc 1 1292 0 is_stmt 0 discriminator 1
 9520 18ee 97F87E35 		ldrb	r3, [r7, #1406]	@ zero_extendqisi2
 9521 18f2 07F1D402 		add	r2, r7, #212
 9522 18f6 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9523 18f8 062B     		cmp	r3, #6
 9524 18fa 14D0     		beq	.L372
1292:..\src/command_processing.c ****                 reset_PSoC_flag = TRUE;
 9525              		.loc 1 1292 0 discriminator 2
 9526 18fc 97F87E35 		ldrb	r3, [r7, #1406]	@ zero_extendqisi2
 9527 1900 07F1D402 		add	r2, r7, #212
 9528 1904 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9529 1906 082B     		cmp	r3, #8
 9530 1908 0DD0     		beq	.L372
1292:..\src/command_processing.c ****                 reset_PSoC_flag = TRUE;
 9531              		.loc 1 1292 0 discriminator 3
 9532 190a 97F87E35 		ldrb	r3, [r7, #1406]	@ zero_extendqisi2
 9533 190e 07F1D402 		add	r2, r7, #212
 9534 1912 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9535 1914 092B     		cmp	r3, #9
 9536 1916 06D0     		beq	.L372
1292:..\src/command_processing.c ****                 reset_PSoC_flag = TRUE;
 9537              		.loc 1 1292 0 discriminator 4
 9538 1918 97F87E35 		ldrb	r3, [r7, #1406]	@ zero_extendqisi2
 9539 191c 07F1D402 		add	r2, r7, #212
 9540 1920 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9541 1922 0A2B     		cmp	r3, #10
 9542 1924 02D1     		bne	.L374
 9543              	.L372:
1293:..\src/command_processing.c ****             }   
 9544              		.loc 1 1293 0 is_stmt 1
 9545 1926 044B     		ldr	r3, .L385
 9546 1928 0122     		movs	r2, #1
 9547 192a 1A70     		strb	r2, [r3]
 9548              	.L374:
 9549              	.LBE22:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 221


 9550              		.loc 1 1297 0
 9551 192c 00BF     		nop
 9552 192e 07F5B167 		add	r7, r7, #1416
 9553              		.cfi_def_cfa_offset 16
 9554 1932 BD46     		mov	sp, r7
 9555              		.cfi_def_cfa_register 13
 9556              		@ sp needed
 9557 1934 B0BD     		pop	{r4, r5, r7, pc}
 9558              	.L386:
 9559 1936 00BF     		.align	2
 9560              	.L385:
 9561 1938 00000000 		.word	reset_PSoC_flag
 9562              		.cfi_endproc
 9563              	.LFE68:
 9564              		.size	manage_param_list, .-manage_param_list
 9565              		.global	__aeabi_fmul
 9566              		.global	__aeabi_f2iz
 9567              		.section	.text.set_custom_param,"ax",%progbits
 9568              		.align	2
 9569              		.global	set_custom_param
 9570              		.thumb
 9571              		.thumb_func
 9572              		.type	set_custom_param, %function
 9573              	set_custom_param:
 9574              	.LFB69:
1298:..\src/command_processing.c **** 
1299:..\src/command_processing.c **** //==============================================================================
1300:..\src/command_processing.c **** //                                                              SET CUSTOM PARAM
1301:..\src/command_processing.c **** //==============================================================================
1302:..\src/command_processing.c **** 
1303:..\src/command_processing.c **** void set_custom_param(uint16 index) {
 9575              		.loc 1 1303 0
 9576              		.cfi_startproc
 9577              		@ args = 0, pretend = 0, frame = 24
 9578              		@ frame_needed = 1, uses_anonymous_args = 0
 9579 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 9580              		.cfi_def_cfa_offset 20
 9581              		.cfi_offset 4, -20
 9582              		.cfi_offset 5, -16
 9583              		.cfi_offset 6, -12
 9584              		.cfi_offset 7, -8
 9585              		.cfi_offset 14, -4
 9586 0002 87B0     		sub	sp, sp, #28
 9587              		.cfi_def_cfa_offset 48
 9588 0004 00AF     		add	r7, sp, #0
 9589              		.cfi_def_cfa_register 7
 9590 0006 0346     		mov	r3, r0
 9591 0008 FB80     		strh	r3, [r7, #6]	@ movhi
1304:..\src/command_processing.c **** 
1305:..\src/command_processing.c ****     uint8 CYDATA i, j;
1306:..\src/command_processing.c ****     uint8 aux_uchar;
1307:..\src/command_processing.c ****     float aux_float, aux_float2;
1308:..\src/command_processing.c **** 
1309:..\src/command_processing.c ****     uint8 MOTOR_IDX = 0;
 9592              		.loc 1 1309 0
 9593 000a 0023     		movs	r3, #0
 9594 000c 3B75     		strb	r3, [r7, #20]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 222


1310:..\src/command_processing.c ****     uint8 SECOND_MOTOR_IDX = 1;
 9595              		.loc 1 1310 0
 9596 000e 0123     		movs	r3, #1
 9597 0010 FB74     		strb	r3, [r7, #19]
1311:..\src/command_processing.c ****     
1312:..\src/command_processing.c ****     switch(index){
 9598              		.loc 1 1312 0
 9599 0012 FB88     		ldrh	r3, [r7, #6]
 9600 0014 023B     		subs	r3, r3, #2
 9601 0016 492B     		cmp	r3, #73
 9602 0018 01F24C82 		bhi	.L482
 9603 001c 01A2     		adr	r2, .L390
 9604 001e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 9605 0022 00BF     		.p2align 2
 9606              	.L390:
 9607 0024 4D010000 		.word	.L389+1
 9608 0028 7F030000 		.word	.L391+1
 9609 002c B5140000 		.word	.L482+1
 9610 0030 C5050000 		.word	.L392+1
 9611 0034 B5140000 		.word	.L482+1
 9612 0038 B5140000 		.word	.L482+1
 9613 003c 0F060000 		.word	.L393+1
 9614 0040 B5140000 		.word	.L482+1
 9615 0044 B5140000 		.word	.L482+1
 9616 0048 49070000 		.word	.L394+1
 9617 004c B5140000 		.word	.L482+1
 9618 0050 B5140000 		.word	.L482+1
 9619 0054 B5140000 		.word	.L482+1
 9620 0058 B5140000 		.word	.L482+1
 9621 005c B5140000 		.word	.L482+1
 9622 0060 B5140000 		.word	.L482+1
 9623 0064 B5140000 		.word	.L482+1
 9624 0068 B5140000 		.word	.L482+1
 9625 006c B5140000 		.word	.L482+1
 9626 0070 B5140000 		.word	.L482+1
 9627 0074 B5140000 		.word	.L482+1
 9628 0078 49080000 		.word	.L395+1
 9629 007c A7080000 		.word	.L396+1
 9630 0080 B5140000 		.word	.L482+1
 9631 0084 B5140000 		.word	.L482+1
 9632 0088 B5140000 		.word	.L482+1
 9633 008c E1080000 		.word	.L397+1
 9634 0090 B5140000 		.word	.L482+1
 9635 0094 B5140000 		.word	.L482+1
 9636 0098 5D0A0000 		.word	.L398+1
 9637 009c 090B0000 		.word	.L399+1
 9638 00a0 B5140000 		.word	.L482+1
 9639 00a4 B5140000 		.word	.L482+1
 9640 00a8 B5140000 		.word	.L482+1
 9641 00ac B5140000 		.word	.L482+1
 9642 00b0 B5140000 		.word	.L482+1
 9643 00b4 430B0000 		.word	.L400+1
 9644 00b8 B5140000 		.word	.L482+1
 9645 00bc B5140000 		.word	.L482+1
 9646 00c0 B5140000 		.word	.L482+1
 9647 00c4 B5140000 		.word	.L482+1
 9648 00c8 B5140000 		.word	.L482+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 223


 9649 00cc 630B0000 		.word	.L401+1
 9650 00d0 AB0D0000 		.word	.L402+1
 9651 00d4 B5140000 		.word	.L482+1
 9652 00d8 D90F0000 		.word	.L403+1
 9653 00dc B5140000 		.word	.L482+1
 9654 00e0 B5140000 		.word	.L482+1
 9655 00e4 21100000 		.word	.L404+1
 9656 00e8 B5140000 		.word	.L482+1
 9657 00ec B5140000 		.word	.L482+1
 9658 00f0 59110000 		.word	.L405+1
 9659 00f4 B5140000 		.word	.L482+1
 9660 00f8 B5140000 		.word	.L482+1
 9661 00fc B5140000 		.word	.L482+1
 9662 0100 B5140000 		.word	.L482+1
 9663 0104 B5140000 		.word	.L482+1
 9664 0108 B5140000 		.word	.L482+1
 9665 010c B5140000 		.word	.L482+1
 9666 0110 57120000 		.word	.L406+1
 9667 0114 B5140000 		.word	.L482+1
 9668 0118 B5140000 		.word	.L482+1
 9669 011c B5140000 		.word	.L482+1
 9670 0120 B5140000 		.word	.L482+1
 9671 0124 B5140000 		.word	.L482+1
 9672 0128 B5140000 		.word	.L482+1
 9673 012c B5140000 		.word	.L482+1
 9674 0130 B5140000 		.word	.L482+1
 9675 0134 B5140000 		.word	.L482+1
 9676 0138 B5140000 		.word	.L482+1
 9677 013c B5140000 		.word	.L482+1
 9678 0140 B5140000 		.word	.L482+1
 9679 0144 B5140000 		.word	.L482+1
 9680 0148 85120000 		.word	.L407+1
 9681              		.p2align 1
 9682              	.L389:
1313:..\src/command_processing.c ****         case 2:         // Position PID
1314:..\src/command_processing.c ****             if(c_mem.motor[MOTOR_IDX].control_mode != CURR_AND_POS_CONTROL) {
 9683              		.loc 1 1314 0
 9684 014c 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 9685 014e AB49     		ldr	r1, .L488
 9686 0150 1346     		mov	r3, r2
 9687 0152 DB00     		lsls	r3, r3, #3
 9688 0154 9B1A     		subs	r3, r3, r2
 9689 0156 1B01     		lsls	r3, r3, #4
 9690 0158 0B44     		add	r3, r3, r1
 9691 015a 03F20F13 		addw	r3, r3, #271
 9692 015e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9693 0160 032B     		cmp	r3, #3
 9694 0162 00F08680 		beq	.L408
1315:..\src/command_processing.c ****                 aux_float = *((float *) &g_rx.buffer[3]);
 9695              		.loc 1 1315 0
 9696 0166 A64B     		ldr	r3, .L488+4
 9697 0168 1B68     		ldr	r3, [r3]	@ float
 9698 016a FB60     		str	r3, [r7, #12]	@ float
1316:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 9699              		.loc 1 1316 0
 9700 016c 0023     		movs	r3, #0
 9701 016e BB75     		strb	r3, [r7, #22]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 224


 9702 0170 0EE0     		b	.L409
 9703              	.L410:
1317:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 9704              		.loc 1 1317 0 discriminator 3
 9705 0172 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 9706 0174 C3F10303 		rsb	r3, r3, #3
 9707 0178 07F10802 		add	r2, r7, #8
 9708 017c 1344     		add	r3, r3, r2
 9709 017e BA7D     		ldrb	r2, [r7, #22]	@ zero_extendqisi2
 9710 0180 07F10C01 		add	r1, r7, #12
 9711 0184 0A44     		add	r2, r2, r1
 9712 0186 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 9713 0188 1A70     		strb	r2, [r3]
1316:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 9714              		.loc 1 1316 0 discriminator 3
 9715 018a BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 9716 018c 0133     		adds	r3, r3, #1
 9717 018e BB75     		strb	r3, [r7, #22]
 9718              	.L409:
1316:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 9719              		.loc 1 1316 0 is_stmt 0 discriminator 1
 9720 0190 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 9721 0192 032B     		cmp	r3, #3
 9722 0194 EDD9     		bls	.L410
1318:..\src/command_processing.c ****                 }
1319:..\src/command_processing.c ****                 g_mem.motor[MOTOR_IDX].k_p = aux_float2 * 65536;
 9723              		.loc 1 1319 0 is_stmt 1
 9724 0196 3C7D     		ldrb	r4, [r7, #20]	@ zero_extendqisi2
 9725 0198 BB68     		ldr	r3, [r7, #8]	@ float
 9726 019a 4FF08F41 		mov	r1, #1199570944
 9727 019e 1846     		mov	r0, r3
 9728 01a0 FFF7FEFF 		bl	__aeabi_fmul
 9729 01a4 0346     		mov	r3, r0
 9730 01a6 1846     		mov	r0, r3
 9731 01a8 FFF7FEFF 		bl	__aeabi_f2iz
 9732 01ac 0146     		mov	r1, r0
 9733 01ae 954A     		ldr	r2, .L488+8
 9734 01b0 2346     		mov	r3, r4
 9735 01b2 DB00     		lsls	r3, r3, #3
 9736 01b4 1B1B     		subs	r3, r3, r4
 9737 01b6 1B01     		lsls	r3, r3, #4
 9738 01b8 1344     		add	r3, r3, r2
 9739 01ba B033     		adds	r3, r3, #176
 9740 01bc 1960     		str	r1, [r3]
1320:..\src/command_processing.c ****                 
1321:..\src/command_processing.c ****                 aux_float = *((float *) &g_rx.buffer[3 + 4]);
 9741              		.loc 1 1321 0
 9742 01be 924B     		ldr	r3, .L488+12
 9743 01c0 1B68     		ldr	r3, [r3]	@ float
 9744 01c2 FB60     		str	r3, [r7, #12]	@ float
1322:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 9745              		.loc 1 1322 0
 9746 01c4 0023     		movs	r3, #0
 9747 01c6 BB75     		strb	r3, [r7, #22]
 9748 01c8 0EE0     		b	.L411
 9749              	.L412:
1323:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 225


 9750              		.loc 1 1323 0 discriminator 3
 9751 01ca BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 9752 01cc C3F10303 		rsb	r3, r3, #3
 9753 01d0 07F10802 		add	r2, r7, #8
 9754 01d4 1344     		add	r3, r3, r2
 9755 01d6 BA7D     		ldrb	r2, [r7, #22]	@ zero_extendqisi2
 9756 01d8 07F10C01 		add	r1, r7, #12
 9757 01dc 0A44     		add	r2, r2, r1
 9758 01de 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 9759 01e0 1A70     		strb	r2, [r3]
1322:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 9760              		.loc 1 1322 0 discriminator 3
 9761 01e2 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 9762 01e4 0133     		adds	r3, r3, #1
 9763 01e6 BB75     		strb	r3, [r7, #22]
 9764              	.L411:
1322:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 9765              		.loc 1 1322 0 is_stmt 0 discriminator 1
 9766 01e8 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 9767 01ea 032B     		cmp	r3, #3
 9768 01ec EDD9     		bls	.L412
1324:..\src/command_processing.c ****                 }
1325:..\src/command_processing.c ****                 g_mem.motor[MOTOR_IDX].k_i = aux_float2 * 65536;
 9769              		.loc 1 1325 0 is_stmt 1
 9770 01ee 3C7D     		ldrb	r4, [r7, #20]	@ zero_extendqisi2
 9771 01f0 BB68     		ldr	r3, [r7, #8]	@ float
 9772 01f2 4FF08F41 		mov	r1, #1199570944
 9773 01f6 1846     		mov	r0, r3
 9774 01f8 FFF7FEFF 		bl	__aeabi_fmul
 9775 01fc 0346     		mov	r3, r0
 9776 01fe 1846     		mov	r0, r3
 9777 0200 FFF7FEFF 		bl	__aeabi_f2iz
 9778 0204 0146     		mov	r1, r0
 9779 0206 7F4A     		ldr	r2, .L488+8
 9780 0208 2346     		mov	r3, r4
 9781 020a DB00     		lsls	r3, r3, #3
 9782 020c 1B1B     		subs	r3, r3, r4
 9783 020e 1B01     		lsls	r3, r3, #4
 9784 0210 1344     		add	r3, r3, r2
 9785 0212 B433     		adds	r3, r3, #180
 9786 0214 1960     		str	r1, [r3]
1326:..\src/command_processing.c ****                 
1327:..\src/command_processing.c ****                 aux_float = *((float *) &g_rx.buffer[3 + 8]);
 9787              		.loc 1 1327 0
 9788 0216 7D4B     		ldr	r3, .L488+16
 9789 0218 1B68     		ldr	r3, [r3]	@ float
 9790 021a FB60     		str	r3, [r7, #12]	@ float
1328:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 9791              		.loc 1 1328 0
 9792 021c 0023     		movs	r3, #0
 9793 021e BB75     		strb	r3, [r7, #22]
 9794 0220 0EE0     		b	.L413
 9795              	.L414:
1329:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 9796              		.loc 1 1329 0 discriminator 3
 9797 0222 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 9798 0224 C3F10303 		rsb	r3, r3, #3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 226


 9799 0228 07F10802 		add	r2, r7, #8
 9800 022c 1344     		add	r3, r3, r2
 9801 022e BA7D     		ldrb	r2, [r7, #22]	@ zero_extendqisi2
 9802 0230 07F10C01 		add	r1, r7, #12
 9803 0234 0A44     		add	r2, r2, r1
 9804 0236 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 9805 0238 1A70     		strb	r2, [r3]
1328:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 9806              		.loc 1 1328 0 discriminator 3
 9807 023a BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 9808 023c 0133     		adds	r3, r3, #1
 9809 023e BB75     		strb	r3, [r7, #22]
 9810              	.L413:
1328:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 9811              		.loc 1 1328 0 is_stmt 0 discriminator 1
 9812 0240 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 9813 0242 032B     		cmp	r3, #3
 9814 0244 EDD9     		bls	.L414
1330:..\src/command_processing.c ****                 }
1331:..\src/command_processing.c ****                 g_mem.motor[MOTOR_IDX].k_d = aux_float2 * 65536;
 9815              		.loc 1 1331 0 is_stmt 1
 9816 0246 3C7D     		ldrb	r4, [r7, #20]	@ zero_extendqisi2
 9817 0248 BB68     		ldr	r3, [r7, #8]	@ float
 9818 024a 4FF08F41 		mov	r1, #1199570944
 9819 024e 1846     		mov	r0, r3
 9820 0250 FFF7FEFF 		bl	__aeabi_fmul
 9821 0254 0346     		mov	r3, r0
 9822 0256 1846     		mov	r0, r3
 9823 0258 FFF7FEFF 		bl	__aeabi_f2iz
 9824 025c 0146     		mov	r1, r0
 9825 025e 694A     		ldr	r2, .L488+8
 9826 0260 2346     		mov	r3, r4
 9827 0262 DB00     		lsls	r3, r3, #3
 9828 0264 1B1B     		subs	r3, r3, r4
 9829 0266 1B01     		lsls	r3, r3, #4
 9830 0268 1344     		add	r3, r3, r2
 9831 026a B833     		adds	r3, r3, #184
 9832 026c 1960     		str	r1, [r3]
1332:..\src/command_processing.c ****             }
1333:..\src/command_processing.c ****             else {
1334:..\src/command_processing.c ****                 aux_float = *((float *) &g_rx.buffer[3]);
1335:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
1336:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
1337:..\src/command_processing.c ****                 }
1338:..\src/command_processing.c ****                 g_mem.motor[MOTOR_IDX].k_p_dl = aux_float2 * 65536;
1339:..\src/command_processing.c ****                 
1340:..\src/command_processing.c ****                 aux_float = *((float *) &g_rx.buffer[3 + 4]);
1341:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
1342:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
1343:..\src/command_processing.c ****                 }
1344:..\src/command_processing.c ****                 g_mem.motor[MOTOR_IDX].k_i_dl = aux_float2 * 65536;
1345:..\src/command_processing.c ****                 
1346:..\src/command_processing.c ****                 aux_float = *((float *) &g_rx.buffer[3 + 8]);
1347:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
1348:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
1349:..\src/command_processing.c ****                 }
1350:..\src/command_processing.c ****                 g_mem.motor[MOTOR_IDX].k_d_dl = aux_float2 * 65536;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 227


1351:..\src/command_processing.c ****             }
1352:..\src/command_processing.c ****             break;
 9833              		.loc 1 1352 0
 9834 026e 01F02CB9 		b	.L422
 9835              	.L408:
1334:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 9836              		.loc 1 1334 0
 9837 0272 634B     		ldr	r3, .L488+4
 9838 0274 1B68     		ldr	r3, [r3]	@ float
 9839 0276 FB60     		str	r3, [r7, #12]	@ float
1335:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 9840              		.loc 1 1335 0
 9841 0278 0023     		movs	r3, #0
 9842 027a BB75     		strb	r3, [r7, #22]
 9843 027c 0EE0     		b	.L416
 9844              	.L417:
1336:..\src/command_processing.c ****                 }
 9845              		.loc 1 1336 0 discriminator 3
 9846 027e BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 9847 0280 C3F10303 		rsb	r3, r3, #3
 9848 0284 07F10802 		add	r2, r7, #8
 9849 0288 1344     		add	r3, r3, r2
 9850 028a BA7D     		ldrb	r2, [r7, #22]	@ zero_extendqisi2
 9851 028c 07F10C01 		add	r1, r7, #12
 9852 0290 0A44     		add	r2, r2, r1
 9853 0292 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 9854 0294 1A70     		strb	r2, [r3]
1335:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 9855              		.loc 1 1335 0 discriminator 3
 9856 0296 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 9857 0298 0133     		adds	r3, r3, #1
 9858 029a BB75     		strb	r3, [r7, #22]
 9859              	.L416:
1335:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 9860              		.loc 1 1335 0 is_stmt 0 discriminator 1
 9861 029c BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 9862 029e 032B     		cmp	r3, #3
 9863 02a0 EDD9     		bls	.L417
1338:..\src/command_processing.c ****                 
 9864              		.loc 1 1338 0 is_stmt 1
 9865 02a2 3C7D     		ldrb	r4, [r7, #20]	@ zero_extendqisi2
 9866 02a4 BB68     		ldr	r3, [r7, #8]	@ float
 9867 02a6 4FF08F41 		mov	r1, #1199570944
 9868 02aa 1846     		mov	r0, r3
 9869 02ac FFF7FEFF 		bl	__aeabi_fmul
 9870 02b0 0346     		mov	r3, r0
 9871 02b2 1846     		mov	r0, r3
 9872 02b4 FFF7FEFF 		bl	__aeabi_f2iz
 9873 02b8 0146     		mov	r1, r0
 9874 02ba 524A     		ldr	r2, .L488+8
 9875 02bc 2346     		mov	r3, r4
 9876 02be DB00     		lsls	r3, r3, #3
 9877 02c0 1B1B     		subs	r3, r3, r4
 9878 02c2 1B01     		lsls	r3, r3, #4
 9879 02c4 1344     		add	r3, r3, r2
 9880 02c6 C833     		adds	r3, r3, #200
 9881 02c8 1960     		str	r1, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 228


1340:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 9882              		.loc 1 1340 0
 9883 02ca 4F4B     		ldr	r3, .L488+12
 9884 02cc 1B68     		ldr	r3, [r3]	@ float
 9885 02ce FB60     		str	r3, [r7, #12]	@ float
1341:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 9886              		.loc 1 1341 0
 9887 02d0 0023     		movs	r3, #0
 9888 02d2 BB75     		strb	r3, [r7, #22]
 9889 02d4 0EE0     		b	.L418
 9890              	.L419:
1342:..\src/command_processing.c ****                 }
 9891              		.loc 1 1342 0 discriminator 3
 9892 02d6 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 9893 02d8 C3F10303 		rsb	r3, r3, #3
 9894 02dc 07F10802 		add	r2, r7, #8
 9895 02e0 1344     		add	r3, r3, r2
 9896 02e2 BA7D     		ldrb	r2, [r7, #22]	@ zero_extendqisi2
 9897 02e4 07F10C01 		add	r1, r7, #12
 9898 02e8 0A44     		add	r2, r2, r1
 9899 02ea 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 9900 02ec 1A70     		strb	r2, [r3]
1341:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 9901              		.loc 1 1341 0 discriminator 3
 9902 02ee BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 9903 02f0 0133     		adds	r3, r3, #1
 9904 02f2 BB75     		strb	r3, [r7, #22]
 9905              	.L418:
1341:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 9906              		.loc 1 1341 0 is_stmt 0 discriminator 1
 9907 02f4 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 9908 02f6 032B     		cmp	r3, #3
 9909 02f8 EDD9     		bls	.L419
1344:..\src/command_processing.c ****                 
 9910              		.loc 1 1344 0 is_stmt 1
 9911 02fa 3C7D     		ldrb	r4, [r7, #20]	@ zero_extendqisi2
 9912 02fc BB68     		ldr	r3, [r7, #8]	@ float
 9913 02fe 4FF08F41 		mov	r1, #1199570944
 9914 0302 1846     		mov	r0, r3
 9915 0304 FFF7FEFF 		bl	__aeabi_fmul
 9916 0308 0346     		mov	r3, r0
 9917 030a 1846     		mov	r0, r3
 9918 030c FFF7FEFF 		bl	__aeabi_f2iz
 9919 0310 0146     		mov	r1, r0
 9920 0312 3C4A     		ldr	r2, .L488+8
 9921 0314 2346     		mov	r3, r4
 9922 0316 DB00     		lsls	r3, r3, #3
 9923 0318 1B1B     		subs	r3, r3, r4
 9924 031a 1B01     		lsls	r3, r3, #4
 9925 031c 1344     		add	r3, r3, r2
 9926 031e CC33     		adds	r3, r3, #204
 9927 0320 1960     		str	r1, [r3]
1346:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 9928              		.loc 1 1346 0
 9929 0322 3A4B     		ldr	r3, .L488+16
 9930 0324 1B68     		ldr	r3, [r3]	@ float
 9931 0326 FB60     		str	r3, [r7, #12]	@ float
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 229


1347:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 9932              		.loc 1 1347 0
 9933 0328 0023     		movs	r3, #0
 9934 032a BB75     		strb	r3, [r7, #22]
 9935 032c 0EE0     		b	.L420
 9936              	.L421:
1348:..\src/command_processing.c ****                 }
 9937              		.loc 1 1348 0 discriminator 3
 9938 032e BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 9939 0330 C3F10303 		rsb	r3, r3, #3
 9940 0334 07F10802 		add	r2, r7, #8
 9941 0338 1344     		add	r3, r3, r2
 9942 033a BA7D     		ldrb	r2, [r7, #22]	@ zero_extendqisi2
 9943 033c 07F10C01 		add	r1, r7, #12
 9944 0340 0A44     		add	r2, r2, r1
 9945 0342 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 9946 0344 1A70     		strb	r2, [r3]
1347:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 9947              		.loc 1 1347 0 discriminator 3
 9948 0346 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 9949 0348 0133     		adds	r3, r3, #1
 9950 034a BB75     		strb	r3, [r7, #22]
 9951              	.L420:
1347:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 9952              		.loc 1 1347 0 is_stmt 0 discriminator 1
 9953 034c BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 9954 034e 032B     		cmp	r3, #3
 9955 0350 EDD9     		bls	.L421
1350:..\src/command_processing.c ****             }
 9956              		.loc 1 1350 0 is_stmt 1
 9957 0352 3C7D     		ldrb	r4, [r7, #20]	@ zero_extendqisi2
 9958 0354 BB68     		ldr	r3, [r7, #8]	@ float
 9959 0356 4FF08F41 		mov	r1, #1199570944
 9960 035a 1846     		mov	r0, r3
 9961 035c FFF7FEFF 		bl	__aeabi_fmul
 9962 0360 0346     		mov	r3, r0
 9963 0362 1846     		mov	r0, r3
 9964 0364 FFF7FEFF 		bl	__aeabi_f2iz
 9965 0368 0146     		mov	r1, r0
 9966 036a 264A     		ldr	r2, .L488+8
 9967 036c 2346     		mov	r3, r4
 9968 036e DB00     		lsls	r3, r3, #3
 9969 0370 1B1B     		subs	r3, r3, r4
 9970 0372 1B01     		lsls	r3, r3, #4
 9971 0374 1344     		add	r3, r3, r2
 9972 0376 D033     		adds	r3, r3, #208
 9973 0378 1960     		str	r1, [r3]
 9974              		.loc 1 1352 0
 9975 037a 01F0A6B8 		b	.L422
 9976              	.L391:
1353:..\src/command_processing.c ****             
1354:..\src/command_processing.c ****         case 3:         //Current PID
1355:..\src/command_processing.c ****             if(c_mem.motor[MOTOR_IDX].control_mode != CURR_AND_POS_CONTROL) {
 9977              		.loc 1 1355 0
 9978 037e 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 9979 0380 1E49     		ldr	r1, .L488
 9980 0382 1346     		mov	r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 230


 9981 0384 DB00     		lsls	r3, r3, #3
 9982 0386 9B1A     		subs	r3, r3, r2
 9983 0388 1B01     		lsls	r3, r3, #4
 9984 038a 0B44     		add	r3, r3, r1
 9985 038c 03F20F13 		addw	r3, r3, #271
 9986 0390 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9987 0392 032B     		cmp	r3, #3
 9988 0394 00F09080 		beq	.L423
1356:..\src/command_processing.c ****                 aux_float = *((float *) &g_rx.buffer[3]);
 9989              		.loc 1 1356 0
 9990 0398 194B     		ldr	r3, .L488+4
 9991 039a 1B68     		ldr	r3, [r3]	@ float
 9992 039c FB60     		str	r3, [r7, #12]	@ float
1357:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 9993              		.loc 1 1357 0
 9994 039e 0023     		movs	r3, #0
 9995 03a0 BB75     		strb	r3, [r7, #22]
 9996 03a2 0EE0     		b	.L424
 9997              	.L425:
1358:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 9998              		.loc 1 1358 0 discriminator 3
 9999 03a4 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 10000 03a6 C3F10303 		rsb	r3, r3, #3
 10001 03aa 07F10802 		add	r2, r7, #8
 10002 03ae 1344     		add	r3, r3, r2
 10003 03b0 BA7D     		ldrb	r2, [r7, #22]	@ zero_extendqisi2
 10004 03b2 07F10C01 		add	r1, r7, #12
 10005 03b6 0A44     		add	r2, r2, r1
 10006 03b8 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 10007 03ba 1A70     		strb	r2, [r3]
1357:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 10008              		.loc 1 1357 0 discriminator 3
 10009 03bc BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 10010 03be 0133     		adds	r3, r3, #1
 10011 03c0 BB75     		strb	r3, [r7, #22]
 10012              	.L424:
1357:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 10013              		.loc 1 1357 0 is_stmt 0 discriminator 1
 10014 03c2 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 10015 03c4 032B     		cmp	r3, #3
 10016 03c6 EDD9     		bls	.L425
1359:..\src/command_processing.c ****                 }
1360:..\src/command_processing.c ****                 g_mem.motor[MOTOR_IDX].k_p_c = aux_float2 * 65536;
 10017              		.loc 1 1360 0 is_stmt 1
 10018 03c8 3C7D     		ldrb	r4, [r7, #20]	@ zero_extendqisi2
 10019 03ca BB68     		ldr	r3, [r7, #8]	@ float
 10020 03cc 4FF08F41 		mov	r1, #1199570944
 10021 03d0 1846     		mov	r0, r3
 10022 03d2 FFF7FEFF 		bl	__aeabi_fmul
 10023 03d6 0346     		mov	r3, r0
 10024 03d8 1846     		mov	r0, r3
 10025 03da FFF7FEFF 		bl	__aeabi_f2iz
 10026 03de 0146     		mov	r1, r0
 10027 03e0 084A     		ldr	r2, .L488+8
 10028 03e2 2346     		mov	r3, r4
 10029 03e4 DB00     		lsls	r3, r3, #3
 10030 03e6 1B1B     		subs	r3, r3, r4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 231


 10031 03e8 1B01     		lsls	r3, r3, #4
 10032 03ea 1344     		add	r3, r3, r2
 10033 03ec BC33     		adds	r3, r3, #188
 10034 03ee 1960     		str	r1, [r3]
1361:..\src/command_processing.c ****                 
1362:..\src/command_processing.c ****                 aux_float = *((float *) &g_rx.buffer[3 + 4]);
 10035              		.loc 1 1362 0
 10036 03f0 054B     		ldr	r3, .L488+12
 10037 03f2 1B68     		ldr	r3, [r3]	@ float
 10038 03f4 FB60     		str	r3, [r7, #12]	@ float
1363:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 10039              		.loc 1 1363 0
 10040 03f6 0023     		movs	r3, #0
 10041 03f8 BB75     		strb	r3, [r7, #22]
 10042 03fa 18E0     		b	.L426
 10043              	.L489:
 10044              		.align	2
 10045              	.L488:
 10046 03fc 00000000 		.word	c_mem
 10047 0400 03000000 		.word	g_rx+3
 10048 0404 00000000 		.word	g_mem
 10049 0408 07000000 		.word	g_rx+7
 10050 040c 0B000000 		.word	g_rx+11
 10051              	.L427:
1364:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 10052              		.loc 1 1364 0 discriminator 3
 10053 0410 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 10054 0412 C3F10303 		rsb	r3, r3, #3
 10055 0416 07F10802 		add	r2, r7, #8
 10056 041a 1344     		add	r3, r3, r2
 10057 041c BA7D     		ldrb	r2, [r7, #22]	@ zero_extendqisi2
 10058 041e 07F10C01 		add	r1, r7, #12
 10059 0422 0A44     		add	r2, r2, r1
 10060 0424 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 10061 0426 1A70     		strb	r2, [r3]
1363:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 10062              		.loc 1 1363 0 discriminator 3
 10063 0428 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 10064 042a 0133     		adds	r3, r3, #1
 10065 042c BB75     		strb	r3, [r7, #22]
 10066              	.L426:
1363:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 10067              		.loc 1 1363 0 is_stmt 0 discriminator 1
 10068 042e BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 10069 0430 032B     		cmp	r3, #3
 10070 0432 EDD9     		bls	.L427
1365:..\src/command_processing.c ****                 }
1366:..\src/command_processing.c ****                 g_mem.motor[MOTOR_IDX].k_i_c = aux_float2 * 65536;
 10071              		.loc 1 1366 0 is_stmt 1
 10072 0434 3C7D     		ldrb	r4, [r7, #20]	@ zero_extendqisi2
 10073 0436 BB68     		ldr	r3, [r7, #8]	@ float
 10074 0438 4FF08F41 		mov	r1, #1199570944
 10075 043c 1846     		mov	r0, r3
 10076 043e FFF7FEFF 		bl	__aeabi_fmul
 10077 0442 0346     		mov	r3, r0
 10078 0444 1846     		mov	r0, r3
 10079 0446 FFF7FEFF 		bl	__aeabi_f2iz
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 232


 10080 044a 0146     		mov	r1, r0
 10081 044c B64A     		ldr	r2, .L490
 10082 044e 2346     		mov	r3, r4
 10083 0450 DB00     		lsls	r3, r3, #3
 10084 0452 1B1B     		subs	r3, r3, r4
 10085 0454 1B01     		lsls	r3, r3, #4
 10086 0456 1344     		add	r3, r3, r2
 10087 0458 C033     		adds	r3, r3, #192
 10088 045a 1960     		str	r1, [r3]
1367:..\src/command_processing.c ****                 
1368:..\src/command_processing.c ****                 aux_float = *((float *) &g_rx.buffer[3 + 8]);
 10089              		.loc 1 1368 0
 10090 045c B34B     		ldr	r3, .L490+4
 10091 045e 1B68     		ldr	r3, [r3]	@ float
 10092 0460 FB60     		str	r3, [r7, #12]	@ float
1369:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 10093              		.loc 1 1369 0
 10094 0462 0023     		movs	r3, #0
 10095 0464 BB75     		strb	r3, [r7, #22]
 10096 0466 0EE0     		b	.L428
 10097              	.L429:
1370:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 10098              		.loc 1 1370 0 discriminator 3
 10099 0468 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 10100 046a C3F10303 		rsb	r3, r3, #3
 10101 046e 07F10802 		add	r2, r7, #8
 10102 0472 1344     		add	r3, r3, r2
 10103 0474 BA7D     		ldrb	r2, [r7, #22]	@ zero_extendqisi2
 10104 0476 07F10C01 		add	r1, r7, #12
 10105 047a 0A44     		add	r2, r2, r1
 10106 047c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 10107 047e 1A70     		strb	r2, [r3]
1369:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 10108              		.loc 1 1369 0 discriminator 3
 10109 0480 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 10110 0482 0133     		adds	r3, r3, #1
 10111 0484 BB75     		strb	r3, [r7, #22]
 10112              	.L428:
1369:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 10113              		.loc 1 1369 0 is_stmt 0 discriminator 1
 10114 0486 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 10115 0488 032B     		cmp	r3, #3
 10116 048a EDD9     		bls	.L429
1371:..\src/command_processing.c ****                 }
1372:..\src/command_processing.c ****                 g_mem.motor[MOTOR_IDX].k_d_c = aux_float2 * 65536;
 10117              		.loc 1 1372 0 is_stmt 1
 10118 048c 3C7D     		ldrb	r4, [r7, #20]	@ zero_extendqisi2
 10119 048e BB68     		ldr	r3, [r7, #8]	@ float
 10120 0490 4FF08F41 		mov	r1, #1199570944
 10121 0494 1846     		mov	r0, r3
 10122 0496 FFF7FEFF 		bl	__aeabi_fmul
 10123 049a 0346     		mov	r3, r0
 10124 049c 1846     		mov	r0, r3
 10125 049e FFF7FEFF 		bl	__aeabi_f2iz
 10126 04a2 0146     		mov	r1, r0
 10127 04a4 A04A     		ldr	r2, .L490
 10128 04a6 2346     		mov	r3, r4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 233


 10129 04a8 DB00     		lsls	r3, r3, #3
 10130 04aa 1B1B     		subs	r3, r3, r4
 10131 04ac 1B01     		lsls	r3, r3, #4
 10132 04ae 1344     		add	r3, r3, r2
 10133 04b0 C433     		adds	r3, r3, #196
 10134 04b2 1960     		str	r1, [r3]
1373:..\src/command_processing.c ****             }
1374:..\src/command_processing.c ****             else {
1375:..\src/command_processing.c ****                 aux_float = *((float *) &g_rx.buffer[3]);
1376:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
1377:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
1378:..\src/command_processing.c ****                 }
1379:..\src/command_processing.c ****                 g_mem.motor[MOTOR_IDX].k_p_c_dl = aux_float2 * 65536;
1380:..\src/command_processing.c ****                 
1381:..\src/command_processing.c ****                 aux_float = *((float *) &g_rx.buffer[3 + 4]);
1382:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
1383:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
1384:..\src/command_processing.c ****                 }
1385:..\src/command_processing.c ****                 g_mem.motor[MOTOR_IDX].k_i_c_dl = aux_float2 * 65536;
1386:..\src/command_processing.c ****                 
1387:..\src/command_processing.c ****                 aux_float = *((float *) &g_rx.buffer[3 + 8]);
1388:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
1389:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
1390:..\src/command_processing.c ****                 }
1391:..\src/command_processing.c ****                 g_mem.motor[MOTOR_IDX].k_d_c_dl = aux_float2 * 65536;
1392:..\src/command_processing.c ****             }            
1393:..\src/command_processing.c ****             break;  
 10135              		.loc 1 1393 0
 10136 04b4 01F009B8 		b	.L422
 10137              	.L423:
1375:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 10138              		.loc 1 1375 0
 10139 04b8 9D4B     		ldr	r3, .L490+8
 10140 04ba 1B68     		ldr	r3, [r3]	@ float
 10141 04bc FB60     		str	r3, [r7, #12]	@ float
1376:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 10142              		.loc 1 1376 0
 10143 04be 0023     		movs	r3, #0
 10144 04c0 BB75     		strb	r3, [r7, #22]
 10145 04c2 0EE0     		b	.L431
 10146              	.L432:
1377:..\src/command_processing.c ****                 }
 10147              		.loc 1 1377 0 discriminator 3
 10148 04c4 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 10149 04c6 C3F10303 		rsb	r3, r3, #3
 10150 04ca 07F10802 		add	r2, r7, #8
 10151 04ce 1344     		add	r3, r3, r2
 10152 04d0 BA7D     		ldrb	r2, [r7, #22]	@ zero_extendqisi2
 10153 04d2 07F10C01 		add	r1, r7, #12
 10154 04d6 0A44     		add	r2, r2, r1
 10155 04d8 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 10156 04da 1A70     		strb	r2, [r3]
1376:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 10157              		.loc 1 1376 0 discriminator 3
 10158 04dc BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 10159 04de 0133     		adds	r3, r3, #1
 10160 04e0 BB75     		strb	r3, [r7, #22]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 234


 10161              	.L431:
1376:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 10162              		.loc 1 1376 0 is_stmt 0 discriminator 1
 10163 04e2 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 10164 04e4 032B     		cmp	r3, #3
 10165 04e6 EDD9     		bls	.L432
1379:..\src/command_processing.c ****                 
 10166              		.loc 1 1379 0 is_stmt 1
 10167 04e8 3C7D     		ldrb	r4, [r7, #20]	@ zero_extendqisi2
 10168 04ea BB68     		ldr	r3, [r7, #8]	@ float
 10169 04ec 4FF08F41 		mov	r1, #1199570944
 10170 04f0 1846     		mov	r0, r3
 10171 04f2 FFF7FEFF 		bl	__aeabi_fmul
 10172 04f6 0346     		mov	r3, r0
 10173 04f8 1846     		mov	r0, r3
 10174 04fa FFF7FEFF 		bl	__aeabi_f2iz
 10175 04fe 0146     		mov	r1, r0
 10176 0500 894A     		ldr	r2, .L490
 10177 0502 2346     		mov	r3, r4
 10178 0504 DB00     		lsls	r3, r3, #3
 10179 0506 1B1B     		subs	r3, r3, r4
 10180 0508 1B01     		lsls	r3, r3, #4
 10181 050a 1344     		add	r3, r3, r2
 10182 050c D433     		adds	r3, r3, #212
 10183 050e 1960     		str	r1, [r3]
1381:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 10184              		.loc 1 1381 0
 10185 0510 884B     		ldr	r3, .L490+12
 10186 0512 1B68     		ldr	r3, [r3]	@ float
 10187 0514 FB60     		str	r3, [r7, #12]	@ float
1382:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 10188              		.loc 1 1382 0
 10189 0516 0023     		movs	r3, #0
 10190 0518 BB75     		strb	r3, [r7, #22]
 10191 051a 0EE0     		b	.L433
 10192              	.L434:
1383:..\src/command_processing.c ****                 }
 10193              		.loc 1 1383 0 discriminator 3
 10194 051c BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 10195 051e C3F10303 		rsb	r3, r3, #3
 10196 0522 07F10802 		add	r2, r7, #8
 10197 0526 1344     		add	r3, r3, r2
 10198 0528 BA7D     		ldrb	r2, [r7, #22]	@ zero_extendqisi2
 10199 052a 07F10C01 		add	r1, r7, #12
 10200 052e 0A44     		add	r2, r2, r1
 10201 0530 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 10202 0532 1A70     		strb	r2, [r3]
1382:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 10203              		.loc 1 1382 0 discriminator 3
 10204 0534 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 10205 0536 0133     		adds	r3, r3, #1
 10206 0538 BB75     		strb	r3, [r7, #22]
 10207              	.L433:
1382:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 10208              		.loc 1 1382 0 is_stmt 0 discriminator 1
 10209 053a BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 10210 053c 032B     		cmp	r3, #3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 235


 10211 053e EDD9     		bls	.L434
1385:..\src/command_processing.c ****                 
 10212              		.loc 1 1385 0 is_stmt 1
 10213 0540 3C7D     		ldrb	r4, [r7, #20]	@ zero_extendqisi2
 10214 0542 BB68     		ldr	r3, [r7, #8]	@ float
 10215 0544 4FF08F41 		mov	r1, #1199570944
 10216 0548 1846     		mov	r0, r3
 10217 054a FFF7FEFF 		bl	__aeabi_fmul
 10218 054e 0346     		mov	r3, r0
 10219 0550 1846     		mov	r0, r3
 10220 0552 FFF7FEFF 		bl	__aeabi_f2iz
 10221 0556 0146     		mov	r1, r0
 10222 0558 734A     		ldr	r2, .L490
 10223 055a 2346     		mov	r3, r4
 10224 055c DB00     		lsls	r3, r3, #3
 10225 055e 1B1B     		subs	r3, r3, r4
 10226 0560 1B01     		lsls	r3, r3, #4
 10227 0562 1344     		add	r3, r3, r2
 10228 0564 D833     		adds	r3, r3, #216
 10229 0566 1960     		str	r1, [r3]
1387:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 10230              		.loc 1 1387 0
 10231 0568 704B     		ldr	r3, .L490+4
 10232 056a 1B68     		ldr	r3, [r3]	@ float
 10233 056c FB60     		str	r3, [r7, #12]	@ float
1388:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 10234              		.loc 1 1388 0
 10235 056e 0023     		movs	r3, #0
 10236 0570 BB75     		strb	r3, [r7, #22]
 10237 0572 0EE0     		b	.L435
 10238              	.L436:
1389:..\src/command_processing.c ****                 }
 10239              		.loc 1 1389 0 discriminator 3
 10240 0574 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 10241 0576 C3F10303 		rsb	r3, r3, #3
 10242 057a 07F10802 		add	r2, r7, #8
 10243 057e 1344     		add	r3, r3, r2
 10244 0580 BA7D     		ldrb	r2, [r7, #22]	@ zero_extendqisi2
 10245 0582 07F10C01 		add	r1, r7, #12
 10246 0586 0A44     		add	r2, r2, r1
 10247 0588 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 10248 058a 1A70     		strb	r2, [r3]
1388:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 10249              		.loc 1 1388 0 discriminator 3
 10250 058c BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 10251 058e 0133     		adds	r3, r3, #1
 10252 0590 BB75     		strb	r3, [r7, #22]
 10253              	.L435:
1388:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 10254              		.loc 1 1388 0 is_stmt 0 discriminator 1
 10255 0592 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 10256 0594 032B     		cmp	r3, #3
 10257 0596 EDD9     		bls	.L436
1391:..\src/command_processing.c ****             }            
 10258              		.loc 1 1391 0 is_stmt 1
 10259 0598 3C7D     		ldrb	r4, [r7, #20]	@ zero_extendqisi2
 10260 059a BB68     		ldr	r3, [r7, #8]	@ float
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 236


 10261 059c 4FF08F41 		mov	r1, #1199570944
 10262 05a0 1846     		mov	r0, r3
 10263 05a2 FFF7FEFF 		bl	__aeabi_fmul
 10264 05a6 0346     		mov	r3, r0
 10265 05a8 1846     		mov	r0, r3
 10266 05aa FFF7FEFF 		bl	__aeabi_f2iz
 10267 05ae 0146     		mov	r1, r0
 10268 05b0 5D4A     		ldr	r2, .L490
 10269 05b2 2346     		mov	r3, r4
 10270 05b4 DB00     		lsls	r3, r3, #3
 10271 05b6 1B1B     		subs	r3, r3, r4
 10272 05b8 1B01     		lsls	r3, r3, #4
 10273 05ba 1344     		add	r3, r3, r2
 10274 05bc DC33     		adds	r3, r3, #220
 10275 05be 1960     		str	r1, [r3]
 10276              		.loc 1 1393 0
 10277 05c0 00F083BF 		b	.L422
 10278              	.L392:
1394:..\src/command_processing.c ****             
1395:..\src/command_processing.c ****         case 5:         //Input mode
1396:..\src/command_processing.c ****             g_mem.motor[MOTOR_IDX].input_mode = g_rx.buffer[3];
 10279              		.loc 1 1396 0
 10280 05c4 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 10281 05c6 5C4B     		ldr	r3, .L490+16
 10282 05c8 D878     		ldrb	r0, [r3, #3]	@ zero_extendqisi2
 10283 05ca 5749     		ldr	r1, .L490
 10284 05cc 1346     		mov	r3, r2
 10285 05ce DB00     		lsls	r3, r3, #3
 10286 05d0 9B1A     		subs	r3, r3, r2
 10287 05d2 1B01     		lsls	r3, r3, #4
 10288 05d4 0B44     		add	r3, r3, r1
 10289 05d6 03F58773 		add	r3, r3, #270
 10290 05da 0246     		mov	r2, r0
 10291 05dc 1A70     		strb	r2, [r3]
1397:..\src/command_processing.c ****             
1398:..\src/command_processing.c ****             // Hold the actual position
1399:..\src/command_processing.c ****             g_refNew[MOTOR_IDX].pos = g_meas[g_mem.motor[MOTOR_IDX].encoder_line].pos[0];
 10292              		.loc 1 1399 0
 10293 05de 397D     		ldrb	r1, [r7, #20]	@ zero_extendqisi2
 10294 05e0 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 10295 05e2 5148     		ldr	r0, .L490
 10296 05e4 1346     		mov	r3, r2
 10297 05e6 DB00     		lsls	r3, r3, #3
 10298 05e8 9B1A     		subs	r3, r3, r2
 10299 05ea 1B01     		lsls	r3, r3, #4
 10300 05ec 0344     		add	r3, r3, r0
 10301 05ee 03F58873 		add	r3, r3, #272
 10302 05f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10303 05f4 1846     		mov	r0, r3
 10304 05f6 514A     		ldr	r2, .L490+20
 10305 05f8 3423     		movs	r3, #52
 10306 05fa 03FB00F3 		mul	r3, r3, r0
 10307 05fe 1344     		add	r3, r3, r2
 10308 0600 1A68     		ldr	r2, [r3]
 10309 0602 4F48     		ldr	r0, .L490+24
 10310 0604 0B01     		lsls	r3, r1, #4
 10311 0606 0344     		add	r3, r3, r0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 237


 10312 0608 1A60     		str	r2, [r3]
1400:..\src/command_processing.c ****             break;   
 10313              		.loc 1 1400 0
 10314 060a 00F05EBF 		b	.L422
 10315              	.L393:
1401:..\src/command_processing.c **** 
1402:..\src/command_processing.c ****         case 8:         //Measurement Offset
1403:..\src/command_processing.c ****             for(i = 0; i < NUM_OF_SENSORS; i++) {
 10316              		.loc 1 1403 0
 10317 060e 0023     		movs	r3, #0
 10318 0610 FB75     		strb	r3, [r7, #23]
 10319 0612 7EE0     		b	.L437
 10320              	.L438:
1404:..\src/command_processing.c ****                 g_mem.enc[g_mem.motor[MOTOR_IDX].encoder_line].m_off[i] = (int16)(g_rx.buffer[3 + i
 10321              		.loc 1 1404 0 discriminator 3
 10322 0614 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 10323 0616 4449     		ldr	r1, .L490
 10324 0618 1346     		mov	r3, r2
 10325 061a DB00     		lsls	r3, r3, #3
 10326 061c 9B1A     		subs	r3, r3, r2
 10327 061e 1B01     		lsls	r3, r3, #4
 10328 0620 0B44     		add	r3, r3, r1
 10329 0622 03F58873 		add	r3, r3, #272
 10330 0626 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10331 0628 1C46     		mov	r4, r3
 10332 062a FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 10333 062c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 10334 062e 5B00     		lsls	r3, r3, #1
 10335 0630 0333     		adds	r3, r3, #3
 10336 0632 4149     		ldr	r1, .L490+16
 10337 0634 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 10338 0636 1B02     		lsls	r3, r3, #8
 10339 0638 19B2     		sxth	r1, r3
 10340 063a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 10341 063c 0233     		adds	r3, r3, #2
 10342 063e 5B00     		lsls	r3, r3, #1
 10343 0640 3D48     		ldr	r0, .L490+16
 10344 0642 C35C     		ldrb	r3, [r0, r3]	@ zero_extendqisi2
 10345 0644 1BB2     		sxth	r3, r3
 10346 0646 0B43     		orrs	r3, r3, r1
 10347 0648 1BB2     		sxth	r3, r3
 10348 064a 1846     		mov	r0, r3
 10349 064c 3649     		ldr	r1, .L490
 10350 064e 2346     		mov	r3, r4
 10351 0650 5B00     		lsls	r3, r3, #1
 10352 0652 2344     		add	r3, r3, r4
 10353 0654 9B00     		lsls	r3, r3, #2
 10354 0656 1344     		add	r3, r3, r2
 10355 0658 6633     		adds	r3, r3, #102
 10356 065a 41F82300 		str	r0, [r1, r3, lsl #2]
1405:..\src/command_processing.c ****                 g_mem.enc[g_mem.motor[MOTOR_IDX].encoder_line].m_off[i] = g_mem.enc[g_mem.motor[MOT
 10357              		.loc 1 1405 0 discriminator 3
 10358 065e 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 10359 0660 3149     		ldr	r1, .L490
 10360 0662 1346     		mov	r3, r2
 10361 0664 DB00     		lsls	r3, r3, #3
 10362 0666 9B1A     		subs	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 238


 10363 0668 1B01     		lsls	r3, r3, #4
 10364 066a 0B44     		add	r3, r3, r1
 10365 066c 03F58873 		add	r3, r3, #272
 10366 0670 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10367 0672 1D46     		mov	r5, r3
 10368 0674 F97D     		ldrb	r1, [r7, #23]	@ zero_extendqisi2
 10369 0676 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 10370 0678 2B48     		ldr	r0, .L490
 10371 067a 1346     		mov	r3, r2
 10372 067c DB00     		lsls	r3, r3, #3
 10373 067e 9B1A     		subs	r3, r3, r2
 10374 0680 1B01     		lsls	r3, r3, #4
 10375 0682 0344     		add	r3, r3, r0
 10376 0684 03F58873 		add	r3, r3, #272
 10377 0688 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10378 068a 1C46     		mov	r4, r3
 10379 068c FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 10380 068e 2648     		ldr	r0, .L490
 10381 0690 2346     		mov	r3, r4
 10382 0692 5B00     		lsls	r3, r3, #1
 10383 0694 2344     		add	r3, r3, r4
 10384 0696 9B00     		lsls	r3, r3, #2
 10385 0698 1344     		add	r3, r3, r2
 10386 069a 6633     		adds	r3, r3, #102
 10387 069c 50F82300 		ldr	r0, [r0, r3, lsl #2]
 10388 06a0 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 10389 06a2 214C     		ldr	r4, .L490
 10390 06a4 1346     		mov	r3, r2
 10391 06a6 DB00     		lsls	r3, r3, #3
 10392 06a8 9B1A     		subs	r3, r3, r2
 10393 06aa 1B01     		lsls	r3, r3, #4
 10394 06ac 2344     		add	r3, r3, r4
 10395 06ae 03F58873 		add	r3, r3, #272
 10396 06b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10397 06b4 1E46     		mov	r6, r3
 10398 06b6 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 10399 06b8 1B4C     		ldr	r4, .L490
 10400 06ba 3346     		mov	r3, r6
 10401 06bc 5B00     		lsls	r3, r3, #1
 10402 06be 3344     		add	r3, r3, r6
 10403 06c0 1B01     		lsls	r3, r3, #4
 10404 06c2 2344     		add	r3, r3, r4
 10405 06c4 1344     		add	r3, r3, r2
 10406 06c6 03F29513 		addw	r3, r3, #405
 10407 06ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10408 06cc 00FA03F2 		lsl	r2, r0, r3
 10409 06d0 1548     		ldr	r0, .L490
 10410 06d2 2B46     		mov	r3, r5
 10411 06d4 5B00     		lsls	r3, r3, #1
 10412 06d6 2B44     		add	r3, r3, r5
 10413 06d8 9B00     		lsls	r3, r3, #2
 10414 06da 0B44     		add	r3, r3, r1
 10415 06dc 6633     		adds	r3, r3, #102
 10416 06de 40F82320 		str	r2, [r0, r3, lsl #2]
1406:..\src/command_processing.c **** 
1407:..\src/command_processing.c ****                 g_meas[g_mem.motor[MOTOR_IDX].encoder_line].rot[i] = 0;
 10417              		.loc 1 1407 0 discriminator 3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 239


 10418 06e2 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 10419 06e4 1049     		ldr	r1, .L490
 10420 06e6 1346     		mov	r3, r2
 10421 06e8 DB00     		lsls	r3, r3, #3
 10422 06ea 9B1A     		subs	r3, r3, r2
 10423 06ec 1B01     		lsls	r3, r3, #4
 10424 06ee 0B44     		add	r3, r3, r1
 10425 06f0 03F58873 		add	r3, r3, #272
 10426 06f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10427 06f6 1846     		mov	r0, r3
 10428 06f8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 10429 06fa 1049     		ldr	r1, .L490+20
 10430 06fc 3422     		movs	r2, #52
 10431 06fe 02FB00F2 		mul	r2, r2, r0
 10432 0702 0A44     		add	r2, r2, r1
 10433 0704 1344     		add	r3, r3, r2
 10434 0706 1833     		adds	r3, r3, #24
 10435 0708 0022     		movs	r2, #0
 10436 070a 1A70     		strb	r2, [r3]
1403:..\src/command_processing.c ****                 g_mem.enc[g_mem.motor[MOTOR_IDX].encoder_line].m_off[i] = (int16)(g_rx.buffer[3 + i
 10437              		.loc 1 1403 0 discriminator 3
 10438 070c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 10439 070e 0133     		adds	r3, r3, #1
 10440 0710 FB75     		strb	r3, [r7, #23]
 10441              	.L437:
1403:..\src/command_processing.c ****                 g_mem.enc[g_mem.motor[MOTOR_IDX].encoder_line].m_off[i] = (int16)(g_rx.buffer[3 + i
 10442              		.loc 1 1403 0 is_stmt 0 discriminator 1
 10443 0712 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 10444 0714 022B     		cmp	r3, #2
 10445 0716 7FF67DAF 		bls	.L438
1408:..\src/command_processing.c ****             }
1409:..\src/command_processing.c ****             reset_last_value_flag[MOTOR_IDX] = 1;
 10446              		.loc 1 1409 0 is_stmt 1
 10447 071a 3B7D     		ldrb	r3, [r7, #20]	@ zero_extendqisi2
 10448 071c 094A     		ldr	r2, .L490+28
 10449 071e 0121     		movs	r1, #1
 10450 0720 D154     		strb	r1, [r2, r3]
1410:..\src/command_processing.c ****             break;
 10451              		.loc 1 1410 0
 10452 0722 00F0D2BE 		b	.L422
 10453              	.L491:
 10454 0726 00BF     		.align	2
 10455              	.L490:
 10456 0728 00000000 		.word	g_mem
 10457 072c 0B000000 		.word	g_rx+11
 10458 0730 03000000 		.word	g_rx+3
 10459 0734 07000000 		.word	g_rx+7
 10460 0738 00000000 		.word	g_rx
 10461 073c 00000000 		.word	g_meas
 10462 0740 00000000 		.word	g_refNew
 10463 0744 00000000 		.word	reset_last_value_flag
 10464              	.L394:
1411:..\src/command_processing.c ****     
1412:..\src/command_processing.c ****         case 11:        //Position limits
1413:..\src/command_processing.c ****             g_mem.motor[MOTOR_IDX].pos_lim_inf = (int32)(g_rx.buffer[3]<<24 | g_rx.buffer[4]<<16 | 
 10465              		.loc 1 1413 0
 10466 0748 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 240


 10467 074a C14B     		ldr	r3, .L492
 10468 074c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 10469 074e 1906     		lsls	r1, r3, #24
 10470 0750 BF4B     		ldr	r3, .L492
 10471 0752 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 10472 0754 1B04     		lsls	r3, r3, #16
 10473 0756 1943     		orrs	r1, r1, r3
 10474 0758 BD4B     		ldr	r3, .L492
 10475 075a 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 10476 075c 1B02     		lsls	r3, r3, #8
 10477 075e 0B43     		orrs	r3, r3, r1
 10478 0760 BB49     		ldr	r1, .L492
 10479 0762 8979     		ldrb	r1, [r1, #6]	@ zero_extendqisi2
 10480 0764 1943     		orrs	r1, r1, r3
 10481 0766 BB48     		ldr	r0, .L492+4
 10482 0768 1346     		mov	r3, r2
 10483 076a DB00     		lsls	r3, r3, #3
 10484 076c 9B1A     		subs	r3, r3, r2
 10485 076e 1B01     		lsls	r3, r3, #4
 10486 0770 0344     		add	r3, r3, r0
 10487 0772 E433     		adds	r3, r3, #228
 10488 0774 1960     		str	r1, [r3]
1414:..\src/command_processing.c ****             g_mem.motor[MOTOR_IDX].pos_lim_sup = (int32)(g_rx.buffer[7]<<24 | g_rx.buffer[8]<<16 | 
 10489              		.loc 1 1414 0
 10490 0776 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 10491 0778 B54B     		ldr	r3, .L492
 10492 077a DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 10493 077c 1906     		lsls	r1, r3, #24
 10494 077e B44B     		ldr	r3, .L492
 10495 0780 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 10496 0782 1B04     		lsls	r3, r3, #16
 10497 0784 1943     		orrs	r1, r1, r3
 10498 0786 B24B     		ldr	r3, .L492
 10499 0788 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 10500 078a 1B02     		lsls	r3, r3, #8
 10501 078c 0B43     		orrs	r3, r3, r1
 10502 078e B049     		ldr	r1, .L492
 10503 0790 897A     		ldrb	r1, [r1, #10]	@ zero_extendqisi2
 10504 0792 1943     		orrs	r1, r1, r3
 10505 0794 AF48     		ldr	r0, .L492+4
 10506 0796 1346     		mov	r3, r2
 10507 0798 DB00     		lsls	r3, r3, #3
 10508 079a 9B1A     		subs	r3, r3, r2
 10509 079c 1B01     		lsls	r3, r3, #4
 10510 079e 0344     		add	r3, r3, r0
 10511 07a0 E833     		adds	r3, r3, #232
 10512 07a2 1960     		str	r1, [r3]
1415:..\src/command_processing.c **** 
1416:..\src/command_processing.c ****             g_mem.motor[MOTOR_IDX].pos_lim_inf = g_mem.motor[MOTOR_IDX].pos_lim_inf << g_mem.enc[g_
 10513              		.loc 1 1416 0
 10514 07a4 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 10515 07a6 397D     		ldrb	r1, [r7, #20]	@ zero_extendqisi2
 10516 07a8 AA48     		ldr	r0, .L492+4
 10517 07aa 0B46     		mov	r3, r1
 10518 07ac DB00     		lsls	r3, r3, #3
 10519 07ae 5B1A     		subs	r3, r3, r1
 10520 07b0 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 241


 10521 07b2 0344     		add	r3, r3, r0
 10522 07b4 E433     		adds	r3, r3, #228
 10523 07b6 1868     		ldr	r0, [r3]
 10524 07b8 397D     		ldrb	r1, [r7, #20]	@ zero_extendqisi2
 10525 07ba A64C     		ldr	r4, .L492+4
 10526 07bc 0B46     		mov	r3, r1
 10527 07be DB00     		lsls	r3, r3, #3
 10528 07c0 5B1A     		subs	r3, r3, r1
 10529 07c2 1B01     		lsls	r3, r3, #4
 10530 07c4 2344     		add	r3, r3, r4
 10531 07c6 03F58873 		add	r3, r3, #272
 10532 07ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10533 07cc 1C46     		mov	r4, r3
 10534 07ce A149     		ldr	r1, .L492+4
 10535 07d0 2346     		mov	r3, r4
 10536 07d2 5B00     		lsls	r3, r3, #1
 10537 07d4 2344     		add	r3, r3, r4
 10538 07d6 1B01     		lsls	r3, r3, #4
 10539 07d8 0B44     		add	r3, r3, r1
 10540 07da 03F29513 		addw	r3, r3, #405
 10541 07de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10542 07e0 00FA03F1 		lsl	r1, r0, r3
 10543 07e4 9B48     		ldr	r0, .L492+4
 10544 07e6 1346     		mov	r3, r2
 10545 07e8 DB00     		lsls	r3, r3, #3
 10546 07ea 9B1A     		subs	r3, r3, r2
 10547 07ec 1B01     		lsls	r3, r3, #4
 10548 07ee 0344     		add	r3, r3, r0
 10549 07f0 E433     		adds	r3, r3, #228
 10550 07f2 1960     		str	r1, [r3]
1417:..\src/command_processing.c ****             g_mem.motor[MOTOR_IDX].pos_lim_sup = g_mem.motor[MOTOR_IDX].pos_lim_sup << g_mem.enc[g_
 10551              		.loc 1 1417 0
 10552 07f4 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 10553 07f6 397D     		ldrb	r1, [r7, #20]	@ zero_extendqisi2
 10554 07f8 9648     		ldr	r0, .L492+4
 10555 07fa 0B46     		mov	r3, r1
 10556 07fc DB00     		lsls	r3, r3, #3
 10557 07fe 5B1A     		subs	r3, r3, r1
 10558 0800 1B01     		lsls	r3, r3, #4
 10559 0802 0344     		add	r3, r3, r0
 10560 0804 E833     		adds	r3, r3, #232
 10561 0806 1868     		ldr	r0, [r3]
 10562 0808 397D     		ldrb	r1, [r7, #20]	@ zero_extendqisi2
 10563 080a 924C     		ldr	r4, .L492+4
 10564 080c 0B46     		mov	r3, r1
 10565 080e DB00     		lsls	r3, r3, #3
 10566 0810 5B1A     		subs	r3, r3, r1
 10567 0812 1B01     		lsls	r3, r3, #4
 10568 0814 2344     		add	r3, r3, r4
 10569 0816 03F58873 		add	r3, r3, #272
 10570 081a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10571 081c 1C46     		mov	r4, r3
 10572 081e 8D49     		ldr	r1, .L492+4
 10573 0820 2346     		mov	r3, r4
 10574 0822 5B00     		lsls	r3, r3, #1
 10575 0824 2344     		add	r3, r3, r4
 10576 0826 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 242


 10577 0828 0B44     		add	r3, r3, r1
 10578 082a 03F29513 		addw	r3, r3, #405
 10579 082e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10580 0830 00FA03F1 		lsl	r1, r0, r3
 10581 0834 8748     		ldr	r0, .L492+4
 10582 0836 1346     		mov	r3, r2
 10583 0838 DB00     		lsls	r3, r3, #3
 10584 083a 9B1A     		subs	r3, r3, r2
 10585 083c 1B01     		lsls	r3, r3, #4
 10586 083e 0344     		add	r3, r3, r0
 10587 0840 E833     		adds	r3, r3, #232
 10588 0842 1960     		str	r1, [r3]
1418:..\src/command_processing.c ****             break;            
 10589              		.loc 1 1418 0
 10590 0844 00F041BE 		b	.L422
 10591              	.L395:
1419:..\src/command_processing.c **** 
1420:..\src/command_processing.c ****         case 23:        //Rest Position
1421:..\src/command_processing.c ****             g_mem.SH.rest_pos = (int32)(g_rx.buffer[3]<<24 | g_rx.buffer[4]<<16 | g_rx.buffer[5]<<8
 10592              		.loc 1 1421 0
 10593 0848 814B     		ldr	r3, .L492
 10594 084a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 10595 084c 1A06     		lsls	r2, r3, #24
 10596 084e 804B     		ldr	r3, .L492
 10597 0850 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 10598 0852 1B04     		lsls	r3, r3, #16
 10599 0854 1A43     		orrs	r2, r2, r3
 10600 0856 7E4B     		ldr	r3, .L492
 10601 0858 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 10602 085a 1B02     		lsls	r3, r3, #8
 10603 085c 1343     		orrs	r3, r3, r2
 10604 085e 7C4A     		ldr	r2, .L492
 10605 0860 9279     		ldrb	r2, [r2, #6]	@ zero_extendqisi2
 10606 0862 1343     		orrs	r3, r3, r2
 10607 0864 7B4A     		ldr	r2, .L492+4
 10608 0866 C2F8A032 		str	r3, [r2, #672]
1422:..\src/command_processing.c ****             g_mem.SH.rest_pos = g_mem.SH.rest_pos << g_mem.enc[g_mem.motor[MOTOR_IDX].encoder_line]
 10609              		.loc 1 1422 0
 10610 086a 7A4B     		ldr	r3, .L492+4
 10611 086c D3F8A012 		ldr	r1, [r3, #672]
 10612 0870 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 10613 0872 7848     		ldr	r0, .L492+4
 10614 0874 1346     		mov	r3, r2
 10615 0876 DB00     		lsls	r3, r3, #3
 10616 0878 9B1A     		subs	r3, r3, r2
 10617 087a 1B01     		lsls	r3, r3, #4
 10618 087c 0344     		add	r3, r3, r0
 10619 087e 03F58873 		add	r3, r3, #272
 10620 0882 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10621 0884 1846     		mov	r0, r3
 10622 0886 734A     		ldr	r2, .L492+4
 10623 0888 0346     		mov	r3, r0
 10624 088a 5B00     		lsls	r3, r3, #1
 10625 088c 0344     		add	r3, r3, r0
 10626 088e 1B01     		lsls	r3, r3, #4
 10627 0890 1344     		add	r3, r3, r2
 10628 0892 03F29513 		addw	r3, r3, #405
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 243


 10629 0896 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10630 0898 01FA03F3 		lsl	r3, r1, r3
 10631 089c 6D4A     		ldr	r2, .L492+4
 10632 089e C2F8A032 		str	r3, [r2, #672]
1423:..\src/command_processing.c ****             break; 
 10633              		.loc 1 1423 0
 10634 08a2 00F012BE 		b	.L422
 10635              	.L396:
1424:..\src/command_processing.c ****             
1425:..\src/command_processing.c ****         case 24:        //Rest Position Time Delay
1426:..\src/command_processing.c ****            g_mem.SH.rest_delay = (int32)(g_rx.buffer[3]<<24 | g_rx.buffer[4]<<16 | g_rx.buffer[5]<<
 10636              		.loc 1 1426 0
 10637 08a6 6A4B     		ldr	r3, .L492
 10638 08a8 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 10639 08aa 1A06     		lsls	r2, r3, #24
 10640 08ac 684B     		ldr	r3, .L492
 10641 08ae 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 10642 08b0 1B04     		lsls	r3, r3, #16
 10643 08b2 1A43     		orrs	r2, r2, r3
 10644 08b4 664B     		ldr	r3, .L492
 10645 08b6 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 10646 08b8 1B02     		lsls	r3, r3, #8
 10647 08ba 1343     		orrs	r3, r3, r2
 10648 08bc 644A     		ldr	r2, .L492
 10649 08be 9279     		ldrb	r2, [r2, #6]	@ zero_extendqisi2
 10650 08c0 1343     		orrs	r3, r3, r2
 10651 08c2 644A     		ldr	r2, .L492+4
 10652 08c4 C2F8A432 		str	r3, [r2, #676]
1427:..\src/command_processing.c **** 		   if (g_mem.SH.rest_delay < 10) g_mem.SH.rest_delay = 10;
 10653              		.loc 1 1427 0
 10654 08c8 624B     		ldr	r3, .L492+4
 10655 08ca D3F8A432 		ldr	r3, [r3, #676]
 10656 08ce 092B     		cmp	r3, #9
 10657 08d0 00F3F285 		bgt	.L483
 10658              		.loc 1 1427 0 is_stmt 0 discriminator 1
 10659 08d4 5F4B     		ldr	r3, .L492+4
 10660 08d6 0A22     		movs	r2, #10
 10661 08d8 C3F8A422 		str	r2, [r3, #676]
1428:..\src/command_processing.c ****            break; 
 10662              		.loc 1 1428 0 is_stmt 1 discriminator 1
 10663 08dc 00F0ECBD 		b	.L483
 10664              	.L397:
1429:..\src/command_processing.c ****             
1430:..\src/command_processing.c ****         case 28:        //Right/Left hand flag
1431:..\src/command_processing.c ****             aux_uchar = *((uint8*) &g_rx.buffer[3]);
 10665              		.loc 1 1431 0
 10666 08e0 5B4B     		ldr	r3, .L492
 10667 08e2 DB78     		ldrb	r3, [r3, #3]
 10668 08e4 BB74     		strb	r3, [r7, #18]
1432:..\src/command_processing.c ****             if (aux_uchar) {    // 1
 10669              		.loc 1 1432 0
 10670 08e6 BB7C     		ldrb	r3, [r7, #18]	@ zero_extendqisi2
 10671 08e8 002B     		cmp	r3, #0
 10672 08ea 04D0     		beq	.L440
1433:..\src/command_processing.c ****                 g_mem.dev.right_left = LEFT_HAND;
 10673              		.loc 1 1433 0
 10674 08ec 594B     		ldr	r3, .L492+4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 244


 10675 08ee 0122     		movs	r2, #1
 10676 08f0 83F8A720 		strb	r2, [r3, #167]
 10677 08f4 03E0     		b	.L441
 10678              	.L440:
1434:..\src/command_processing.c ****             } else {            // 0
1435:..\src/command_processing.c ****                 g_mem.dev.right_left = RIGHT_HAND;
 10679              		.loc 1 1435 0
 10680 08f6 574B     		ldr	r3, .L492+4
 10681 08f8 0022     		movs	r2, #0
 10682 08fa 83F8A720 		strb	r2, [r3, #167]
 10683              	.L441:
1436:..\src/command_processing.c ****             }
1437:..\src/command_processing.c **** 			reset_last_value_flag[MOTOR_IDX] = 1;
 10684              		.loc 1 1437 0
 10685 08fe 3B7D     		ldrb	r3, [r7, #20]	@ zero_extendqisi2
 10686 0900 554A     		ldr	r2, .L492+8
 10687 0902 0121     		movs	r1, #1
 10688 0904 D154     		strb	r1, [r2, r3]
1438:..\src/command_processing.c **** 
1439:..\src/command_processing.c ****             if (g_mem.dev.dev_type == SOFTHAND_PRO){    
 10689              		.loc 1 1439 0
 10690 0906 534B     		ldr	r3, .L492+4
 10691 0908 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 10692 090c 002B     		cmp	r3, #0
 10693 090e 40F0D585 		bne	.L484
1440:..\src/command_processing.c ****                 // Change also default encoder line (only with SoftHand FW)
1441:..\src/command_processing.c ****                 g_mem.motor[MOTOR_IDX].encoder_line = g_mem.dev.right_left;
 10694              		.loc 1 1441 0
 10695 0912 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 10696 0914 4F4B     		ldr	r3, .L492+4
 10697 0916 93F8A700 		ldrb	r0, [r3, #167]	@ zero_extendqisi2
 10698 091a 4E49     		ldr	r1, .L492+4
 10699 091c 1346     		mov	r3, r2
 10700 091e DB00     		lsls	r3, r3, #3
 10701 0920 9B1A     		subs	r3, r3, r2
 10702 0922 1B01     		lsls	r3, r3, #4
 10703 0924 0B44     		add	r3, r3, r1
 10704 0926 03F58873 		add	r3, r3, #272
 10705 092a 0246     		mov	r2, r0
 10706 092c 1A70     		strb	r2, [r3]
1442:..\src/command_processing.c ****                 
1443:..\src/command_processing.c ****                 // Change also gears parameters
1444:..\src/command_processing.c ****                 g_mem.enc[g_mem.motor[MOTOR_IDX].encoder_line].double_encoder_on_off = TRUE;
 10707              		.loc 1 1444 0
 10708 092e 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 10709 0930 4849     		ldr	r1, .L492+4
 10710 0932 1346     		mov	r3, r2
 10711 0934 DB00     		lsls	r3, r3, #3
 10712 0936 9B1A     		subs	r3, r3, r2
 10713 0938 1B01     		lsls	r3, r3, #4
 10714 093a 0B44     		add	r3, r3, r1
 10715 093c 03F58873 		add	r3, r3, #272
 10716 0940 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10717 0942 1946     		mov	r1, r3
 10718 0944 434A     		ldr	r2, .L492+4
 10719 0946 0B46     		mov	r3, r1
 10720 0948 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 245


 10721 094a 0B44     		add	r3, r3, r1
 10722 094c 1B01     		lsls	r3, r3, #4
 10723 094e 1344     		add	r3, r3, r2
 10724 0950 03F5D873 		add	r3, r3, #432
 10725 0954 0122     		movs	r2, #1
 10726 0956 1A70     		strb	r2, [r3]
1445:..\src/command_processing.c ****                 g_mem.enc[g_mem.motor[MOTOR_IDX].encoder_line].gears_params[0] = SH_N1;
 10727              		.loc 1 1445 0
 10728 0958 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 10729 095a 3E49     		ldr	r1, .L492+4
 10730 095c 1346     		mov	r3, r2
 10731 095e DB00     		lsls	r3, r3, #3
 10732 0960 9B1A     		subs	r3, r3, r2
 10733 0962 1B01     		lsls	r3, r3, #4
 10734 0964 0B44     		add	r3, r3, r1
 10735 0966 03F58873 		add	r3, r3, #272
 10736 096a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10737 096c 1946     		mov	r1, r3
 10738 096e 394A     		ldr	r2, .L492+4
 10739 0970 0B46     		mov	r3, r1
 10740 0972 5B00     		lsls	r3, r3, #1
 10741 0974 0B44     		add	r3, r3, r1
 10742 0976 1B01     		lsls	r3, r3, #4
 10743 0978 1344     		add	r3, r3, r2
 10744 097a 03F2B513 		addw	r3, r3, #437
 10745 097e 2322     		movs	r2, #35
 10746 0980 1A70     		strb	r2, [r3]
1446:..\src/command_processing.c ****                 g_mem.enc[g_mem.motor[MOTOR_IDX].encoder_line].gears_params[1] = SH_N2;
 10747              		.loc 1 1446 0
 10748 0982 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 10749 0984 3349     		ldr	r1, .L492+4
 10750 0986 1346     		mov	r3, r2
 10751 0988 DB00     		lsls	r3, r3, #3
 10752 098a 9B1A     		subs	r3, r3, r2
 10753 098c 1B01     		lsls	r3, r3, #4
 10754 098e 0B44     		add	r3, r3, r1
 10755 0990 03F58873 		add	r3, r3, #272
 10756 0994 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10757 0996 1946     		mov	r1, r3
 10758 0998 2E4A     		ldr	r2, .L492+4
 10759 099a 0B46     		mov	r3, r1
 10760 099c 5B00     		lsls	r3, r3, #1
 10761 099e 0B44     		add	r3, r3, r1
 10762 09a0 1B01     		lsls	r3, r3, #4
 10763 09a2 1344     		add	r3, r3, r2
 10764 09a4 03F5DB73 		add	r3, r3, #438
 10765 09a8 0322     		movs	r2, #3
 10766 09aa 1A70     		strb	r2, [r3]
1447:..\src/command_processing.c ****                 g_mem.enc[g_mem.motor[MOTOR_IDX].encoder_line].gears_params[2] = SH_I1;
 10767              		.loc 1 1447 0
 10768 09ac 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 10769 09ae 2949     		ldr	r1, .L492+4
 10770 09b0 1346     		mov	r3, r2
 10771 09b2 DB00     		lsls	r3, r3, #3
 10772 09b4 9B1A     		subs	r3, r3, r2
 10773 09b6 1B01     		lsls	r3, r3, #4
 10774 09b8 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 246


 10775 09ba 03F58873 		add	r3, r3, #272
 10776 09be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10777 09c0 1946     		mov	r1, r3
 10778 09c2 244A     		ldr	r2, .L492+4
 10779 09c4 0B46     		mov	r3, r1
 10780 09c6 5B00     		lsls	r3, r3, #1
 10781 09c8 0B44     		add	r3, r3, r1
 10782 09ca 1B01     		lsls	r3, r3, #4
 10783 09cc 1344     		add	r3, r3, r2
 10784 09ce 03F2B713 		addw	r3, r3, #439
 10785 09d2 FF22     		movs	r2, #255
 10786 09d4 1A70     		strb	r2, [r3]
1448:..\src/command_processing.c ****                 
1449:..\src/command_processing.c ****                 // Get CS0 encoder line for RIGHT HAND and CS1 line for LEFT HAND as default
1450:..\src/command_processing.c ****                 g_mem.motor[MOTOR_IDX].pwm_rate_limiter = PWM_RATE_LIMITER_MAX;
 10787              		.loc 1 1450 0
 10788 09d6 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 10789 09d8 1E49     		ldr	r1, .L492+4
 10790 09da 1346     		mov	r3, r2
 10791 09dc DB00     		lsls	r3, r3, #3
 10792 09de 9B1A     		subs	r3, r3, r2
 10793 09e0 1B01     		lsls	r3, r3, #4
 10794 09e2 0B44     		add	r3, r3, r1
 10795 09e4 03F21113 		addw	r3, r3, #273
 10796 09e8 0122     		movs	r2, #1
 10797 09ea 1A70     		strb	r2, [r3]
1451:..\src/command_processing.c ****                 g_mem.motor[MOTOR_IDX].not_revers_motor_flag = TRUE;       // SoftHand not reversib
 10798              		.loc 1 1451 0
 10799 09ec 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 10800 09ee 1949     		ldr	r1, .L492+4
 10801 09f0 1346     		mov	r3, r2
 10802 09f2 DB00     		lsls	r3, r3, #3
 10803 09f4 9B1A     		subs	r3, r3, r2
 10804 09f6 1B01     		lsls	r3, r3, #4
 10805 09f8 0B44     		add	r3, r3, r1
 10806 09fa 03F58973 		add	r3, r3, #274
 10807 09fe 0122     		movs	r2, #1
 10808 0a00 1A70     		strb	r2, [r3]
1452:..\src/command_processing.c ****                 g_mem.motor[MOTOR_IDX].pos_lim_inf = 0;
 10809              		.loc 1 1452 0
 10810 0a02 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 10811 0a04 1349     		ldr	r1, .L492+4
 10812 0a06 1346     		mov	r3, r2
 10813 0a08 DB00     		lsls	r3, r3, #3
 10814 0a0a 9B1A     		subs	r3, r3, r2
 10815 0a0c 1B01     		lsls	r3, r3, #4
 10816 0a0e 0B44     		add	r3, r3, r1
 10817 0a10 E433     		adds	r3, r3, #228
 10818 0a12 0022     		movs	r2, #0
 10819 0a14 1A60     		str	r2, [r3]
1453:..\src/command_processing.c ****                 g_mem.motor[MOTOR_IDX].pos_lim_sup = (int32)16000 << g_mem.enc[g_mem.motor[0].encod
 10820              		.loc 1 1453 0
 10821 0a16 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 10822 0a18 0E4B     		ldr	r3, .L492+4
 10823 0a1a 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 10824 0a1e 1846     		mov	r0, r3
 10825 0a20 0C49     		ldr	r1, .L492+4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 247


 10826 0a22 0346     		mov	r3, r0
 10827 0a24 5B00     		lsls	r3, r3, #1
 10828 0a26 0344     		add	r3, r3, r0
 10829 0a28 1B01     		lsls	r3, r3, #4
 10830 0a2a 0B44     		add	r3, r3, r1
 10831 0a2c 03F29513 		addw	r3, r3, #405
 10832 0a30 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10833 0a32 1946     		mov	r1, r3
 10834 0a34 4FF47A53 		mov	r3, #16000
 10835 0a38 03FA01F1 		lsl	r1, r3, r1
 10836 0a3c 0548     		ldr	r0, .L492+4
 10837 0a3e 1346     		mov	r3, r2
 10838 0a40 DB00     		lsls	r3, r3, #3
 10839 0a42 9B1A     		subs	r3, r3, r2
 10840 0a44 1B01     		lsls	r3, r3, #4
 10841 0a46 0344     		add	r3, r3, r0
 10842 0a48 E833     		adds	r3, r3, #232
 10843 0a4a 1960     		str	r1, [r3]
1454:..\src/command_processing.c ****             }    
1455:..\src/command_processing.c **** 
1456:..\src/command_processing.c ****             break; 
 10844              		.loc 1 1456 0
 10845 0a4c 00F036BD 		b	.L484
 10846              	.L493:
 10847              		.align	2
 10848              	.L492:
 10849 0a50 00000000 		.word	g_rx
 10850 0a54 00000000 		.word	g_mem
 10851 0a58 00000000 		.word	reset_last_value_flag
 10852              	.L398:
1457:..\src/command_processing.c **** 
1458:..\src/command_processing.c ****         case 31:        //Reset counters - uint8
1459:..\src/command_processing.c ****             aux_uchar = *((uint8*) &g_rx.buffer[3]);
 10853              		.loc 1 1459 0
 10854 0a5c B94B     		ldr	r3, .L494
 10855 0a5e DB78     		ldrb	r3, [r3, #3]
 10856 0a60 BB74     		strb	r3, [r7, #18]
1460:..\src/command_processing.c ****             if (aux_uchar) {
 10857              		.loc 1 1460 0
 10858 0a62 BB7C     		ldrb	r3, [r7, #18]	@ zero_extendqisi2
 10859 0a64 002B     		cmp	r3, #0
 10860 0a66 05D0     		beq	.L443
1461:..\src/command_processing.c ****                 reset_counters();
 10861              		.loc 1 1461 0
 10862 0a68 FFF7FEFF 		bl	reset_counters
1462:..\src/command_processing.c ****                 g_mem.dev.reset_counters = FALSE;
 10863              		.loc 1 1462 0
 10864 0a6c B64B     		ldr	r3, .L494+4
 10865 0a6e 0022     		movs	r2, #0
 10866 0a70 83F8A820 		strb	r2, [r3, #168]
 10867              	.L443:
1463:..\src/command_processing.c ****             }
1464:..\src/command_processing.c ****             
1465:..\src/command_processing.c ****             if (c_mem.exp.read_exp_port_flag == EXP_SD_RTC) {
 10868              		.loc 1 1465 0
 10869 0a74 B54B     		ldr	r3, .L494+8
 10870 0a76 93F82632 		ldrb	r3, [r3, #550]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 248


 10871 0a7a 012B     		cmp	r3, #1
 10872 0a7c 40F02085 		bne	.L485
1466:..\src/command_processing.c ****                 // Set date of maintenance from RTC
1467:..\src/command_processing.c ****                 aux_uchar = DS1302_read(DS1302_DATE_RD);
 10873              		.loc 1 1467 0
 10874 0a80 8720     		movs	r0, #135
 10875 0a82 FFF7FEFF 		bl	DS1302_read
 10876 0a86 0346     		mov	r3, r0
 10877 0a88 BB74     		strb	r3, [r7, #18]
1468:..\src/command_processing.c ****                 g_mem.dev.stats_period_begin_date[0] = (aux_uchar/16) * 10 + aux_uchar%16;    //day
 10878              		.loc 1 1468 0
 10879 0a8a BB7C     		ldrb	r3, [r7, #18]	@ zero_extendqisi2
 10880 0a8c 1B09     		lsrs	r3, r3, #4
 10881 0a8e DBB2     		uxtb	r3, r3
 10882 0a90 1A46     		mov	r2, r3
 10883 0a92 9200     		lsls	r2, r2, #2
 10884 0a94 1344     		add	r3, r3, r2
 10885 0a96 5B00     		lsls	r3, r3, #1
 10886 0a98 DAB2     		uxtb	r2, r3
 10887 0a9a BB7C     		ldrb	r3, [r7, #18]
 10888 0a9c 03F00F03 		and	r3, r3, #15
 10889 0aa0 DBB2     		uxtb	r3, r3
 10890 0aa2 1344     		add	r3, r3, r2
 10891 0aa4 DAB2     		uxtb	r2, r3
 10892 0aa6 A84B     		ldr	r3, .L494+4
 10893 0aa8 83F8A420 		strb	r2, [r3, #164]
1469:..\src/command_processing.c ****                 aux_uchar = DS1302_read(DS1302_MONTH_RD);
 10894              		.loc 1 1469 0
 10895 0aac 8920     		movs	r0, #137
 10896 0aae FFF7FEFF 		bl	DS1302_read
 10897 0ab2 0346     		mov	r3, r0
 10898 0ab4 BB74     		strb	r3, [r7, #18]
1470:..\src/command_processing.c ****                 g_mem.dev.stats_period_begin_date[1] = (aux_uchar/16) * 10 + aux_uchar%16;    // mo
 10899              		.loc 1 1470 0
 10900 0ab6 BB7C     		ldrb	r3, [r7, #18]	@ zero_extendqisi2
 10901 0ab8 1B09     		lsrs	r3, r3, #4
 10902 0aba DBB2     		uxtb	r3, r3
 10903 0abc 1A46     		mov	r2, r3
 10904 0abe 9200     		lsls	r2, r2, #2
 10905 0ac0 1344     		add	r3, r3, r2
 10906 0ac2 5B00     		lsls	r3, r3, #1
 10907 0ac4 DAB2     		uxtb	r2, r3
 10908 0ac6 BB7C     		ldrb	r3, [r7, #18]
 10909 0ac8 03F00F03 		and	r3, r3, #15
 10910 0acc DBB2     		uxtb	r3, r3
 10911 0ace 1344     		add	r3, r3, r2
 10912 0ad0 DAB2     		uxtb	r2, r3
 10913 0ad2 9D4B     		ldr	r3, .L494+4
 10914 0ad4 83F8A520 		strb	r2, [r3, #165]
1471:..\src/command_processing.c ****                 aux_uchar = DS1302_read(DS1302_YEAR_RD);
 10915              		.loc 1 1471 0
 10916 0ad8 8D20     		movs	r0, #141
 10917 0ada FFF7FEFF 		bl	DS1302_read
 10918 0ade 0346     		mov	r3, r0
 10919 0ae0 BB74     		strb	r3, [r7, #18]
1472:..\src/command_processing.c ****                 g_mem.dev.stats_period_begin_date[2] = (aux_uchar/16) * 10 + aux_uchar%16;         
 10920              		.loc 1 1472 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 249


 10921 0ae2 BB7C     		ldrb	r3, [r7, #18]	@ zero_extendqisi2
 10922 0ae4 1B09     		lsrs	r3, r3, #4
 10923 0ae6 DBB2     		uxtb	r3, r3
 10924 0ae8 1A46     		mov	r2, r3
 10925 0aea 9200     		lsls	r2, r2, #2
 10926 0aec 1344     		add	r3, r3, r2
 10927 0aee 5B00     		lsls	r3, r3, #1
 10928 0af0 DAB2     		uxtb	r2, r3
 10929 0af2 BB7C     		ldrb	r3, [r7, #18]
 10930 0af4 03F00F03 		and	r3, r3, #15
 10931 0af8 DBB2     		uxtb	r3, r3
 10932 0afa 1344     		add	r3, r3, r2
 10933 0afc DAB2     		uxtb	r2, r3
 10934 0afe 924B     		ldr	r3, .L494+4
 10935 0b00 83F8A620 		strb	r2, [r3, #166]
1473:..\src/command_processing.c ****             }
1474:..\src/command_processing.c ****             break;             
 10936              		.loc 1 1474 0
 10937 0b04 00F0DCBC 		b	.L485
 10938              	.L399:
 10939              	.LBB23:
1475:..\src/command_processing.c ****             
1476:..\src/command_processing.c ****         case 32:         //Current Time
1477:..\src/command_processing.c ****             for (uint8 i=0; i<6; i++){
 10940              		.loc 1 1477 0
 10941 0b08 0023     		movs	r3, #0
 10942 0b0a 7B75     		strb	r3, [r7, #21]
 10943 0b0c 0CE0     		b	.L445
 10944              	.L446:
1478:..\src/command_processing.c ****                 g_mem.exp.curr_time[i] = g_rx.buffer[3 + i];
 10945              		.loc 1 1478 0 discriminator 3
 10946 0b0e 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 10947 0b10 7A7D     		ldrb	r2, [r7, #21]	@ zero_extendqisi2
 10948 0b12 0332     		adds	r2, r2, #3
 10949 0b14 8B49     		ldr	r1, .L494
 10950 0b16 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 10951 0b18 8B4A     		ldr	r2, .L494+4
 10952 0b1a 1344     		add	r3, r3, r2
 10953 0b1c 0A46     		mov	r2, r1
 10954 0b1e 83F82022 		strb	r2, [r3, #544]
1477:..\src/command_processing.c ****                 g_mem.exp.curr_time[i] = g_rx.buffer[3 + i];
 10955              		.loc 1 1477 0 discriminator 3
 10956 0b22 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 10957 0b24 0133     		adds	r3, r3, #1
 10958 0b26 7B75     		strb	r3, [r7, #21]
 10959              	.L445:
1477:..\src/command_processing.c ****                 g_mem.exp.curr_time[i] = g_rx.buffer[3 + i];
 10960              		.loc 1 1477 0 is_stmt 0 discriminator 1
 10961 0b28 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 10962 0b2a 052B     		cmp	r3, #5
 10963 0b2c EFD9     		bls	.L446
 10964              	.LBE23:
1479:..\src/command_processing.c ****             }
1480:..\src/command_processing.c ****             
1481:..\src/command_processing.c ****             if (g_mem.exp.read_exp_port_flag == EXP_SD_RTC) {
 10965              		.loc 1 1481 0 is_stmt 1
 10966 0b2e 864B     		ldr	r3, .L494+4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 250


 10967 0b30 93F82632 		ldrb	r3, [r3, #550]	@ zero_extendqisi2
 10968 0b34 012B     		cmp	r3, #1
 10969 0b36 40F0C584 		bne	.L486
1482:..\src/command_processing.c ****                 set_RTC_time();
 10970              		.loc 1 1482 0
 10971 0b3a FFF7FEFF 		bl	set_RTC_time
1483:..\src/command_processing.c ****             }
1484:..\src/command_processing.c ****             break;
 10972              		.loc 1 1484 0
 10973 0b3e 00F0C1BC 		b	.L486
 10974              	.L400:
1485:..\src/command_processing.c ****            
1486:..\src/command_processing.c ****         case 38:        // First Motor Driver Type
1487:..\src/command_processing.c ****             g_mem.motor[MOTOR_IDX].motor_driver_type = g_rx.buffer[3];
 10975              		.loc 1 1487 0
 10976 0b42 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 10977 0b44 7F4B     		ldr	r3, .L494
 10978 0b46 D878     		ldrb	r0, [r3, #3]	@ zero_extendqisi2
 10979 0b48 7F49     		ldr	r1, .L494+4
 10980 0b4a 1346     		mov	r3, r2
 10981 0b4c DB00     		lsls	r3, r3, #3
 10982 0b4e 9B1A     		subs	r3, r3, r2
 10983 0b50 1B01     		lsls	r3, r3, #4
 10984 0b52 0B44     		add	r3, r3, r1
 10985 0b54 E233     		adds	r3, r3, #226
 10986 0b56 0246     		mov	r2, r0
 10987 0b58 1A70     		strb	r2, [r3]
1488:..\src/command_processing.c ****             set_motor_driver_type();            
 10988              		.loc 1 1488 0
 10989 0b5a FFF7FEFF 		bl	set_motor_driver_type
1489:..\src/command_processing.c ****             break;
 10990              		.loc 1 1489 0
 10991 0b5e 00F0B4BC 		b	.L422
 10992              	.L401:
1490:..\src/command_processing.c ****             
1491:..\src/command_processing.c ****         case 44:         // Second Motor Position PID
1492:..\src/command_processing.c ****             if(c_mem.motor[SECOND_MOTOR_IDX].control_mode != CURR_AND_POS_CONTROL) {
 10993              		.loc 1 1492 0
 10994 0b62 FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 10995 0b64 7949     		ldr	r1, .L494+8
 10996 0b66 1346     		mov	r3, r2
 10997 0b68 DB00     		lsls	r3, r3, #3
 10998 0b6a 9B1A     		subs	r3, r3, r2
 10999 0b6c 1B01     		lsls	r3, r3, #4
 11000 0b6e 0B44     		add	r3, r3, r1
 11001 0b70 03F20F13 		addw	r3, r3, #271
 11002 0b74 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 11003 0b76 032B     		cmp	r3, #3
 11004 0b78 00F08680 		beq	.L448
1493:..\src/command_processing.c ****                 aux_float = *((float *) &g_rx.buffer[3]);
 11005              		.loc 1 1493 0
 11006 0b7c 744B     		ldr	r3, .L494+12
 11007 0b7e 1B68     		ldr	r3, [r3]	@ float
 11008 0b80 FB60     		str	r3, [r7, #12]	@ float
1494:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 11009              		.loc 1 1494 0
 11010 0b82 0023     		movs	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 251


 11011 0b84 BB75     		strb	r3, [r7, #22]
 11012 0b86 0EE0     		b	.L449
 11013              	.L450:
1495:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 11014              		.loc 1 1495 0 discriminator 3
 11015 0b88 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 11016 0b8a C3F10303 		rsb	r3, r3, #3
 11017 0b8e 07F10802 		add	r2, r7, #8
 11018 0b92 1344     		add	r3, r3, r2
 11019 0b94 BA7D     		ldrb	r2, [r7, #22]	@ zero_extendqisi2
 11020 0b96 07F10C01 		add	r1, r7, #12
 11021 0b9a 0A44     		add	r2, r2, r1
 11022 0b9c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 11023 0b9e 1A70     		strb	r2, [r3]
1494:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 11024              		.loc 1 1494 0 discriminator 3
 11025 0ba0 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 11026 0ba2 0133     		adds	r3, r3, #1
 11027 0ba4 BB75     		strb	r3, [r7, #22]
 11028              	.L449:
1494:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 11029              		.loc 1 1494 0 is_stmt 0 discriminator 1
 11030 0ba6 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 11031 0ba8 032B     		cmp	r3, #3
 11032 0baa EDD9     		bls	.L450
1496:..\src/command_processing.c ****                 }
1497:..\src/command_processing.c ****                 g_mem.motor[SECOND_MOTOR_IDX].k_p = aux_float2 * 65536;
 11033              		.loc 1 1497 0 is_stmt 1
 11034 0bac FC7C     		ldrb	r4, [r7, #19]	@ zero_extendqisi2
 11035 0bae BB68     		ldr	r3, [r7, #8]	@ float
 11036 0bb0 4FF08F41 		mov	r1, #1199570944
 11037 0bb4 1846     		mov	r0, r3
 11038 0bb6 FFF7FEFF 		bl	__aeabi_fmul
 11039 0bba 0346     		mov	r3, r0
 11040 0bbc 1846     		mov	r0, r3
 11041 0bbe FFF7FEFF 		bl	__aeabi_f2iz
 11042 0bc2 0146     		mov	r1, r0
 11043 0bc4 604A     		ldr	r2, .L494+4
 11044 0bc6 2346     		mov	r3, r4
 11045 0bc8 DB00     		lsls	r3, r3, #3
 11046 0bca 1B1B     		subs	r3, r3, r4
 11047 0bcc 1B01     		lsls	r3, r3, #4
 11048 0bce 1344     		add	r3, r3, r2
 11049 0bd0 B033     		adds	r3, r3, #176
 11050 0bd2 1960     		str	r1, [r3]
1498:..\src/command_processing.c ****                 
1499:..\src/command_processing.c ****                 aux_float = *((float *) &g_rx.buffer[3 + 4]);
 11051              		.loc 1 1499 0
 11052 0bd4 5F4B     		ldr	r3, .L494+16
 11053 0bd6 1B68     		ldr	r3, [r3]	@ float
 11054 0bd8 FB60     		str	r3, [r7, #12]	@ float
1500:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 11055              		.loc 1 1500 0
 11056 0bda 0023     		movs	r3, #0
 11057 0bdc BB75     		strb	r3, [r7, #22]
 11058 0bde 0EE0     		b	.L451
 11059              	.L452:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 252


1501:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 11060              		.loc 1 1501 0 discriminator 3
 11061 0be0 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 11062 0be2 C3F10303 		rsb	r3, r3, #3
 11063 0be6 07F10802 		add	r2, r7, #8
 11064 0bea 1344     		add	r3, r3, r2
 11065 0bec BA7D     		ldrb	r2, [r7, #22]	@ zero_extendqisi2
 11066 0bee 07F10C01 		add	r1, r7, #12
 11067 0bf2 0A44     		add	r2, r2, r1
 11068 0bf4 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 11069 0bf6 1A70     		strb	r2, [r3]
1500:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 11070              		.loc 1 1500 0 discriminator 3
 11071 0bf8 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 11072 0bfa 0133     		adds	r3, r3, #1
 11073 0bfc BB75     		strb	r3, [r7, #22]
 11074              	.L451:
1500:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 11075              		.loc 1 1500 0 is_stmt 0 discriminator 1
 11076 0bfe BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 11077 0c00 032B     		cmp	r3, #3
 11078 0c02 EDD9     		bls	.L452
1502:..\src/command_processing.c ****                 }
1503:..\src/command_processing.c ****                 g_mem.motor[SECOND_MOTOR_IDX].k_i = aux_float2 * 65536;
 11079              		.loc 1 1503 0 is_stmt 1
 11080 0c04 FC7C     		ldrb	r4, [r7, #19]	@ zero_extendqisi2
 11081 0c06 BB68     		ldr	r3, [r7, #8]	@ float
 11082 0c08 4FF08F41 		mov	r1, #1199570944
 11083 0c0c 1846     		mov	r0, r3
 11084 0c0e FFF7FEFF 		bl	__aeabi_fmul
 11085 0c12 0346     		mov	r3, r0
 11086 0c14 1846     		mov	r0, r3
 11087 0c16 FFF7FEFF 		bl	__aeabi_f2iz
 11088 0c1a 0146     		mov	r1, r0
 11089 0c1c 4A4A     		ldr	r2, .L494+4
 11090 0c1e 2346     		mov	r3, r4
 11091 0c20 DB00     		lsls	r3, r3, #3
 11092 0c22 1B1B     		subs	r3, r3, r4
 11093 0c24 1B01     		lsls	r3, r3, #4
 11094 0c26 1344     		add	r3, r3, r2
 11095 0c28 B433     		adds	r3, r3, #180
 11096 0c2a 1960     		str	r1, [r3]
1504:..\src/command_processing.c ****                 
1505:..\src/command_processing.c ****                 aux_float = *((float *) &g_rx.buffer[3 + 8]);
 11097              		.loc 1 1505 0
 11098 0c2c 4A4B     		ldr	r3, .L494+20
 11099 0c2e 1B68     		ldr	r3, [r3]	@ float
 11100 0c30 FB60     		str	r3, [r7, #12]	@ float
1506:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 11101              		.loc 1 1506 0
 11102 0c32 0023     		movs	r3, #0
 11103 0c34 BB75     		strb	r3, [r7, #22]
 11104 0c36 0EE0     		b	.L453
 11105              	.L454:
1507:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 11106              		.loc 1 1507 0 discriminator 3
 11107 0c38 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 253


 11108 0c3a C3F10303 		rsb	r3, r3, #3
 11109 0c3e 07F10802 		add	r2, r7, #8
 11110 0c42 1344     		add	r3, r3, r2
 11111 0c44 BA7D     		ldrb	r2, [r7, #22]	@ zero_extendqisi2
 11112 0c46 07F10C01 		add	r1, r7, #12
 11113 0c4a 0A44     		add	r2, r2, r1
 11114 0c4c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 11115 0c4e 1A70     		strb	r2, [r3]
1506:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 11116              		.loc 1 1506 0 discriminator 3
 11117 0c50 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 11118 0c52 0133     		adds	r3, r3, #1
 11119 0c54 BB75     		strb	r3, [r7, #22]
 11120              	.L453:
1506:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 11121              		.loc 1 1506 0 is_stmt 0 discriminator 1
 11122 0c56 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 11123 0c58 032B     		cmp	r3, #3
 11124 0c5a EDD9     		bls	.L454
1508:..\src/command_processing.c ****                 }
1509:..\src/command_processing.c ****                 g_mem.motor[SECOND_MOTOR_IDX].k_d = aux_float2 * 65536;
 11125              		.loc 1 1509 0 is_stmt 1
 11126 0c5c FC7C     		ldrb	r4, [r7, #19]	@ zero_extendqisi2
 11127 0c5e BB68     		ldr	r3, [r7, #8]	@ float
 11128 0c60 4FF08F41 		mov	r1, #1199570944
 11129 0c64 1846     		mov	r0, r3
 11130 0c66 FFF7FEFF 		bl	__aeabi_fmul
 11131 0c6a 0346     		mov	r3, r0
 11132 0c6c 1846     		mov	r0, r3
 11133 0c6e FFF7FEFF 		bl	__aeabi_f2iz
 11134 0c72 0146     		mov	r1, r0
 11135 0c74 344A     		ldr	r2, .L494+4
 11136 0c76 2346     		mov	r3, r4
 11137 0c78 DB00     		lsls	r3, r3, #3
 11138 0c7a 1B1B     		subs	r3, r3, r4
 11139 0c7c 1B01     		lsls	r3, r3, #4
 11140 0c7e 1344     		add	r3, r3, r2
 11141 0c80 B833     		adds	r3, r3, #184
 11142 0c82 1960     		str	r1, [r3]
1510:..\src/command_processing.c ****             }
1511:..\src/command_processing.c ****             else {
1512:..\src/command_processing.c ****                 aux_float = *((float *) &g_rx.buffer[3]);
1513:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
1514:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
1515:..\src/command_processing.c ****                 }
1516:..\src/command_processing.c ****                 g_mem.motor[SECOND_MOTOR_IDX].k_p_dl = aux_float2 * 65536;
1517:..\src/command_processing.c ****                 
1518:..\src/command_processing.c ****                 aux_float = *((float *) &g_rx.buffer[3 + 4]);
1519:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
1520:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
1521:..\src/command_processing.c ****                 }
1522:..\src/command_processing.c ****                 g_mem.motor[SECOND_MOTOR_IDX].k_i_dl = aux_float2 * 65536;
1523:..\src/command_processing.c ****                 
1524:..\src/command_processing.c ****                 aux_float = *((float *) &g_rx.buffer[3 + 8]);
1525:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
1526:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
1527:..\src/command_processing.c ****                 }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 254


1528:..\src/command_processing.c ****                 g_mem.motor[SECOND_MOTOR_IDX].k_d_dl = aux_float2 * 65536;
1529:..\src/command_processing.c ****             }
1530:..\src/command_processing.c ****             break;
 11143              		.loc 1 1530 0
 11144 0c84 00F021BC 		b	.L422
 11145              	.L448:
1512:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 11146              		.loc 1 1512 0
 11147 0c88 314B     		ldr	r3, .L494+12
 11148 0c8a 1B68     		ldr	r3, [r3]	@ float
 11149 0c8c FB60     		str	r3, [r7, #12]	@ float
1513:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 11150              		.loc 1 1513 0
 11151 0c8e 0023     		movs	r3, #0
 11152 0c90 BB75     		strb	r3, [r7, #22]
 11153 0c92 0EE0     		b	.L456
 11154              	.L457:
1514:..\src/command_processing.c ****                 }
 11155              		.loc 1 1514 0 discriminator 3
 11156 0c94 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 11157 0c96 C3F10303 		rsb	r3, r3, #3
 11158 0c9a 07F10802 		add	r2, r7, #8
 11159 0c9e 1344     		add	r3, r3, r2
 11160 0ca0 BA7D     		ldrb	r2, [r7, #22]	@ zero_extendqisi2
 11161 0ca2 07F10C01 		add	r1, r7, #12
 11162 0ca6 0A44     		add	r2, r2, r1
 11163 0ca8 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 11164 0caa 1A70     		strb	r2, [r3]
1513:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 11165              		.loc 1 1513 0 discriminator 3
 11166 0cac BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 11167 0cae 0133     		adds	r3, r3, #1
 11168 0cb0 BB75     		strb	r3, [r7, #22]
 11169              	.L456:
1513:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 11170              		.loc 1 1513 0 is_stmt 0 discriminator 1
 11171 0cb2 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 11172 0cb4 032B     		cmp	r3, #3
 11173 0cb6 EDD9     		bls	.L457
1516:..\src/command_processing.c ****                 
 11174              		.loc 1 1516 0 is_stmt 1
 11175 0cb8 FC7C     		ldrb	r4, [r7, #19]	@ zero_extendqisi2
 11176 0cba BB68     		ldr	r3, [r7, #8]	@ float
 11177 0cbc 4FF08F41 		mov	r1, #1199570944
 11178 0cc0 1846     		mov	r0, r3
 11179 0cc2 FFF7FEFF 		bl	__aeabi_fmul
 11180 0cc6 0346     		mov	r3, r0
 11181 0cc8 1846     		mov	r0, r3
 11182 0cca FFF7FEFF 		bl	__aeabi_f2iz
 11183 0cce 0146     		mov	r1, r0
 11184 0cd0 1D4A     		ldr	r2, .L494+4
 11185 0cd2 2346     		mov	r3, r4
 11186 0cd4 DB00     		lsls	r3, r3, #3
 11187 0cd6 1B1B     		subs	r3, r3, r4
 11188 0cd8 1B01     		lsls	r3, r3, #4
 11189 0cda 1344     		add	r3, r3, r2
 11190 0cdc C833     		adds	r3, r3, #200
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 255


 11191 0cde 1960     		str	r1, [r3]
1518:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 11192              		.loc 1 1518 0
 11193 0ce0 1C4B     		ldr	r3, .L494+16
 11194 0ce2 1B68     		ldr	r3, [r3]	@ float
 11195 0ce4 FB60     		str	r3, [r7, #12]	@ float
1519:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 11196              		.loc 1 1519 0
 11197 0ce6 0023     		movs	r3, #0
 11198 0ce8 BB75     		strb	r3, [r7, #22]
 11199 0cea 0EE0     		b	.L458
 11200              	.L459:
1520:..\src/command_processing.c ****                 }
 11201              		.loc 1 1520 0 discriminator 3
 11202 0cec BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 11203 0cee C3F10303 		rsb	r3, r3, #3
 11204 0cf2 07F10802 		add	r2, r7, #8
 11205 0cf6 1344     		add	r3, r3, r2
 11206 0cf8 BA7D     		ldrb	r2, [r7, #22]	@ zero_extendqisi2
 11207 0cfa 07F10C01 		add	r1, r7, #12
 11208 0cfe 0A44     		add	r2, r2, r1
 11209 0d00 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 11210 0d02 1A70     		strb	r2, [r3]
1519:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 11211              		.loc 1 1519 0 discriminator 3
 11212 0d04 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 11213 0d06 0133     		adds	r3, r3, #1
 11214 0d08 BB75     		strb	r3, [r7, #22]
 11215              	.L458:
1519:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 11216              		.loc 1 1519 0 is_stmt 0 discriminator 1
 11217 0d0a BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 11218 0d0c 032B     		cmp	r3, #3
 11219 0d0e EDD9     		bls	.L459
1522:..\src/command_processing.c ****                 
 11220              		.loc 1 1522 0 is_stmt 1
 11221 0d10 FC7C     		ldrb	r4, [r7, #19]	@ zero_extendqisi2
 11222 0d12 BB68     		ldr	r3, [r7, #8]	@ float
 11223 0d14 4FF08F41 		mov	r1, #1199570944
 11224 0d18 1846     		mov	r0, r3
 11225 0d1a FFF7FEFF 		bl	__aeabi_fmul
 11226 0d1e 0346     		mov	r3, r0
 11227 0d20 1846     		mov	r0, r3
 11228 0d22 FFF7FEFF 		bl	__aeabi_f2iz
 11229 0d26 0146     		mov	r1, r0
 11230 0d28 074A     		ldr	r2, .L494+4
 11231 0d2a 2346     		mov	r3, r4
 11232 0d2c DB00     		lsls	r3, r3, #3
 11233 0d2e 1B1B     		subs	r3, r3, r4
 11234 0d30 1B01     		lsls	r3, r3, #4
 11235 0d32 1344     		add	r3, r3, r2
 11236 0d34 CC33     		adds	r3, r3, #204
 11237 0d36 1960     		str	r1, [r3]
1524:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 11238              		.loc 1 1524 0
 11239 0d38 074B     		ldr	r3, .L494+20
 11240 0d3a 1B68     		ldr	r3, [r3]	@ float
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 256


 11241 0d3c FB60     		str	r3, [r7, #12]	@ float
1525:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 11242              		.loc 1 1525 0
 11243 0d3e 0023     		movs	r3, #0
 11244 0d40 BB75     		strb	r3, [r7, #22]
 11245 0d42 1AE0     		b	.L460
 11246              	.L495:
 11247              		.align	2
 11248              	.L494:
 11249 0d44 00000000 		.word	g_rx
 11250 0d48 00000000 		.word	g_mem
 11251 0d4c 00000000 		.word	c_mem
 11252 0d50 03000000 		.word	g_rx+3
 11253 0d54 07000000 		.word	g_rx+7
 11254 0d58 0B000000 		.word	g_rx+11
 11255              	.L461:
1526:..\src/command_processing.c ****                 }
 11256              		.loc 1 1526 0 discriminator 3
 11257 0d5c BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 11258 0d5e C3F10303 		rsb	r3, r3, #3
 11259 0d62 07F10802 		add	r2, r7, #8
 11260 0d66 1344     		add	r3, r3, r2
 11261 0d68 BA7D     		ldrb	r2, [r7, #22]	@ zero_extendqisi2
 11262 0d6a 07F10C01 		add	r1, r7, #12
 11263 0d6e 0A44     		add	r2, r2, r1
 11264 0d70 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 11265 0d72 1A70     		strb	r2, [r3]
1525:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 11266              		.loc 1 1525 0 discriminator 3
 11267 0d74 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 11268 0d76 0133     		adds	r3, r3, #1
 11269 0d78 BB75     		strb	r3, [r7, #22]
 11270              	.L460:
1525:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 11271              		.loc 1 1525 0 is_stmt 0 discriminator 1
 11272 0d7a BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 11273 0d7c 032B     		cmp	r3, #3
 11274 0d7e EDD9     		bls	.L461
1528:..\src/command_processing.c ****             }
 11275              		.loc 1 1528 0 is_stmt 1
 11276 0d80 FC7C     		ldrb	r4, [r7, #19]	@ zero_extendqisi2
 11277 0d82 BB68     		ldr	r3, [r7, #8]	@ float
 11278 0d84 4FF08F41 		mov	r1, #1199570944
 11279 0d88 1846     		mov	r0, r3
 11280 0d8a FFF7FEFF 		bl	__aeabi_fmul
 11281 0d8e 0346     		mov	r3, r0
 11282 0d90 1846     		mov	r0, r3
 11283 0d92 FFF7FEFF 		bl	__aeabi_f2iz
 11284 0d96 0146     		mov	r1, r0
 11285 0d98 A34A     		ldr	r2, .L496
 11286 0d9a 2346     		mov	r3, r4
 11287 0d9c DB00     		lsls	r3, r3, #3
 11288 0d9e 1B1B     		subs	r3, r3, r4
 11289 0da0 1B01     		lsls	r3, r3, #4
 11290 0da2 1344     		add	r3, r3, r2
 11291 0da4 D033     		adds	r3, r3, #208
 11292 0da6 1960     		str	r1, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 257


 11293              		.loc 1 1530 0
 11294 0da8 8FE3     		b	.L422
 11295              	.L402:
1531:..\src/command_processing.c ****             
1532:..\src/command_processing.c ****         case 45:         // Second Motor Current PID
1533:..\src/command_processing.c ****             if(c_mem.motor[SECOND_MOTOR_IDX].control_mode != CURR_AND_POS_CONTROL) {
 11296              		.loc 1 1533 0
 11297 0daa FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 11298 0dac 9F49     		ldr	r1, .L496+4
 11299 0dae 1346     		mov	r3, r2
 11300 0db0 DB00     		lsls	r3, r3, #3
 11301 0db2 9B1A     		subs	r3, r3, r2
 11302 0db4 1B01     		lsls	r3, r3, #4
 11303 0db6 0B44     		add	r3, r3, r1
 11304 0db8 03F20F13 		addw	r3, r3, #271
 11305 0dbc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 11306 0dbe 032B     		cmp	r3, #3
 11307 0dc0 00F08580 		beq	.L462
1534:..\src/command_processing.c ****                 aux_float = *((float *) &g_rx.buffer[3]);
 11308              		.loc 1 1534 0
 11309 0dc4 9A4B     		ldr	r3, .L496+8
 11310 0dc6 1B68     		ldr	r3, [r3]	@ float
 11311 0dc8 FB60     		str	r3, [r7, #12]	@ float
1535:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 11312              		.loc 1 1535 0
 11313 0dca 0023     		movs	r3, #0
 11314 0dcc BB75     		strb	r3, [r7, #22]
 11315 0dce 0EE0     		b	.L463
 11316              	.L464:
1536:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 11317              		.loc 1 1536 0 discriminator 3
 11318 0dd0 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 11319 0dd2 C3F10303 		rsb	r3, r3, #3
 11320 0dd6 07F10802 		add	r2, r7, #8
 11321 0dda 1344     		add	r3, r3, r2
 11322 0ddc BA7D     		ldrb	r2, [r7, #22]	@ zero_extendqisi2
 11323 0dde 07F10C01 		add	r1, r7, #12
 11324 0de2 0A44     		add	r2, r2, r1
 11325 0de4 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 11326 0de6 1A70     		strb	r2, [r3]
1535:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 11327              		.loc 1 1535 0 discriminator 3
 11328 0de8 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 11329 0dea 0133     		adds	r3, r3, #1
 11330 0dec BB75     		strb	r3, [r7, #22]
 11331              	.L463:
1535:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 11332              		.loc 1 1535 0 is_stmt 0 discriminator 1
 11333 0dee BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 11334 0df0 032B     		cmp	r3, #3
 11335 0df2 EDD9     		bls	.L464
1537:..\src/command_processing.c ****                 }
1538:..\src/command_processing.c ****                 g_mem.motor[SECOND_MOTOR_IDX].k_p_c = aux_float2 * 65536;
 11336              		.loc 1 1538 0 is_stmt 1
 11337 0df4 FC7C     		ldrb	r4, [r7, #19]	@ zero_extendqisi2
 11338 0df6 BB68     		ldr	r3, [r7, #8]	@ float
 11339 0df8 4FF08F41 		mov	r1, #1199570944
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 258


 11340 0dfc 1846     		mov	r0, r3
 11341 0dfe FFF7FEFF 		bl	__aeabi_fmul
 11342 0e02 0346     		mov	r3, r0
 11343 0e04 1846     		mov	r0, r3
 11344 0e06 FFF7FEFF 		bl	__aeabi_f2iz
 11345 0e0a 0146     		mov	r1, r0
 11346 0e0c 864A     		ldr	r2, .L496
 11347 0e0e 2346     		mov	r3, r4
 11348 0e10 DB00     		lsls	r3, r3, #3
 11349 0e12 1B1B     		subs	r3, r3, r4
 11350 0e14 1B01     		lsls	r3, r3, #4
 11351 0e16 1344     		add	r3, r3, r2
 11352 0e18 BC33     		adds	r3, r3, #188
 11353 0e1a 1960     		str	r1, [r3]
1539:..\src/command_processing.c ****                 
1540:..\src/command_processing.c ****                 aux_float = *((float *) &g_rx.buffer[3 + 4]);
 11354              		.loc 1 1540 0
 11355 0e1c 854B     		ldr	r3, .L496+12
 11356 0e1e 1B68     		ldr	r3, [r3]	@ float
 11357 0e20 FB60     		str	r3, [r7, #12]	@ float
1541:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 11358              		.loc 1 1541 0
 11359 0e22 0023     		movs	r3, #0
 11360 0e24 BB75     		strb	r3, [r7, #22]
 11361 0e26 0EE0     		b	.L465
 11362              	.L466:
1542:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 11363              		.loc 1 1542 0 discriminator 3
 11364 0e28 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 11365 0e2a C3F10303 		rsb	r3, r3, #3
 11366 0e2e 07F10802 		add	r2, r7, #8
 11367 0e32 1344     		add	r3, r3, r2
 11368 0e34 BA7D     		ldrb	r2, [r7, #22]	@ zero_extendqisi2
 11369 0e36 07F10C01 		add	r1, r7, #12
 11370 0e3a 0A44     		add	r2, r2, r1
 11371 0e3c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 11372 0e3e 1A70     		strb	r2, [r3]
1541:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 11373              		.loc 1 1541 0 discriminator 3
 11374 0e40 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 11375 0e42 0133     		adds	r3, r3, #1
 11376 0e44 BB75     		strb	r3, [r7, #22]
 11377              	.L465:
1541:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 11378              		.loc 1 1541 0 is_stmt 0 discriminator 1
 11379 0e46 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 11380 0e48 032B     		cmp	r3, #3
 11381 0e4a EDD9     		bls	.L466
1543:..\src/command_processing.c ****                 }
1544:..\src/command_processing.c ****                 g_mem.motor[SECOND_MOTOR_IDX].k_i_c = aux_float2 * 65536;
 11382              		.loc 1 1544 0 is_stmt 1
 11383 0e4c FC7C     		ldrb	r4, [r7, #19]	@ zero_extendqisi2
 11384 0e4e BB68     		ldr	r3, [r7, #8]	@ float
 11385 0e50 4FF08F41 		mov	r1, #1199570944
 11386 0e54 1846     		mov	r0, r3
 11387 0e56 FFF7FEFF 		bl	__aeabi_fmul
 11388 0e5a 0346     		mov	r3, r0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 259


 11389 0e5c 1846     		mov	r0, r3
 11390 0e5e FFF7FEFF 		bl	__aeabi_f2iz
 11391 0e62 0146     		mov	r1, r0
 11392 0e64 704A     		ldr	r2, .L496
 11393 0e66 2346     		mov	r3, r4
 11394 0e68 DB00     		lsls	r3, r3, #3
 11395 0e6a 1B1B     		subs	r3, r3, r4
 11396 0e6c 1B01     		lsls	r3, r3, #4
 11397 0e6e 1344     		add	r3, r3, r2
 11398 0e70 C033     		adds	r3, r3, #192
 11399 0e72 1960     		str	r1, [r3]
1545:..\src/command_processing.c ****                 
1546:..\src/command_processing.c ****                 aux_float = *((float *) &g_rx.buffer[3 + 8]);
 11400              		.loc 1 1546 0
 11401 0e74 704B     		ldr	r3, .L496+16
 11402 0e76 1B68     		ldr	r3, [r3]	@ float
 11403 0e78 FB60     		str	r3, [r7, #12]	@ float
1547:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 11404              		.loc 1 1547 0
 11405 0e7a 0023     		movs	r3, #0
 11406 0e7c BB75     		strb	r3, [r7, #22]
 11407 0e7e 0EE0     		b	.L467
 11408              	.L468:
1548:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 11409              		.loc 1 1548 0 discriminator 3
 11410 0e80 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 11411 0e82 C3F10303 		rsb	r3, r3, #3
 11412 0e86 07F10802 		add	r2, r7, #8
 11413 0e8a 1344     		add	r3, r3, r2
 11414 0e8c BA7D     		ldrb	r2, [r7, #22]	@ zero_extendqisi2
 11415 0e8e 07F10C01 		add	r1, r7, #12
 11416 0e92 0A44     		add	r2, r2, r1
 11417 0e94 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 11418 0e96 1A70     		strb	r2, [r3]
1547:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 11419              		.loc 1 1547 0 discriminator 3
 11420 0e98 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 11421 0e9a 0133     		adds	r3, r3, #1
 11422 0e9c BB75     		strb	r3, [r7, #22]
 11423              	.L467:
1547:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 11424              		.loc 1 1547 0 is_stmt 0 discriminator 1
 11425 0e9e BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 11426 0ea0 032B     		cmp	r3, #3
 11427 0ea2 EDD9     		bls	.L468
1549:..\src/command_processing.c ****                 }
1550:..\src/command_processing.c ****                 g_mem.motor[SECOND_MOTOR_IDX].k_d_c = aux_float2 * 65536;
 11428              		.loc 1 1550 0 is_stmt 1
 11429 0ea4 FC7C     		ldrb	r4, [r7, #19]	@ zero_extendqisi2
 11430 0ea6 BB68     		ldr	r3, [r7, #8]	@ float
 11431 0ea8 4FF08F41 		mov	r1, #1199570944
 11432 0eac 1846     		mov	r0, r3
 11433 0eae FFF7FEFF 		bl	__aeabi_fmul
 11434 0eb2 0346     		mov	r3, r0
 11435 0eb4 1846     		mov	r0, r3
 11436 0eb6 FFF7FEFF 		bl	__aeabi_f2iz
 11437 0eba 0146     		mov	r1, r0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 260


 11438 0ebc 5A4A     		ldr	r2, .L496
 11439 0ebe 2346     		mov	r3, r4
 11440 0ec0 DB00     		lsls	r3, r3, #3
 11441 0ec2 1B1B     		subs	r3, r3, r4
 11442 0ec4 1B01     		lsls	r3, r3, #4
 11443 0ec6 1344     		add	r3, r3, r2
 11444 0ec8 C433     		adds	r3, r3, #196
 11445 0eca 1960     		str	r1, [r3]
1551:..\src/command_processing.c ****             }
1552:..\src/command_processing.c ****             else {
1553:..\src/command_processing.c ****                 aux_float = *((float *) &g_rx.buffer[3]);
1554:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
1555:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
1556:..\src/command_processing.c ****                 }
1557:..\src/command_processing.c ****                 g_mem.motor[SECOND_MOTOR_IDX].k_p_c_dl = aux_float2 * 65536;
1558:..\src/command_processing.c ****                 
1559:..\src/command_processing.c ****                 aux_float = *((float *) &g_rx.buffer[3 + 4]);
1560:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
1561:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
1562:..\src/command_processing.c ****                 }
1563:..\src/command_processing.c ****                 g_mem.motor[SECOND_MOTOR_IDX].k_i_c_dl = aux_float2 * 65536;
1564:..\src/command_processing.c ****                 
1565:..\src/command_processing.c ****                 aux_float = *((float *) &g_rx.buffer[3 + 8]);
1566:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
1567:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
1568:..\src/command_processing.c ****                 }
1569:..\src/command_processing.c ****                 g_mem.motor[SECOND_MOTOR_IDX].k_d_c_dl = aux_float2 * 65536;
1570:..\src/command_processing.c ****             }            
1571:..\src/command_processing.c ****             break;  
 11446              		.loc 1 1571 0
 11447 0ecc FDE2     		b	.L422
 11448              	.L462:
1553:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 11449              		.loc 1 1553 0
 11450 0ece 584B     		ldr	r3, .L496+8
 11451 0ed0 1B68     		ldr	r3, [r3]	@ float
 11452 0ed2 FB60     		str	r3, [r7, #12]	@ float
1554:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 11453              		.loc 1 1554 0
 11454 0ed4 0023     		movs	r3, #0
 11455 0ed6 BB75     		strb	r3, [r7, #22]
 11456 0ed8 0EE0     		b	.L470
 11457              	.L471:
1555:..\src/command_processing.c ****                 }
 11458              		.loc 1 1555 0 discriminator 3
 11459 0eda BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 11460 0edc C3F10303 		rsb	r3, r3, #3
 11461 0ee0 07F10802 		add	r2, r7, #8
 11462 0ee4 1344     		add	r3, r3, r2
 11463 0ee6 BA7D     		ldrb	r2, [r7, #22]	@ zero_extendqisi2
 11464 0ee8 07F10C01 		add	r1, r7, #12
 11465 0eec 0A44     		add	r2, r2, r1
 11466 0eee 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 11467 0ef0 1A70     		strb	r2, [r3]
1554:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 11468              		.loc 1 1554 0 discriminator 3
 11469 0ef2 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 261


 11470 0ef4 0133     		adds	r3, r3, #1
 11471 0ef6 BB75     		strb	r3, [r7, #22]
 11472              	.L470:
1554:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 11473              		.loc 1 1554 0 is_stmt 0 discriminator 1
 11474 0ef8 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 11475 0efa 032B     		cmp	r3, #3
 11476 0efc EDD9     		bls	.L471
1557:..\src/command_processing.c ****                 
 11477              		.loc 1 1557 0 is_stmt 1
 11478 0efe FC7C     		ldrb	r4, [r7, #19]	@ zero_extendqisi2
 11479 0f00 BB68     		ldr	r3, [r7, #8]	@ float
 11480 0f02 4FF08F41 		mov	r1, #1199570944
 11481 0f06 1846     		mov	r0, r3
 11482 0f08 FFF7FEFF 		bl	__aeabi_fmul
 11483 0f0c 0346     		mov	r3, r0
 11484 0f0e 1846     		mov	r0, r3
 11485 0f10 FFF7FEFF 		bl	__aeabi_f2iz
 11486 0f14 0146     		mov	r1, r0
 11487 0f16 444A     		ldr	r2, .L496
 11488 0f18 2346     		mov	r3, r4
 11489 0f1a DB00     		lsls	r3, r3, #3
 11490 0f1c 1B1B     		subs	r3, r3, r4
 11491 0f1e 1B01     		lsls	r3, r3, #4
 11492 0f20 1344     		add	r3, r3, r2
 11493 0f22 D433     		adds	r3, r3, #212
 11494 0f24 1960     		str	r1, [r3]
1559:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 11495              		.loc 1 1559 0
 11496 0f26 434B     		ldr	r3, .L496+12
 11497 0f28 1B68     		ldr	r3, [r3]	@ float
 11498 0f2a FB60     		str	r3, [r7, #12]	@ float
1560:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 11499              		.loc 1 1560 0
 11500 0f2c 0023     		movs	r3, #0
 11501 0f2e BB75     		strb	r3, [r7, #22]
 11502 0f30 0EE0     		b	.L472
 11503              	.L473:
1561:..\src/command_processing.c ****                 }
 11504              		.loc 1 1561 0 discriminator 3
 11505 0f32 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 11506 0f34 C3F10303 		rsb	r3, r3, #3
 11507 0f38 07F10802 		add	r2, r7, #8
 11508 0f3c 1344     		add	r3, r3, r2
 11509 0f3e BA7D     		ldrb	r2, [r7, #22]	@ zero_extendqisi2
 11510 0f40 07F10C01 		add	r1, r7, #12
 11511 0f44 0A44     		add	r2, r2, r1
 11512 0f46 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 11513 0f48 1A70     		strb	r2, [r3]
1560:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 11514              		.loc 1 1560 0 discriminator 3
 11515 0f4a BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 11516 0f4c 0133     		adds	r3, r3, #1
 11517 0f4e BB75     		strb	r3, [r7, #22]
 11518              	.L472:
1560:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 11519              		.loc 1 1560 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 262


 11520 0f50 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 11521 0f52 032B     		cmp	r3, #3
 11522 0f54 EDD9     		bls	.L473
1563:..\src/command_processing.c ****                 
 11523              		.loc 1 1563 0 is_stmt 1
 11524 0f56 FC7C     		ldrb	r4, [r7, #19]	@ zero_extendqisi2
 11525 0f58 BB68     		ldr	r3, [r7, #8]	@ float
 11526 0f5a 4FF08F41 		mov	r1, #1199570944
 11527 0f5e 1846     		mov	r0, r3
 11528 0f60 FFF7FEFF 		bl	__aeabi_fmul
 11529 0f64 0346     		mov	r3, r0
 11530 0f66 1846     		mov	r0, r3
 11531 0f68 FFF7FEFF 		bl	__aeabi_f2iz
 11532 0f6c 0146     		mov	r1, r0
 11533 0f6e 2E4A     		ldr	r2, .L496
 11534 0f70 2346     		mov	r3, r4
 11535 0f72 DB00     		lsls	r3, r3, #3
 11536 0f74 1B1B     		subs	r3, r3, r4
 11537 0f76 1B01     		lsls	r3, r3, #4
 11538 0f78 1344     		add	r3, r3, r2
 11539 0f7a D833     		adds	r3, r3, #216
 11540 0f7c 1960     		str	r1, [r3]
1565:..\src/command_processing.c ****                 for(j = 0; j < 4; j++) {
 11541              		.loc 1 1565 0
 11542 0f7e 2E4B     		ldr	r3, .L496+16
 11543 0f80 1B68     		ldr	r3, [r3]	@ float
 11544 0f82 FB60     		str	r3, [r7, #12]	@ float
1566:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 11545              		.loc 1 1566 0
 11546 0f84 0023     		movs	r3, #0
 11547 0f86 BB75     		strb	r3, [r7, #22]
 11548 0f88 0EE0     		b	.L474
 11549              	.L475:
1567:..\src/command_processing.c ****                 }
 11550              		.loc 1 1567 0 discriminator 3
 11551 0f8a BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 11552 0f8c C3F10303 		rsb	r3, r3, #3
 11553 0f90 07F10802 		add	r2, r7, #8
 11554 0f94 1344     		add	r3, r3, r2
 11555 0f96 BA7D     		ldrb	r2, [r7, #22]	@ zero_extendqisi2
 11556 0f98 07F10C01 		add	r1, r7, #12
 11557 0f9c 0A44     		add	r2, r2, r1
 11558 0f9e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 11559 0fa0 1A70     		strb	r2, [r3]
1566:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 11560              		.loc 1 1566 0 discriminator 3
 11561 0fa2 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 11562 0fa4 0133     		adds	r3, r3, #1
 11563 0fa6 BB75     		strb	r3, [r7, #22]
 11564              	.L474:
1566:..\src/command_processing.c ****                     ((char*)(&aux_float2))[4 - j -1] = ((char*)(&aux_float))[j];
 11565              		.loc 1 1566 0 is_stmt 0 discriminator 1
 11566 0fa8 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 11567 0faa 032B     		cmp	r3, #3
 11568 0fac EDD9     		bls	.L475
1569:..\src/command_processing.c ****             }            
 11569              		.loc 1 1569 0 is_stmt 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 263


 11570 0fae FC7C     		ldrb	r4, [r7, #19]	@ zero_extendqisi2
 11571 0fb0 BB68     		ldr	r3, [r7, #8]	@ float
 11572 0fb2 4FF08F41 		mov	r1, #1199570944
 11573 0fb6 1846     		mov	r0, r3
 11574 0fb8 FFF7FEFF 		bl	__aeabi_fmul
 11575 0fbc 0346     		mov	r3, r0
 11576 0fbe 1846     		mov	r0, r3
 11577 0fc0 FFF7FEFF 		bl	__aeabi_f2iz
 11578 0fc4 0146     		mov	r1, r0
 11579 0fc6 184A     		ldr	r2, .L496
 11580 0fc8 2346     		mov	r3, r4
 11581 0fca DB00     		lsls	r3, r3, #3
 11582 0fcc 1B1B     		subs	r3, r3, r4
 11583 0fce 1B01     		lsls	r3, r3, #4
 11584 0fd0 1344     		add	r3, r3, r2
 11585 0fd2 DC33     		adds	r3, r3, #220
 11586 0fd4 1960     		str	r1, [r3]
 11587              		.loc 1 1571 0
 11588 0fd6 78E2     		b	.L422
 11589              	.L403:
1572:..\src/command_processing.c ****             
1573:..\src/command_processing.c ****         case 47:         // Second Motor Input mode
1574:..\src/command_processing.c ****             g_mem.motor[SECOND_MOTOR_IDX].input_mode = g_rx.buffer[3];
 11590              		.loc 1 1574 0
 11591 0fd8 FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 11592 0fda 184B     		ldr	r3, .L496+20
 11593 0fdc D878     		ldrb	r0, [r3, #3]	@ zero_extendqisi2
 11594 0fde 1249     		ldr	r1, .L496
 11595 0fe0 1346     		mov	r3, r2
 11596 0fe2 DB00     		lsls	r3, r3, #3
 11597 0fe4 9B1A     		subs	r3, r3, r2
 11598 0fe6 1B01     		lsls	r3, r3, #4
 11599 0fe8 0B44     		add	r3, r3, r1
 11600 0fea 03F58773 		add	r3, r3, #270
 11601 0fee 0246     		mov	r2, r0
 11602 0ff0 1A70     		strb	r2, [r3]
1575:..\src/command_processing.c ****             
1576:..\src/command_processing.c ****             // Hold the actual position
1577:..\src/command_processing.c ****             g_refNew[SECOND_MOTOR_IDX].pos = g_meas[g_mem.motor[SECOND_MOTOR_IDX].encoder_line].pos
 11603              		.loc 1 1577 0
 11604 0ff2 F97C     		ldrb	r1, [r7, #19]	@ zero_extendqisi2
 11605 0ff4 FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 11606 0ff6 0C48     		ldr	r0, .L496
 11607 0ff8 1346     		mov	r3, r2
 11608 0ffa DB00     		lsls	r3, r3, #3
 11609 0ffc 9B1A     		subs	r3, r3, r2
 11610 0ffe 1B01     		lsls	r3, r3, #4
 11611 1000 0344     		add	r3, r3, r0
 11612 1002 03F58873 		add	r3, r3, #272
 11613 1006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 11614 1008 1846     		mov	r0, r3
 11615 100a 0D4A     		ldr	r2, .L496+24
 11616 100c 3423     		movs	r3, #52
 11617 100e 03FB00F3 		mul	r3, r3, r0
 11618 1012 1344     		add	r3, r3, r2
 11619 1014 1A68     		ldr	r2, [r3]
 11620 1016 0B48     		ldr	r0, .L496+28
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 264


 11621 1018 0B01     		lsls	r3, r1, #4
 11622 101a 0344     		add	r3, r3, r0
 11623 101c 1A60     		str	r2, [r3]
1578:..\src/command_processing.c ****             break;   
 11624              		.loc 1 1578 0
 11625 101e 54E2     		b	.L422
 11626              	.L404:
1579:..\src/command_processing.c **** 
1580:..\src/command_processing.c ****         case 50:         // Second Motor Measurement Offset
1581:..\src/command_processing.c ****             for(i = 0; i < NUM_OF_SENSORS; i++) {
 11627              		.loc 1 1581 0
 11628 1020 0023     		movs	r3, #0
 11629 1022 FB75     		strb	r3, [r7, #23]
 11630 1024 8FE0     		b	.L476
 11631              	.L497:
 11632 1026 00BF     		.align	2
 11633              	.L496:
 11634 1028 00000000 		.word	g_mem
 11635 102c 00000000 		.word	c_mem
 11636 1030 03000000 		.word	g_rx+3
 11637 1034 07000000 		.word	g_rx+7
 11638 1038 0B000000 		.word	g_rx+11
 11639 103c 00000000 		.word	g_rx
 11640 1040 00000000 		.word	g_meas
 11641 1044 00000000 		.word	g_refNew
 11642              	.L477:
1582:..\src/command_processing.c ****                 g_mem.enc[g_mem.motor[SECOND_MOTOR_IDX].encoder_line].m_off[i] = (int16)(g_rx.buffe
 11643              		.loc 1 1582 0 discriminator 3
 11644 1048 FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 11645 104a 8A49     		ldr	r1, .L498
 11646 104c 1346     		mov	r3, r2
 11647 104e DB00     		lsls	r3, r3, #3
 11648 1050 9B1A     		subs	r3, r3, r2
 11649 1052 1B01     		lsls	r3, r3, #4
 11650 1054 0B44     		add	r3, r3, r1
 11651 1056 03F58873 		add	r3, r3, #272
 11652 105a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 11653 105c 1C46     		mov	r4, r3
 11654 105e FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 11655 1060 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 11656 1062 5B00     		lsls	r3, r3, #1
 11657 1064 0333     		adds	r3, r3, #3
 11658 1066 8449     		ldr	r1, .L498+4
 11659 1068 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 11660 106a 1B02     		lsls	r3, r3, #8
 11661 106c 19B2     		sxth	r1, r3
 11662 106e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 11663 1070 0233     		adds	r3, r3, #2
 11664 1072 5B00     		lsls	r3, r3, #1
 11665 1074 8048     		ldr	r0, .L498+4
 11666 1076 C35C     		ldrb	r3, [r0, r3]	@ zero_extendqisi2
 11667 1078 1BB2     		sxth	r3, r3
 11668 107a 0B43     		orrs	r3, r3, r1
 11669 107c 1BB2     		sxth	r3, r3
 11670 107e 1846     		mov	r0, r3
 11671 1080 7C49     		ldr	r1, .L498
 11672 1082 2346     		mov	r3, r4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 265


 11673 1084 5B00     		lsls	r3, r3, #1
 11674 1086 2344     		add	r3, r3, r4
 11675 1088 9B00     		lsls	r3, r3, #2
 11676 108a 1344     		add	r3, r3, r2
 11677 108c 6633     		adds	r3, r3, #102
 11678 108e 41F82300 		str	r0, [r1, r3, lsl #2]
1583:..\src/command_processing.c ****                 g_mem.enc[g_mem.motor[SECOND_MOTOR_IDX].encoder_line].m_off[i] = g_mem.enc[g_mem.mo
 11679              		.loc 1 1583 0 discriminator 3
 11680 1092 FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 11681 1094 7749     		ldr	r1, .L498
 11682 1096 1346     		mov	r3, r2
 11683 1098 DB00     		lsls	r3, r3, #3
 11684 109a 9B1A     		subs	r3, r3, r2
 11685 109c 1B01     		lsls	r3, r3, #4
 11686 109e 0B44     		add	r3, r3, r1
 11687 10a0 03F58873 		add	r3, r3, #272
 11688 10a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 11689 10a6 1D46     		mov	r5, r3
 11690 10a8 F97D     		ldrb	r1, [r7, #23]	@ zero_extendqisi2
 11691 10aa FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 11692 10ac 7148     		ldr	r0, .L498
 11693 10ae 1346     		mov	r3, r2
 11694 10b0 DB00     		lsls	r3, r3, #3
 11695 10b2 9B1A     		subs	r3, r3, r2
 11696 10b4 1B01     		lsls	r3, r3, #4
 11697 10b6 0344     		add	r3, r3, r0
 11698 10b8 03F58873 		add	r3, r3, #272
 11699 10bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 11700 10be 1C46     		mov	r4, r3
 11701 10c0 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 11702 10c2 6C48     		ldr	r0, .L498
 11703 10c4 2346     		mov	r3, r4
 11704 10c6 5B00     		lsls	r3, r3, #1
 11705 10c8 2344     		add	r3, r3, r4
 11706 10ca 9B00     		lsls	r3, r3, #2
 11707 10cc 1344     		add	r3, r3, r2
 11708 10ce 6633     		adds	r3, r3, #102
 11709 10d0 50F82300 		ldr	r0, [r0, r3, lsl #2]
 11710 10d4 FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 11711 10d6 674C     		ldr	r4, .L498
 11712 10d8 1346     		mov	r3, r2
 11713 10da DB00     		lsls	r3, r3, #3
 11714 10dc 9B1A     		subs	r3, r3, r2
 11715 10de 1B01     		lsls	r3, r3, #4
 11716 10e0 2344     		add	r3, r3, r4
 11717 10e2 03F58873 		add	r3, r3, #272
 11718 10e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 11719 10e8 1E46     		mov	r6, r3
 11720 10ea FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 11721 10ec 614C     		ldr	r4, .L498
 11722 10ee 3346     		mov	r3, r6
 11723 10f0 5B00     		lsls	r3, r3, #1
 11724 10f2 3344     		add	r3, r3, r6
 11725 10f4 1B01     		lsls	r3, r3, #4
 11726 10f6 2344     		add	r3, r3, r4
 11727 10f8 1344     		add	r3, r3, r2
 11728 10fa 03F29513 		addw	r3, r3, #405
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 266


 11729 10fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 11730 1100 00FA03F2 		lsl	r2, r0, r3
 11731 1104 5B48     		ldr	r0, .L498
 11732 1106 2B46     		mov	r3, r5
 11733 1108 5B00     		lsls	r3, r3, #1
 11734 110a 2B44     		add	r3, r3, r5
 11735 110c 9B00     		lsls	r3, r3, #2
 11736 110e 0B44     		add	r3, r3, r1
 11737 1110 6633     		adds	r3, r3, #102
 11738 1112 40F82320 		str	r2, [r0, r3, lsl #2]
1584:..\src/command_processing.c **** 
1585:..\src/command_processing.c ****                 g_meas[g_mem.motor[SECOND_MOTOR_IDX].encoder_line].rot[i] = 0;
 11739              		.loc 1 1585 0 discriminator 3
 11740 1116 FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 11741 1118 5649     		ldr	r1, .L498
 11742 111a 1346     		mov	r3, r2
 11743 111c DB00     		lsls	r3, r3, #3
 11744 111e 9B1A     		subs	r3, r3, r2
 11745 1120 1B01     		lsls	r3, r3, #4
 11746 1122 0B44     		add	r3, r3, r1
 11747 1124 03F58873 		add	r3, r3, #272
 11748 1128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 11749 112a 1846     		mov	r0, r3
 11750 112c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 11751 112e 5349     		ldr	r1, .L498+8
 11752 1130 3422     		movs	r2, #52
 11753 1132 02FB00F2 		mul	r2, r2, r0
 11754 1136 0A44     		add	r2, r2, r1
 11755 1138 1344     		add	r3, r3, r2
 11756 113a 1833     		adds	r3, r3, #24
 11757 113c 0022     		movs	r2, #0
 11758 113e 1A70     		strb	r2, [r3]
1581:..\src/command_processing.c ****                 g_mem.enc[g_mem.motor[SECOND_MOTOR_IDX].encoder_line].m_off[i] = (int16)(g_rx.buffe
 11759              		.loc 1 1581 0 discriminator 3
 11760 1140 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 11761 1142 0133     		adds	r3, r3, #1
 11762 1144 FB75     		strb	r3, [r7, #23]
 11763              	.L476:
1581:..\src/command_processing.c ****                 g_mem.enc[g_mem.motor[SECOND_MOTOR_IDX].encoder_line].m_off[i] = (int16)(g_rx.buffe
 11764              		.loc 1 1581 0 is_stmt 0 discriminator 1
 11765 1146 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 11766 1148 022B     		cmp	r3, #2
 11767 114a 7FF67DAF 		bls	.L477
1586:..\src/command_processing.c ****             }
1587:..\src/command_processing.c ****             reset_last_value_flag[SECOND_MOTOR_IDX] = 1;
 11768              		.loc 1 1587 0 is_stmt 1
 11769 114e FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 11770 1150 4B4A     		ldr	r2, .L498+12
 11771 1152 0121     		movs	r1, #1
 11772 1154 D154     		strb	r1, [r2, r3]
1588:..\src/command_processing.c ****             break;
 11773              		.loc 1 1588 0
 11774 1156 B8E1     		b	.L422
 11775              	.L405:
1589:..\src/command_processing.c ****     
1590:..\src/command_processing.c ****         case 53:        // Second Motor Position limits
1591:..\src/command_processing.c ****             g_mem.motor[SECOND_MOTOR_IDX].pos_lim_inf = (int32)(g_rx.buffer[3]<<24 | g_rx.buffer[4]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 267


 11776              		.loc 1 1591 0
 11777 1158 FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 11778 115a 474B     		ldr	r3, .L498+4
 11779 115c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 11780 115e 1906     		lsls	r1, r3, #24
 11781 1160 454B     		ldr	r3, .L498+4
 11782 1162 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 11783 1164 1B04     		lsls	r3, r3, #16
 11784 1166 1943     		orrs	r1, r1, r3
 11785 1168 434B     		ldr	r3, .L498+4
 11786 116a 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 11787 116c 1B02     		lsls	r3, r3, #8
 11788 116e 0B43     		orrs	r3, r3, r1
 11789 1170 4149     		ldr	r1, .L498+4
 11790 1172 8979     		ldrb	r1, [r1, #6]	@ zero_extendqisi2
 11791 1174 1943     		orrs	r1, r1, r3
 11792 1176 3F48     		ldr	r0, .L498
 11793 1178 1346     		mov	r3, r2
 11794 117a DB00     		lsls	r3, r3, #3
 11795 117c 9B1A     		subs	r3, r3, r2
 11796 117e 1B01     		lsls	r3, r3, #4
 11797 1180 0344     		add	r3, r3, r0
 11798 1182 E433     		adds	r3, r3, #228
 11799 1184 1960     		str	r1, [r3]
1592:..\src/command_processing.c ****             g_mem.motor[SECOND_MOTOR_IDX].pos_lim_sup = (int32)(g_rx.buffer[7]<<24 | g_rx.buffer[8]
 11800              		.loc 1 1592 0
 11801 1186 FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 11802 1188 3B4B     		ldr	r3, .L498+4
 11803 118a DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 11804 118c 1906     		lsls	r1, r3, #24
 11805 118e 3A4B     		ldr	r3, .L498+4
 11806 1190 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 11807 1192 1B04     		lsls	r3, r3, #16
 11808 1194 1943     		orrs	r1, r1, r3
 11809 1196 384B     		ldr	r3, .L498+4
 11810 1198 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 11811 119a 1B02     		lsls	r3, r3, #8
 11812 119c 0B43     		orrs	r3, r3, r1
 11813 119e 3649     		ldr	r1, .L498+4
 11814 11a0 897A     		ldrb	r1, [r1, #10]	@ zero_extendqisi2
 11815 11a2 1943     		orrs	r1, r1, r3
 11816 11a4 3348     		ldr	r0, .L498
 11817 11a6 1346     		mov	r3, r2
 11818 11a8 DB00     		lsls	r3, r3, #3
 11819 11aa 9B1A     		subs	r3, r3, r2
 11820 11ac 1B01     		lsls	r3, r3, #4
 11821 11ae 0344     		add	r3, r3, r0
 11822 11b0 E833     		adds	r3, r3, #232
 11823 11b2 1960     		str	r1, [r3]
1593:..\src/command_processing.c **** 
1594:..\src/command_processing.c ****             g_mem.motor[SECOND_MOTOR_IDX].pos_lim_inf = g_mem.motor[SECOND_MOTOR_IDX].pos_lim_inf <
 11824              		.loc 1 1594 0
 11825 11b4 FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 11826 11b6 F97C     		ldrb	r1, [r7, #19]	@ zero_extendqisi2
 11827 11b8 2E48     		ldr	r0, .L498
 11828 11ba 0B46     		mov	r3, r1
 11829 11bc DB00     		lsls	r3, r3, #3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 268


 11830 11be 5B1A     		subs	r3, r3, r1
 11831 11c0 1B01     		lsls	r3, r3, #4
 11832 11c2 0344     		add	r3, r3, r0
 11833 11c4 E433     		adds	r3, r3, #228
 11834 11c6 1868     		ldr	r0, [r3]
 11835 11c8 F97C     		ldrb	r1, [r7, #19]	@ zero_extendqisi2
 11836 11ca 2A4C     		ldr	r4, .L498
 11837 11cc 0B46     		mov	r3, r1
 11838 11ce DB00     		lsls	r3, r3, #3
 11839 11d0 5B1A     		subs	r3, r3, r1
 11840 11d2 1B01     		lsls	r3, r3, #4
 11841 11d4 2344     		add	r3, r3, r4
 11842 11d6 03F58873 		add	r3, r3, #272
 11843 11da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 11844 11dc 1C46     		mov	r4, r3
 11845 11de 2549     		ldr	r1, .L498
 11846 11e0 2346     		mov	r3, r4
 11847 11e2 5B00     		lsls	r3, r3, #1
 11848 11e4 2344     		add	r3, r3, r4
 11849 11e6 1B01     		lsls	r3, r3, #4
 11850 11e8 0B44     		add	r3, r3, r1
 11851 11ea 03F29513 		addw	r3, r3, #405
 11852 11ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 11853 11f0 00FA03F1 		lsl	r1, r0, r3
 11854 11f4 1F48     		ldr	r0, .L498
 11855 11f6 1346     		mov	r3, r2
 11856 11f8 DB00     		lsls	r3, r3, #3
 11857 11fa 9B1A     		subs	r3, r3, r2
 11858 11fc 1B01     		lsls	r3, r3, #4
 11859 11fe 0344     		add	r3, r3, r0
 11860 1200 E433     		adds	r3, r3, #228
 11861 1202 1960     		str	r1, [r3]
1595:..\src/command_processing.c ****             g_mem.motor[SECOND_MOTOR_IDX].pos_lim_sup = g_mem.motor[SECOND_MOTOR_IDX].pos_lim_sup <
 11862              		.loc 1 1595 0
 11863 1204 FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 11864 1206 F97C     		ldrb	r1, [r7, #19]	@ zero_extendqisi2
 11865 1208 1A48     		ldr	r0, .L498
 11866 120a 0B46     		mov	r3, r1
 11867 120c DB00     		lsls	r3, r3, #3
 11868 120e 5B1A     		subs	r3, r3, r1
 11869 1210 1B01     		lsls	r3, r3, #4
 11870 1212 0344     		add	r3, r3, r0
 11871 1214 E833     		adds	r3, r3, #232
 11872 1216 1868     		ldr	r0, [r3]
 11873 1218 F97C     		ldrb	r1, [r7, #19]	@ zero_extendqisi2
 11874 121a 164C     		ldr	r4, .L498
 11875 121c 0B46     		mov	r3, r1
 11876 121e DB00     		lsls	r3, r3, #3
 11877 1220 5B1A     		subs	r3, r3, r1
 11878 1222 1B01     		lsls	r3, r3, #4
 11879 1224 2344     		add	r3, r3, r4
 11880 1226 03F58873 		add	r3, r3, #272
 11881 122a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 11882 122c 1C46     		mov	r4, r3
 11883 122e 1149     		ldr	r1, .L498
 11884 1230 2346     		mov	r3, r4
 11885 1232 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 269


 11886 1234 2344     		add	r3, r3, r4
 11887 1236 1B01     		lsls	r3, r3, #4
 11888 1238 0B44     		add	r3, r3, r1
 11889 123a 03F29513 		addw	r3, r3, #405
 11890 123e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 11891 1240 00FA03F1 		lsl	r1, r0, r3
 11892 1244 0B48     		ldr	r0, .L498
 11893 1246 1346     		mov	r3, r2
 11894 1248 DB00     		lsls	r3, r3, #3
 11895 124a 9B1A     		subs	r3, r3, r2
 11896 124c 1B01     		lsls	r3, r3, #4
 11897 124e 0344     		add	r3, r3, r0
 11898 1250 E833     		adds	r3, r3, #232
 11899 1252 1960     		str	r1, [r3]
1596:..\src/command_processing.c ****             break;
 11900              		.loc 1 1596 0
 11901 1254 39E1     		b	.L422
 11902              	.L406:
1597:..\src/command_processing.c ****             
1598:..\src/command_processing.c ****         case 61:        // Second Motor Driver Type
1599:..\src/command_processing.c ****             g_mem.motor[SECOND_MOTOR_IDX].motor_driver_type = g_rx.buffer[3];
 11903              		.loc 1 1599 0
 11904 1256 FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 11905 1258 074B     		ldr	r3, .L498+4
 11906 125a D878     		ldrb	r0, [r3, #3]	@ zero_extendqisi2
 11907 125c 0549     		ldr	r1, .L498
 11908 125e 1346     		mov	r3, r2
 11909 1260 DB00     		lsls	r3, r3, #3
 11910 1262 9B1A     		subs	r3, r3, r2
 11911 1264 1B01     		lsls	r3, r3, #4
 11912 1266 0B44     		add	r3, r3, r1
 11913 1268 E233     		adds	r3, r3, #226
 11914 126a 0246     		mov	r2, r0
 11915 126c 1A70     		strb	r2, [r3]
1600:..\src/command_processing.c ****             set_motor_driver_type();
 11916              		.loc 1 1600 0
 11917 126e FFF7FEFF 		bl	set_motor_driver_type
1601:..\src/command_processing.c ****             break;
 11918              		.loc 1 1601 0
 11919 1272 2AE1     		b	.L422
 11920              	.L499:
 11921              		.align	2
 11922              	.L498:
 11923 1274 00000000 		.word	g_mem
 11924 1278 00000000 		.word	g_rx
 11925 127c 00000000 		.word	g_meas
 11926 1280 00000000 		.word	reset_last_value_flag
 11927              	.L407:
1602:..\src/command_processing.c **** 
1603:..\src/command_processing.c ****         case 75:        // Device type
1604:..\src/command_processing.c ****             g_mem.dev.dev_type = g_rx.buffer[3];
 11928              		.loc 1 1604 0
 11929 1284 934B     		ldr	r3, .L500
 11930 1286 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 11931 1288 934B     		ldr	r3, .L500+4
 11932 128a 83F8AC20 		strb	r2, [r3, #172]
1605:..\src/command_processing.c ****             
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 270


1606:..\src/command_processing.c ****             if (g_mem.dev.dev_type == SOFTHAND_PRO){    // change also gears parameters
 11933              		.loc 1 1606 0
 11934 128e 924B     		ldr	r3, .L500+4
 11935 1290 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 11936 1294 002B     		cmp	r3, #0
 11937 1296 40F0A480 		bne	.L478
1607:..\src/command_processing.c ****                 g_mem.enc[g_mem.motor[MOTOR_IDX].encoder_line].double_encoder_on_off = TRUE;
 11938              		.loc 1 1607 0
 11939 129a 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 11940 129c 8E49     		ldr	r1, .L500+4
 11941 129e 1346     		mov	r3, r2
 11942 12a0 DB00     		lsls	r3, r3, #3
 11943 12a2 9B1A     		subs	r3, r3, r2
 11944 12a4 1B01     		lsls	r3, r3, #4
 11945 12a6 0B44     		add	r3, r3, r1
 11946 12a8 03F58873 		add	r3, r3, #272
 11947 12ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 11948 12ae 1946     		mov	r1, r3
 11949 12b0 894A     		ldr	r2, .L500+4
 11950 12b2 0B46     		mov	r3, r1
 11951 12b4 5B00     		lsls	r3, r3, #1
 11952 12b6 0B44     		add	r3, r3, r1
 11953 12b8 1B01     		lsls	r3, r3, #4
 11954 12ba 1344     		add	r3, r3, r2
 11955 12bc 03F5D873 		add	r3, r3, #432
 11956 12c0 0122     		movs	r2, #1
 11957 12c2 1A70     		strb	r2, [r3]
1608:..\src/command_processing.c ****                 g_mem.enc[g_mem.motor[MOTOR_IDX].encoder_line].gears_params[0] = SH_N1;
 11958              		.loc 1 1608 0
 11959 12c4 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 11960 12c6 8449     		ldr	r1, .L500+4
 11961 12c8 1346     		mov	r3, r2
 11962 12ca DB00     		lsls	r3, r3, #3
 11963 12cc 9B1A     		subs	r3, r3, r2
 11964 12ce 1B01     		lsls	r3, r3, #4
 11965 12d0 0B44     		add	r3, r3, r1
 11966 12d2 03F58873 		add	r3, r3, #272
 11967 12d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 11968 12d8 1946     		mov	r1, r3
 11969 12da 7F4A     		ldr	r2, .L500+4
 11970 12dc 0B46     		mov	r3, r1
 11971 12de 5B00     		lsls	r3, r3, #1
 11972 12e0 0B44     		add	r3, r3, r1
 11973 12e2 1B01     		lsls	r3, r3, #4
 11974 12e4 1344     		add	r3, r3, r2
 11975 12e6 03F2B513 		addw	r3, r3, #437
 11976 12ea 2322     		movs	r2, #35
 11977 12ec 1A70     		strb	r2, [r3]
1609:..\src/command_processing.c ****                 g_mem.enc[g_mem.motor[MOTOR_IDX].encoder_line].gears_params[1] = SH_N2;
 11978              		.loc 1 1609 0
 11979 12ee 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 11980 12f0 7949     		ldr	r1, .L500+4
 11981 12f2 1346     		mov	r3, r2
 11982 12f4 DB00     		lsls	r3, r3, #3
 11983 12f6 9B1A     		subs	r3, r3, r2
 11984 12f8 1B01     		lsls	r3, r3, #4
 11985 12fa 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 271


 11986 12fc 03F58873 		add	r3, r3, #272
 11987 1300 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 11988 1302 1946     		mov	r1, r3
 11989 1304 744A     		ldr	r2, .L500+4
 11990 1306 0B46     		mov	r3, r1
 11991 1308 5B00     		lsls	r3, r3, #1
 11992 130a 0B44     		add	r3, r3, r1
 11993 130c 1B01     		lsls	r3, r3, #4
 11994 130e 1344     		add	r3, r3, r2
 11995 1310 03F5DB73 		add	r3, r3, #438
 11996 1314 0322     		movs	r2, #3
 11997 1316 1A70     		strb	r2, [r3]
1610:..\src/command_processing.c ****                 g_mem.enc[g_mem.motor[MOTOR_IDX].encoder_line].gears_params[2] = SH_I1;
 11998              		.loc 1 1610 0
 11999 1318 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 12000 131a 6F49     		ldr	r1, .L500+4
 12001 131c 1346     		mov	r3, r2
 12002 131e DB00     		lsls	r3, r3, #3
 12003 1320 9B1A     		subs	r3, r3, r2
 12004 1322 1B01     		lsls	r3, r3, #4
 12005 1324 0B44     		add	r3, r3, r1
 12006 1326 03F58873 		add	r3, r3, #272
 12007 132a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 12008 132c 1946     		mov	r1, r3
 12009 132e 6A4A     		ldr	r2, .L500+4
 12010 1330 0B46     		mov	r3, r1
 12011 1332 5B00     		lsls	r3, r3, #1
 12012 1334 0B44     		add	r3, r3, r1
 12013 1336 1B01     		lsls	r3, r3, #4
 12014 1338 1344     		add	r3, r3, r2
 12015 133a 03F2B713 		addw	r3, r3, #439
 12016 133e FF22     		movs	r2, #255
 12017 1340 1A70     		strb	r2, [r3]
1611:..\src/command_processing.c ****                 
1612:..\src/command_processing.c ****                 // Get CS0 encoder line for RIGHT HAND and CS1 line for LEFT HAND as default
1613:..\src/command_processing.c ****                 g_mem.motor[MOTOR_IDX].encoder_line  = g_mem.dev.right_left;
 12018              		.loc 1 1613 0
 12019 1342 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 12020 1344 644B     		ldr	r3, .L500+4
 12021 1346 93F8A700 		ldrb	r0, [r3, #167]	@ zero_extendqisi2
 12022 134a 6349     		ldr	r1, .L500+4
 12023 134c 1346     		mov	r3, r2
 12024 134e DB00     		lsls	r3, r3, #3
 12025 1350 9B1A     		subs	r3, r3, r2
 12026 1352 1B01     		lsls	r3, r3, #4
 12027 1354 0B44     		add	r3, r3, r1
 12028 1356 03F58873 		add	r3, r3, #272
 12029 135a 0246     		mov	r2, r0
 12030 135c 1A70     		strb	r2, [r3]
1614:..\src/command_processing.c ****                 g_mem.motor[MOTOR_IDX].pwm_rate_limiter = PWM_RATE_LIMITER_MAX;
 12031              		.loc 1 1614 0
 12032 135e 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 12033 1360 5D49     		ldr	r1, .L500+4
 12034 1362 1346     		mov	r3, r2
 12035 1364 DB00     		lsls	r3, r3, #3
 12036 1366 9B1A     		subs	r3, r3, r2
 12037 1368 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 272


 12038 136a 0B44     		add	r3, r3, r1
 12039 136c 03F21113 		addw	r3, r3, #273
 12040 1370 0122     		movs	r2, #1
 12041 1372 1A70     		strb	r2, [r3]
1615:..\src/command_processing.c ****                 g_mem.motor[MOTOR_IDX].not_revers_motor_flag = TRUE;       // SoftHand not reversib
 12042              		.loc 1 1615 0
 12043 1374 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 12044 1376 5849     		ldr	r1, .L500+4
 12045 1378 1346     		mov	r3, r2
 12046 137a DB00     		lsls	r3, r3, #3
 12047 137c 9B1A     		subs	r3, r3, r2
 12048 137e 1B01     		lsls	r3, r3, #4
 12049 1380 0B44     		add	r3, r3, r1
 12050 1382 03F58973 		add	r3, r3, #274
 12051 1386 0122     		movs	r2, #1
 12052 1388 1A70     		strb	r2, [r3]
1616:..\src/command_processing.c ****                 g_mem.motor[MOTOR_IDX].pos_lim_inf = 0;
 12053              		.loc 1 1616 0
 12054 138a 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 12055 138c 5249     		ldr	r1, .L500+4
 12056 138e 1346     		mov	r3, r2
 12057 1390 DB00     		lsls	r3, r3, #3
 12058 1392 9B1A     		subs	r3, r3, r2
 12059 1394 1B01     		lsls	r3, r3, #4
 12060 1396 0B44     		add	r3, r3, r1
 12061 1398 E433     		adds	r3, r3, #228
 12062 139a 0022     		movs	r2, #0
 12063 139c 1A60     		str	r2, [r3]
1617:..\src/command_processing.c ****                 g_mem.motor[MOTOR_IDX].pos_lim_sup = (int32)16000 << g_mem.enc[g_mem.motor[MOTOR_ID
 12064              		.loc 1 1617 0
 12065 139e 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 12066 13a0 397D     		ldrb	r1, [r7, #20]	@ zero_extendqisi2
 12067 13a2 4D48     		ldr	r0, .L500+4
 12068 13a4 0B46     		mov	r3, r1
 12069 13a6 DB00     		lsls	r3, r3, #3
 12070 13a8 5B1A     		subs	r3, r3, r1
 12071 13aa 1B01     		lsls	r3, r3, #4
 12072 13ac 0344     		add	r3, r3, r0
 12073 13ae 03F58873 		add	r3, r3, #272
 12074 13b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 12075 13b4 1846     		mov	r0, r3
 12076 13b6 4849     		ldr	r1, .L500+4
 12077 13b8 0346     		mov	r3, r0
 12078 13ba 5B00     		lsls	r3, r3, #1
 12079 13bc 0344     		add	r3, r3, r0
 12080 13be 1B01     		lsls	r3, r3, #4
 12081 13c0 0B44     		add	r3, r3, r1
 12082 13c2 03F29513 		addw	r3, r3, #405
 12083 13c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 12084 13c8 1946     		mov	r1, r3
 12085 13ca 4FF47A53 		mov	r3, #16000
 12086 13ce 03FA01F1 		lsl	r1, r3, r1
 12087 13d2 4148     		ldr	r0, .L500+4
 12088 13d4 1346     		mov	r3, r2
 12089 13d6 DB00     		lsls	r3, r3, #3
 12090 13d8 9B1A     		subs	r3, r3, r2
 12091 13da 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 273


 12092 13dc 0344     		add	r3, r3, r0
 12093 13de E833     		adds	r3, r3, #232
 12094 13e0 1960     		str	r1, [r3]
 12095              	.L478:
1618:..\src/command_processing.c ****             }      
1619:..\src/command_processing.c ****             
1620:..\src/command_processing.c ****             if (g_mem.dev.dev_type == SOFTHAND_2_MOTORS){    // activate also 2nd motor and double_
 12096              		.loc 1 1620 0
 12097 13e2 3D4B     		ldr	r3, .L500+4
 12098 13e4 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 12099 13e8 042B     		cmp	r3, #4
 12100 13ea 6DD1     		bne	.L487
1621:..\src/command_processing.c ****                 g_mem.dev.use_2nd_motor_flag = TRUE;
 12101              		.loc 1 1621 0
 12102 13ec 3A4B     		ldr	r3, .L500+4
 12103 13ee 0122     		movs	r2, #1
 12104 13f0 83F8A920 		strb	r2, [r3, #169]
1622:..\src/command_processing.c ****                 g_mem.enc[g_mem.motor[MOTOR_IDX].encoder_line].double_encoder_on_off = TRUE;
 12105              		.loc 1 1622 0
 12106 13f4 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 12107 13f6 3849     		ldr	r1, .L500+4
 12108 13f8 1346     		mov	r3, r2
 12109 13fa DB00     		lsls	r3, r3, #3
 12110 13fc 9B1A     		subs	r3, r3, r2
 12111 13fe 1B01     		lsls	r3, r3, #4
 12112 1400 0B44     		add	r3, r3, r1
 12113 1402 03F58873 		add	r3, r3, #272
 12114 1406 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 12115 1408 1946     		mov	r1, r3
 12116 140a 334A     		ldr	r2, .L500+4
 12117 140c 0B46     		mov	r3, r1
 12118 140e 5B00     		lsls	r3, r3, #1
 12119 1410 0B44     		add	r3, r3, r1
 12120 1412 1B01     		lsls	r3, r3, #4
 12121 1414 1344     		add	r3, r3, r2
 12122 1416 03F5D873 		add	r3, r3, #432
 12123 141a 0122     		movs	r2, #1
 12124 141c 1A70     		strb	r2, [r3]
1623:..\src/command_processing.c ****                 g_mem.enc[g_mem.motor[SECOND_MOTOR_IDX].encoder_line].double_encoder_on_off = TRUE;
 12125              		.loc 1 1623 0
 12126 141e FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 12127 1420 2D49     		ldr	r1, .L500+4
 12128 1422 1346     		mov	r3, r2
 12129 1424 DB00     		lsls	r3, r3, #3
 12130 1426 9B1A     		subs	r3, r3, r2
 12131 1428 1B01     		lsls	r3, r3, #4
 12132 142a 0B44     		add	r3, r3, r1
 12133 142c 03F58873 		add	r3, r3, #272
 12134 1430 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 12135 1432 1946     		mov	r1, r3
 12136 1434 284A     		ldr	r2, .L500+4
 12137 1436 0B46     		mov	r3, r1
 12138 1438 5B00     		lsls	r3, r3, #1
 12139 143a 0B44     		add	r3, r3, r1
 12140 143c 1B01     		lsls	r3, r3, #4
 12141 143e 1344     		add	r3, r3, r2
 12142 1440 03F5D873 		add	r3, r3, #432
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 274


 12143 1444 0122     		movs	r2, #1
 12144 1446 1A70     		strb	r2, [r3]
1624:..\src/command_processing.c ****             /*    
1625:..\src/command_processing.c ****                 g_mem.motor[MOTOR_IDX].pos_lim_inf = 0;
1626:..\src/command_processing.c ****                 g_mem.motor[MOTOR_IDX].pos_lim_sup = (int32)18000 << g_mem.enc[g_mem.motor[MOTOR_ID
1627:..\src/command_processing.c ****                 g_mem.motor[SECOND_MOTOR_IDX].pos_lim_inf = ((int32)(-25000)) << g_mem.enc[g_mem.mo
1628:..\src/command_processing.c ****                 g_mem.motor[SECOND_MOTOR_IDX].pos_lim_sup = 0;
1629:..\src/command_processing.c ****             */    
1630:..\src/command_processing.c ****                 for (i=0; i< NUM_OF_MOTORS; i++) {                     // Maxon DCX16S
 12145              		.loc 1 1630 0
 12146 1448 0023     		movs	r3, #0
 12147 144a FB75     		strb	r3, [r7, #23]
 12148 144c 2EE0     		b	.L480
 12149              	.L481:
1631:..\src/command_processing.c ****                     g_mem.motor[i].current_limit = 800;                // [mA]
 12150              		.loc 1 1631 0 discriminator 3
 12151 144e FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 12152 1450 2149     		ldr	r1, .L500+4
 12153 1452 1346     		mov	r3, r2
 12154 1454 DB00     		lsls	r3, r3, #3
 12155 1456 9B1A     		subs	r3, r3, r2
 12156 1458 1B01     		lsls	r3, r3, #4
 12157 145a 0B44     		add	r3, r3, r1
 12158 145c 03F58673 		add	r3, r3, #268
 12159 1460 4FF44872 		mov	r2, #800
 12160 1464 1A80     		strh	r2, [r3]	@ movhi
1632:..\src/command_processing.c ****                     g_mem.motor[i].k_p           = 0.12 * 65536;
 12161              		.loc 1 1632 0 discriminator 3
 12162 1466 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 12163 1468 1B49     		ldr	r1, .L500+4
 12164 146a 1346     		mov	r3, r2
 12165 146c DB00     		lsls	r3, r3, #3
 12166 146e 9B1A     		subs	r3, r3, r2
 12167 1470 1B01     		lsls	r3, r3, #4
 12168 1472 0B44     		add	r3, r3, r1
 12169 1474 B033     		adds	r3, r3, #176
 12170 1476 41F6B862 		movw	r2, #7864
 12171 147a 1A60     		str	r2, [r3]
1633:..\src/command_processing.c ****                     g_mem.motor[i].k_i           =    0 * 65536;
 12172              		.loc 1 1633 0 discriminator 3
 12173 147c FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 12174 147e 1649     		ldr	r1, .L500+4
 12175 1480 1346     		mov	r3, r2
 12176 1482 DB00     		lsls	r3, r3, #3
 12177 1484 9B1A     		subs	r3, r3, r2
 12178 1486 1B01     		lsls	r3, r3, #4
 12179 1488 0B44     		add	r3, r3, r1
 12180 148a B433     		adds	r3, r3, #180
 12181 148c 0022     		movs	r2, #0
 12182 148e 1A60     		str	r2, [r3]
1634:..\src/command_processing.c ****                     g_mem.motor[i].k_d           = 0.05 * 65536;
 12183              		.loc 1 1634 0 discriminator 3
 12184 1490 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 12185 1492 1149     		ldr	r1, .L500+4
 12186 1494 1346     		mov	r3, r2
 12187 1496 DB00     		lsls	r3, r3, #3
 12188 1498 9B1A     		subs	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 275


 12189 149a 1B01     		lsls	r3, r3, #4
 12190 149c 0B44     		add	r3, r3, r1
 12191 149e B833     		adds	r3, r3, #184
 12192 14a0 40F6CC42 		movw	r2, #3276
 12193 14a4 1A60     		str	r2, [r3]
1630:..\src/command_processing.c ****                     g_mem.motor[i].current_limit = 800;                // [mA]
 12194              		.loc 1 1630 0 discriminator 3
 12195 14a6 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 12196 14a8 0133     		adds	r3, r3, #1
 12197 14aa FB75     		strb	r3, [r7, #23]
 12198              	.L480:
1630:..\src/command_processing.c ****                     g_mem.motor[i].current_limit = 800;                // [mA]
 12199              		.loc 1 1630 0 is_stmt 0 discriminator 1
 12200 14ac FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 12201 14ae 012B     		cmp	r3, #1
 12202 14b0 CDD9     		bls	.L481
1635:..\src/command_processing.c ****                 }
1636:..\src/command_processing.c ****             }      
1637:..\src/command_processing.c ****             
1638:..\src/command_processing.c ****             break;
 12203              		.loc 1 1638 0 is_stmt 1
 12204 14b2 09E0     		b	.L487
 12205              	.L482:
1639:..\src/command_processing.c ****             
1640:..\src/command_processing.c ****         default:
1641:..\src/command_processing.c ****             break;
 12206              		.loc 1 1641 0
 12207 14b4 00BF     		nop
 12208 14b6 08E0     		b	.L422
 12209              	.L483:
1428:..\src/command_processing.c ****             
 12210              		.loc 1 1428 0
 12211 14b8 00BF     		nop
 12212 14ba 06E0     		b	.L422
 12213              	.L484:
1456:..\src/command_processing.c **** 
 12214              		.loc 1 1456 0
 12215 14bc 00BF     		nop
 12216 14be 04E0     		b	.L422
 12217              	.L485:
1474:..\src/command_processing.c ****             
 12218              		.loc 1 1474 0
 12219 14c0 00BF     		nop
 12220 14c2 02E0     		b	.L422
 12221              	.L486:
1484:..\src/command_processing.c ****            
 12222              		.loc 1 1484 0
 12223 14c4 00BF     		nop
 12224 14c6 00E0     		b	.L422
 12225              	.L487:
1638:..\src/command_processing.c ****             
 12226              		.loc 1 1638 0
 12227 14c8 00BF     		nop
 12228              	.L422:
1642:..\src/command_processing.c ****     }
1643:..\src/command_processing.c **** }
 12229              		.loc 1 1643 0 discriminator 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 276


 12230 14ca 00BF     		nop
 12231 14cc 1C37     		adds	r7, r7, #28
 12232              		.cfi_def_cfa_offset 20
 12233 14ce BD46     		mov	sp, r7
 12234              		.cfi_def_cfa_register 13
 12235              		@ sp needed
 12236 14d0 F0BD     		pop	{r4, r5, r6, r7, pc}
 12237              	.L501:
 12238 14d2 00BF     		.align	2
 12239              	.L500:
 12240 14d4 00000000 		.word	g_rx
 12241 14d8 00000000 		.word	g_mem
 12242              		.cfi_endproc
 12243              	.LFE69:
 12244              		.size	set_custom_param, .-set_custom_param
 12245              		.section	.rodata
 12246 10be 0000     		.align	2
 12247              	.LC145:
 12248 10c0 506F7274 		.ascii	"Port %u ID:\000"
 12248      20257520 
 12248      49443A00 
 12249              		.align	2
 12250              	.LC146:
 12251 10cc 2575202D 		.ascii	"%u - Device ID:\000"
 12251      20446576 
 12251      69636520 
 12251      49443A00 
 12252              		.align	2
 12253              	.LC147:
 12254 10dc 2575202D 		.ascii	"%u - IMU %d configuration:\000"
 12254      20494D55 
 12254      20256420 
 12254      636F6E66 
 12254      69677572 
 12255 10f7 00       		.align	2
 12256              	.LC148:
 12257 10f8 2575202D 		.ascii	"%u - SPI read delay:\000"
 12257      20535049 
 12257      20726561 
 12257      64206465 
 12257      6C61793A 
 12258 110d 000000   		.align	2
 12259              	.LC149:
 12260 1110 204E6F6E 		.ascii	" None\000"
 12260      6500
 12261 1116 0000     		.align	2
 12262              	.LC150:
 12263 1118 204C6F77 		.ascii	" Low\000"
 12263      00
 12264 111d 000000   		.align	2
 12265              	.LC151:
 12266 1120 20486967 		.ascii	" High\000"
 12266      6800
 12267 1126 0000     		.align	2
 12268              	.LC143:
 12269 1128 4E756D62 		.ascii	"Number of connected IMUs:\000"
 12269      6572206F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 277


 12269      6620636F 
 12269      6E6E6563 
 12269      74656420 
 12270 1142 0000     		.align	2
 12271              	.LC144:
 12272 1144 4D616720 		.ascii	"Mag cal parameters:\000"
 12272      63616C20 
 12272      70617261 
 12272      6D657465 
 12272      72733A00 
 12273              		.section	.text.get_IMU_param_list,"ax",%progbits
 12274              		.align	2
 12275              		.global	get_IMU_param_list
 12276              		.thumb
 12277              		.thumb_func
 12278              		.type	get_IMU_param_list, %function
 12279              	get_IMU_param_list:
 12280              	.LFB70:
1644:..\src/command_processing.c **** 
1645:..\src/command_processing.c **** //==============================================================================
1646:..\src/command_processing.c **** //                                                        GET IMU PARAMETER LIST
1647:..\src/command_processing.c **** //==============================================================================
1648:..\src/command_processing.c **** 
1649:..\src/command_processing.c **** void get_IMU_param_list(uint16 index)
1650:..\src/command_processing.c **** {
 12281              		.loc 1 1650 0
 12282              		.cfi_startproc
 12283              		@ args = 0, pretend = 0, frame = 1704
 12284              		@ frame_needed = 1, uses_anonymous_args = 0
 12285 0000 B0B5     		push	{r4, r5, r7, lr}
 12286              		.cfi_def_cfa_offset 16
 12287              		.cfi_offset 4, -16
 12288              		.cfi_offset 5, -12
 12289              		.cfi_offset 7, -8
 12290              		.cfi_offset 14, -4
 12291 0002 ADF5D56D 		sub	sp, sp, #1704
 12292              		.cfi_def_cfa_offset 1720
 12293 0006 00AF     		add	r7, sp, #0
 12294              		.cfi_def_cfa_register 7
 12295 0008 0246     		mov	r2, r0
 12296 000a BB1D     		adds	r3, r7, #6
 12297 000c 1A80     		strh	r2, [r3]	@ movhi
1651:..\src/command_processing.c ****     //Package to be sent variables
1652:..\src/command_processing.c ****     uint8 packet_data[  PARAM_BYTE_SLOT   +     // Number of connected IMUs
 12298              		.loc 1 1652 0
 12299 000e 07F58A73 		add	r3, r7, #276
 12300 0012 0022     		movs	r2, #0
 12301 0014 1A60     		str	r2, [r3]
 12302 0016 0433     		adds	r3, r3, #4
 12303 0018 40F27552 		movw	r2, #1397
 12304 001c 0021     		movs	r1, #0
 12305 001e 1846     		mov	r0, r3
 12306 0020 FFF7FEFF 		bl	memset
1653:..\src/command_processing.c ****                         7*PARAM_BYTE_SLOT +     // IMUs ID  (1 port instead of 7)
1654:..\src/command_processing.c ****                         9*PARAM_BYTE_SLOT +     // Mag cal parameters (1 row instead of 9)
1655:..\src/command_processing.c ****                         PARAM_BYTE_SLOT   +     // 1 - Device ID
1656:..\src/command_processing.c ****                         PARAM_BYTE_SLOT*N_IMU_MAX + // IMU configurations
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 278


1657:..\src/command_processing.c ****                         PARAM_BYTE_SLOT   +     // SPI read delay
1658:..\src/command_processing.c ****                         PARAM_MENU_SLOT   + PARAM_BYTE_SLOT + 1 ] = "";
1659:..\src/command_processing.c ****     uint16 num_imus_id_params = 7;      //(1 port instead of 7)
 12307              		.loc 1 1659 0
 12308 0024 0723     		movs	r3, #7
 12309 0026 A7F89A36 		strh	r3, [r7, #1690]	@ movhi
1660:..\src/command_processing.c ****     uint16 num_mag_cal_params = 0;
 12310              		.loc 1 1660 0
 12311 002a 0023     		movs	r3, #0
 12312 002c A7F8A636 		strh	r3, [r7, #1702]	@ movhi
1661:..\src/command_processing.c ****     uint16 first_imu_parameter = 2;
 12313              		.loc 1 1661 0
 12314 0030 0223     		movs	r3, #2
 12315 0032 A7F89836 		strh	r3, [r7, #1688]	@ movhi
1662:..\src/command_processing.c ****     uint16 packet_length = PARAM_BYTE_SLOT +
 12316              		.loc 1 1662 0
 12317 0036 B7F89A36 		ldrh	r3, [r7, #1690]
 12318 003a 5A1C     		adds	r2, r3, #1
1663:..\src/command_processing.c ****                            num_imus_id_params*PARAM_BYTE_SLOT +
 12319              		.loc 1 1663 0
 12320 003c B7F8A636 		ldrh	r3, [r7, #1702]
 12321 0040 1344     		add	r3, r3, r2
1664:..\src/command_processing.c ****                            num_mag_cal_params*PARAM_BYTE_SLOT +
 12322              		.loc 1 1664 0
 12323 0042 0133     		adds	r3, r3, #1
1662:..\src/command_processing.c ****     uint16 packet_length = PARAM_BYTE_SLOT +
 12324              		.loc 1 1662 0
 12325 0044 9AB2     		uxth	r2, r3
 12326 0046 D24B     		ldr	r3, .L548
 12327 0048 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 12328 004a 9BB2     		uxth	r3, r3
 12329 004c 1344     		add	r3, r3, r2
 12330 004e 9BB2     		uxth	r3, r3
 12331 0050 1A46     		mov	r2, r3	@ movhi
 12332 0052 9200     		lsls	r2, r2, #2
 12333 0054 1344     		add	r3, r3, r2
 12334 0056 1A46     		mov	r2, r3	@ movhi
 12335 0058 9100     		lsls	r1, r2, #2
 12336 005a 1A46     		mov	r2, r3	@ movhi
 12337 005c 0B46     		mov	r3, r1	@ movhi
 12338 005e 1344     		add	r3, r3, r2
 12339 0060 5B00     		lsls	r3, r3, #1
 12340 0062 9BB2     		uxth	r3, r3
 12341 0064 FB33     		adds	r3, r3, #251
 12342 0066 A7F89636 		strh	r3, [r7, #1686]	@ movhi
1665:..\src/command_processing.c ****                            PARAM_BYTE_SLOT   + 
1666:..\src/command_processing.c ****                            (uint16)(PARAM_BYTE_SLOT*N_IMU_Connected) +
1667:..\src/command_processing.c ****                            PARAM_BYTE_SLOT + PARAM_MENU_SLOT + PARAM_BYTE_SLOT + 1;
1668:..\src/command_processing.c **** 
1669:..\src/command_processing.c ****     //Auxiliary variables
1670:..\src/command_processing.c ****     uint16 CYDATA i, j, k, h;
1671:..\src/command_processing.c ****     uint16 start_byte = 0;
 12343              		.loc 1 1671 0
 12344 006a 0023     		movs	r3, #0
 12345 006c A7F89436 		strh	r3, [r7, #1684]	@ movhi
1672:..\src/command_processing.c **** 
1673:..\src/command_processing.c ****     //Parameters menu string definitions
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 279


1674:..\src/command_processing.c ****     char n_imu_str[26]          = "Number of connected IMUs:";
 12346              		.loc 1 1674 0
 12347 0070 07F1F803 		add	r3, r7, #248
 12348 0074 C74A     		ldr	r2, .L548+4
 12349 0076 1C46     		mov	r4, r3
 12350 0078 1546     		mov	r5, r2
 12351 007a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 12352 007c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 12353 007e 95E80700 		ldmia	r5, {r0, r1, r2}
 12354 0082 03C4     		stmia	r4!, {r0, r1}
 12355 0084 2280     		strh	r2, [r4]	@ movhi
1675:..\src/command_processing.c ****     char ids_str[11]            = "";
 12356              		.loc 1 1675 0
 12357 0086 07F1EC03 		add	r3, r7, #236
 12358 008a 0022     		movs	r2, #0
 12359 008c 1A60     		str	r2, [r3]
 12360 008e 0433     		adds	r3, r3, #4
 12361 0090 0022     		movs	r2, #0
 12362 0092 1A60     		str	r2, [r3]
 12363 0094 C3F80320 		str	r2, [r3, #3]	@ unaligned
1676:..\src/command_processing.c ****     char mag_param_str[20]      = "Mag cal parameters:";
 12364              		.loc 1 1676 0
 12365 0098 07F1D803 		add	r3, r7, #216
 12366 009c BE4A     		ldr	r2, .L548+8
 12367 009e 1C46     		mov	r4, r3
 12368 00a0 1546     		mov	r5, r2
 12369 00a2 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 12370 00a4 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 12371 00a6 2B68     		ldr	r3, [r5]
 12372 00a8 2360     		str	r3, [r4]
1677:..\src/command_processing.c ****     char id_str[16]             = "";
 12373              		.loc 1 1677 0
 12374 00aa 07F1C803 		add	r3, r7, #200
 12375 00ae 0022     		movs	r2, #0
 12376 00b0 1A60     		str	r2, [r3]
 12377 00b2 0433     		adds	r3, r3, #4
 12378 00b4 0022     		movs	r2, #0
 12379 00b6 1A60     		str	r2, [r3]
 12380 00b8 5A60     		str	r2, [r3, #4]
 12381 00ba 9A60     		str	r2, [r3, #8]
1678:..\src/command_processing.c ****     char imu_table_str[42]      = "";
 12382              		.loc 1 1678 0
 12383 00bc 07F19C03 		add	r3, r7, #156
 12384 00c0 0022     		movs	r2, #0
 12385 00c2 1A60     		str	r2, [r3]
 12386 00c4 0433     		adds	r3, r3, #4
 12387 00c6 2622     		movs	r2, #38
 12388 00c8 0021     		movs	r1, #0
 12389 00ca 1846     		mov	r0, r3
 12390 00cc FFF7FEFF 		bl	memset
1679:..\src/command_processing.c ****     char spi_read_delay_str[26] = "";
 12391              		.loc 1 1679 0
 12392 00d0 07F18003 		add	r3, r7, #128
 12393 00d4 0022     		movs	r2, #0
 12394 00d6 1A60     		str	r2, [r3]
 12395 00d8 0433     		adds	r3, r3, #4
 12396 00da 0022     		movs	r2, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 280


 12397 00dc 1A60     		str	r2, [r3]
 12398 00de 5A60     		str	r2, [r3, #4]
 12399 00e0 9A60     		str	r2, [r3, #8]
 12400 00e2 DA60     		str	r2, [r3, #12]
 12401 00e4 1A61     		str	r2, [r3, #16]
 12402 00e6 9A82     		strh	r2, [r3, #20]	@ movhi
1680:..\src/command_processing.c ****     
1681:..\src/command_processing.c ****     //Strings lenghts
1682:..\src/command_processing.c ****     uint8 CYDATA id_str_len = strlen(id_str);
 12403              		.loc 1 1682 0
 12404 00e8 07F1C803 		add	r3, r7, #200
 12405 00ec 1846     		mov	r0, r3
 12406 00ee FFF7FEFF 		bl	strlen
 12407 00f2 0346     		mov	r3, r0
 12408 00f4 87F89336 		strb	r3, [r7, #1683]
1683:..\src/command_processing.c ****     uint8 CYDATA n_imu_str_len = strlen(n_imu_str);
 12409              		.loc 1 1683 0
 12410 00f8 07F1F803 		add	r3, r7, #248
 12411 00fc 1846     		mov	r0, r3
 12412 00fe FFF7FEFF 		bl	strlen
 12413 0102 0346     		mov	r3, r0
 12414 0104 87F89236 		strb	r3, [r7, #1682]
1684:..\src/command_processing.c ****     uint8 CYDATA ids_str_len = strlen(ids_str);
 12415              		.loc 1 1684 0
 12416 0108 07F1EC03 		add	r3, r7, #236
 12417 010c 1846     		mov	r0, r3
 12418 010e FFF7FEFF 		bl	strlen
 12419 0112 0346     		mov	r3, r0
 12420 0114 87F89136 		strb	r3, [r7, #1681]
1685:..\src/command_processing.c ****     uint8 CYDATA mag_param_str_len = strlen(mag_param_str);
 12421              		.loc 1 1685 0
 12422 0118 07F1D803 		add	r3, r7, #216
 12423 011c 1846     		mov	r0, r3
 12424 011e FFF7FEFF 		bl	strlen
 12425 0122 0346     		mov	r3, r0
 12426 0124 87F89036 		strb	r3, [r7, #1680]
1686:..\src/command_processing.c ****     uint8 CYDATA imu_table_str_len = strlen(imu_table_str);
 12427              		.loc 1 1686 0
 12428 0128 07F19C03 		add	r3, r7, #156
 12429 012c 1846     		mov	r0, r3
 12430 012e FFF7FEFF 		bl	strlen
 12431 0132 0346     		mov	r3, r0
 12432 0134 87F88F36 		strb	r3, [r7, #1679]
1687:..\src/command_processing.c ****     uint8 CYDATA spi_read_delay_str_len = strlen(spi_read_delay_str);
 12433              		.loc 1 1687 0
 12434 0138 07F18003 		add	r3, r7, #128
 12435 013c 1846     		mov	r0, r3
 12436 013e FFF7FEFF 		bl	strlen
 12437 0142 0346     		mov	r3, r0
 12438 0144 87F89D36 		strb	r3, [r7, #1693]
1688:..\src/command_processing.c ****     
1689:..\src/command_processing.c ****     char spi_delay_menu[118]    = "";
 12439              		.loc 1 1689 0
 12440 0148 07F10803 		add	r3, r7, #8
 12441 014c 0022     		movs	r2, #0
 12442 014e 1A60     		str	r2, [r3]
 12443 0150 0433     		adds	r3, r3, #4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 281


 12444 0152 7222     		movs	r2, #114
 12445 0154 0021     		movs	r1, #0
 12446 0156 1846     		mov	r0, r3
 12447 0158 FFF7FEFF 		bl	memset
1690:..\src/command_processing.c ****     uint8 CYDATA spi_delay_menu_len;
1691:..\src/command_processing.c ****  
1692:..\src/command_processing.c ****     sprintf(spi_delay_menu, "0 -> None\n1 -> Low (%u us delay for each 8-bit register read)\n2 -> H
 12448              		.loc 1 1692 0
 12449 015c 07F10800 		add	r0, r7, #8
 12450 0160 6423     		movs	r3, #100
 12451 0162 0A22     		movs	r2, #10
 12452 0164 8D49     		ldr	r1, .L548+12
 12453 0166 FFF7FEFF 		bl	sprintf
1693:..\src/command_processing.c ****     spi_delay_menu_len = strlen(spi_delay_menu);
 12454              		.loc 1 1693 0
 12455 016a 07F10803 		add	r3, r7, #8
 12456 016e 1846     		mov	r0, r3
 12457 0170 FFF7FEFF 		bl	strlen
 12458 0174 0346     		mov	r3, r0
 12459 0176 87F88E36 		strb	r3, [r7, #1678]
1694:..\src/command_processing.c **** 
1695:..\src/command_processing.c ****     // Compute number of read parameters depending on N_IMU_Connected and
1696:..\src/command_processing.c ****     // update packet_length
1697:..\src/command_processing.c ****     num_mag_cal_params = (uint16)(N_IMU_Connected / 2);
 12460              		.loc 1 1697 0
 12461 017a 854B     		ldr	r3, .L548
 12462 017c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 12463 017e 5B08     		lsrs	r3, r3, #1
 12464 0180 DBB2     		uxtb	r3, r3
 12465 0182 A7F8A636 		strh	r3, [r7, #1702]	@ movhi
1698:..\src/command_processing.c ****     if ( (N_IMU_Connected - num_mag_cal_params*2) > 0 ) num_mag_cal_params++;
 12466              		.loc 1 1698 0
 12467 0186 824B     		ldr	r3, .L548
 12468 0188 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 12469 018a 1A46     		mov	r2, r3
 12470 018c B7F8A636 		ldrh	r3, [r7, #1702]
 12471 0190 5B00     		lsls	r3, r3, #1
 12472 0192 D31A     		subs	r3, r2, r3
 12473 0194 002B     		cmp	r3, #0
 12474 0196 04DD     		ble	.L503
 12475              		.loc 1 1698 0 is_stmt 0 discriminator 1
 12476 0198 B7F8A636 		ldrh	r3, [r7, #1702]
 12477 019c 0133     		adds	r3, r3, #1
 12478 019e A7F8A636 		strh	r3, [r7, #1702]	@ movhi
 12479              	.L503:
1699:..\src/command_processing.c ****     
1700:..\src/command_processing.c ****     packet_length = PARAM_BYTE_SLOT +
 12480              		.loc 1 1700 0 is_stmt 1
 12481 01a2 B7F89A36 		ldrh	r3, [r7, #1690]
 12482 01a6 5A1C     		adds	r2, r3, #1
1701:..\src/command_processing.c ****                     num_imus_id_params*PARAM_BYTE_SLOT +
 12483              		.loc 1 1701 0
 12484 01a8 B7F8A636 		ldrh	r3, [r7, #1702]
 12485 01ac 1344     		add	r3, r3, r2
1702:..\src/command_processing.c ****                     num_mag_cal_params*PARAM_BYTE_SLOT +
 12486              		.loc 1 1702 0
 12487 01ae 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 282


1700:..\src/command_processing.c ****                     num_imus_id_params*PARAM_BYTE_SLOT +
 12488              		.loc 1 1700 0
 12489 01b0 9AB2     		uxth	r2, r3
 12490 01b2 774B     		ldr	r3, .L548
 12491 01b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 12492 01b6 9BB2     		uxth	r3, r3
 12493 01b8 1344     		add	r3, r3, r2
 12494 01ba 9BB2     		uxth	r3, r3
 12495 01bc 1A46     		mov	r2, r3	@ movhi
 12496 01be 9200     		lsls	r2, r2, #2
 12497 01c0 1344     		add	r3, r3, r2
 12498 01c2 1A46     		mov	r2, r3	@ movhi
 12499 01c4 9100     		lsls	r1, r2, #2
 12500 01c6 1A46     		mov	r2, r3	@ movhi
 12501 01c8 0B46     		mov	r3, r1	@ movhi
 12502 01ca 1344     		add	r3, r3, r2
 12503 01cc 5B00     		lsls	r3, r3, #1
 12504 01ce 9BB2     		uxth	r3, r3
 12505 01d0 C933     		adds	r3, r3, #201
 12506 01d2 A7F89636 		strh	r3, [r7, #1686]	@ movhi
1703:..\src/command_processing.c ****                     PARAM_BYTE_SLOT   + 
1704:..\src/command_processing.c ****                     (uint16)(PARAM_BYTE_SLOT*N_IMU_Connected) +
1705:..\src/command_processing.c ****                     PARAM_MENU_SLOT + PARAM_BYTE_SLOT + 1;
1706:..\src/command_processing.c **** 
1707:..\src/command_processing.c ****     first_imu_parameter = 1 + num_imus_id_params + num_mag_cal_params + 2;
 12507              		.loc 1 1707 0
 12508 01d6 B7F89A26 		ldrh	r2, [r7, #1690]	@ movhi
 12509 01da B7F8A636 		ldrh	r3, [r7, #1702]	@ movhi
 12510 01de 1344     		add	r3, r3, r2
 12511 01e0 9BB2     		uxth	r3, r3
 12512 01e2 0333     		adds	r3, r3, #3
 12513 01e4 A7F89836 		strh	r3, [r7, #1688]	@ movhi
1708:..\src/command_processing.c ****     packet_data[0] = CMD_GET_IMU_PARAM;
 12514              		.loc 1 1708 0
 12515 01e8 07F58A73 		add	r3, r7, #276
 12516 01ec A222     		movs	r2, #162
 12517 01ee 1A70     		strb	r2, [r3]
1709:..\src/command_processing.c ****     packet_data[1] = 1 + num_imus_id_params + num_mag_cal_params + 1 + (uint8)N_IMU_Connected + 1; 
 12518              		.loc 1 1709 0
 12519 01f0 B7F89A36 		ldrh	r3, [r7, #1690]	@ movhi
 12520 01f4 DAB2     		uxtb	r2, r3
 12521 01f6 B7F8A636 		ldrh	r3, [r7, #1702]	@ movhi
 12522 01fa DBB2     		uxtb	r3, r3
 12523 01fc 1344     		add	r3, r3, r2
 12524 01fe DAB2     		uxtb	r2, r3
 12525 0200 634B     		ldr	r3, .L548
 12526 0202 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 12527 0204 1344     		add	r3, r3, r2
 12528 0206 DBB2     		uxtb	r3, r3
 12529 0208 0333     		adds	r3, r3, #3
 12530 020a DAB2     		uxtb	r2, r3
 12531 020c 07F58A73 		add	r3, r7, #276
 12532 0210 5A70     		strb	r2, [r3, #1]
1710:..\src/command_processing.c **** 
1711:..\src/command_processing.c ****     switch(index) {
 12533              		.loc 1 1711 0
 12534 0212 BB1D     		adds	r3, r7, #6
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 283


 12535 0214 1B88     		ldrh	r3, [r3]
 12536 0216 002B     		cmp	r3, #0
 12537 0218 40F0D084 		bne	.L546
1712:..\src/command_processing.c ****         case 0:         //List of all parameters with relative types
1713:..\src/command_processing.c ****             /*-------------N IMU--------------*/
1714:..\src/command_processing.c ****             start_byte = 0;
 12538              		.loc 1 1714 0
 12539 021c 0023     		movs	r3, #0
 12540 021e A7F89436 		strh	r3, [r7, #1684]	@ movhi
1715:..\src/command_processing.c ****             packet_data[2] = TYPE_UINT8;
 12541              		.loc 1 1715 0
 12542 0222 07F58A73 		add	r3, r7, #276
 12543 0226 0222     		movs	r2, #2
 12544 0228 9A70     		strb	r2, [r3, #2]
1716:..\src/command_processing.c ****             packet_data[3] = 1;
 12545              		.loc 1 1716 0
 12546 022a 07F58A73 		add	r3, r7, #276
 12547 022e 0122     		movs	r2, #1
 12548 0230 DA70     		strb	r2, [r3, #3]
1717:..\src/command_processing.c ****             packet_data[4] = (uint8)N_IMU_Connected;
 12549              		.loc 1 1717 0
 12550 0232 574B     		ldr	r3, .L548
 12551 0234 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 12552 0236 07F58A73 		add	r3, r7, #276
 12553 023a 1A71     		strb	r2, [r3, #4]
1718:..\src/command_processing.c ****             for(i = n_imu_str_len; i != 0; i--)
 12554              		.loc 1 1718 0
 12555 023c 97F89236 		ldrb	r3, [r7, #1682]	@ zero_extendqisi2
 12556 0240 A7F8A436 		strh	r3, [r7, #1700]	@ movhi
 12557 0244 15E0     		b	.L506
 12558              	.L507:
1719:..\src/command_processing.c ****                 packet_data[5 + n_imu_str_len - i] = n_imu_str[n_imu_str_len - i];
 12559              		.loc 1 1719 0 discriminator 3
 12560 0246 97F89236 		ldrb	r3, [r7, #1682]	@ zero_extendqisi2
 12561 024a 5A1D     		adds	r2, r3, #5
 12562 024c B7F8A436 		ldrh	r3, [r7, #1700]
 12563 0250 D31A     		subs	r3, r2, r3
 12564 0252 97F89216 		ldrb	r1, [r7, #1682]	@ zero_extendqisi2
 12565 0256 B7F8A426 		ldrh	r2, [r7, #1700]
 12566 025a 8A1A     		subs	r2, r1, r2
 12567 025c 07F1F801 		add	r1, r7, #248
 12568 0260 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 12569 0262 07F58A72 		add	r2, r7, #276
 12570 0266 D154     		strb	r1, [r2, r3]
1718:..\src/command_processing.c ****             for(i = n_imu_str_len; i != 0; i--)
 12571              		.loc 1 1718 0 discriminator 3
 12572 0268 B7F8A436 		ldrh	r3, [r7, #1700]
 12573 026c 013B     		subs	r3, r3, #1
 12574 026e A7F8A436 		strh	r3, [r7, #1700]	@ movhi
 12575              	.L506:
1718:..\src/command_processing.c ****             for(i = n_imu_str_len; i != 0; i--)
 12576              		.loc 1 1718 0 is_stmt 0 discriminator 1
 12577 0272 B7F8A436 		ldrh	r3, [r7, #1700]
 12578 0276 002B     		cmp	r3, #0
 12579 0278 E5D1     		bne	.L507
1720:..\src/command_processing.c ****                 
1721:..\src/command_processing.c ****             /*-------------IMUS ID--------------*/
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 284


1722:..\src/command_processing.c ****             start_byte = start_byte + PARAM_BYTE_SLOT;
 12580              		.loc 1 1722 0 is_stmt 1
 12581 027a B7F89436 		ldrh	r3, [r7, #1684]	@ movhi
 12582 027e 3233     		adds	r3, r3, #50
 12583 0280 A7F89436 		strh	r3, [r7, #1684]	@ movhi
1723:..\src/command_processing.c ****             i = 0;
 12584              		.loc 1 1723 0
 12585 0284 0023     		movs	r3, #0
 12586 0286 A7F8A436 		strh	r3, [r7, #1700]	@ movhi
1724:..\src/command_processing.c ****             for (k = 0; k < num_imus_id_params; k++){
 12587              		.loc 1 1724 0
 12588 028a 0023     		movs	r3, #0
 12589 028c A7F8A036 		strh	r3, [r7, #1696]	@ movhi
 12590 0290 B2E0     		b	.L508
 12591              	.L515:
1725:..\src/command_processing.c ****                 sprintf(ids_str, "Port %u ID:", k);
 12592              		.loc 1 1725 0
 12593 0292 B7F8A026 		ldrh	r2, [r7, #1696]
 12594 0296 07F1EC03 		add	r3, r7, #236
 12595 029a 4149     		ldr	r1, .L548+16
 12596 029c 1846     		mov	r0, r3
 12597 029e FFF7FEFF 		bl	sprintf
1726:..\src/command_processing.c ****                 h = 4;
 12598              		.loc 1 1726 0
 12599 02a2 0423     		movs	r3, #4
 12600 02a4 A7F89E36 		strh	r3, [r7, #1694]	@ movhi
1727:..\src/command_processing.c ****                 ids_str_len = strlen(ids_str);
 12601              		.loc 1 1727 0
 12602 02a8 07F1EC03 		add	r3, r7, #236
 12603 02ac 1846     		mov	r0, r3
 12604 02ae FFF7FEFF 		bl	strlen
 12605 02b2 0346     		mov	r3, r0
 12606 02b4 87F89136 		strb	r3, [r7, #1681]
1728:..\src/command_processing.c ****                 packet_data[2+start_byte + PARAM_BYTE_SLOT*k] = TYPE_UINT8;
 12607              		.loc 1 1728 0
 12608 02b8 B7F89436 		ldrh	r3, [r7, #1684]
 12609 02bc 9A1C     		adds	r2, r3, #2
 12610 02be B7F8A036 		ldrh	r3, [r7, #1696]
 12611 02c2 3221     		movs	r1, #50
 12612 02c4 01FB03F3 		mul	r3, r1, r3
 12613 02c8 1344     		add	r3, r3, r2
 12614 02ca 07F58A72 		add	r2, r7, #276
 12615 02ce 0221     		movs	r1, #2
 12616 02d0 D154     		strb	r1, [r2, r3]
1729:..\src/command_processing.c ****                 packet_data[3+start_byte + PARAM_BYTE_SLOT*k] = 3;
 12617              		.loc 1 1729 0
 12618 02d2 B7F89436 		ldrh	r3, [r7, #1684]
 12619 02d6 DA1C     		adds	r2, r3, #3
 12620 02d8 B7F8A036 		ldrh	r3, [r7, #1696]
 12621 02dc 3221     		movs	r1, #50
 12622 02de 01FB03F3 		mul	r3, r1, r3
 12623 02e2 1344     		add	r3, r3, r2
 12624 02e4 07F58A72 		add	r2, r7, #276
 12625 02e8 0321     		movs	r1, #3
 12626 02ea D154     		strb	r1, [r2, r3]
1730:..\src/command_processing.c ****                 
1731:..\src/command_processing.c ****                 for (j = 3*k; j <= 3*k+2; j++) {  // for each possible imu on port k
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 285


 12627              		.loc 1 1731 0
 12628 02ec B7F8A036 		ldrh	r3, [r7, #1696]	@ movhi
 12629 02f0 1A46     		mov	r2, r3	@ movhi
 12630 02f2 5200     		lsls	r2, r2, #1
 12631 02f4 1344     		add	r3, r3, r2
 12632 02f6 A7F8A236 		strh	r3, [r7, #1698]	@ movhi
 12633 02fa 39E0     		b	.L509
 12634              	.L512:
1732:..\src/command_processing.c ****                     if (IMU_connected[i] == j) {
 12635              		.loc 1 1732 0
 12636 02fc B7F8A436 		ldrh	r3, [r7, #1700]
 12637 0300 284A     		ldr	r2, .L548+20
 12638 0302 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 12639 0304 9BB2     		uxth	r3, r3
 12640 0306 B7F8A226 		ldrh	r2, [r7, #1698]
 12641 030a 9A42     		cmp	r2, r3
 12642 030c 17D1     		bne	.L510
1733:..\src/command_processing.c ****                         packet_data[h+start_byte + PARAM_BYTE_SLOT*k] = (uint8)IMU_connected[i];   
 12643              		.loc 1 1733 0
 12644 030e B7F89E26 		ldrh	r2, [r7, #1694]
 12645 0312 B7F89436 		ldrh	r3, [r7, #1684]
 12646 0316 1A44     		add	r2, r2, r3
 12647 0318 B7F8A036 		ldrh	r3, [r7, #1696]
 12648 031c 3221     		movs	r1, #50
 12649 031e 01FB03F3 		mul	r3, r1, r3
 12650 0322 1344     		add	r3, r3, r2
 12651 0324 B7F8A426 		ldrh	r2, [r7, #1700]
 12652 0328 1E49     		ldr	r1, .L548+20
 12653 032a 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 12654 032c 07F58A72 		add	r2, r7, #276
 12655 0330 D154     		strb	r1, [r2, r3]
1734:..\src/command_processing.c ****                         i++;
 12656              		.loc 1 1734 0
 12657 0332 B7F8A436 		ldrh	r3, [r7, #1700]
 12658 0336 0133     		adds	r3, r3, #1
 12659 0338 A7F8A436 		strh	r3, [r7, #1700]	@ movhi
 12660 033c 0EE0     		b	.L511
 12661              	.L510:
1735:..\src/command_processing.c ****                     } 
1736:..\src/command_processing.c ****                     else {
1737:..\src/command_processing.c ****                         packet_data[h+start_byte + PARAM_BYTE_SLOT*k] = 255;
 12662              		.loc 1 1737 0
 12663 033e B7F89E26 		ldrh	r2, [r7, #1694]
 12664 0342 B7F89436 		ldrh	r3, [r7, #1684]
 12665 0346 1A44     		add	r2, r2, r3
 12666 0348 B7F8A036 		ldrh	r3, [r7, #1696]
 12667 034c 3221     		movs	r1, #50
 12668 034e 01FB03F3 		mul	r3, r1, r3
 12669 0352 1344     		add	r3, r3, r2
 12670 0354 07F58A72 		add	r2, r7, #276
 12671 0358 FF21     		movs	r1, #255
 12672 035a D154     		strb	r1, [r2, r3]
 12673              	.L511:
1738:..\src/command_processing.c ****                     }
1739:..\src/command_processing.c ****                     h++;
 12674              		.loc 1 1739 0 discriminator 2
 12675 035c B7F89E36 		ldrh	r3, [r7, #1694]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 286


 12676 0360 0133     		adds	r3, r3, #1
 12677 0362 A7F89E36 		strh	r3, [r7, #1694]	@ movhi
1731:..\src/command_processing.c ****                     if (IMU_connected[i] == j) {
 12678              		.loc 1 1731 0 discriminator 2
 12679 0366 B7F8A236 		ldrh	r3, [r7, #1698]
 12680 036a 0133     		adds	r3, r3, #1
 12681 036c A7F8A236 		strh	r3, [r7, #1698]	@ movhi
 12682              	.L509:
1731:..\src/command_processing.c ****                     if (IMU_connected[i] == j) {
 12683              		.loc 1 1731 0 is_stmt 0 discriminator 1
 12684 0370 B7F8A216 		ldrh	r1, [r7, #1698]
 12685 0374 B7F8A026 		ldrh	r2, [r7, #1696]
 12686 0378 1346     		mov	r3, r2
 12687 037a 5B00     		lsls	r3, r3, #1
 12688 037c 1344     		add	r3, r3, r2
 12689 037e 0233     		adds	r3, r3, #2
 12690 0380 9942     		cmp	r1, r3
 12691 0382 BBDD     		ble	.L512
1740:..\src/command_processing.c ****                 }
1741:..\src/command_processing.c **** 
1742:..\src/command_processing.c ****                 //if (IMU_connected[i] >= 3*k && IMU_connected[i] <= 3*k + 2)
1743:..\src/command_processing.c ****                 for(j = ids_str_len; j != 0; j--)
 12692              		.loc 1 1743 0 is_stmt 1
 12693 0384 97F89136 		ldrb	r3, [r7, #1681]	@ zero_extendqisi2
 12694 0388 A7F8A236 		strh	r3, [r7, #1698]	@ movhi
 12695 038c 2BE0     		b	.L513
 12696              	.L549:
 12697 038e 00BF     		.align	2
 12698              	.L548:
 12699 0390 00000000 		.word	N_IMU_Connected
 12700 0394 28110000 		.word	.LC143
 12701 0398 44110000 		.word	.LC144
 12702 039c 88020000 		.word	.LC130
 12703 03a0 C0100000 		.word	.LC145
 12704 03a4 00000000 		.word	IMU_connected
 12705              	.L514:
1744:..\src/command_processing.c ****                     packet_data[7+start_byte + PARAM_BYTE_SLOT*k + ids_str_len - j] = ids_str[ids_s
 12706              		.loc 1 1744 0 discriminator 3
 12707 03a8 B7F89436 		ldrh	r3, [r7, #1684]
 12708 03ac DA1D     		adds	r2, r3, #7
 12709 03ae B7F8A036 		ldrh	r3, [r7, #1696]
 12710 03b2 3221     		movs	r1, #50
 12711 03b4 01FB03F3 		mul	r3, r1, r3
 12712 03b8 1A44     		add	r2, r2, r3
 12713 03ba 97F89136 		ldrb	r3, [r7, #1681]	@ zero_extendqisi2
 12714 03be 1A44     		add	r2, r2, r3
 12715 03c0 B7F8A236 		ldrh	r3, [r7, #1698]
 12716 03c4 D31A     		subs	r3, r2, r3
 12717 03c6 97F89116 		ldrb	r1, [r7, #1681]	@ zero_extendqisi2
 12718 03ca B7F8A226 		ldrh	r2, [r7, #1698]
 12719 03ce 8A1A     		subs	r2, r1, r2
 12720 03d0 07F1EC01 		add	r1, r7, #236
 12721 03d4 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 12722 03d6 07F58A72 		add	r2, r7, #276
 12723 03da D154     		strb	r1, [r2, r3]
1743:..\src/command_processing.c ****                     packet_data[7+start_byte + PARAM_BYTE_SLOT*k + ids_str_len - j] = ids_str[ids_s
 12724              		.loc 1 1743 0 discriminator 3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 287


 12725 03dc B7F8A236 		ldrh	r3, [r7, #1698]
 12726 03e0 013B     		subs	r3, r3, #1
 12727 03e2 A7F8A236 		strh	r3, [r7, #1698]	@ movhi
 12728              	.L513:
1743:..\src/command_processing.c ****                     packet_data[7+start_byte + PARAM_BYTE_SLOT*k + ids_str_len - j] = ids_str[ids_s
 12729              		.loc 1 1743 0 is_stmt 0 discriminator 1
 12730 03e6 B7F8A236 		ldrh	r3, [r7, #1698]
 12731 03ea 002B     		cmp	r3, #0
 12732 03ec DCD1     		bne	.L514
1724:..\src/command_processing.c ****                 sprintf(ids_str, "Port %u ID:", k);
 12733              		.loc 1 1724 0 is_stmt 1 discriminator 2
 12734 03ee B7F8A036 		ldrh	r3, [r7, #1696]
 12735 03f2 0133     		adds	r3, r3, #1
 12736 03f4 A7F8A036 		strh	r3, [r7, #1696]	@ movhi
 12737              	.L508:
1724:..\src/command_processing.c ****                 sprintf(ids_str, "Port %u ID:", k);
 12738              		.loc 1 1724 0 is_stmt 0 discriminator 1
 12739 03f8 B7F8A026 		ldrh	r2, [r7, #1696]
 12740 03fc B7F89A36 		ldrh	r3, [r7, #1690]
 12741 0400 9A42     		cmp	r2, r3
 12742 0402 FFF446AF 		bcc	.L515
1745:..\src/command_processing.c ****             }
1746:..\src/command_processing.c ****             
1747:..\src/command_processing.c ****             /*-------------GET MAG PARAM--------------*/
1748:..\src/command_processing.c ****             start_byte = start_byte + PARAM_BYTE_SLOT*num_imus_id_params;
 12743              		.loc 1 1748 0 is_stmt 1
 12744 0406 B7F89A36 		ldrh	r3, [r7, #1690]	@ movhi
 12745 040a 1A46     		mov	r2, r3	@ movhi
 12746 040c 9200     		lsls	r2, r2, #2
 12747 040e 1344     		add	r3, r3, r2
 12748 0410 1A46     		mov	r2, r3	@ movhi
 12749 0412 9100     		lsls	r1, r2, #2
 12750 0414 1A46     		mov	r2, r3	@ movhi
 12751 0416 0B46     		mov	r3, r1	@ movhi
 12752 0418 1344     		add	r3, r3, r2
 12753 041a 5B00     		lsls	r3, r3, #1
 12754 041c 9AB2     		uxth	r2, r3
 12755 041e B7F89436 		ldrh	r3, [r7, #1684]	@ movhi
 12756 0422 1344     		add	r3, r3, r2
 12757 0424 A7F89436 		strh	r3, [r7, #1684]	@ movhi
1749:..\src/command_processing.c ****             for (k = 0; k < num_mag_cal_params; k++){
 12758              		.loc 1 1749 0
 12759 0428 0023     		movs	r3, #0
 12760 042a A7F8A036 		strh	r3, [r7, #1696]	@ movhi
 12761 042e 1FE1     		b	.L516
 12762              	.L523:
1750:..\src/command_processing.c ****                 packet_data[2+start_byte + PARAM_BYTE_SLOT*k] = TYPE_UINT8;
 12763              		.loc 1 1750 0
 12764 0430 B7F89436 		ldrh	r3, [r7, #1684]
 12765 0434 9A1C     		adds	r2, r3, #2
 12766 0436 B7F8A036 		ldrh	r3, [r7, #1696]
 12767 043a 3221     		movs	r1, #50
 12768 043c 01FB03F3 		mul	r3, r1, r3
 12769 0440 1344     		add	r3, r3, r2
 12770 0442 07F58A72 		add	r2, r7, #276
 12771 0446 0221     		movs	r1, #2
 12772 0448 D154     		strb	r1, [r2, r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 288


1751:..\src/command_processing.c ****                 
1752:..\src/command_processing.c ****                 packet_data[3+start_byte + PARAM_BYTE_SLOT*k] = 3;
 12773              		.loc 1 1752 0
 12774 044a B7F89436 		ldrh	r3, [r7, #1684]
 12775 044e DA1C     		adds	r2, r3, #3
 12776 0450 B7F8A036 		ldrh	r3, [r7, #1696]
 12777 0454 3221     		movs	r1, #50
 12778 0456 01FB03F3 		mul	r3, r1, r3
 12779 045a 1344     		add	r3, r3, r2
 12780 045c 07F58A72 		add	r2, r7, #276
 12781 0460 0321     		movs	r1, #3
 12782 0462 D154     		strb	r1, [r2, r3]
1753:..\src/command_processing.c ****                 packet_data[4+start_byte + PARAM_BYTE_SLOT*k] = (uint8) MagCal[IMU_connected[2*k]][
 12783              		.loc 1 1753 0
 12784 0464 B7F89436 		ldrh	r3, [r7, #1684]
 12785 0468 1A1D     		adds	r2, r3, #4
 12786 046a B7F8A036 		ldrh	r3, [r7, #1696]
 12787 046e 3221     		movs	r1, #50
 12788 0470 01FB03F3 		mul	r3, r1, r3
 12789 0474 1A44     		add	r2, r2, r3
 12790 0476 B7F8A036 		ldrh	r3, [r7, #1696]
 12791 047a 5B00     		lsls	r3, r3, #1
 12792 047c B249     		ldr	r1, .L550
 12793 047e CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 12794 0480 1846     		mov	r0, r3
 12795 0482 B249     		ldr	r1, .L550+4
 12796 0484 0346     		mov	r3, r0
 12797 0486 5B00     		lsls	r3, r3, #1
 12798 0488 0344     		add	r3, r3, r0
 12799 048a 0B44     		add	r3, r3, r1
 12800 048c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 12801 048e 07F58A73 		add	r3, r7, #276
 12802 0492 9954     		strb	r1, [r3, r2]
1754:..\src/command_processing.c ****                 packet_data[5+start_byte + PARAM_BYTE_SLOT*k] = (uint8) MagCal[IMU_connected[2*k]][
 12803              		.loc 1 1754 0
 12804 0494 B7F89436 		ldrh	r3, [r7, #1684]
 12805 0498 5A1D     		adds	r2, r3, #5
 12806 049a B7F8A036 		ldrh	r3, [r7, #1696]
 12807 049e 3221     		movs	r1, #50
 12808 04a0 01FB03F3 		mul	r3, r1, r3
 12809 04a4 1A44     		add	r2, r2, r3
 12810 04a6 B7F8A036 		ldrh	r3, [r7, #1696]
 12811 04aa 5B00     		lsls	r3, r3, #1
 12812 04ac A649     		ldr	r1, .L550
 12813 04ae CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 12814 04b0 1846     		mov	r0, r3
 12815 04b2 A649     		ldr	r1, .L550+4
 12816 04b4 0346     		mov	r3, r0
 12817 04b6 5B00     		lsls	r3, r3, #1
 12818 04b8 0344     		add	r3, r3, r0
 12819 04ba 0B44     		add	r3, r3, r1
 12820 04bc 0133     		adds	r3, r3, #1
 12821 04be 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 12822 04c0 07F58A73 		add	r3, r7, #276
 12823 04c4 9954     		strb	r1, [r3, r2]
1755:..\src/command_processing.c ****                 packet_data[6+start_byte + PARAM_BYTE_SLOT*k] = (uint8) MagCal[IMU_connected[2*k]][
 12824              		.loc 1 1755 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 289


 12825 04c6 B7F89436 		ldrh	r3, [r7, #1684]
 12826 04ca 9A1D     		adds	r2, r3, #6
 12827 04cc B7F8A036 		ldrh	r3, [r7, #1696]
 12828 04d0 3221     		movs	r1, #50
 12829 04d2 01FB03F3 		mul	r3, r1, r3
 12830 04d6 1A44     		add	r2, r2, r3
 12831 04d8 B7F8A036 		ldrh	r3, [r7, #1696]
 12832 04dc 5B00     		lsls	r3, r3, #1
 12833 04de 9A49     		ldr	r1, .L550
 12834 04e0 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 12835 04e2 1846     		mov	r0, r3
 12836 04e4 9949     		ldr	r1, .L550+4
 12837 04e6 0346     		mov	r3, r0
 12838 04e8 5B00     		lsls	r3, r3, #1
 12839 04ea 0344     		add	r3, r3, r0
 12840 04ec 0B44     		add	r3, r3, r1
 12841 04ee 0233     		adds	r3, r3, #2
 12842 04f0 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 12843 04f2 07F58A73 		add	r3, r7, #276
 12844 04f6 9954     		strb	r1, [r3, r2]
1756:..\src/command_processing.c ****                 
1757:..\src/command_processing.c ****                 // check if there is a second value
1758:..\src/command_processing.c ****                 if ( N_IMU_Connected < 2*(k+1) ) {
 12845              		.loc 1 1758 0
 12846 04f8 954B     		ldr	r3, .L550+8
 12847 04fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 12848 04fc 1A46     		mov	r2, r3
 12849 04fe B7F8A036 		ldrh	r3, [r7, #1696]
 12850 0502 0133     		adds	r3, r3, #1
 12851 0504 5B00     		lsls	r3, r3, #1
 12852 0506 9A42     		cmp	r2, r3
 12853 0508 28DA     		bge	.L517
1759:..\src/command_processing.c ****                     // there is only one value
1760:..\src/command_processing.c ****                     for(j = mag_param_str_len; j != 0; j--)
 12854              		.loc 1 1760 0
 12855 050a 97F89036 		ldrb	r3, [r7, #1680]	@ zero_extendqisi2
 12856 050e A7F8A236 		strh	r3, [r7, #1698]	@ movhi
 12857 0512 1EE0     		b	.L518
 12858              	.L519:
1761:..\src/command_processing.c ****                         packet_data[7+start_byte + PARAM_BYTE_SLOT*k + mag_param_str_len - j] = mag
 12859              		.loc 1 1761 0 discriminator 3
 12860 0514 B7F89436 		ldrh	r3, [r7, #1684]
 12861 0518 DA1D     		adds	r2, r3, #7
 12862 051a B7F8A036 		ldrh	r3, [r7, #1696]
 12863 051e 3221     		movs	r1, #50
 12864 0520 01FB03F3 		mul	r3, r1, r3
 12865 0524 1A44     		add	r2, r2, r3
 12866 0526 97F89036 		ldrb	r3, [r7, #1680]	@ zero_extendqisi2
 12867 052a 1A44     		add	r2, r2, r3
 12868 052c B7F8A236 		ldrh	r3, [r7, #1698]
 12869 0530 D31A     		subs	r3, r2, r3
 12870 0532 97F89016 		ldrb	r1, [r7, #1680]	@ zero_extendqisi2
 12871 0536 B7F8A226 		ldrh	r2, [r7, #1698]
 12872 053a 8A1A     		subs	r2, r1, r2
 12873 053c 07F1D801 		add	r1, r7, #216
 12874 0540 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 12875 0542 07F58A72 		add	r2, r7, #276
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 290


 12876 0546 D154     		strb	r1, [r2, r3]
1760:..\src/command_processing.c ****                         packet_data[7+start_byte + PARAM_BYTE_SLOT*k + mag_param_str_len - j] = mag
 12877              		.loc 1 1760 0 discriminator 3
 12878 0548 B7F8A236 		ldrh	r3, [r7, #1698]
 12879 054c 013B     		subs	r3, r3, #1
 12880 054e A7F8A236 		strh	r3, [r7, #1698]	@ movhi
 12881              	.L518:
1760:..\src/command_processing.c ****                         packet_data[7+start_byte + PARAM_BYTE_SLOT*k + mag_param_str_len - j] = mag
 12882              		.loc 1 1760 0 is_stmt 0 discriminator 1
 12883 0552 B7F8A236 		ldrh	r3, [r7, #1698]
 12884 0556 002B     		cmp	r3, #0
 12885 0558 DCD1     		bne	.L519
 12886 055a 84E0     		b	.L520
 12887              	.L517:
1762:..\src/command_processing.c ****                 }
1763:..\src/command_processing.c ****                 else {
1764:..\src/command_processing.c ****                     // fill the second value
1765:..\src/command_processing.c ****                     packet_data[3+start_byte + PARAM_BYTE_SLOT*k] = 6;
 12888              		.loc 1 1765 0 is_stmt 1
 12889 055c B7F89436 		ldrh	r3, [r7, #1684]
 12890 0560 DA1C     		adds	r2, r3, #3
 12891 0562 B7F8A036 		ldrh	r3, [r7, #1696]
 12892 0566 3221     		movs	r1, #50
 12893 0568 01FB03F3 		mul	r3, r1, r3
 12894 056c 1344     		add	r3, r3, r2
 12895 056e 07F58A72 		add	r2, r7, #276
 12896 0572 0621     		movs	r1, #6
 12897 0574 D154     		strb	r1, [r2, r3]
1766:..\src/command_processing.c ****                     packet_data[7+start_byte + PARAM_BYTE_SLOT*k] = (uint8) MagCal[IMU_connected[2*
 12898              		.loc 1 1766 0
 12899 0576 B7F89436 		ldrh	r3, [r7, #1684]
 12900 057a DA1D     		adds	r2, r3, #7
 12901 057c B7F8A036 		ldrh	r3, [r7, #1696]
 12902 0580 3221     		movs	r1, #50
 12903 0582 01FB03F3 		mul	r3, r1, r3
 12904 0586 1A44     		add	r2, r2, r3
 12905 0588 B7F8A036 		ldrh	r3, [r7, #1696]
 12906 058c 5B00     		lsls	r3, r3, #1
 12907 058e 0133     		adds	r3, r3, #1
 12908 0590 6D49     		ldr	r1, .L550
 12909 0592 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 12910 0594 1846     		mov	r0, r3
 12911 0596 6D49     		ldr	r1, .L550+4
 12912 0598 0346     		mov	r3, r0
 12913 059a 5B00     		lsls	r3, r3, #1
 12914 059c 0344     		add	r3, r3, r0
 12915 059e 0B44     		add	r3, r3, r1
 12916 05a0 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 12917 05a2 07F58A73 		add	r3, r7, #276
 12918 05a6 9954     		strb	r1, [r3, r2]
1767:..\src/command_processing.c ****                     packet_data[8+start_byte + PARAM_BYTE_SLOT*k] = (uint8) MagCal[IMU_connected[2*
 12919              		.loc 1 1767 0
 12920 05a8 B7F89436 		ldrh	r3, [r7, #1684]
 12921 05ac 03F10802 		add	r2, r3, #8
 12922 05b0 B7F8A036 		ldrh	r3, [r7, #1696]
 12923 05b4 3221     		movs	r1, #50
 12924 05b6 01FB03F3 		mul	r3, r1, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 291


 12925 05ba 1A44     		add	r2, r2, r3
 12926 05bc B7F8A036 		ldrh	r3, [r7, #1696]
 12927 05c0 5B00     		lsls	r3, r3, #1
 12928 05c2 0133     		adds	r3, r3, #1
 12929 05c4 6049     		ldr	r1, .L550
 12930 05c6 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 12931 05c8 1846     		mov	r0, r3
 12932 05ca 6049     		ldr	r1, .L550+4
 12933 05cc 0346     		mov	r3, r0
 12934 05ce 5B00     		lsls	r3, r3, #1
 12935 05d0 0344     		add	r3, r3, r0
 12936 05d2 0B44     		add	r3, r3, r1
 12937 05d4 0133     		adds	r3, r3, #1
 12938 05d6 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 12939 05d8 07F58A73 		add	r3, r7, #276
 12940 05dc 9954     		strb	r1, [r3, r2]
1768:..\src/command_processing.c ****                     packet_data[9+start_byte + PARAM_BYTE_SLOT*k] = (uint8) MagCal[IMU_connected[2*
 12941              		.loc 1 1768 0
 12942 05de B7F89436 		ldrh	r3, [r7, #1684]
 12943 05e2 03F10902 		add	r2, r3, #9
 12944 05e6 B7F8A036 		ldrh	r3, [r7, #1696]
 12945 05ea 3221     		movs	r1, #50
 12946 05ec 01FB03F3 		mul	r3, r1, r3
 12947 05f0 1A44     		add	r2, r2, r3
 12948 05f2 B7F8A036 		ldrh	r3, [r7, #1696]
 12949 05f6 5B00     		lsls	r3, r3, #1
 12950 05f8 0133     		adds	r3, r3, #1
 12951 05fa 5349     		ldr	r1, .L550
 12952 05fc CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 12953 05fe 1846     		mov	r0, r3
 12954 0600 5249     		ldr	r1, .L550+4
 12955 0602 0346     		mov	r3, r0
 12956 0604 5B00     		lsls	r3, r3, #1
 12957 0606 0344     		add	r3, r3, r0
 12958 0608 0B44     		add	r3, r3, r1
 12959 060a 0233     		adds	r3, r3, #2
 12960 060c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 12961 060e 07F58A73 		add	r3, r7, #276
 12962 0612 9954     		strb	r1, [r3, r2]
1769:..\src/command_processing.c ****                 
1770:..\src/command_processing.c ****                     for(j = mag_param_str_len; j != 0; j--)
 12963              		.loc 1 1770 0
 12964 0614 97F89036 		ldrb	r3, [r7, #1680]	@ zero_extendqisi2
 12965 0618 A7F8A236 		strh	r3, [r7, #1698]	@ movhi
 12966 061c 1FE0     		b	.L521
 12967              	.L522:
1771:..\src/command_processing.c ****                         packet_data[10+start_byte + PARAM_BYTE_SLOT*k + mag_param_str_len - j] = ma
 12968              		.loc 1 1771 0 discriminator 3
 12969 061e B7F89436 		ldrh	r3, [r7, #1684]
 12970 0622 03F10A02 		add	r2, r3, #10
 12971 0626 B7F8A036 		ldrh	r3, [r7, #1696]
 12972 062a 3221     		movs	r1, #50
 12973 062c 01FB03F3 		mul	r3, r1, r3
 12974 0630 1A44     		add	r2, r2, r3
 12975 0632 97F89036 		ldrb	r3, [r7, #1680]	@ zero_extendqisi2
 12976 0636 1A44     		add	r2, r2, r3
 12977 0638 B7F8A236 		ldrh	r3, [r7, #1698]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 292


 12978 063c D31A     		subs	r3, r2, r3
 12979 063e 97F89016 		ldrb	r1, [r7, #1680]	@ zero_extendqisi2
 12980 0642 B7F8A226 		ldrh	r2, [r7, #1698]
 12981 0646 8A1A     		subs	r2, r1, r2
 12982 0648 07F1D801 		add	r1, r7, #216
 12983 064c 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 12984 064e 07F58A72 		add	r2, r7, #276
 12985 0652 D154     		strb	r1, [r2, r3]
1770:..\src/command_processing.c ****                         packet_data[10+start_byte + PARAM_BYTE_SLOT*k + mag_param_str_len - j] = ma
 12986              		.loc 1 1770 0 discriminator 3
 12987 0654 B7F8A236 		ldrh	r3, [r7, #1698]
 12988 0658 013B     		subs	r3, r3, #1
 12989 065a A7F8A236 		strh	r3, [r7, #1698]	@ movhi
 12990              	.L521:
1770:..\src/command_processing.c ****                         packet_data[10+start_byte + PARAM_BYTE_SLOT*k + mag_param_str_len - j] = ma
 12991              		.loc 1 1770 0 is_stmt 0 discriminator 1
 12992 065e B7F8A236 		ldrh	r3, [r7, #1698]
 12993 0662 002B     		cmp	r3, #0
 12994 0664 DBD1     		bne	.L522
 12995              	.L520:
1749:..\src/command_processing.c ****                 packet_data[2+start_byte + PARAM_BYTE_SLOT*k] = TYPE_UINT8;
 12996              		.loc 1 1749 0 is_stmt 1 discriminator 2
 12997 0666 B7F8A036 		ldrh	r3, [r7, #1696]
 12998 066a 0133     		adds	r3, r3, #1
 12999 066c A7F8A036 		strh	r3, [r7, #1696]	@ movhi
 13000              	.L516:
1749:..\src/command_processing.c ****                 packet_data[2+start_byte + PARAM_BYTE_SLOT*k] = TYPE_UINT8;
 13001              		.loc 1 1749 0 is_stmt 0 discriminator 1
 13002 0670 B7F8A026 		ldrh	r2, [r7, #1696]
 13003 0674 B7F8A636 		ldrh	r3, [r7, #1702]
 13004 0678 9A42     		cmp	r2, r3
 13005 067a FFF4D9AE 		bcc	.L523
1772:..\src/command_processing.c ****                 }
1773:..\src/command_processing.c ****             }
1774:..\src/command_processing.c ****             
1775:..\src/command_processing.c ****             /*-----------------ID-----------------*/
1776:..\src/command_processing.c ****             
1777:..\src/command_processing.c ****             start_byte = start_byte + PARAM_BYTE_SLOT*num_mag_cal_params;
 13006              		.loc 1 1777 0 is_stmt 1
 13007 067e B7F8A636 		ldrh	r3, [r7, #1702]	@ movhi
 13008 0682 1A46     		mov	r2, r3	@ movhi
 13009 0684 9200     		lsls	r2, r2, #2
 13010 0686 1344     		add	r3, r3, r2
 13011 0688 1A46     		mov	r2, r3	@ movhi
 13012 068a 9100     		lsls	r1, r2, #2
 13013 068c 1A46     		mov	r2, r3	@ movhi
 13014 068e 0B46     		mov	r3, r1	@ movhi
 13015 0690 1344     		add	r3, r3, r2
 13016 0692 5B00     		lsls	r3, r3, #1
 13017 0694 9AB2     		uxth	r2, r3
 13018 0696 B7F89436 		ldrh	r3, [r7, #1684]	@ movhi
 13019 069a 1344     		add	r3, r3, r2
 13020 069c A7F89436 		strh	r3, [r7, #1684]	@ movhi
1778:..\src/command_processing.c ****             sprintf(id_str, "%u - Device ID:", first_imu_parameter-1);
 13021              		.loc 1 1778 0
 13022 06a0 B7F89836 		ldrh	r3, [r7, #1688]
 13023 06a4 5A1E     		subs	r2, r3, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 293


 13024 06a6 07F1C803 		add	r3, r7, #200
 13025 06aa 2A49     		ldr	r1, .L550+12
 13026 06ac 1846     		mov	r0, r3
 13027 06ae FFF7FEFF 		bl	sprintf
1779:..\src/command_processing.c ****             id_str_len = strlen(id_str);
 13028              		.loc 1 1779 0
 13029 06b2 07F1C803 		add	r3, r7, #200
 13030 06b6 1846     		mov	r0, r3
 13031 06b8 FFF7FEFF 		bl	strlen
 13032 06bc 0346     		mov	r3, r0
 13033 06be 87F89336 		strb	r3, [r7, #1683]
1780:..\src/command_processing.c ****             packet_data[2+start_byte] = TYPE_UINT8;
 13034              		.loc 1 1780 0
 13035 06c2 B7F89436 		ldrh	r3, [r7, #1684]
 13036 06c6 0233     		adds	r3, r3, #2
 13037 06c8 07F58A72 		add	r2, r7, #276
 13038 06cc 0221     		movs	r1, #2
 13039 06ce D154     		strb	r1, [r2, r3]
1781:..\src/command_processing.c ****             packet_data[3+start_byte] = 1;
 13040              		.loc 1 1781 0
 13041 06d0 B7F89436 		ldrh	r3, [r7, #1684]
 13042 06d4 0333     		adds	r3, r3, #3
 13043 06d6 07F58A72 		add	r2, r7, #276
 13044 06da 0121     		movs	r1, #1
 13045 06dc D154     		strb	r1, [r2, r3]
1782:..\src/command_processing.c ****             packet_data[4+start_byte] = c_mem.dev.id;
 13046              		.loc 1 1782 0
 13047 06de B7F89436 		ldrh	r3, [r7, #1684]
 13048 06e2 0433     		adds	r3, r3, #4
 13049 06e4 1C4A     		ldr	r2, .L550+16
 13050 06e6 92F8A010 		ldrb	r1, [r2, #160]	@ zero_extendqisi2
 13051 06ea 07F58A72 		add	r2, r7, #276
 13052 06ee D154     		strb	r1, [r2, r3]
1783:..\src/command_processing.c ****             for(i = id_str_len; i != 0; i--)
 13053              		.loc 1 1783 0
 13054 06f0 97F89336 		ldrb	r3, [r7, #1683]	@ zero_extendqisi2
 13055 06f4 A7F8A436 		strh	r3, [r7, #1700]	@ movhi
 13056 06f8 18E0     		b	.L524
 13057              	.L525:
1784:..\src/command_processing.c ****                 packet_data[5+start_byte + id_str_len - i] = id_str[id_str_len - i];
 13058              		.loc 1 1784 0 discriminator 3
 13059 06fa B7F89436 		ldrh	r3, [r7, #1684]
 13060 06fe 5A1D     		adds	r2, r3, #5
 13061 0700 97F89336 		ldrb	r3, [r7, #1683]	@ zero_extendqisi2
 13062 0704 1A44     		add	r2, r2, r3
 13063 0706 B7F8A436 		ldrh	r3, [r7, #1700]
 13064 070a D31A     		subs	r3, r2, r3
 13065 070c 97F89316 		ldrb	r1, [r7, #1683]	@ zero_extendqisi2
 13066 0710 B7F8A426 		ldrh	r2, [r7, #1700]
 13067 0714 8A1A     		subs	r2, r1, r2
 13068 0716 07F1C801 		add	r1, r7, #200
 13069 071a 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 13070 071c 07F58A72 		add	r2, r7, #276
 13071 0720 D154     		strb	r1, [r2, r3]
1783:..\src/command_processing.c ****             for(i = id_str_len; i != 0; i--)
 13072              		.loc 1 1783 0 discriminator 3
 13073 0722 B7F8A436 		ldrh	r3, [r7, #1700]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 294


 13074 0726 013B     		subs	r3, r3, #1
 13075 0728 A7F8A436 		strh	r3, [r7, #1700]	@ movhi
 13076              	.L524:
1783:..\src/command_processing.c ****             for(i = id_str_len; i != 0; i--)
 13077              		.loc 1 1783 0 is_stmt 0 discriminator 1
 13078 072c B7F8A436 		ldrh	r3, [r7, #1700]
 13079 0730 002B     		cmp	r3, #0
 13080 0732 E2D1     		bne	.L525
1785:..\src/command_processing.c ****                 
1786:..\src/command_processing.c ****             /*-------------GET IMUS MODE-------------*/
1787:..\src/command_processing.c ****             
1788:..\src/command_processing.c ****             start_byte = start_byte + PARAM_BYTE_SLOT;
 13081              		.loc 1 1788 0 is_stmt 1
 13082 0734 B7F89436 		ldrh	r3, [r7, #1684]	@ movhi
 13083 0738 3233     		adds	r3, r3, #50
 13084 073a A7F89436 		strh	r3, [r7, #1684]	@ movhi
1789:..\src/command_processing.c ****             for (i = 0; i < (uint8)N_IMU_Connected; i++){
 13085              		.loc 1 1789 0
 13086 073e 0023     		movs	r3, #0
 13087 0740 A7F8A436 		strh	r3, [r7, #1700]	@ movhi
 13088 0744 38E1     		b	.L526
 13089              	.L551:
 13090 0746 00BF     		.align	2
 13091              	.L550:
 13092 0748 00000000 		.word	IMU_connected
 13093 074c 00000000 		.word	MagCal
 13094 0750 00000000 		.word	N_IMU_Connected
 13095 0754 CC100000 		.word	.LC146
 13096 0758 00000000 		.word	c_mem
 13097              	.L529:
1790:..\src/command_processing.c ****                 sprintf(imu_table_str, "%u - IMU %d configuration:", first_imu_parameter + i, (int)
 13098              		.loc 1 1790 0
 13099 075c B7F89826 		ldrh	r2, [r7, #1688]
 13100 0760 B7F8A436 		ldrh	r3, [r7, #1700]
 13101 0764 D118     		adds	r1, r2, r3
 13102 0766 B7F8A436 		ldrh	r3, [r7, #1700]
 13103 076a D54A     		ldr	r2, .L552
 13104 076c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 13105 076e 07F19C00 		add	r0, r7, #156
 13106 0772 0A46     		mov	r2, r1
 13107 0774 D349     		ldr	r1, .L552+4
 13108 0776 FFF7FEFF 		bl	sprintf
1791:..\src/command_processing.c ****                 imu_table_str_len = strlen(imu_table_str);
 13109              		.loc 1 1791 0
 13110 077a 07F19C03 		add	r3, r7, #156
 13111 077e 1846     		mov	r0, r3
 13112 0780 FFF7FEFF 		bl	strlen
 13113 0784 0346     		mov	r3, r0
 13114 0786 87F88F36 		strb	r3, [r7, #1679]
1792:..\src/command_processing.c ****             
1793:..\src/command_processing.c ****                 packet_data[(uint16)(2 + start_byte + PARAM_BYTE_SLOT*i)] = TYPE_UINT8;
 13115              		.loc 1 1793 0
 13116 078a B7F8A436 		ldrh	r3, [r7, #1700]	@ movhi
 13117 078e 1A46     		mov	r2, r3	@ movhi
 13118 0790 9200     		lsls	r2, r2, #2
 13119 0792 1344     		add	r3, r3, r2
 13120 0794 1A46     		mov	r2, r3	@ movhi
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 295


 13121 0796 9100     		lsls	r1, r2, #2
 13122 0798 1A46     		mov	r2, r3	@ movhi
 13123 079a 0B46     		mov	r3, r1	@ movhi
 13124 079c 1344     		add	r3, r3, r2
 13125 079e 5B00     		lsls	r3, r3, #1
 13126 07a0 9AB2     		uxth	r2, r3
 13127 07a2 B7F89436 		ldrh	r3, [r7, #1684]	@ movhi
 13128 07a6 1344     		add	r3, r3, r2
 13129 07a8 9BB2     		uxth	r3, r3
 13130 07aa 0233     		adds	r3, r3, #2
 13131 07ac 9BB2     		uxth	r3, r3
 13132 07ae 1A46     		mov	r2, r3
 13133 07b0 07F58A73 		add	r3, r7, #276
 13134 07b4 0221     		movs	r1, #2
 13135 07b6 9954     		strb	r1, [r3, r2]
1794:..\src/command_processing.c ****                 packet_data[(uint16)(3 + start_byte + PARAM_BYTE_SLOT*i)] = 5;
 13136              		.loc 1 1794 0
 13137 07b8 B7F8A436 		ldrh	r3, [r7, #1700]	@ movhi
 13138 07bc 1A46     		mov	r2, r3	@ movhi
 13139 07be 9200     		lsls	r2, r2, #2
 13140 07c0 1344     		add	r3, r3, r2
 13141 07c2 1A46     		mov	r2, r3	@ movhi
 13142 07c4 9100     		lsls	r1, r2, #2
 13143 07c6 1A46     		mov	r2, r3	@ movhi
 13144 07c8 0B46     		mov	r3, r1	@ movhi
 13145 07ca 1344     		add	r3, r3, r2
 13146 07cc 5B00     		lsls	r3, r3, #1
 13147 07ce 9AB2     		uxth	r2, r3
 13148 07d0 B7F89436 		ldrh	r3, [r7, #1684]	@ movhi
 13149 07d4 1344     		add	r3, r3, r2
 13150 07d6 9BB2     		uxth	r3, r3
 13151 07d8 0333     		adds	r3, r3, #3
 13152 07da 9BB2     		uxth	r3, r3
 13153 07dc 1A46     		mov	r2, r3
 13154 07de 07F58A73 		add	r3, r7, #276
 13155 07e2 0521     		movs	r1, #5
 13156 07e4 9954     		strb	r1, [r3, r2]
1795:..\src/command_processing.c ****                 
1796:..\src/command_processing.c ****                 packet_data[(uint16)(4 + start_byte + PARAM_BYTE_SLOT*i)] = (uint8)(c_mem.imu.IMU_c
 13157              		.loc 1 1796 0
 13158 07e6 B7F8A436 		ldrh	r3, [r7, #1700]	@ movhi
 13159 07ea 1A46     		mov	r2, r3	@ movhi
 13160 07ec 9200     		lsls	r2, r2, #2
 13161 07ee 1344     		add	r3, r3, r2
 13162 07f0 1A46     		mov	r2, r3	@ movhi
 13163 07f2 9100     		lsls	r1, r2, #2
 13164 07f4 1A46     		mov	r2, r3	@ movhi
 13165 07f6 0B46     		mov	r3, r1	@ movhi
 13166 07f8 1344     		add	r3, r3, r2
 13167 07fa 5B00     		lsls	r3, r3, #1
 13168 07fc 9AB2     		uxth	r2, r3
 13169 07fe B7F89436 		ldrh	r3, [r7, #1684]	@ movhi
 13170 0802 1344     		add	r3, r3, r2
 13171 0804 9BB2     		uxth	r3, r3
 13172 0806 0433     		adds	r3, r3, #4
 13173 0808 9BB2     		uxth	r3, r3
 13174 080a 1846     		mov	r0, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 296


 13175 080c B7F8A436 		ldrh	r3, [r7, #1700]
 13176 0810 AB4A     		ldr	r2, .L552
 13177 0812 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 13178 0814 1946     		mov	r1, r3
 13179 0816 AC4A     		ldr	r2, .L552+8
 13180 0818 0B46     		mov	r3, r1
 13181 081a 9B00     		lsls	r3, r3, #2
 13182 081c 0B44     		add	r3, r3, r1
 13183 081e 1344     		add	r3, r3, r2
 13184 0820 03F20223 		addw	r3, r3, #514
 13185 0824 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 13186 0826 07F58A73 		add	r3, r7, #276
 13187 082a 1A54     		strb	r2, [r3, r0]
1797:..\src/command_processing.c ****                 packet_data[(uint16)(5 + start_byte + PARAM_BYTE_SLOT*i)] = (uint8)(c_mem.imu.IMU_c
 13188              		.loc 1 1797 0
 13189 082c B7F8A436 		ldrh	r3, [r7, #1700]	@ movhi
 13190 0830 1A46     		mov	r2, r3	@ movhi
 13191 0832 9200     		lsls	r2, r2, #2
 13192 0834 1344     		add	r3, r3, r2
 13193 0836 1A46     		mov	r2, r3	@ movhi
 13194 0838 9100     		lsls	r1, r2, #2
 13195 083a 1A46     		mov	r2, r3	@ movhi
 13196 083c 0B46     		mov	r3, r1	@ movhi
 13197 083e 1344     		add	r3, r3, r2
 13198 0840 5B00     		lsls	r3, r3, #1
 13199 0842 9AB2     		uxth	r2, r3
 13200 0844 B7F89436 		ldrh	r3, [r7, #1684]	@ movhi
 13201 0848 1344     		add	r3, r3, r2
 13202 084a 9BB2     		uxth	r3, r3
 13203 084c 0533     		adds	r3, r3, #5
 13204 084e 9BB2     		uxth	r3, r3
 13205 0850 1846     		mov	r0, r3
 13206 0852 B7F8A436 		ldrh	r3, [r7, #1700]
 13207 0856 9A4A     		ldr	r2, .L552
 13208 0858 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 13209 085a 1946     		mov	r1, r3
 13210 085c 9A4A     		ldr	r2, .L552+8
 13211 085e 0B46     		mov	r3, r1
 13212 0860 9B00     		lsls	r3, r3, #2
 13213 0862 0B44     		add	r3, r3, r1
 13214 0864 1344     		add	r3, r3, r2
 13215 0866 03F20323 		addw	r3, r3, #515
 13216 086a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 13217 086c 07F58A73 		add	r3, r7, #276
 13218 0870 1A54     		strb	r2, [r3, r0]
1798:..\src/command_processing.c ****                 packet_data[(uint16)(6 + start_byte + PARAM_BYTE_SLOT*i)] = (uint8)(c_mem.imu.IMU_c
 13219              		.loc 1 1798 0
 13220 0872 B7F8A436 		ldrh	r3, [r7, #1700]	@ movhi
 13221 0876 1A46     		mov	r2, r3	@ movhi
 13222 0878 9200     		lsls	r2, r2, #2
 13223 087a 1344     		add	r3, r3, r2
 13224 087c 1A46     		mov	r2, r3	@ movhi
 13225 087e 9100     		lsls	r1, r2, #2
 13226 0880 1A46     		mov	r2, r3	@ movhi
 13227 0882 0B46     		mov	r3, r1	@ movhi
 13228 0884 1344     		add	r3, r3, r2
 13229 0886 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 297


 13230 0888 9AB2     		uxth	r2, r3
 13231 088a B7F89436 		ldrh	r3, [r7, #1684]	@ movhi
 13232 088e 1344     		add	r3, r3, r2
 13233 0890 9BB2     		uxth	r3, r3
 13234 0892 0633     		adds	r3, r3, #6
 13235 0894 9BB2     		uxth	r3, r3
 13236 0896 1846     		mov	r0, r3
 13237 0898 B7F8A436 		ldrh	r3, [r7, #1700]
 13238 089c 884A     		ldr	r2, .L552
 13239 089e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 13240 08a0 1946     		mov	r1, r3
 13241 08a2 894A     		ldr	r2, .L552+8
 13242 08a4 0B46     		mov	r3, r1
 13243 08a6 9B00     		lsls	r3, r3, #2
 13244 08a8 0B44     		add	r3, r3, r1
 13245 08aa 1344     		add	r3, r3, r2
 13246 08ac 03F50173 		add	r3, r3, #516
 13247 08b0 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 13248 08b2 07F58A73 		add	r3, r7, #276
 13249 08b6 1A54     		strb	r2, [r3, r0]
1799:..\src/command_processing.c ****                 packet_data[(uint16)(7 + start_byte + PARAM_BYTE_SLOT*i)] = (uint8)(c_mem.imu.IMU_c
 13250              		.loc 1 1799 0
 13251 08b8 B7F8A436 		ldrh	r3, [r7, #1700]	@ movhi
 13252 08bc 1A46     		mov	r2, r3	@ movhi
 13253 08be 9200     		lsls	r2, r2, #2
 13254 08c0 1344     		add	r3, r3, r2
 13255 08c2 1A46     		mov	r2, r3	@ movhi
 13256 08c4 9100     		lsls	r1, r2, #2
 13257 08c6 1A46     		mov	r2, r3	@ movhi
 13258 08c8 0B46     		mov	r3, r1	@ movhi
 13259 08ca 1344     		add	r3, r3, r2
 13260 08cc 5B00     		lsls	r3, r3, #1
 13261 08ce 9AB2     		uxth	r2, r3
 13262 08d0 B7F89436 		ldrh	r3, [r7, #1684]	@ movhi
 13263 08d4 1344     		add	r3, r3, r2
 13264 08d6 9BB2     		uxth	r3, r3
 13265 08d8 0733     		adds	r3, r3, #7
 13266 08da 9BB2     		uxth	r3, r3
 13267 08dc 1846     		mov	r0, r3
 13268 08de B7F8A436 		ldrh	r3, [r7, #1700]
 13269 08e2 774A     		ldr	r2, .L552
 13270 08e4 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 13271 08e6 1946     		mov	r1, r3
 13272 08e8 774A     		ldr	r2, .L552+8
 13273 08ea 0B46     		mov	r3, r1
 13274 08ec 9B00     		lsls	r3, r3, #2
 13275 08ee 0B44     		add	r3, r3, r1
 13276 08f0 1344     		add	r3, r3, r2
 13277 08f2 03F20523 		addw	r3, r3, #517
 13278 08f6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 13279 08f8 07F58A73 		add	r3, r7, #276
 13280 08fc 1A54     		strb	r2, [r3, r0]
1800:..\src/command_processing.c ****                 packet_data[(uint16)(8 + start_byte + PARAM_BYTE_SLOT*i)] = (uint8)(c_mem.imu.IMU_c
 13281              		.loc 1 1800 0
 13282 08fe B7F8A436 		ldrh	r3, [r7, #1700]	@ movhi
 13283 0902 1A46     		mov	r2, r3	@ movhi
 13284 0904 9200     		lsls	r2, r2, #2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 298


 13285 0906 1344     		add	r3, r3, r2
 13286 0908 1A46     		mov	r2, r3	@ movhi
 13287 090a 9100     		lsls	r1, r2, #2
 13288 090c 1A46     		mov	r2, r3	@ movhi
 13289 090e 0B46     		mov	r3, r1	@ movhi
 13290 0910 1344     		add	r3, r3, r2
 13291 0912 5B00     		lsls	r3, r3, #1
 13292 0914 9AB2     		uxth	r2, r3
 13293 0916 B7F89436 		ldrh	r3, [r7, #1684]	@ movhi
 13294 091a 1344     		add	r3, r3, r2
 13295 091c 9BB2     		uxth	r3, r3
 13296 091e 0833     		adds	r3, r3, #8
 13297 0920 9BB2     		uxth	r3, r3
 13298 0922 1846     		mov	r0, r3
 13299 0924 B7F8A436 		ldrh	r3, [r7, #1700]
 13300 0928 654A     		ldr	r2, .L552
 13301 092a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 13302 092c 1946     		mov	r1, r3
 13303 092e 664A     		ldr	r2, .L552+8
 13304 0930 0B46     		mov	r3, r1
 13305 0932 9B00     		lsls	r3, r3, #2
 13306 0934 0B44     		add	r3, r3, r1
 13307 0936 1344     		add	r3, r3, r2
 13308 0938 03F20623 		addw	r3, r3, #518
 13309 093c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 13310 093e 07F58A73 		add	r3, r7, #276
 13311 0942 1A54     		strb	r2, [r3, r0]
1801:..\src/command_processing.c **** 
1802:..\src/command_processing.c ****                 for(j = imu_table_str_len; j != 0; j--)
 13312              		.loc 1 1802 0
 13313 0944 97F88F36 		ldrb	r3, [r7, #1679]	@ zero_extendqisi2
 13314 0948 A7F8A236 		strh	r3, [r7, #1698]	@ movhi
 13315 094c 2BE0     		b	.L527
 13316              	.L528:
1803:..\src/command_processing.c ****                     packet_data[(uint16)(9 + start_byte + PARAM_BYTE_SLOT*i + imu_table_str_len - j
 13317              		.loc 1 1803 0 discriminator 3
 13318 094e B7F8A436 		ldrh	r3, [r7, #1700]	@ movhi
 13319 0952 1A46     		mov	r2, r3	@ movhi
 13320 0954 9200     		lsls	r2, r2, #2
 13321 0956 1344     		add	r3, r3, r2
 13322 0958 1A46     		mov	r2, r3	@ movhi
 13323 095a 9100     		lsls	r1, r2, #2
 13324 095c 1A46     		mov	r2, r3	@ movhi
 13325 095e 0B46     		mov	r3, r1	@ movhi
 13326 0960 1344     		add	r3, r3, r2
 13327 0962 5B00     		lsls	r3, r3, #1
 13328 0964 9AB2     		uxth	r2, r3
 13329 0966 B7F89436 		ldrh	r3, [r7, #1684]	@ movhi
 13330 096a 1344     		add	r3, r3, r2
 13331 096c 9AB2     		uxth	r2, r3
 13332 096e 97F88F36 		ldrb	r3, [r7, #1679]	@ zero_extendqisi2
 13333 0972 9BB2     		uxth	r3, r3
 13334 0974 1344     		add	r3, r3, r2
 13335 0976 9AB2     		uxth	r2, r3
 13336 0978 B7F8A236 		ldrh	r3, [r7, #1698]	@ movhi
 13337 097c D31A     		subs	r3, r2, r3
 13338 097e 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 299


 13339 0980 0933     		adds	r3, r3, #9
 13340 0982 9BB2     		uxth	r3, r3
 13341 0984 1946     		mov	r1, r3
 13342 0986 97F88F26 		ldrb	r2, [r7, #1679]	@ zero_extendqisi2
 13343 098a B7F8A236 		ldrh	r3, [r7, #1698]
 13344 098e D31A     		subs	r3, r2, r3
 13345 0990 07F19C02 		add	r2, r7, #156
 13346 0994 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 13347 0996 07F58A73 		add	r3, r7, #276
 13348 099a 5A54     		strb	r2, [r3, r1]
1802:..\src/command_processing.c ****                     packet_data[(uint16)(9 + start_byte + PARAM_BYTE_SLOT*i + imu_table_str_len - j
 13349              		.loc 1 1802 0 discriminator 3
 13350 099c B7F8A236 		ldrh	r3, [r7, #1698]
 13351 09a0 013B     		subs	r3, r3, #1
 13352 09a2 A7F8A236 		strh	r3, [r7, #1698]	@ movhi
 13353              	.L527:
1802:..\src/command_processing.c ****                     packet_data[(uint16)(9 + start_byte + PARAM_BYTE_SLOT*i + imu_table_str_len - j
 13354              		.loc 1 1802 0 is_stmt 0 discriminator 1
 13355 09a6 B7F8A236 		ldrh	r3, [r7, #1698]
 13356 09aa 002B     		cmp	r3, #0
 13357 09ac CFD1     		bne	.L528
1789:..\src/command_processing.c ****                 sprintf(imu_table_str, "%u - IMU %d configuration:", first_imu_parameter + i, (int)
 13358              		.loc 1 1789 0 is_stmt 1 discriminator 2
 13359 09ae B7F8A436 		ldrh	r3, [r7, #1700]
 13360 09b2 0133     		adds	r3, r3, #1
 13361 09b4 A7F8A436 		strh	r3, [r7, #1700]	@ movhi
 13362              	.L526:
1789:..\src/command_processing.c ****                 sprintf(imu_table_str, "%u - IMU %d configuration:", first_imu_parameter + i, (int)
 13363              		.loc 1 1789 0 is_stmt 0 discriminator 1
 13364 09b8 444B     		ldr	r3, .L552+12
 13365 09ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 13366 09bc 9BB2     		uxth	r3, r3
 13367 09be B7F8A426 		ldrh	r2, [r7, #1700]
 13368 09c2 9A42     		cmp	r2, r3
 13369 09c4 FFF4CAAE 		bcc	.L529
1804:..\src/command_processing.c ****             }  
1805:..\src/command_processing.c ****           
1806:..\src/command_processing.c **** 
1807:..\src/command_processing.c ****             /*-----------------SPI DELAY-----------------*/
1808:..\src/command_processing.c ****             
1809:..\src/command_processing.c ****             start_byte = start_byte + (uint16)(PARAM_BYTE_SLOT*N_IMU_Connected);
 13370              		.loc 1 1809 0 is_stmt 1
 13371 09c8 404B     		ldr	r3, .L552+12
 13372 09ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 13373 09cc 9BB2     		uxth	r3, r3
 13374 09ce 1A46     		mov	r2, r3	@ movhi
 13375 09d0 9200     		lsls	r2, r2, #2
 13376 09d2 1344     		add	r3, r3, r2
 13377 09d4 1A46     		mov	r2, r3	@ movhi
 13378 09d6 9100     		lsls	r1, r2, #2
 13379 09d8 1A46     		mov	r2, r3	@ movhi
 13380 09da 0B46     		mov	r3, r1	@ movhi
 13381 09dc 1344     		add	r3, r3, r2
 13382 09de 5B00     		lsls	r3, r3, #1
 13383 09e0 9AB2     		uxth	r2, r3
 13384 09e2 B7F89436 		ldrh	r3, [r7, #1684]	@ movhi
 13385 09e6 1344     		add	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 300


 13386 09e8 A7F89436 		strh	r3, [r7, #1684]	@ movhi
1810:..\src/command_processing.c ****             sprintf(spi_read_delay_str, "%u - SPI read delay:", first_imu_parameter+N_IMU_Connected
 13387              		.loc 1 1810 0
 13388 09ec B7F89836 		ldrh	r3, [r7, #1688]
 13389 09f0 364A     		ldr	r2, .L552+12
 13390 09f2 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 13391 09f4 1A44     		add	r2, r2, r3
 13392 09f6 07F18003 		add	r3, r7, #128
 13393 09fa 3549     		ldr	r1, .L552+16
 13394 09fc 1846     		mov	r0, r3
 13395 09fe FFF7FEFF 		bl	sprintf
1811:..\src/command_processing.c ****             packet_data[2+start_byte] = TYPE_FLAG;
 13396              		.loc 1 1811 0
 13397 0a02 B7F89436 		ldrh	r3, [r7, #1684]
 13398 0a06 0233     		adds	r3, r3, #2
 13399 0a08 07F58A72 		add	r2, r7, #276
 13400 0a0c 0021     		movs	r1, #0
 13401 0a0e D154     		strb	r1, [r2, r3]
1812:..\src/command_processing.c ****             packet_data[3+start_byte] = 1;
 13402              		.loc 1 1812 0
 13403 0a10 B7F89436 		ldrh	r3, [r7, #1684]
 13404 0a14 0333     		adds	r3, r3, #3
 13405 0a16 07F58A72 		add	r2, r7, #276
 13406 0a1a 0121     		movs	r1, #1
 13407 0a1c D154     		strb	r1, [r2, r3]
1813:..\src/command_processing.c ****             packet_data[4+start_byte] = c_mem.imu.SPI_read_delay;
 13408              		.loc 1 1813 0
 13409 0a1e B7F89436 		ldrh	r3, [r7, #1684]
 13410 0a22 0433     		adds	r3, r3, #4
 13411 0a24 284A     		ldr	r2, .L552+8
 13412 0a26 92F80112 		ldrb	r1, [r2, #513]	@ zero_extendqisi2
 13413 0a2a 07F58A72 		add	r2, r7, #276
 13414 0a2e D154     		strb	r1, [r2, r3]
1814:..\src/command_processing.c ****             switch(c_mem.imu.SPI_read_delay) {
 13415              		.loc 1 1814 0
 13416 0a30 254B     		ldr	r3, .L552+8
 13417 0a32 93F80132 		ldrb	r3, [r3, #513]	@ zero_extendqisi2
 13418 0a36 012B     		cmp	r3, #1
 13419 0a38 17D0     		beq	.L531
 13420 0a3a 022B     		cmp	r3, #2
 13421 0a3c 28D0     		beq	.L532
 13422 0a3e 002B     		cmp	r3, #0
 13423 0a40 00D0     		beq	.L533
1815:..\src/command_processing.c ****                 case 0: 
1816:..\src/command_processing.c ****                     strcat(spi_read_delay_str, " None"); 
1817:..\src/command_processing.c ****                     spi_read_delay_str_len = 26;
1818:..\src/command_processing.c ****                     break;
1819:..\src/command_processing.c ****                 case 1: 
1820:..\src/command_processing.c ****                     strcat(spi_read_delay_str, " Low"); 
1821:..\src/command_processing.c ****                     spi_read_delay_str_len = 25;
1822:..\src/command_processing.c ****                     break;
1823:..\src/command_processing.c ****                 case 2: 
1824:..\src/command_processing.c ****                     strcat(spi_read_delay_str, " High");
1825:..\src/command_processing.c ****                     spi_read_delay_str_len = 26;
1826:..\src/command_processing.c ****                     break;
1827:..\src/command_processing.c ****                 default:
1828:..\src/command_processing.c ****                     break;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 301


 13424              		.loc 1 1828 0
 13425 0a42 38E0     		b	.L534
 13426              	.L533:
1816:..\src/command_processing.c ****                     spi_read_delay_str_len = 26;
 13427              		.loc 1 1816 0
 13428 0a44 07F18003 		add	r3, r7, #128
 13429 0a48 1846     		mov	r0, r3
 13430 0a4a FFF7FEFF 		bl	strlen
 13431 0a4e 0346     		mov	r3, r0
 13432 0a50 1A46     		mov	r2, r3
 13433 0a52 07F18003 		add	r3, r7, #128
 13434 0a56 1344     		add	r3, r3, r2
 13435 0a58 1E4A     		ldr	r2, .L552+20
 13436 0a5a 1068     		ldr	r0, [r2]	@ unaligned
 13437 0a5c 1860     		str	r0, [r3]	@ unaligned
 13438 0a5e 9288     		ldrh	r2, [r2, #4]	@ unaligned
 13439 0a60 9A80     		strh	r2, [r3, #4]	@ unaligned
1817:..\src/command_processing.c ****                     break;
 13440              		.loc 1 1817 0
 13441 0a62 1A23     		movs	r3, #26
 13442 0a64 87F89D36 		strb	r3, [r7, #1693]
1818:..\src/command_processing.c ****                 case 1: 
 13443              		.loc 1 1818 0
 13444 0a68 25E0     		b	.L534
 13445              	.L531:
1820:..\src/command_processing.c ****                     spi_read_delay_str_len = 25;
 13446              		.loc 1 1820 0
 13447 0a6a 07F18003 		add	r3, r7, #128
 13448 0a6e 1846     		mov	r0, r3
 13449 0a70 FFF7FEFF 		bl	strlen
 13450 0a74 0346     		mov	r3, r0
 13451 0a76 1A46     		mov	r2, r3
 13452 0a78 07F18003 		add	r3, r7, #128
 13453 0a7c 1344     		add	r3, r3, r2
 13454 0a7e 164A     		ldr	r2, .L552+24
 13455 0a80 1068     		ldr	r0, [r2]	@ unaligned
 13456 0a82 1860     		str	r0, [r3]	@ unaligned
 13457 0a84 1279     		ldrb	r2, [r2, #4]
 13458 0a86 1A71     		strb	r2, [r3, #4]
1821:..\src/command_processing.c ****                     break;
 13459              		.loc 1 1821 0
 13460 0a88 1923     		movs	r3, #25
 13461 0a8a 87F89D36 		strb	r3, [r7, #1693]
1822:..\src/command_processing.c ****                 case 2: 
 13462              		.loc 1 1822 0
 13463 0a8e 12E0     		b	.L534
 13464              	.L532:
1824:..\src/command_processing.c ****                     spi_read_delay_str_len = 26;
 13465              		.loc 1 1824 0
 13466 0a90 07F18003 		add	r3, r7, #128
 13467 0a94 1846     		mov	r0, r3
 13468 0a96 FFF7FEFF 		bl	strlen
 13469 0a9a 0346     		mov	r3, r0
 13470 0a9c 1A46     		mov	r2, r3
 13471 0a9e 07F18003 		add	r3, r7, #128
 13472 0aa2 1344     		add	r3, r3, r2
 13473 0aa4 0D4A     		ldr	r2, .L552+28
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 302


 13474 0aa6 1068     		ldr	r0, [r2]	@ unaligned
 13475 0aa8 1860     		str	r0, [r3]	@ unaligned
 13476 0aaa 9288     		ldrh	r2, [r2, #4]	@ unaligned
 13477 0aac 9A80     		strh	r2, [r3, #4]	@ unaligned
1825:..\src/command_processing.c ****                     break;
 13478              		.loc 1 1825 0
 13479 0aae 1A23     		movs	r3, #26
 13480 0ab0 87F89D36 		strb	r3, [r7, #1693]
1826:..\src/command_processing.c ****                 default:
 13481              		.loc 1 1826 0
 13482 0ab4 00BF     		nop
 13483              	.L534:
1829:..\src/command_processing.c ****             }            
1830:..\src/command_processing.c ****             for(i = spi_read_delay_str_len; i != 0; i--)
 13484              		.loc 1 1830 0
 13485 0ab6 97F89D36 		ldrb	r3, [r7, #1693]	@ zero_extendqisi2
 13486 0aba A7F8A436 		strh	r3, [r7, #1700]	@ movhi
 13487 0abe 28E0     		b	.L535
 13488              	.L553:
 13489              		.align	2
 13490              	.L552:
 13491 0ac0 00000000 		.word	IMU_connected
 13492 0ac4 DC100000 		.word	.LC147
 13493 0ac8 00000000 		.word	c_mem
 13494 0acc 00000000 		.word	N_IMU_Connected
 13495 0ad0 F8100000 		.word	.LC148
 13496 0ad4 10110000 		.word	.LC149
 13497 0ad8 18110000 		.word	.LC150
 13498 0adc 20110000 		.word	.LC151
 13499              	.L536:
1831:..\src/command_processing.c ****                 packet_data[5+start_byte + spi_read_delay_str_len - i] = spi_read_delay_str[spi_rea
 13500              		.loc 1 1831 0 discriminator 3
 13501 0ae0 B7F89436 		ldrh	r3, [r7, #1684]
 13502 0ae4 5A1D     		adds	r2, r3, #5
 13503 0ae6 97F89D36 		ldrb	r3, [r7, #1693]	@ zero_extendqisi2
 13504 0aea 1A44     		add	r2, r2, r3
 13505 0aec B7F8A436 		ldrh	r3, [r7, #1700]
 13506 0af0 D31A     		subs	r3, r2, r3
 13507 0af2 97F89D16 		ldrb	r1, [r7, #1693]	@ zero_extendqisi2
 13508 0af6 B7F8A426 		ldrh	r2, [r7, #1700]
 13509 0afa 8A1A     		subs	r2, r1, r2
 13510 0afc 07F18001 		add	r1, r7, #128
 13511 0b00 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 13512 0b02 07F58A72 		add	r2, r7, #276
 13513 0b06 D154     		strb	r1, [r2, r3]
1830:..\src/command_processing.c ****                 packet_data[5+start_byte + spi_read_delay_str_len - i] = spi_read_delay_str[spi_rea
 13514              		.loc 1 1830 0 discriminator 3
 13515 0b08 B7F8A436 		ldrh	r3, [r7, #1700]
 13516 0b0c 013B     		subs	r3, r3, #1
 13517 0b0e A7F8A436 		strh	r3, [r7, #1700]	@ movhi
 13518              	.L535:
1830:..\src/command_processing.c ****                 packet_data[5+start_byte + spi_read_delay_str_len - i] = spi_read_delay_str[spi_rea
 13519              		.loc 1 1830 0 is_stmt 0 discriminator 1
 13520 0b12 B7F8A436 		ldrh	r3, [r7, #1700]
 13521 0b16 002B     		cmp	r3, #0
 13522 0b18 E2D1     		bne	.L536
1832:..\src/command_processing.c ****             //The following byte indicates the number of menus at the end of the packet to send
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 303


1833:..\src/command_processing.c ****             packet_data[5+start_byte + spi_read_delay_str_len] = 1;
 13523              		.loc 1 1833 0 is_stmt 1
 13524 0b1a B7F89436 		ldrh	r3, [r7, #1684]
 13525 0b1e 5A1D     		adds	r2, r3, #5
 13526 0b20 97F89D36 		ldrb	r3, [r7, #1693]	@ zero_extendqisi2
 13527 0b24 1344     		add	r3, r3, r2
 13528 0b26 07F58A72 		add	r2, r7, #276
 13529 0b2a 0121     		movs	r1, #1
 13530 0b2c D154     		strb	r1, [r2, r3]
1834:..\src/command_processing.c ****                   
1835:..\src/command_processing.c ****             
1836:..\src/command_processing.c ****             /*------------PARAMETERS MENU-----------*/
1837:..\src/command_processing.c ****             start_byte = start_byte + PARAM_BYTE_SLOT;
 13531              		.loc 1 1837 0
 13532 0b2e B7F89436 		ldrh	r3, [r7, #1684]	@ movhi
 13533 0b32 3233     		adds	r3, r3, #50
 13534 0b34 A7F89436 		strh	r3, [r7, #1684]	@ movhi
1838:..\src/command_processing.c ****             for(i = spi_delay_menu_len; i!= 0; i--)
 13535              		.loc 1 1838 0
 13536 0b38 97F88E36 		ldrb	r3, [r7, #1678]	@ zero_extendqisi2
 13537 0b3c A7F8A436 		strh	r3, [r7, #1700]	@ movhi
 13538 0b40 1AE0     		b	.L537
 13539              	.L538:
1839:..\src/command_processing.c ****                 packet_data[(uint16)(2 + start_byte) + spi_delay_menu_len - i] = spi_delay_menu[spi
 13540              		.loc 1 1839 0 discriminator 3
 13541 0b42 B7F89436 		ldrh	r3, [r7, #1684]	@ movhi
 13542 0b46 0233     		adds	r3, r3, #2
 13543 0b48 9BB2     		uxth	r3, r3
 13544 0b4a 1A46     		mov	r2, r3
 13545 0b4c 97F88E36 		ldrb	r3, [r7, #1678]	@ zero_extendqisi2
 13546 0b50 1A44     		add	r2, r2, r3
 13547 0b52 B7F8A436 		ldrh	r3, [r7, #1700]
 13548 0b56 D31A     		subs	r3, r2, r3
 13549 0b58 97F88E16 		ldrb	r1, [r7, #1678]	@ zero_extendqisi2
 13550 0b5c B7F8A426 		ldrh	r2, [r7, #1700]
 13551 0b60 8A1A     		subs	r2, r1, r2
 13552 0b62 07F10801 		add	r1, r7, #8
 13553 0b66 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 13554 0b68 07F58A72 		add	r2, r7, #276
 13555 0b6c D154     		strb	r1, [r2, r3]
1838:..\src/command_processing.c ****             for(i = spi_delay_menu_len; i!= 0; i--)
 13556              		.loc 1 1838 0 discriminator 3
 13557 0b6e B7F8A436 		ldrh	r3, [r7, #1700]
 13558 0b72 013B     		subs	r3, r3, #1
 13559 0b74 A7F8A436 		strh	r3, [r7, #1700]	@ movhi
 13560              	.L537:
1838:..\src/command_processing.c ****             for(i = spi_delay_menu_len; i!= 0; i--)
 13561              		.loc 1 1838 0 is_stmt 0 discriminator 1
 13562 0b78 B7F8A436 		ldrh	r3, [r7, #1700]
 13563 0b7c 002B     		cmp	r3, #0
 13564 0b7e E0D1     		bne	.L538
1840:..\src/command_processing.c **** 
1841:..\src/command_processing.c ****             packet_data[packet_length - 1] = LCRChecksum(packet_data,packet_length - 1);
 13565              		.loc 1 1841 0 is_stmt 1
 13566 0b80 B7F89636 		ldrh	r3, [r7, #1686]
 13567 0b84 5C1E     		subs	r4, r3, #1
 13568 0b86 B7F89636 		ldrh	r3, [r7, #1686]	@ movhi
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 304


 13569 0b8a DBB2     		uxtb	r3, r3
 13570 0b8c 013B     		subs	r3, r3, #1
 13571 0b8e DAB2     		uxtb	r2, r3
 13572 0b90 07F58A73 		add	r3, r7, #276
 13573 0b94 1146     		mov	r1, r2
 13574 0b96 1846     		mov	r0, r3
 13575 0b98 FFF7FEFF 		bl	LCRChecksum
 13576 0b9c 0346     		mov	r3, r0
 13577 0b9e 1A46     		mov	r2, r3
 13578 0ba0 07F58A73 		add	r3, r7, #276
 13579 0ba4 1A55     		strb	r2, [r3, r4]
1842:..\src/command_processing.c ****             commWrite(packet_data, packet_length);
 13580              		.loc 1 1842 0
 13581 0ba6 B7F89626 		ldrh	r2, [r7, #1686]
 13582 0baa 07F58A73 		add	r3, r7, #276
 13583 0bae 1146     		mov	r1, r2
 13584 0bb0 1846     		mov	r0, r3
 13585 0bb2 FFF7FEFF 		bl	commWrite
1843:..\src/command_processing.c ****             UART_RS485_ClearTxBuffer();
 13586              		.loc 1 1843 0
 13587 0bb6 FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
1844:..\src/command_processing.c ****         break;
 13588              		.loc 1 1844 0
 13589 0bba 09E1     		b	.L539
 13590              	.L546:
1845:..\src/command_processing.c **** 
1846:..\src/command_processing.c **** //=========================================================     other_params
1847:..\src/command_processing.c ****         default: 
1848:..\src/command_processing.c ****             
1849:..\src/command_processing.c ****             if (index < first_imu_parameter-1)
 13591              		.loc 1 1849 0
 13592 0bbc BB1D     		adds	r3, r7, #6
 13593 0bbe 1A88     		ldrh	r2, [r3]
 13594 0bc0 B7F89836 		ldrh	r3, [r7, #1688]
 13595 0bc4 013B     		subs	r3, r3, #1
 13596 0bc6 9A42     		cmp	r2, r3
 13597 0bc8 C0F20181 		blt	.L547
1850:..\src/command_processing.c ****                 break;
1851:..\src/command_processing.c ****             
1852:..\src/command_processing.c ****             if (index == first_imu_parameter+N_IMU_Connected) {
 13598              		.loc 1 1852 0
 13599 0bcc BB1D     		adds	r3, r7, #6
 13600 0bce 1A88     		ldrh	r2, [r3]
 13601 0bd0 B7F89836 		ldrh	r3, [r7, #1688]
 13602 0bd4 8149     		ldr	r1, .L554
 13603 0bd6 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 13604 0bd8 0B44     		add	r3, r3, r1
 13605 0bda 9A42     		cmp	r2, r3
 13606 0bdc 05D1     		bne	.L541
1853:..\src/command_processing.c ****                 g_mem.imu.SPI_read_delay = g_rx.buffer[3];  //SPI read delay - uint8
 13607              		.loc 1 1853 0
 13608 0bde 804B     		ldr	r3, .L554+4
 13609 0be0 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 13610 0be2 804B     		ldr	r3, .L554+8
 13611 0be4 83F80122 		strb	r2, [r3, #513]
1854:..\src/command_processing.c ****                 break;
 13612              		.loc 1 1854 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 305


 13613 0be8 F2E0     		b	.L539
 13614              	.L541:
1855:..\src/command_processing.c ****             }
1856:..\src/command_processing.c ****             
1857:..\src/command_processing.c ****             if (index == first_imu_parameter-1) {
 13615              		.loc 1 1857 0
 13616 0bea BB1D     		adds	r3, r7, #6
 13617 0bec 1A88     		ldrh	r2, [r3]
 13618 0bee B7F89836 		ldrh	r3, [r7, #1688]
 13619 0bf2 013B     		subs	r3, r3, #1
 13620 0bf4 9A42     		cmp	r2, r3
 13621 0bf6 05D1     		bne	.L542
1858:..\src/command_processing.c ****                 g_mem.dev.id = g_rx.buffer[3];          //ID - uint8
 13622              		.loc 1 1858 0
 13623 0bf8 794B     		ldr	r3, .L554+4
 13624 0bfa DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 13625 0bfc 794B     		ldr	r3, .L554+8
 13626 0bfe 83F8A020 		strb	r2, [r3, #160]
1859:..\src/command_processing.c ****             }
1860:..\src/command_processing.c ****             else {
1861:..\src/command_processing.c ****             
1862:..\src/command_processing.c ****                 //Set Imu table (index > = first_imu_parameter)
1863:..\src/command_processing.c ****                 g_mem.imu.IMU_conf[IMU_connected[index-first_imu_parameter]][0] = g_rx.buffer[3];
1864:..\src/command_processing.c ****                 g_mem.imu.IMU_conf[IMU_connected[index-first_imu_parameter]][1] = g_rx.buffer[4];
1865:..\src/command_processing.c ****                 g_mem.imu.IMU_conf[IMU_connected[index-first_imu_parameter]][2] = g_rx.buffer[5];
1866:..\src/command_processing.c ****                 g_mem.imu.IMU_conf[IMU_connected[index-first_imu_parameter]][3] = g_rx.buffer[6];
1867:..\src/command_processing.c ****                 g_mem.imu.IMU_conf[IMU_connected[index-first_imu_parameter]][4] = g_rx.buffer[7];
1868:..\src/command_processing.c ****                 
1869:..\src/command_processing.c ****                 // Recompute IMU packets dimension
1870:..\src/command_processing.c ****                 imus_data_size = 1; //header    
1871:..\src/command_processing.c ****                 for (i = 0; i < N_IMU_Connected; i++)
1872:..\src/command_processing.c ****                 {
1873:..\src/command_processing.c ****                     single_imu_size[IMU_connected[i]] = 1 + 6*g_mem.imu.IMU_conf[IMU_connected[i]][
1874:..\src/command_processing.c ****                     imus_data_size = imus_data_size + single_imu_size[IMU_connected[i]];
1875:..\src/command_processing.c ****                 }
1876:..\src/command_processing.c ****                 imus_data_size = imus_data_size + 1;    //checksum
1877:..\src/command_processing.c ****             
1878:..\src/command_processing.c ****             }
1879:..\src/command_processing.c ****             
1880:..\src/command_processing.c ****         break;
 13627              		.loc 1 1880 0
 13628 0c02 E5E0     		b	.L539
 13629              	.L542:
1863:..\src/command_processing.c ****                 g_mem.imu.IMU_conf[IMU_connected[index-first_imu_parameter]][1] = g_rx.buffer[4];
 13630              		.loc 1 1863 0
 13631 0c04 BB1D     		adds	r3, r7, #6
 13632 0c06 1A88     		ldrh	r2, [r3]
 13633 0c08 B7F89836 		ldrh	r3, [r7, #1688]
 13634 0c0c D31A     		subs	r3, r2, r3
 13635 0c0e 764A     		ldr	r2, .L554+12
 13636 0c10 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 13637 0c12 1946     		mov	r1, r3
 13638 0c14 724B     		ldr	r3, .L554+4
 13639 0c16 D878     		ldrb	r0, [r3, #3]	@ zero_extendqisi2
 13640 0c18 724A     		ldr	r2, .L554+8
 13641 0c1a 0B46     		mov	r3, r1
 13642 0c1c 9B00     		lsls	r3, r3, #2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 306


 13643 0c1e 0B44     		add	r3, r3, r1
 13644 0c20 1344     		add	r3, r3, r2
 13645 0c22 03F20223 		addw	r3, r3, #514
 13646 0c26 0246     		mov	r2, r0
 13647 0c28 1A70     		strb	r2, [r3]
1864:..\src/command_processing.c ****                 g_mem.imu.IMU_conf[IMU_connected[index-first_imu_parameter]][2] = g_rx.buffer[5];
 13648              		.loc 1 1864 0
 13649 0c2a BB1D     		adds	r3, r7, #6
 13650 0c2c 1A88     		ldrh	r2, [r3]
 13651 0c2e B7F89836 		ldrh	r3, [r7, #1688]
 13652 0c32 D31A     		subs	r3, r2, r3
 13653 0c34 6C4A     		ldr	r2, .L554+12
 13654 0c36 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 13655 0c38 1946     		mov	r1, r3
 13656 0c3a 694B     		ldr	r3, .L554+4
 13657 0c3c 1879     		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 13658 0c3e 694A     		ldr	r2, .L554+8
 13659 0c40 0B46     		mov	r3, r1
 13660 0c42 9B00     		lsls	r3, r3, #2
 13661 0c44 0B44     		add	r3, r3, r1
 13662 0c46 1344     		add	r3, r3, r2
 13663 0c48 03F20323 		addw	r3, r3, #515
 13664 0c4c 0246     		mov	r2, r0
 13665 0c4e 1A70     		strb	r2, [r3]
1865:..\src/command_processing.c ****                 g_mem.imu.IMU_conf[IMU_connected[index-first_imu_parameter]][3] = g_rx.buffer[6];
 13666              		.loc 1 1865 0
 13667 0c50 BB1D     		adds	r3, r7, #6
 13668 0c52 1A88     		ldrh	r2, [r3]
 13669 0c54 B7F89836 		ldrh	r3, [r7, #1688]
 13670 0c58 D31A     		subs	r3, r2, r3
 13671 0c5a 634A     		ldr	r2, .L554+12
 13672 0c5c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 13673 0c5e 1946     		mov	r1, r3
 13674 0c60 5F4B     		ldr	r3, .L554+4
 13675 0c62 5879     		ldrb	r0, [r3, #5]	@ zero_extendqisi2
 13676 0c64 5F4A     		ldr	r2, .L554+8
 13677 0c66 0B46     		mov	r3, r1
 13678 0c68 9B00     		lsls	r3, r3, #2
 13679 0c6a 0B44     		add	r3, r3, r1
 13680 0c6c 1344     		add	r3, r3, r2
 13681 0c6e 03F50173 		add	r3, r3, #516
 13682 0c72 0246     		mov	r2, r0
 13683 0c74 1A70     		strb	r2, [r3]
1866:..\src/command_processing.c ****                 g_mem.imu.IMU_conf[IMU_connected[index-first_imu_parameter]][4] = g_rx.buffer[7];
 13684              		.loc 1 1866 0
 13685 0c76 BB1D     		adds	r3, r7, #6
 13686 0c78 1A88     		ldrh	r2, [r3]
 13687 0c7a B7F89836 		ldrh	r3, [r7, #1688]
 13688 0c7e D31A     		subs	r3, r2, r3
 13689 0c80 594A     		ldr	r2, .L554+12
 13690 0c82 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 13691 0c84 1946     		mov	r1, r3
 13692 0c86 564B     		ldr	r3, .L554+4
 13693 0c88 9879     		ldrb	r0, [r3, #6]	@ zero_extendqisi2
 13694 0c8a 564A     		ldr	r2, .L554+8
 13695 0c8c 0B46     		mov	r3, r1
 13696 0c8e 9B00     		lsls	r3, r3, #2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 307


 13697 0c90 0B44     		add	r3, r3, r1
 13698 0c92 1344     		add	r3, r3, r2
 13699 0c94 03F20523 		addw	r3, r3, #517
 13700 0c98 0246     		mov	r2, r0
 13701 0c9a 1A70     		strb	r2, [r3]
1867:..\src/command_processing.c ****                 
 13702              		.loc 1 1867 0
 13703 0c9c BB1D     		adds	r3, r7, #6
 13704 0c9e 1A88     		ldrh	r2, [r3]
 13705 0ca0 B7F89836 		ldrh	r3, [r7, #1688]
 13706 0ca4 D31A     		subs	r3, r2, r3
 13707 0ca6 504A     		ldr	r2, .L554+12
 13708 0ca8 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 13709 0caa 1946     		mov	r1, r3
 13710 0cac 4C4B     		ldr	r3, .L554+4
 13711 0cae D879     		ldrb	r0, [r3, #7]	@ zero_extendqisi2
 13712 0cb0 4C4A     		ldr	r2, .L554+8
 13713 0cb2 0B46     		mov	r3, r1
 13714 0cb4 9B00     		lsls	r3, r3, #2
 13715 0cb6 0B44     		add	r3, r3, r1
 13716 0cb8 1344     		add	r3, r3, r2
 13717 0cba 03F20623 		addw	r3, r3, #518
 13718 0cbe 0246     		mov	r2, r0
 13719 0cc0 1A70     		strb	r2, [r3]
1870:..\src/command_processing.c ****                 for (i = 0; i < N_IMU_Connected; i++)
 13720              		.loc 1 1870 0
 13721 0cc2 4A4B     		ldr	r3, .L554+16
 13722 0cc4 0122     		movs	r2, #1
 13723 0cc6 1A60     		str	r2, [r3]
1871:..\src/command_processing.c ****                 {
 13724              		.loc 1 1871 0
 13725 0cc8 0023     		movs	r3, #0
 13726 0cca A7F8A436 		strh	r3, [r7, #1700]	@ movhi
 13727 0cce 71E0     		b	.L544
 13728              	.L545:
1873:..\src/command_processing.c ****                     imus_data_size = imus_data_size + single_imu_size[IMU_connected[i]];
 13729              		.loc 1 1873 0 discriminator 3
 13730 0cd0 B7F8A436 		ldrh	r3, [r7, #1700]
 13731 0cd4 444A     		ldr	r2, .L554+12
 13732 0cd6 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 13733 0cd8 1C46     		mov	r4, r3
 13734 0cda B7F8A436 		ldrh	r3, [r7, #1700]
 13735 0cde 424A     		ldr	r2, .L554+12
 13736 0ce0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 13737 0ce2 1946     		mov	r1, r3
 13738 0ce4 3F4A     		ldr	r2, .L554+8
 13739 0ce6 0B46     		mov	r3, r1
 13740 0ce8 9B00     		lsls	r3, r3, #2
 13741 0cea 0B44     		add	r3, r3, r1
 13742 0cec 1344     		add	r3, r3, r2
 13743 0cee 03F20223 		addw	r3, r3, #514
 13744 0cf2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 13745 0cf4 1A46     		mov	r2, r3
 13746 0cf6 1346     		mov	r3, r2
 13747 0cf8 5B00     		lsls	r3, r3, #1
 13748 0cfa 1344     		add	r3, r3, r2
 13749 0cfc 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 308


 13750 0cfe 5A1C     		adds	r2, r3, #1
 13751 0d00 B7F8A436 		ldrh	r3, [r7, #1700]
 13752 0d04 3849     		ldr	r1, .L554+12
 13753 0d06 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 13754 0d08 1846     		mov	r0, r3
 13755 0d0a 3649     		ldr	r1, .L554+8
 13756 0d0c 0346     		mov	r3, r0
 13757 0d0e 9B00     		lsls	r3, r3, #2
 13758 0d10 0344     		add	r3, r3, r0
 13759 0d12 0B44     		add	r3, r3, r1
 13760 0d14 03F20323 		addw	r3, r3, #515
 13761 0d18 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 13762 0d1a 1946     		mov	r1, r3
 13763 0d1c 0B46     		mov	r3, r1
 13764 0d1e 5B00     		lsls	r3, r3, #1
 13765 0d20 0B44     		add	r3, r3, r1
 13766 0d22 5B00     		lsls	r3, r3, #1
 13767 0d24 1A44     		add	r2, r2, r3
 13768 0d26 B7F8A436 		ldrh	r3, [r7, #1700]
 13769 0d2a 2F49     		ldr	r1, .L554+12
 13770 0d2c CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 13771 0d2e 1846     		mov	r0, r3
 13772 0d30 2C49     		ldr	r1, .L554+8
 13773 0d32 0346     		mov	r3, r0
 13774 0d34 9B00     		lsls	r3, r3, #2
 13775 0d36 0344     		add	r3, r3, r0
 13776 0d38 0B44     		add	r3, r3, r1
 13777 0d3a 03F50173 		add	r3, r3, #516
 13778 0d3e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 13779 0d40 1946     		mov	r1, r3
 13780 0d42 0B46     		mov	r3, r1
 13781 0d44 5B00     		lsls	r3, r3, #1
 13782 0d46 0B44     		add	r3, r3, r1
 13783 0d48 5B00     		lsls	r3, r3, #1
 13784 0d4a 1A44     		add	r2, r2, r3
 13785 0d4c B7F8A436 		ldrh	r3, [r7, #1700]
 13786 0d50 2549     		ldr	r1, .L554+12
 13787 0d52 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 13788 0d54 1846     		mov	r0, r3
 13789 0d56 2349     		ldr	r1, .L554+8
 13790 0d58 0346     		mov	r3, r0
 13791 0d5a 9B00     		lsls	r3, r3, #2
 13792 0d5c 0344     		add	r3, r3, r0
 13793 0d5e 0B44     		add	r3, r3, r1
 13794 0d60 03F20523 		addw	r3, r3, #517
 13795 0d64 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 13796 0d66 1B01     		lsls	r3, r3, #4
 13797 0d68 1A44     		add	r2, r2, r3
 13798 0d6a B7F8A436 		ldrh	r3, [r7, #1700]
 13799 0d6e 1E49     		ldr	r1, .L554+12
 13800 0d70 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 13801 0d72 1846     		mov	r0, r3
 13802 0d74 1B49     		ldr	r1, .L554+8
 13803 0d76 0346     		mov	r3, r0
 13804 0d78 9B00     		lsls	r3, r3, #2
 13805 0d7a 0344     		add	r3, r3, r0
 13806 0d7c 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 309


 13807 0d7e 03F20623 		addw	r3, r3, #518
 13808 0d82 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 13809 0d84 5B00     		lsls	r3, r3, #1
 13810 0d86 1344     		add	r3, r3, r2
 13811 0d88 0133     		adds	r3, r3, #1
 13812 0d8a 194A     		ldr	r2, .L554+20
 13813 0d8c 42F82430 		str	r3, [r2, r4, lsl #2]
1874:..\src/command_processing.c ****                 }
 13814              		.loc 1 1874 0 discriminator 3
 13815 0d90 B7F8A436 		ldrh	r3, [r7, #1700]
 13816 0d94 144A     		ldr	r2, .L554+12
 13817 0d96 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 13818 0d98 1A46     		mov	r2, r3
 13819 0d9a 154B     		ldr	r3, .L554+20
 13820 0d9c 53F82220 		ldr	r2, [r3, r2, lsl #2]
 13821 0da0 124B     		ldr	r3, .L554+16
 13822 0da2 1B68     		ldr	r3, [r3]
 13823 0da4 1344     		add	r3, r3, r2
 13824 0da6 114A     		ldr	r2, .L554+16
 13825 0da8 1360     		str	r3, [r2]
1871:..\src/command_processing.c ****                 {
 13826              		.loc 1 1871 0 discriminator 3
 13827 0daa B7F8A436 		ldrh	r3, [r7, #1700]
 13828 0dae 0133     		adds	r3, r3, #1
 13829 0db0 A7F8A436 		strh	r3, [r7, #1700]	@ movhi
 13830              	.L544:
1871:..\src/command_processing.c ****                 {
 13831              		.loc 1 1871 0 is_stmt 0 discriminator 1
 13832 0db4 094B     		ldr	r3, .L554
 13833 0db6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 13834 0db8 9BB2     		uxth	r3, r3
 13835 0dba B7F8A426 		ldrh	r2, [r7, #1700]
 13836 0dbe 9A42     		cmp	r2, r3
 13837 0dc0 86D3     		bcc	.L545
1876:..\src/command_processing.c ****             
 13838              		.loc 1 1876 0 is_stmt 1
 13839 0dc2 0A4B     		ldr	r3, .L554+16
 13840 0dc4 1B68     		ldr	r3, [r3]
 13841 0dc6 0133     		adds	r3, r3, #1
 13842 0dc8 084A     		ldr	r2, .L554+16
 13843 0dca 1360     		str	r3, [r2]
 13844              		.loc 1 1880 0
 13845 0dcc 00E0     		b	.L539
 13846              	.L547:
1850:..\src/command_processing.c ****             
 13847              		.loc 1 1850 0
 13848 0dce 00BF     		nop
 13849              	.L539:
1881:..\src/command_processing.c ****     }
1882:..\src/command_processing.c **** }
 13850              		.loc 1 1882 0 discriminator 1
 13851 0dd0 00BF     		nop
 13852 0dd2 07F5D567 		add	r7, r7, #1704
 13853              		.cfi_def_cfa_offset 16
 13854 0dd6 BD46     		mov	sp, r7
 13855              		.cfi_def_cfa_register 13
 13856              		@ sp needed
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 310


 13857 0dd8 B0BD     		pop	{r4, r5, r7, pc}
 13858              	.L555:
 13859 0dda 00BF     		.align	2
 13860              	.L554:
 13861 0ddc 00000000 		.word	N_IMU_Connected
 13862 0de0 00000000 		.word	g_rx
 13863 0de4 00000000 		.word	g_mem
 13864 0de8 00000000 		.word	IMU_connected
 13865 0dec 00000000 		.word	imus_data_size
 13866 0df0 00000000 		.word	single_imu_size
 13867              		.cfi_endproc
 13868              	.LFE70:
 13869              		.size	get_IMU_param_list, .-get_IMU_param_list
 13870              		.section	.text.setZeros,"ax",%progbits
 13871              		.align	2
 13872              		.global	setZeros
 13873              		.thumb
 13874              		.thumb_func
 13875              		.type	setZeros, %function
 13876              	setZeros:
 13877              	.LFB71:
1883:..\src/command_processing.c **** 
1884:..\src/command_processing.c **** //==============================================================================
1885:..\src/command_processing.c **** //                                                            COMMAND SET ZEROS
1886:..\src/command_processing.c **** //==============================================================================
1887:..\src/command_processing.c **** 
1888:..\src/command_processing.c **** void setZeros()
1889:..\src/command_processing.c **** {
 13878              		.loc 1 1889 0
 13879              		.cfi_startproc
 13880              		@ args = 0, pretend = 0, frame = 8
 13881              		@ frame_needed = 1, uses_anonymous_args = 0
 13882 0000 B0B5     		push	{r4, r5, r7, lr}
 13883              		.cfi_def_cfa_offset 16
 13884              		.cfi_offset 4, -16
 13885              		.cfi_offset 5, -12
 13886              		.cfi_offset 7, -8
 13887              		.cfi_offset 14, -4
 13888 0002 82B0     		sub	sp, sp, #8
 13889              		.cfi_def_cfa_offset 24
 13890 0004 00AF     		add	r7, sp, #0
 13891              		.cfi_def_cfa_register 7
1890:..\src/command_processing.c ****     uint8 CYDATA i, j;        // iterator
1891:..\src/command_processing.c ****     
1892:..\src/command_processing.c ****     for (j = 0; j < N_ENCODER_LINE_MAX; j++) {
 13892              		.loc 1 1892 0
 13893 0006 0023     		movs	r3, #0
 13894 0008 BB71     		strb	r3, [r7, #6]
 13895 000a 2FE0     		b	.L557
 13896              	.L560:
1893:..\src/command_processing.c ****         for(i = 0; i < NUM_OF_SENSORS; i++) {
 13897              		.loc 1 1893 0
 13898 000c 0023     		movs	r3, #0
 13899 000e FB71     		strb	r3, [r7, #7]
 13900 0010 22E0     		b	.L558
 13901              	.L559:
1894:..\src/command_processing.c ****             g_mem.enc[j].m_off[i] = (int32)(data_encoder_raw[j][i]);
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 311


 13902              		.loc 1 1894 0 discriminator 3
 13903 0012 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 13904 0014 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 13905 0016 B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 13906 0018 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 13907 001a 194D     		ldr	r5, .L561
 13908 001c 0B46     		mov	r3, r1
 13909 001e 9B00     		lsls	r3, r3, #2
 13910 0020 0B44     		add	r3, r3, r1
 13911 0022 2344     		add	r3, r3, r4
 13912 0024 55F82330 		ldr	r3, [r5, r3, lsl #2]
 13913 0028 1C46     		mov	r4, r3
 13914 002a 1649     		ldr	r1, .L561+4
 13915 002c 1346     		mov	r3, r2
 13916 002e 5B00     		lsls	r3, r3, #1
 13917 0030 1344     		add	r3, r3, r2
 13918 0032 9B00     		lsls	r3, r3, #2
 13919 0034 0344     		add	r3, r3, r0
 13920 0036 6633     		adds	r3, r3, #102
 13921 0038 41F82340 		str	r4, [r1, r3, lsl #2]
1895:..\src/command_processing.c ****             g_meas[j].rot[i] = (int8)0;
 13922              		.loc 1 1895 0 discriminator 3
 13923 003c BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 13924 003e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 13925 0040 1149     		ldr	r1, .L561+8
 13926 0042 3420     		movs	r0, #52
 13927 0044 00FB02F2 		mul	r2, r0, r2
 13928 0048 0A44     		add	r2, r2, r1
 13929 004a 1344     		add	r3, r3, r2
 13930 004c 1833     		adds	r3, r3, #24
 13931 004e 0022     		movs	r2, #0
 13932 0050 1A70     		strb	r2, [r3]
1893:..\src/command_processing.c ****         for(i = 0; i < NUM_OF_SENSORS; i++) {
 13933              		.loc 1 1893 0 discriminator 3
 13934 0052 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 13935 0054 0133     		adds	r3, r3, #1
 13936 0056 FB71     		strb	r3, [r7, #7]
 13937              	.L558:
1893:..\src/command_processing.c ****         for(i = 0; i < NUM_OF_SENSORS; i++) {
 13938              		.loc 1 1893 0 is_stmt 0 discriminator 1
 13939 0058 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 13940 005a 022B     		cmp	r3, #2
 13941 005c D9D9     		bls	.L559
1896:..\src/command_processing.c ****         }
1897:..\src/command_processing.c ****         reset_last_value_flag[j] = 1;
 13942              		.loc 1 1897 0 is_stmt 1 discriminator 2
 13943 005e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 13944 0060 0A4A     		ldr	r2, .L561+12
 13945 0062 0121     		movs	r1, #1
 13946 0064 D154     		strb	r1, [r2, r3]
1892:..\src/command_processing.c ****         for(i = 0; i < NUM_OF_SENSORS; i++) {
 13947              		.loc 1 1892 0 discriminator 2
 13948 0066 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 13949 0068 0133     		adds	r3, r3, #1
 13950 006a BB71     		strb	r3, [r7, #6]
 13951              	.L557:
1892:..\src/command_processing.c ****         for(i = 0; i < NUM_OF_SENSORS; i++) {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 312


 13952              		.loc 1 1892 0 is_stmt 0 discriminator 1
 13953 006c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 13954 006e 012B     		cmp	r3, #1
 13955 0070 CCD9     		bls	.L560
1898:..\src/command_processing.c ****     }
1899:..\src/command_processing.c **** 
1900:..\src/command_processing.c ****     sendAcknowledgment(ACK_OK);
 13956              		.loc 1 1900 0 is_stmt 1
 13957 0072 0120     		movs	r0, #1
 13958 0074 FFF7FEFF 		bl	sendAcknowledgment
1901:..\src/command_processing.c **** }
 13959              		.loc 1 1901 0
 13960 0078 00BF     		nop
 13961 007a 0837     		adds	r7, r7, #8
 13962              		.cfi_def_cfa_offset 16
 13963 007c BD46     		mov	sp, r7
 13964              		.cfi_def_cfa_register 13
 13965              		@ sp needed
 13966 007e B0BD     		pop	{r4, r5, r7, pc}
 13967              	.L562:
 13968              		.align	2
 13969              	.L561:
 13970 0080 00000000 		.word	data_encoder_raw
 13971 0084 00000000 		.word	g_mem
 13972 0088 00000000 		.word	g_meas
 13973 008c 00000000 		.word	reset_last_value_flag
 13974              		.cfi_endproc
 13975              	.LFE71:
 13976              		.size	setZeros, .-setZeros
 13977              		.section	.rodata
 13978              		.align	2
 13979              	.LC152:
 13980 1158 0D0A00   		.ascii	"\015\012\000"
 13981 115b 00       		.align	2
 13982              	.LC153:
 13983 115c 4669726D 		.ascii	"Firmware version:=================================="
 13983      77617265 
 13983      20766572 
 13983      73696F6E 
 13983      3A3D3D3D 
 13984 118f 3D3D3D3D 		.ascii	"=======================\012\012Test the time needed"
 13984      3D3D3D3D 
 13984      3D3D3D3D 
 13984      3D3D3D3D 
 13984      3D3D3D3D 
 13985 11bc 20746F20 		.ascii	" to read ONLY ACCELERATIONS VALUES from one or mult"
 13985      72656164 
 13985      204F4E4C 
 13985      59204143 
 13985      43454C45 
 13986 11ef 69706C65 		.ascii	"iple imu and the time needed to communicate them to"
 13986      20696D75 
 13986      20616E64 
 13986      20746865 
 13986      2074696D 
 13987 1222 20746865 		.ascii	" the PC\012\012\000"
 13987      2050430A 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 313


 13987      0A00
 13988              		.align	2
 13989              	.LC154:
 13990 122c 3D3D3D3D 		.ascii	"==================================================="
 13990      3D3D3D3D 
 13990      3D3D3D3D 
 13990      3D3D3D3D 
 13990      3D3D3D3D 
 13991 125f 3D3D3D3D 		.ascii	"=====================\012\012\000"
 13991      3D3D3D3D 
 13991      3D3D3D3D 
 13991      3D3D3D3D 
 13991      3D3D3D3D 
 13992 1277 00       		.align	2
 13993              	.LC155:
 13994 1278 44455649 		.ascii	"DEVICE INFO\015\012\000"
 13994      43452049 
 13994      4E464F0D 
 13994      0A00
 13995 1286 0000     		.align	2
 13996              	.LC156:
 13997 1288 49443A20 		.ascii	"ID: %d\015\012\000"
 13997      25640D0A 
 13997      00
 13998 1291 000000   		.align	2
 13999              	.LC157:
 14000 1294 44657669 		.ascii	"Device: SOFTHAND PRO\015\012\000"
 14000      63653A20 
 14000      534F4654 
 14000      48414E44 
 14000      2050524F 
 14001 12ab 00       		.align	2
 14002              	.LC158:
 14003 12ac 44657669 		.ascii	"Device: GENERIC 2 MOTORS\015\012\000"
 14003      63653A20 
 14003      47454E45 
 14003      52494320 
 14003      32204D4F 
 14004 12c7 00       		.align	2
 14005              	.LC159:
 14006 12c8 44657669 		.ascii	"Device: AIR CHAMBERS HAPTIC FEEDBACK\015\012\000"
 14006      63653A20 
 14006      41495220 
 14006      4348414D 
 14006      42455253 
 14007 12ef 00       		.align	2
 14008              	.LC160:
 14009 12f0 44657669 		.ascii	"Device: OTTOBOCK 6v ACTIVE WRIST MASTER\015\012\000"
 14009      63653A20 
 14009      4F54544F 
 14009      424F434B 
 14009      20367620 
 14010 131a 0000     		.align	2
 14011              	.LC161:
 14012 131c 44657669 		.ascii	"Device: SOFTHAND 2 MOTORS\015\012\000"
 14012      63653A20 
 14012      534F4654 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 314


 14012      48414E44 
 14012      2032204D 
 14013              		.align	2
 14014              	.LC162:
 14015 1338 48616E64 		.ascii	"Hand side: RIGHT\015\012\000"
 14015      20736964 
 14015      653A2052 
 14015      49474854 
 14015      0D0A00
 14016 134b 00       		.align	2
 14017              	.LC163:
 14018 134c 48616E64 		.ascii	"Hand side: LEFT\015\012\000"
 14018      20736964 
 14018      653A204C 
 14018      4546540D 
 14018      0A00
 14019 135e 0000     		.align	2
 14020              	.LC164:
 14021 1360 55736572 		.ascii	"User: MARIA\015\012\000"
 14021      3A204D41 
 14021      5249410D 
 14021      0A00
 14022 136e 0000     		.align	2
 14023              	.LC165:
 14024 1370 55736572 		.ascii	"User: R01\015\012\000"
 14024      3A205230 
 14024      310D0A00 
 14025              		.align	2
 14026              	.LC166:
 14027 137c 55736572 		.ascii	"User: GENERIC USER\015\012\000"
 14027      3A204745 
 14027      4E455249 
 14027      43205553 
 14027      45520D0A 
 14028 1391 000000   		.align	2
 14029              	.LC167:
 14030 1394 4D4F544F 		.ascii	"MOTOR %d INFO\015\012\000"
 14030      52202564 
 14030      20494E46 
 14030      4F0D0A00 
 14031              		.align	2
 14032              	.LC168:
 14033 13a4 4D6F746F 		.ascii	"Motor reference\000"
 14033      72207265 
 14033      66657265 
 14033      6E636500 
 14034              		.align	2
 14035              	.LC169:
 14036 13b4 202D2043 		.ascii	" - Currents: \000"
 14036      75727265 
 14036      6E74733A 
 14036      2000
 14037 13c2 0000     		.align	2
 14038              	.LC170:
 14039 13c4 202D2050 		.ascii	" - Pwm: \000"
 14039      776D3A20 
 14039      00
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 315


 14040 13cd 000000   		.align	2
 14041              	.LC171:
 14042 13d0 202D2050 		.ascii	" - Position: \000"
 14042      6F736974 
 14042      696F6E3A 
 14042      2000
 14043 13de 0000     		.align	2
 14044              	.LC172:
 14045 13e0 25642000 		.ascii	"%d \000"
 14046              		.align	2
 14047              	.LC173:
 14048 13e4 4D6F746F 		.ascii	"Motor enabled: \000"
 14048      7220656E 
 14048      61626C65 
 14048      643A2000 
 14049              		.align	2
 14050              	.LC174:
 14051 13f4 5945530D 		.ascii	"YES\015\012\000"
 14051      0A00
 14052 13fa 0000     		.align	2
 14053              	.LC175:
 14054 13fc 4E4F0D0A 		.ascii	"NO\015\012\000"
 14054      00
 14055 1401 000000   		.align	2
 14056              	.LC176:
 14057 1404 50574D20 		.ascii	"PWM rescaling activation: \000"
 14057      72657363 
 14057      616C696E 
 14057      67206163 
 14057      74697661 
 14058 141f 00       		.align	2
 14059              	.LC177:
 14060 1420 5945530A 		.ascii	"YES\012\000"
 14060      00
 14061 1425 000000   		.align	2
 14062              	.LC178:
 14063 1428 4E4F0A00 		.ascii	"NO\012\000"
 14064              		.align	2
 14065              	.LC179:
 14066 142c 50574D20 		.ascii	"PWM Limit: %d\015\012\000"
 14066      4C696D69 
 14066      743A2025 
 14066      640D0A00 
 14067              		.align	2
 14068              	.LC180:
 14069 143c 0D0A4D45 		.ascii	"\015\012MEASUREMENTS INFO\015\012\000"
 14069      41535552 
 14069      454D454E 
 14069      54532049 
 14069      4E464F0D 
 14070 1452 0000     		.align	2
 14071              	.LC181:
 14072 1454 53656E73 		.ascii	"Sensor value: \000"
 14072      6F722076 
 14072      616C7565 
 14072      3A2000
 14073 1463 00       		.align	2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 316


 14074              	.LC182:
 14075 1464 256400   		.ascii	"%d\000"
 14076 1467 00       		.align	2
 14077              	.LC183:
 14078 1468 2C2000   		.ascii	", \000"
 14079 146b 00       		.align	2
 14080              	.LC184:
 14081 146c 4A6F7973 		.ascii	"Joystick measurements: %d, %d\000"
 14081      7469636B 
 14081      206D6561 
 14081      73757265 
 14081      6D656E74 
 14082 148a 0000     		.align	2
 14083              	.LC185:
 14084 148c 42617474 		.ascii	"Battery %d Voltage (mV): %ld\000"
 14084      65727920 
 14084      25642056 
 14084      6F6C7461 
 14084      67652028 
 14085 14a9 000000   		.align	2
 14086              	.LC186:
 14087 14ac 46756C6C 		.ascii	"Full charge power tension %d (mV): %ld\000"
 14087      20636861 
 14087      72676520 
 14087      706F7765 
 14087      72207465 
 14088 14d3 00       		.align	2
 14089              	.LC187:
 14090 14d4 43757272 		.ascii	"Current %d (mA): %ld\000"
 14090      656E7420 
 14090      25642028 
 14090      6D41293A 
 14090      20256C64 
 14091 14e9 000000   		.align	2
 14092              	.LC188:
 14093 14ec 4C617374 		.ascii	"Last Grasp Hold Current %d (mA): %ld\000"
 14093      20477261 
 14093      73702048 
 14093      6F6C6420 
 14093      43757272 
 14094 1511 000000   		.align	2
 14095              	.LC189:
 14096 1514 0D0A4D4F 		.ascii	"\015\012MOTOR %d CONFIGURATION\015\012\000"
 14096      544F5220 
 14096      25642043 
 14096      4F4E4649 
 14096      47555241 
 14097 152f 00       		.align	2
 14098              	.LC190:
 14099 1530 50494420 		.ascii	"PID Controller: \000"
 14099      436F6E74 
 14099      726F6C6C 
 14099      65723A20 
 14099      00
 14100              		.global	__aeabi_i2d
 14101              		.global	__aeabi_ddiv
 14102 1541 000000   		.align	2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 317


 14103              	.LC191:
 14104 1544 50202D3E 		.ascii	"P -> %f  \000"
 14104      20256620 
 14104      2000
 14105 154e 0000     		.align	2
 14106              	.LC192:
 14107 1550 49202D3E 		.ascii	"I -> %f  \000"
 14107      20256620 
 14107      2000
 14108 155a 0000     		.align	2
 14109              	.LC193:
 14110 155c 44202D3E 		.ascii	"D -> %f\015\012\000"
 14110      2025660D 
 14110      0A00
 14111 1566 0000     		.align	2
 14112              	.LC194:
 14113 1568 43757272 		.ascii	"Current PID Controller: \000"
 14113      656E7420 
 14113      50494420 
 14113      436F6E74 
 14113      726F6C6C 
 14114 1581 000000   		.align	2
 14115              	.LC195:
 14116 1584 53746172 		.ascii	"Startup activation: YES\015\012\000"
 14116      74757020 
 14116      61637469 
 14116      76617469 
 14116      6F6E3A20 
 14117 159e 0000     		.align	2
 14118              	.LC196:
 14119 15a0 53746172 		.ascii	"Startup activation: NO\015\012\000"
 14119      74757020 
 14119      61637469 
 14119      76617469 
 14119      6F6E3A20 
 14120 15b9 000000   		.align	2
 14121              	.LC197:
 14122 15bc 496E7075 		.ascii	"Input mode: USB\015\012\000"
 14122      74206D6F 
 14122      64653A20 
 14122      5553420D 
 14122      0A00
 14123 15ce 0000     		.align	2
 14124              	.LC198:
 14125 15d0 496E7075 		.ascii	"Input mode: Handle\015\012\000"
 14125      74206D6F 
 14125      64653A20 
 14125      48616E64 
 14125      6C650D0A 
 14126 15e5 000000   		.align	2
 14127              	.LC199:
 14128 15e8 496E7075 		.ascii	"Input mode: EMG proportional\015\012\000"
 14128      74206D6F 
 14128      64653A20 
 14128      454D4720 
 14128      70726F70 
 14129 1607 00       		.align	2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 318


 14130              	.LC200:
 14131 1608 496E7075 		.ascii	"Input mode: EMG integral\015\012\000"
 14131      74206D6F 
 14131      64653A20 
 14131      454D4720 
 14131      696E7465 
 14132 1623 00       		.align	2
 14133              	.LC201:
 14134 1624 496E7075 		.ascii	"Input mode: EMG FCFS\015\012\000"
 14134      74206D6F 
 14134      64653A20 
 14134      454D4720 
 14134      46434653 
 14135 163b 00       		.align	2
 14136              	.LC202:
 14137 163c 496E7075 		.ascii	"Input mode: EMG FCFS ADV\015\012\000"
 14137      74206D6F 
 14137      64653A20 
 14137      454D4720 
 14137      46434653 
 14138 1657 00       		.align	2
 14139              	.LC203:
 14140 1658 496E7075 		.ascii	"Input mode: Joystick\015\012\000"
 14140      74206D6F 
 14140      64653A20 
 14140      4A6F7973 
 14140      7469636B 
 14141 166f 00       		.align	2
 14142              	.LC204:
 14143 1670 496E7075 		.ascii	"Input mode: EMG proportional Normally Closed\015\012"
 14143      74206D6F 
 14143      64653A20 
 14143      454D4720 
 14143      70726F70 
 14144 169e 00       		.ascii	"\000"
 14145 169f 00       		.align	2
 14146              	.LC205:
 14147 16a0 436F6E74 		.ascii	"Control mode: Position\015\012\000"
 14147      726F6C20 
 14147      6D6F6465 
 14147      3A20506F 
 14147      73697469 
 14148 16b9 000000   		.align	2
 14149              	.LC206:
 14150 16bc 436F6E74 		.ascii	"Control mode: PWM\015\012\000"
 14150      726F6C20 
 14150      6D6F6465 
 14150      3A205057 
 14150      4D0D0A00 
 14151              		.align	2
 14152              	.LC207:
 14153 16d0 436F6E74 		.ascii	"Control mode: Current\015\012\000"
 14153      726F6C20 
 14153      6D6F6465 
 14153      3A204375 
 14153      7272656E 
 14154              		.align	2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 319


 14155              	.LC208:
 14156 16e8 436F6E74 		.ascii	"Control mode: Position and Current\015\012\000"
 14156      726F6C20 
 14156      6D6F6465 
 14156      3A20506F 
 14156      73697469 
 14157 170d 000000   		.align	2
 14158              	.LC209:
 14159 1710 4162736F 		.ascii	"Absolute encoder position: YES\015\012\000"
 14159      6C757465 
 14159      20656E63 
 14159      6F646572 
 14159      20706F73 
 14160 1731 000000   		.align	2
 14161              	.LC210:
 14162 1734 4162736F 		.ascii	"Absolute encoder position: NO\015\012\000"
 14162      6C757465 
 14162      20656E63 
 14162      6F646572 
 14162      20706F73 
 14163              		.align	2
 14164              	.LC211:
 14165 1754 4D6F746F 		.ascii	"Motor-Handle Ratio: %d\015\012\000"
 14165      722D4861 
 14165      6E646C65 
 14165      20526174 
 14165      696F3A20 
 14166 176d 000000   		.align	2
 14167              	.LC212:
 14168 1770 456E636F 		.ascii	"Encoder indices used for motor control: \000"
 14168      64657220 
 14168      696E6469 
 14168      63657320 
 14168      75736564 
 14169 1799 000000   		.align	2
 14170              	.LC213:
 14171 179c 46697273 		.ascii	"First Gear: %d teeth\015\012\000"
 14171      74204765 
 14171      61723A20 
 14171      25642074 
 14171      65657468 
 14172 17b3 00       		.align	2
 14173              	.LC214:
 14174 17b4 5365636F 		.ascii	"Second Gear: %d teeth\015\012\000"
 14174      6E642047 
 14174      6561723A 
 14174      20256420 
 14174      74656574 
 14175              		.align	2
 14176              	.LC215:
 14177 17cc 47656172 		.ascii	"Gear invariant: %d\015\012\000"
 14177      20696E76 
 14177      61726961 
 14177      6E743A20 
 14177      25640D0A 
 14178 17e1 000000   		.align	2
 14179              	.LC216:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 320


 14180 17e4 53656E73 		.ascii	"Sensor resolution: \000"
 14180      6F722072 
 14180      65736F6C 
 14180      7574696F 
 14180      6E3A2000 
 14181              		.align	2
 14182              	.LC217:
 14183 17f8 4D656173 		.ascii	"Measurement Offset: \000"
 14183      7572656D 
 14183      656E7420 
 14183      4F666673 
 14183      65743A20 
 14184 180d 000000   		.align	2
 14185              	.LC218:
 14186 1810 256C6400 		.ascii	"%ld\000"
 14187              		.align	2
 14188              	.LC219:
 14189 1814 4D656173 		.ascii	"Measurement Multiplier: \000"
 14189      7572656D 
 14189      656E7420 
 14189      4D756C74 
 14189      69706C69 
 14190              		.global	__aeabi_f2d
 14191 182d 000000   		.align	2
 14192              	.LC220:
 14193 1830 256600   		.ascii	"%f\000"
 14194 1833 00       		.align	2
 14195              	.LC221:
 14196 1834 43757272 		.ascii	"Current lookup table: %f, %f, %f, %f, %f, %f\015\012"
 14196      656E7420 
 14196      6C6F6F6B 
 14196      75702074 
 14196      61626C65 
 14197 1862 00       		.ascii	"\000"
 14198 1863 00       		.align	2
 14199              	.LC222:
 14200 1864 506F7369 		.ascii	"Position limit active: %d\000"
 14200      74696F6E 
 14200      206C696D 
 14200      69742061 
 14200      63746976 
 14201 187e 0000     		.align	2
 14202              	.LC223:
 14203 1880 506F7369 		.ascii	"Position limit motor: inf -> %ld  \000"
 14203      74696F6E 
 14203      206C696D 
 14203      6974206D 
 14203      6F746F72 
 14204 18a3 00       		.align	2
 14205              	.LC224:
 14206 18a4 73757020 		.ascii	"sup -> %ld\015\012\000"
 14206      2D3E2025 
 14206      6C640D0A 
 14206      00
 14207 18b1 000000   		.align	2
 14208              	.LC225:
 14209 18b4 4D617820 		.ascii	"Max step pos and neg: %d %d\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 321


 14209      73746570 
 14209      20706F73 
 14209      20616E64 
 14209      206E6567 
 14210              		.align	2
 14211              	.LC226:
 14212 18d0 43757272 		.ascii	"Current limit: %d\015\012\000"
 14212      656E7420 
 14212      6C696D69 
 14212      743A2025 
 14212      640D0A00 
 14213              		.align	2
 14214              	.LC227:
 14215 18e4 4D6F746F 		.ascii	"Motor board associated encoder line: %d\015\012\000"
 14215      7220626F 
 14215      61726420 
 14215      6173736F 
 14215      63696174 
 14216 190e 0000     		.align	2
 14217              	.LC228:
 14218 1910 44726976 		.ascii	"Driver type: MC33887 (Standard)\015\012\000"
 14218      65722074 
 14218      7970653A 
 14218      204D4333 
 14218      33383837 
 14219 1932 0000     		.align	2
 14220              	.LC229:
 14221 1934 44726976 		.ascii	"Driver type: VNH5019 (High power)\015\012\000"
 14221      65722074 
 14221      7970653A 
 14221      20564E48 
 14221      35303139 
 14222              		.align	2
 14223              	.LC230:
 14224 1958 44726976 		.ascii	"Driver type: ESC (Brushless)\015\012\000"
 14224      65722074 
 14224      7970653A 
 14224      20455343 
 14224      20284272 
 14225 1977 00       		.align	2
 14226              	.LC231:
 14227 1978 50574D20 		.ascii	"PWM rate limiter value: %d\015\012\000"
 14227      72617465 
 14227      206C696D 
 14227      69746572 
 14227      2076616C 
 14228 1995 000000   		.align	2
 14229              	.LC232:
 14230 1998 4E6F7420 		.ascii	"Not reversible motor: YES\015\012\000"
 14230      72657665 
 14230      72736962 
 14230      6C65206D 
 14230      6F746F72 
 14231              		.align	2
 14232              	.LC233:
 14233 19b4 4E6F7420 		.ascii	"Not reversible motor: NO\015\012\000"
 14233      72657665 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 322


 14233      72736962 
 14233      6C65206D 
 14233      6F746F72 
 14234 19cf 00       		.align	2
 14235              	.LC234:
 14236 19d0 454D4720 		.ascii	"EMG CONFIGURATION\015\012\000"
 14236      434F4E46 
 14236      49475552 
 14236      4154494F 
 14236      4E0D0A00 
 14237              		.align	2
 14238              	.LC235:
 14239 19e4 454D4720 		.ascii	"EMG thresholds [0 - 1024]: %u, %u\000"
 14239      74687265 
 14239      73686F6C 
 14239      6473205B 
 14239      30202D20 
 14240 1a06 0000     		.align	2
 14241              	.LC236:
 14242 1a08 454D4720 		.ascii	"EMG max values [0 - 4096]: %lu, %lu\000"
 14242      6D617820 
 14242      76616C75 
 14242      6573205B 
 14242      30202D20 
 14243              		.align	2
 14244              	.LC237:
 14245 1a2c 454D4720 		.ascii	"EMG inversion: YES\015\012\000"
 14245      696E7665 
 14245      7273696F 
 14245      6E3A2059 
 14245      45530D0A 
 14246 1a41 000000   		.align	2
 14247              	.LC238:
 14248 1a44 454D4720 		.ascii	"EMG inversion: NO\015\012\000"
 14248      696E7665 
 14248      7273696F 
 14248      6E3A204E 
 14248      4F0D0A00 
 14249              		.align	2
 14250              	.LC239:
 14251 1a58 43616C69 		.ascii	"Calibration enabled: YES\015\012\000"
 14251      62726174 
 14251      696F6E20 
 14251      656E6162 
 14251      6C65643A 
 14252 1a73 00       		.align	2
 14253              	.LC240:
 14254 1a74 43616C69 		.ascii	"Calibration enabled: NO\015\012\000"
 14254      62726174 
 14254      696F6E20 
 14254      656E6162 
 14254      6C65643A 
 14255 1a8e 0000     		.align	2
 14256              	.LC241:
 14257 1a90 454D4720 		.ascii	"EMG max speed: %d %d\000"
 14257      6D617820 
 14257      73706565 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 323


 14257      643A2025 
 14257      64202564 
 14258 1aa5 000000   		.align	2
 14259              	.LC242:
 14260 1aa8 41646469 		.ascii	"Additional ADC sensors value:\015\012\000"
 14260      74696F6E 
 14260      616C2041 
 14260      44432073 
 14260      656E736F 
 14261              		.align	2
 14262              	.LC243:
 14263 1ac8 41444320 		.ascii	"ADC %d -> %d\000"
 14263      2564202D 
 14263      3E202564 
 14263      00
 14264 1ad5 000000   		.align	2
 14265              	.LC244:
 14266 1ad8 454D4720 		.ascii	"EMG input %d -> %d\000"
 14266      696E7075 
 14266      74202564 
 14266      202D3E20 
 14266      256400
 14267 1aeb 00       		.align	2
 14268              	.LC245:
 14269 1aec 4A4F5953 		.ascii	"JOYSTICK CONFIGURATION\015\012\000"
 14269      5449434B 
 14269      20434F4E 
 14269      46494755 
 14269      52415449 
 14270 1b05 000000   		.align	2
 14271              	.LC246:
 14272 1b08 436C6F73 		.ascii	"Closure speed: %d\000"
 14272      75726520 
 14272      73706565 
 14272      643A2025 
 14272      6400
 14273 1b1a 0000     		.align	2
 14274              	.LC247:
 14275 1b1c 4A6F7973 		.ascii	"Joystick Threshold: %d\000"
 14275      7469636B 
 14275      20546872 
 14275      6573686F 
 14275      6C643A20 
 14276 1b33 00       		.align	2
 14277              	.LC248:
 14278 1b34 4A6F7973 		.ascii	"Joystick Gains - X:%hu  Y:%hu\000"
 14278      7469636B 
 14278      20476169 
 14278      6E73202D 
 14278      20583A25 
 14279 1b52 0000     		.align	2
 14280              	.LC249:
 14281 1b54 52657374 		.ascii	"Rest time delay (ms): %d\000"
 14281      2074696D 
 14281      65206465 
 14281      6C617920 
 14281      286D7329 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 324


 14282 1b6d 000000   		.align	2
 14283              	.LC250:
 14284 1b70 52657374 		.ascii	"Rest velocity closure (ticks/sec): %d\000"
 14284      2076656C 
 14284      6F636974 
 14284      7920636C 
 14284      6F737572 
 14285 1b96 0000     		.align	2
 14286              	.LC251:
 14287 1b98 52657374 		.ascii	"Rest position: %d\000"
 14287      20706F73 
 14287      6974696F 
 14287      6E3A2025 
 14287      6400
 14288 1baa 0000     		.align	2
 14289              	.LC252:
 14290 1bac 494D5520 		.ascii	"IMU Connected: %d\015\012\000"
 14290      436F6E6E 
 14290      65637465 
 14290      643A2025 
 14290      640D0A00 
 14291              		.align	2
 14292              	.LC253:
 14293 1bc0 494D5573 		.ascii	"IMUs CONFIGURATION\015\012\000"
 14293      20434F4E 
 14293      46494755 
 14293      52415449 
 14293      4F4E0D0A 
 14294 1bd5 000000   		.align	2
 14295              	.LC254:
 14296 1bd8 496D7520 		.ascii	"Imu %d \015\012\011ID: %d\015\012\000"
 14296      2564200D 
 14296      0A094944 
 14296      3A202564 
 14296      0D0A00
 14297 1beb 00       		.align	2
 14298              	.LC255:
 14299 1bec 09416363 		.ascii	"\011Accelerometers: \000"
 14299      656C6572 
 14299      6F6D6574 
 14299      6572733A 
 14299      2000
 14300 1bfe 0000     		.align	2
 14301              	.LC256:
 14302 1c00 09477972 		.ascii	"\011Gyroscopes: \000"
 14302      6F73636F 
 14302      7065733A 
 14302      2000
 14303 1c0e 0000     		.align	2
 14304              	.LC257:
 14305 1c10 094D6167 		.ascii	"\011Magnetometers: \000"
 14305      6E65746F 
 14305      6D657465 
 14305      72733A20 
 14305      00
 14306 1c21 000000   		.align	2
 14307              	.LC258:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 325


 14308 1c24 09517561 		.ascii	"\011Quaternion: \000"
 14308      7465726E 
 14308      696F6E3A 
 14308      2000
 14309 1c32 0000     		.align	2
 14310              	.LC259:
 14311 1c34 0954656D 		.ascii	"\011Temperature: \000"
 14311      70657261 
 14311      74757265 
 14311      3A2000
 14312 1c43 00       		.align	2
 14313              	.LC260:
 14314 1c44 454E434F 		.ascii	"ENCODER CONFIGURATION\015\012\000"
 14314      44455220 
 14314      434F4E46 
 14314      49475552 
 14314      4154494F 
 14315              		.align	2
 14316              	.LC261:
 14317 1c5c 456E636F 		.ascii	"Encoder Connected Line %d: %d\000"
 14317      64657220 
 14317      436F6E6E 
 14317      65637465 
 14317      64204C69 
 14318 1c7a 0000     		.align	2
 14319              	.LC262:
 14320 1c7c 4C454654 		.ascii	"LEFT\000"
 14320      00
 14321 1c81 000000   		.align	2
 14322              	.LC263:
 14323 1c84 52494748 		.ascii	"RIGHT\000"
 14323      5400
 14324 1c8a 0000     		.align	2
 14325              	.LC264:
 14326 1c8c 205B2573 		.ascii	" [%s HAND main encoder line]\000"
 14326      2048414E 
 14326      44206D61 
 14326      696E2065 
 14326      6E636F64 
 14327 1ca9 000000   		.align	2
 14328              	.LC265:
 14329 1cac 52617720 		.ascii	"Raw value [status]:\015\012\000"
 14329      76616C75 
 14329      65205B73 
 14329      74617475 
 14329      735D3A0D 
 14330 1cc2 0000     		.align	2
 14331              	.LC266:
 14332 1cc4 4F4B00   		.ascii	"OK\000"
 14333 1cc7 00       		.align	2
 14334              	.LC267:
 14335 1cc8 5800     		.ascii	"X\000"
 14336 1cca 0000     		.align	2
 14337              	.LC268:
 14338 1ccc 2564095B 		.ascii	"%d\011[%s]\015\012\000"
 14338      25735D0D 
 14338      0A00
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 326


 14339 1cd6 0000     		.align	2
 14340              	.LC269:
 14341 1cd8 745F6265 		.ascii	"t_before_data_send_to_PC: %d us\015\012\000"
 14341      666F7265 
 14341      5F646174 
 14341      615F7365 
 14341      6E645F74 
 14342 1cfa 0000     		.align	2
 14343              	.LC270:
 14344 1cfc 745F6166 		.ascii	"t_after_data_send_to_PC: %d us\015\012\000"
 14344      7465725F 
 14344      64617461 
 14344      5F73656E 
 14344      645F746F 
 14345 1d1d 000000   		.align	2
 14346              	.LC271:
 14347 1d20 74696D65 		.ascii	"time_to_send_data_to_PC: %d us\015\012\012\000"
 14347      5F746F5F 
 14347      73656E64 
 14347      5F646174 
 14347      615F746F 
 14348 1d42 0000     		.align	2
 14349              	.LC272:
 14350 1d44 74305F61 		.ascii	"t0_accel_ID_%d: %d us\015\012\000"
 14350      6363656C 
 14350      5F49445F 
 14350      25643A20 
 14350      25642075 
 14351              		.align	2
 14352              	.LC273:
 14353 1d5c 74315F61 		.ascii	"t1_accel_ID_%d: %d us\015\012\000"
 14353      6363656C 
 14353      5F49445F 
 14353      25643A20 
 14353      25642075 
 14354              		.align	2
 14355              	.LC274:
 14356 1d74 54696D65 		.ascii	"Time to get 3 axis_accel of IMU_ID_%d: %f us\015\012"
 14356      20746F20 
 14356      67657420 
 14356      33206178 
 14356      69735F61 
 14357 1da2 00       		.ascii	"\000"
 14358 1da3 00       		.align	2
 14359              	.LC275:
 14360 1da4 0D0A0000 		.ascii	"\015\012\000\000"
 14361              		.section	.text.prepare_generic_info,"ax",%progbits
 14362              		.align	2
 14363              		.global	prepare_generic_info
 14364              		.thumb
 14365              		.thumb_func
 14366              		.type	prepare_generic_info, %function
 14367              	prepare_generic_info:
 14368              	.LFB72:
1902:..\src/command_processing.c **** 
1903:..\src/command_processing.c **** //==============================================================================
1904:..\src/command_processing.c **** //                                                   PREPARE GENERIC DEVICE INFO
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 327


1905:..\src/command_processing.c **** //==============================================================================
1906:..\src/command_processing.c **** 
1907:..\src/command_processing.c **** void prepare_generic_info(char *info_string)
1908:..\src/command_processing.c **** {
 14369              		.loc 1 1908 0
 14370              		.cfi_startproc
 14371              		@ args = 0, pretend = 0, frame = 160
 14372              		@ frame_needed = 1, uses_anonymous_args = 0
 14373 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 14374              		.cfi_def_cfa_offset 36
 14375              		.cfi_offset 4, -36
 14376              		.cfi_offset 5, -32
 14377              		.cfi_offset 6, -28
 14378              		.cfi_offset 7, -24
 14379              		.cfi_offset 8, -20
 14380              		.cfi_offset 9, -16
 14381              		.cfi_offset 10, -12
 14382              		.cfi_offset 11, -8
 14383              		.cfi_offset 14, -4
 14384 0004 B3B0     		sub	sp, sp, #204
 14385              		.cfi_def_cfa_offset 240
 14386 0006 0AAF     		add	r7, sp, #40
 14387              		.cfi_def_cfa 7, 200
 14388 0008 7861     		str	r0, [r7, #20]
1909:..\src/command_processing.c ****     int i;
1910:..\src/command_processing.c **** 
1911:..\src/command_processing.c ****     struct st_eeprom* MEM_P = &c_mem; 
 14389              		.loc 1 1911 0
 14390 000a B64B     		ldr	r3, .L688
 14391 000c C7F88C30 		str	r3, [r7, #140]
1912:..\src/command_processing.c ****     
1913:..\src/command_processing.c ****     if(c_mem.dev.id != 250){                //To avoid dummy board ping
 14392              		.loc 1 1913 0
 14393 0010 B44B     		ldr	r3, .L688
 14394 0012 93F8A030 		ldrb	r3, [r3, #160]	@ zero_extendqisi2
 14395 0016 FA2B     		cmp	r3, #250
 14396 0018 02F00B81 		beq	.L685
 14397              	.LBB24:
1914:..\src/command_processing.c ****         char str[100];
1915:..\src/command_processing.c ****         strcpy(info_string, "");
 14398              		.loc 1 1915 0
 14399 001c 7B69     		ldr	r3, [r7, #20]
 14400 001e 0022     		movs	r2, #0
 14401 0020 1A70     		strb	r2, [r3]
1916:..\src/command_processing.c ****         strcat(info_string, "\r\n");
 14402              		.loc 1 1916 0
 14403 0022 7869     		ldr	r0, [r7, #20]
 14404 0024 FFF7FEFF 		bl	strlen
 14405 0028 0346     		mov	r3, r0
 14406 002a 1A46     		mov	r2, r3
 14407 002c 7B69     		ldr	r3, [r7, #20]
 14408 002e 1344     		add	r3, r3, r2
 14409 0030 AD4A     		ldr	r2, .L688+4
 14410 0032 1188     		ldrh	r1, [r2]	@ unaligned
 14411 0034 9278     		ldrb	r2, [r2, #2]
 14412 0036 1980     		strh	r1, [r3]	@ unaligned
 14413 0038 9A70     		strb	r2, [r3, #2]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 328


1917:..\src/command_processing.c ****         strcat(info_string, "Firmware version:=====================================================
 14414              		.loc 1 1917 0
 14415 003a 7869     		ldr	r0, [r7, #20]
 14416 003c FFF7FEFF 		bl	strlen
 14417 0040 0346     		mov	r3, r0
 14418 0042 1A46     		mov	r2, r3
 14419 0044 7B69     		ldr	r3, [r7, #20]
 14420 0046 1344     		add	r3, r3, r2
 14421 0048 A84A     		ldr	r2, .L688+8
 14422 004a 1846     		mov	r0, r3
 14423 004c 1146     		mov	r1, r2
 14424 004e D023     		movs	r3, #208
 14425 0050 1A46     		mov	r2, r3
 14426 0052 FFF7FEFF 		bl	memcpy
1918:..\src/command_processing.c ****        
1919:..\src/command_processing.c ****         strcat(info_string, "======================================================================
 14427              		.loc 1 1919 0
 14428 0056 7869     		ldr	r0, [r7, #20]
 14429 0058 FFF7FEFF 		bl	strlen
 14430 005c 0346     		mov	r3, r0
 14431 005e 1A46     		mov	r2, r3
 14432 0060 7B69     		ldr	r3, [r7, #20]
 14433 0062 1344     		add	r3, r3, r2
 14434 0064 A24A     		ldr	r2, .L688+12
 14435 0066 1846     		mov	r0, r3
 14436 0068 1146     		mov	r1, r2
 14437 006a 4B23     		movs	r3, #75
 14438 006c 1A46     		mov	r2, r3
 14439 006e FFF7FEFF 		bl	memcpy
1920:..\src/command_processing.c **** 
1921:..\src/command_processing.c ****         strcat(info_string, "DEVICE INFO\r\n");
 14440              		.loc 1 1921 0
 14441 0072 7869     		ldr	r0, [r7, #20]
 14442 0074 FFF7FEFF 		bl	strlen
 14443 0078 0346     		mov	r3, r0
 14444 007a 1A46     		mov	r2, r3
 14445 007c 7B69     		ldr	r3, [r7, #20]
 14446 007e 1344     		add	r3, r3, r2
 14447 0080 9C4A     		ldr	r2, .L688+16
 14448 0082 1C46     		mov	r4, r3
 14449 0084 1346     		mov	r3, r2
 14450 0086 07CB     		ldmia	r3!, {r0, r1, r2}
 14451 0088 2060     		str	r0, [r4]	@ unaligned
 14452 008a 6160     		str	r1, [r4, #4]	@ unaligned
 14453 008c A260     		str	r2, [r4, #8]	@ unaligned
 14454 008e 1B88     		ldrh	r3, [r3]	@ unaligned
 14455 0090 A381     		strh	r3, [r4, #12]	@ unaligned
1922:..\src/command_processing.c ****         sprintf(str, "ID: %d\r\n", (int) MEM_P->dev.id);
 14456              		.loc 1 1922 0
 14457 0092 D7F88C30 		ldr	r3, [r7, #140]
 14458 0096 93F8A030 		ldrb	r3, [r3, #160]	@ zero_extendqisi2
 14459 009a 1A46     		mov	r2, r3
 14460 009c 07F11C03 		add	r3, r7, #28
 14461 00a0 9549     		ldr	r1, .L688+20
 14462 00a2 1846     		mov	r0, r3
 14463 00a4 FFF7FEFF 		bl	sprintf
1923:..\src/command_processing.c ****         strcat(info_string, str);
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 329


 14464              		.loc 1 1923 0
 14465 00a8 07F11C03 		add	r3, r7, #28
 14466 00ac 1946     		mov	r1, r3
 14467 00ae 7869     		ldr	r0, [r7, #20]
 14468 00b0 FFF7FEFF 		bl	strcat
1924:..\src/command_processing.c ****         switch(MEM_P->dev.dev_type){
 14469              		.loc 1 1924 0
 14470 00b4 D7F88C30 		ldr	r3, [r7, #140]
 14471 00b8 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 14472 00bc 042B     		cmp	r3, #4
 14473 00be 00F29180 		bhi	.L686
 14474 00c2 01A2     		adr	r2, .L567
 14475 00c4 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 14476              		.p2align 2
 14477              	.L567:
 14478 00c8 DD000000 		.word	.L566+1
 14479 00cc 0B010000 		.word	.L568+1
 14480 00d0 3B010000 		.word	.L569+1
 14481 00d4 7D010000 		.word	.L570+1
 14482 00d8 BD010000 		.word	.L571+1
 14483              		.p2align 1
 14484              	.L566:
1925:..\src/command_processing.c ****             case SOFTHAND_PRO:
1926:..\src/command_processing.c ****                 strcat(info_string, "Device: SOFTHAND PRO\r\n");
 14485              		.loc 1 1926 0
 14486 00dc 7869     		ldr	r0, [r7, #20]
 14487 00de FFF7FEFF 		bl	strlen
 14488 00e2 0346     		mov	r3, r0
 14489 00e4 1A46     		mov	r2, r3
 14490 00e6 7B69     		ldr	r3, [r7, #20]
 14491 00e8 1344     		add	r3, r3, r2
 14492 00ea 844A     		ldr	r2, .L688+24
 14493 00ec 1C46     		mov	r4, r3
 14494 00ee 1546     		mov	r5, r2
 14495 00f0 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 14496 00f2 2060     		str	r0, [r4]	@ unaligned
 14497 00f4 6160     		str	r1, [r4, #4]	@ unaligned
 14498 00f6 A260     		str	r2, [r4, #8]	@ unaligned
 14499 00f8 E360     		str	r3, [r4, #12]	@ unaligned
 14500 00fa 2868     		ldr	r0, [r5]	@ unaligned
 14501 00fc 2061     		str	r0, [r4, #16]	@ unaligned
 14502 00fe AB88     		ldrh	r3, [r5, #4]	@ unaligned
 14503 0100 AA79     		ldrb	r2, [r5, #6]
 14504 0102 A382     		strh	r3, [r4, #20]	@ unaligned
 14505 0104 1346     		mov	r3, r2
 14506 0106 A375     		strb	r3, [r4, #22]
1927:..\src/command_processing.c ****                 break;
 14507              		.loc 1 1927 0
 14508 0108 6DE0     		b	.L572
 14509              	.L568:
1928:..\src/command_processing.c ****             case GENERIC_2_MOTORS:
1929:..\src/command_processing.c ****                 strcat(info_string, "Device: GENERIC 2 MOTORS\r\n");
 14510              		.loc 1 1929 0
 14511 010a 7869     		ldr	r0, [r7, #20]
 14512 010c FFF7FEFF 		bl	strlen
 14513 0110 0346     		mov	r3, r0
 14514 0112 1A46     		mov	r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 330


 14515 0114 7B69     		ldr	r3, [r7, #20]
 14516 0116 1344     		add	r3, r3, r2
 14517 0118 794A     		ldr	r2, .L688+28
 14518 011a 1D46     		mov	r5, r3
 14519 011c 1446     		mov	r4, r2
 14520 011e 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 14521 0120 2860     		str	r0, [r5]	@ unaligned
 14522 0122 6960     		str	r1, [r5, #4]	@ unaligned
 14523 0124 AA60     		str	r2, [r5, #8]	@ unaligned
 14524 0126 EB60     		str	r3, [r5, #12]	@ unaligned
 14525 0128 03CC     		ldmia	r4!, {r0, r1}
 14526 012a 2861     		str	r0, [r5, #16]	@ unaligned
 14527 012c 6961     		str	r1, [r5, #20]	@ unaligned
 14528 012e 2388     		ldrh	r3, [r4]	@ unaligned
 14529 0130 A278     		ldrb	r2, [r4, #2]
 14530 0132 2B83     		strh	r3, [r5, #24]	@ unaligned
 14531 0134 1346     		mov	r3, r2
 14532 0136 AB76     		strb	r3, [r5, #26]
1930:..\src/command_processing.c ****                 break;
 14533              		.loc 1 1930 0
 14534 0138 55E0     		b	.L572
 14535              	.L569:
1931:..\src/command_processing.c ****             case AIR_CHAMBERS_FB:
1932:..\src/command_processing.c ****                 strcat(info_string, "Device: AIR CHAMBERS HAPTIC FEEDBACK\r\n");
 14536              		.loc 1 1932 0
 14537 013a 7869     		ldr	r0, [r7, #20]
 14538 013c FFF7FEFF 		bl	strlen
 14539 0140 0346     		mov	r3, r0
 14540 0142 1A46     		mov	r2, r3
 14541 0144 7B69     		ldr	r3, [r7, #20]
 14542 0146 1344     		add	r3, r3, r2
 14543 0148 6E4A     		ldr	r2, .L688+32
 14544 014a 1446     		mov	r4, r2
 14545 014c 9E46     		mov	lr, r3
 14546 014e 04F1200C 		add	ip, r4, #32
 14547              	.L573:
 14548 0152 7546     		mov	r5, lr
 14549 0154 2646     		mov	r6, r4
 14550 0156 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 14551 0158 2860     		str	r0, [r5]	@ unaligned
 14552 015a 6960     		str	r1, [r5, #4]	@ unaligned
 14553 015c AA60     		str	r2, [r5, #8]	@ unaligned
 14554 015e EB60     		str	r3, [r5, #12]	@ unaligned
 14555 0160 1034     		adds	r4, r4, #16
 14556 0162 0EF1100E 		add	lr, lr, #16
 14557 0166 6445     		cmp	r4, ip
 14558 0168 F3D1     		bne	.L573
 14559 016a 7346     		mov	r3, lr
 14560 016c 2246     		mov	r2, r4
 14561 016e 1068     		ldr	r0, [r2]	@ unaligned
 14562 0170 1860     		str	r0, [r3]	@ unaligned
 14563 0172 9188     		ldrh	r1, [r2, #4]	@ unaligned
 14564 0174 9279     		ldrb	r2, [r2, #6]
 14565 0176 9980     		strh	r1, [r3, #4]	@ unaligned
 14566 0178 9A71     		strb	r2, [r3, #6]
1933:..\src/command_processing.c ****                 break;
 14567              		.loc 1 1933 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 331


 14568 017a 34E0     		b	.L572
 14569              	.L570:
1934:..\src/command_processing.c ****             case OTBK_ACT_WRIST_MS:
1935:..\src/command_processing.c ****                 strcat(info_string, "Device: OTTOBOCK 6v ACTIVE WRIST MASTER\r\n");
 14570              		.loc 1 1935 0
 14571 017c 7869     		ldr	r0, [r7, #20]
 14572 017e FFF7FEFF 		bl	strlen
 14573 0182 0346     		mov	r3, r0
 14574 0184 1A46     		mov	r2, r3
 14575 0186 7B69     		ldr	r3, [r7, #20]
 14576 0188 1344     		add	r3, r3, r2
 14577 018a 5F4A     		ldr	r2, .L688+36
 14578 018c 1446     		mov	r4, r2
 14579 018e 9E46     		mov	lr, r3
 14580 0190 04F1200C 		add	ip, r4, #32
 14581              	.L574:
 14582 0194 7546     		mov	r5, lr
 14583 0196 2646     		mov	r6, r4
 14584 0198 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 14585 019a 2860     		str	r0, [r5]	@ unaligned
 14586 019c 6960     		str	r1, [r5, #4]	@ unaligned
 14587 019e AA60     		str	r2, [r5, #8]	@ unaligned
 14588 01a0 EB60     		str	r3, [r5, #12]	@ unaligned
 14589 01a2 1034     		adds	r4, r4, #16
 14590 01a4 0EF1100E 		add	lr, lr, #16
 14591 01a8 6445     		cmp	r4, ip
 14592 01aa F3D1     		bne	.L574
 14593 01ac 7246     		mov	r2, lr
 14594 01ae 2346     		mov	r3, r4
 14595 01b0 03CB     		ldmia	r3!, {r0, r1}
 14596 01b2 1060     		str	r0, [r2]	@ unaligned
 14597 01b4 5160     		str	r1, [r2, #4]	@ unaligned
 14598 01b6 1B88     		ldrh	r3, [r3]	@ unaligned
 14599 01b8 1381     		strh	r3, [r2, #8]	@ unaligned
1936:..\src/command_processing.c ****                 break;
 14600              		.loc 1 1936 0
 14601 01ba 14E0     		b	.L572
 14602              	.L571:
1937:..\src/command_processing.c ****             case SOFTHAND_2_MOTORS:
1938:..\src/command_processing.c ****                 strcat(info_string, "Device: SOFTHAND 2 MOTORS\r\n");
 14603              		.loc 1 1938 0
 14604 01bc 7869     		ldr	r0, [r7, #20]
 14605 01be FFF7FEFF 		bl	strlen
 14606 01c2 0346     		mov	r3, r0
 14607 01c4 1A46     		mov	r2, r3
 14608 01c6 7B69     		ldr	r3, [r7, #20]
 14609 01c8 1344     		add	r3, r3, r2
 14610 01ca 504A     		ldr	r2, .L688+40
 14611 01cc 1D46     		mov	r5, r3
 14612 01ce 1446     		mov	r4, r2
 14613 01d0 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 14614 01d2 2860     		str	r0, [r5]	@ unaligned
 14615 01d4 6960     		str	r1, [r5, #4]	@ unaligned
 14616 01d6 AA60     		str	r2, [r5, #8]	@ unaligned
 14617 01d8 EB60     		str	r3, [r5, #12]	@ unaligned
 14618 01da 07CC     		ldmia	r4!, {r0, r1, r2}
 14619 01dc 2861     		str	r0, [r5, #16]	@ unaligned
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 332


 14620 01de 6961     		str	r1, [r5, #20]	@ unaligned
 14621 01e0 AA61     		str	r2, [r5, #24]	@ unaligned
1939:..\src/command_processing.c ****                 break;
 14622              		.loc 1 1939 0
 14623 01e2 00E0     		b	.L572
 14624              	.L686:
1940:..\src/command_processing.c ****             default:
1941:..\src/command_processing.c ****                 break;
 14625              		.loc 1 1941 0
 14626 01e4 00BF     		nop
 14627              	.L572:
1942:..\src/command_processing.c ****         }
1943:..\src/command_processing.c ****         
1944:..\src/command_processing.c ****         switch(MEM_P->dev.right_left){
 14628              		.loc 1 1944 0
 14629 01e6 D7F88C30 		ldr	r3, [r7, #140]
 14630 01ea 93F8A730 		ldrb	r3, [r3, #167]	@ zero_extendqisi2
 14631 01ee 002B     		cmp	r3, #0
 14632 01f0 02D0     		beq	.L576
 14633 01f2 012B     		cmp	r3, #1
 14634 01f4 15D0     		beq	.L577
 14635 01f6 26E0     		b	.L575
 14636              	.L576:
1945:..\src/command_processing.c ****             case RIGHT_HAND:
1946:..\src/command_processing.c ****                 strcat(info_string, "Hand side: RIGHT\r\n");
 14637              		.loc 1 1946 0
 14638 01f8 7869     		ldr	r0, [r7, #20]
 14639 01fa FFF7FEFF 		bl	strlen
 14640 01fe 0346     		mov	r3, r0
 14641 0200 1A46     		mov	r2, r3
 14642 0202 7B69     		ldr	r3, [r7, #20]
 14643 0204 1344     		add	r3, r3, r2
 14644 0206 424A     		ldr	r2, .L688+44
 14645 0208 1D46     		mov	r5, r3
 14646 020a 1446     		mov	r4, r2
 14647 020c 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 14648 020e 2860     		str	r0, [r5]	@ unaligned
 14649 0210 6960     		str	r1, [r5, #4]	@ unaligned
 14650 0212 AA60     		str	r2, [r5, #8]	@ unaligned
 14651 0214 EB60     		str	r3, [r5, #12]	@ unaligned
 14652 0216 2388     		ldrh	r3, [r4]	@ unaligned
 14653 0218 A278     		ldrb	r2, [r4, #2]
 14654 021a 2B82     		strh	r3, [r5, #16]	@ unaligned
 14655 021c 1346     		mov	r3, r2
 14656 021e AB74     		strb	r3, [r5, #18]
1947:..\src/command_processing.c ****                 break;
 14657              		.loc 1 1947 0
 14658 0220 11E0     		b	.L575
 14659              	.L577:
1948:..\src/command_processing.c ****             case LEFT_HAND:
1949:..\src/command_processing.c ****                 strcat(info_string, "Hand side: LEFT\r\n");
 14660              		.loc 1 1949 0
 14661 0222 7869     		ldr	r0, [r7, #20]
 14662 0224 FFF7FEFF 		bl	strlen
 14663 0228 0346     		mov	r3, r0
 14664 022a 1A46     		mov	r2, r3
 14665 022c 7B69     		ldr	r3, [r7, #20]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 333


 14666 022e 1344     		add	r3, r3, r2
 14667 0230 384A     		ldr	r2, .L688+48
 14668 0232 1D46     		mov	r5, r3
 14669 0234 1446     		mov	r4, r2
 14670 0236 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 14671 0238 2860     		str	r0, [r5]	@ unaligned
 14672 023a 6960     		str	r1, [r5, #4]	@ unaligned
 14673 023c AA60     		str	r2, [r5, #8]	@ unaligned
 14674 023e EB60     		str	r3, [r5, #12]	@ unaligned
 14675 0240 2388     		ldrh	r3, [r4]	@ unaligned
 14676 0242 2B82     		strh	r3, [r5, #16]	@ unaligned
1950:..\src/command_processing.c ****                 break;
 14677              		.loc 1 1950 0
 14678 0244 00BF     		nop
 14679              	.L575:
1951:..\src/command_processing.c ****         }
1952:..\src/command_processing.c **** 
1953:..\src/command_processing.c ****         switch(MEM_P->dev.user_id) {
 14680              		.loc 1 1953 0
 14681 0246 D7F88C30 		ldr	r3, [r7, #140]
 14682 024a 93F8AB30 		ldrb	r3, [r3, #171]	@ zero_extendqisi2
 14683 024e 012B     		cmp	r3, #1
 14684 0250 02D0     		beq	.L579
 14685 0252 022B     		cmp	r3, #2
 14686 0254 11D0     		beq	.L580
 14687 0256 1FE0     		b	.L684
 14688              	.L579:
1954:..\src/command_processing.c ****             case MARIA:
1955:..\src/command_processing.c ****                 strcat(info_string, "User: MARIA\r\n");
 14689              		.loc 1 1955 0
 14690 0258 7869     		ldr	r0, [r7, #20]
 14691 025a FFF7FEFF 		bl	strlen
 14692 025e 0346     		mov	r3, r0
 14693 0260 1A46     		mov	r2, r3
 14694 0262 7B69     		ldr	r3, [r7, #20]
 14695 0264 1344     		add	r3, r3, r2
 14696 0266 2C4A     		ldr	r2, .L688+52
 14697 0268 1C46     		mov	r4, r3
 14698 026a 1346     		mov	r3, r2
 14699 026c 07CB     		ldmia	r3!, {r0, r1, r2}
 14700 026e 2060     		str	r0, [r4]	@ unaligned
 14701 0270 6160     		str	r1, [r4, #4]	@ unaligned
 14702 0272 A260     		str	r2, [r4, #8]	@ unaligned
 14703 0274 1B88     		ldrh	r3, [r3]	@ unaligned
 14704 0276 A381     		strh	r3, [r4, #12]	@ unaligned
1956:..\src/command_processing.c ****                 break;
 14705              		.loc 1 1956 0
 14706 0278 22E0     		b	.L581
 14707              	.L580:
1957:..\src/command_processing.c ****             case R01:
1958:..\src/command_processing.c ****                 strcat(info_string, "User: R01\r\n");
 14708              		.loc 1 1958 0
 14709 027a 7869     		ldr	r0, [r7, #20]
 14710 027c FFF7FEFF 		bl	strlen
 14711 0280 0346     		mov	r3, r0
 14712 0282 1A46     		mov	r2, r3
 14713 0284 7B69     		ldr	r3, [r7, #20]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 334


 14714 0286 1344     		add	r3, r3, r2
 14715 0288 244A     		ldr	r2, .L688+56
 14716 028a 1C46     		mov	r4, r3
 14717 028c 1346     		mov	r3, r2
 14718 028e 07CB     		ldmia	r3!, {r0, r1, r2}
 14719 0290 2060     		str	r0, [r4]	@ unaligned
 14720 0292 6160     		str	r1, [r4, #4]	@ unaligned
 14721 0294 A260     		str	r2, [r4, #8]	@ unaligned
1959:..\src/command_processing.c ****                 break;
 14722              		.loc 1 1959 0
 14723 0296 13E0     		b	.L581
 14724              	.L684:
1960:..\src/command_processing.c ****             default:
1961:..\src/command_processing.c ****                 strcat(info_string, "User: GENERIC USER\r\n");
 14725              		.loc 1 1961 0
 14726 0298 7869     		ldr	r0, [r7, #20]
 14727 029a FFF7FEFF 		bl	strlen
 14728 029e 0346     		mov	r3, r0
 14729 02a0 1A46     		mov	r2, r3
 14730 02a2 7B69     		ldr	r3, [r7, #20]
 14731 02a4 1344     		add	r3, r3, r2
 14732 02a6 1E4A     		ldr	r2, .L688+60
 14733 02a8 1D46     		mov	r5, r3
 14734 02aa 1446     		mov	r4, r2
 14735 02ac 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 14736 02ae 2860     		str	r0, [r5]	@ unaligned
 14737 02b0 6960     		str	r1, [r5, #4]	@ unaligned
 14738 02b2 AA60     		str	r2, [r5, #8]	@ unaligned
 14739 02b4 EB60     		str	r3, [r5, #12]	@ unaligned
 14740 02b6 2068     		ldr	r0, [r4]	@ unaligned
 14741 02b8 2861     		str	r0, [r5, #16]	@ unaligned
 14742 02ba 2379     		ldrb	r3, [r4, #4]
 14743 02bc 2B75     		strb	r3, [r5, #20]
1962:..\src/command_processing.c ****                 break;
 14744              		.loc 1 1962 0
 14745 02be 00BF     		nop
 14746              	.L581:
1963:..\src/command_processing.c ****         }
1964:..\src/command_processing.c ****         strcat(info_string, "\r\n");  
 14747              		.loc 1 1964 0
 14748 02c0 7869     		ldr	r0, [r7, #20]
 14749 02c2 FFF7FEFF 		bl	strlen
 14750 02c6 0346     		mov	r3, r0
 14751 02c8 1A46     		mov	r2, r3
 14752 02ca 7B69     		ldr	r3, [r7, #20]
 14753 02cc 1344     		add	r3, r3, r2
 14754 02ce 064A     		ldr	r2, .L688+4
 14755 02d0 1188     		ldrh	r1, [r2]	@ unaligned
 14756 02d2 9278     		ldrb	r2, [r2, #2]
 14757 02d4 1980     		strh	r1, [r3]	@ unaligned
 14758 02d6 9A70     		strb	r2, [r3, #2]
 14759              	.LBB25:
1965:..\src/command_processing.c ****         
1966:..\src/command_processing.c ****         for (uint8 k = 0; k <= MEM_P->dev.use_2nd_motor_flag; k++) {
 14760              		.loc 1 1966 0
 14761 02d8 0023     		movs	r3, #0
 14762 02da 87F89B30 		strb	r3, [r7, #155]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 335


 14763 02de 01F0F3B9 		b	.L582
 14764              	.L689:
 14765 02e2 00BF     		.align	2
 14766              	.L688:
 14767 02e4 00000000 		.word	c_mem
 14768 02e8 58110000 		.word	.LC152
 14769 02ec 5C110000 		.word	.LC153
 14770 02f0 2C120000 		.word	.LC154
 14771 02f4 78120000 		.word	.LC155
 14772 02f8 88120000 		.word	.LC156
 14773 02fc 94120000 		.word	.LC157
 14774 0300 AC120000 		.word	.LC158
 14775 0304 C8120000 		.word	.LC159
 14776 0308 F0120000 		.word	.LC160
 14777 030c 1C130000 		.word	.LC161
 14778 0310 38130000 		.word	.LC162
 14779 0314 4C130000 		.word	.LC163
 14780 0318 60130000 		.word	.LC164
 14781 031c 70130000 		.word	.LC165
 14782 0320 7C130000 		.word	.LC166
 14783              	.L648:
 14784              	.LBB26:
1967:..\src/command_processing.c ****             
1968:..\src/command_processing.c ****             uint8 MOTOR_IDX = k;
 14785              		.loc 1 1968 0
 14786 0324 97F89B30 		ldrb	r3, [r7, #155]
 14787 0328 87F88B30 		strb	r3, [r7, #139]
1969:..\src/command_processing.c ****             struct st_motor* MOT = &(MEM_P->motor[MOTOR_IDX]);      // Default motor
 14788              		.loc 1 1969 0
 14789 032c 97F88B20 		ldrb	r2, [r7, #139]	@ zero_extendqisi2
 14790 0330 1346     		mov	r3, r2
 14791 0332 DB00     		lsls	r3, r3, #3
 14792 0334 9B1A     		subs	r3, r3, r2
 14793 0336 1B01     		lsls	r3, r3, #4
 14794 0338 B033     		adds	r3, r3, #176
 14795 033a D7F88C20 		ldr	r2, [r7, #140]
 14796 033e 1344     		add	r3, r3, r2
 14797 0340 C7F88430 		str	r3, [r7, #132]
1970:..\src/command_processing.c ****             uint8 ENC_L = MOT->encoder_line;             // Associated encoder line
 14798              		.loc 1 1970 0
 14799 0344 D7F88430 		ldr	r3, [r7, #132]
 14800 0348 93F86030 		ldrb	r3, [r3, #96]
 14801 034c 87F88330 		strb	r3, [r7, #131]
1971:..\src/command_processing.c ****                   
1972:..\src/command_processing.c ****             sprintf(str, "MOTOR %d INFO\r\n", MOTOR_IDX+1);
 14802              		.loc 1 1972 0
 14803 0350 97F88B30 		ldrb	r3, [r7, #139]	@ zero_extendqisi2
 14804 0354 5A1C     		adds	r2, r3, #1
 14805 0356 07F11C03 		add	r3, r7, #28
 14806 035a AE49     		ldr	r1, .L690
 14807 035c 1846     		mov	r0, r3
 14808 035e FFF7FEFF 		bl	sprintf
1973:..\src/command_processing.c ****             strcat(info_string, str);
 14809              		.loc 1 1973 0
 14810 0362 07F11C03 		add	r3, r7, #28
 14811 0366 1946     		mov	r1, r3
 14812 0368 7869     		ldr	r0, [r7, #20]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 336


 14813 036a FFF7FEFF 		bl	strcat
1974:..\src/command_processing.c ****                         
1975:..\src/command_processing.c ****             strcat(info_string, "Motor reference");
 14814              		.loc 1 1975 0
 14815 036e 7869     		ldr	r0, [r7, #20]
 14816 0370 FFF7FEFF 		bl	strlen
 14817 0374 0346     		mov	r3, r0
 14818 0376 1A46     		mov	r2, r3
 14819 0378 7B69     		ldr	r3, [r7, #20]
 14820 037a 1344     		add	r3, r3, r2
 14821 037c A64A     		ldr	r2, .L690+4
 14822 037e 1C46     		mov	r4, r3
 14823 0380 1546     		mov	r5, r2
 14824 0382 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 14825 0384 2060     		str	r0, [r4]	@ unaligned
 14826 0386 6160     		str	r1, [r4, #4]	@ unaligned
 14827 0388 A260     		str	r2, [r4, #8]	@ unaligned
 14828 038a E360     		str	r3, [r4, #12]	@ unaligned
1976:..\src/command_processing.c ****             if(MOT->control_mode == CONTROL_CURRENT)
 14829              		.loc 1 1976 0
 14830 038c D7F88430 		ldr	r3, [r7, #132]
 14831 0390 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 14832 0394 022B     		cmp	r3, #2
 14833 0396 10D1     		bne	.L583
1977:..\src/command_processing.c ****                 strcat(info_string," - Currents: ");
 14834              		.loc 1 1977 0
 14835 0398 7869     		ldr	r0, [r7, #20]
 14836 039a FFF7FEFF 		bl	strlen
 14837 039e 0346     		mov	r3, r0
 14838 03a0 1A46     		mov	r2, r3
 14839 03a2 7B69     		ldr	r3, [r7, #20]
 14840 03a4 1344     		add	r3, r3, r2
 14841 03a6 9D4A     		ldr	r2, .L690+8
 14842 03a8 1C46     		mov	r4, r3
 14843 03aa 1346     		mov	r3, r2
 14844 03ac 07CB     		ldmia	r3!, {r0, r1, r2}
 14845 03ae 2060     		str	r0, [r4]	@ unaligned
 14846 03b0 6160     		str	r1, [r4, #4]	@ unaligned
 14847 03b2 A260     		str	r2, [r4, #8]	@ unaligned
 14848 03b4 1B88     		ldrh	r3, [r3]	@ unaligned
 14849 03b6 A381     		strh	r3, [r4, #12]	@ unaligned
 14850 03b8 25E0     		b	.L584
 14851              	.L583:
1978:..\src/command_processing.c ****             else {
1979:..\src/command_processing.c ****                 if (MOT->control_mode == CONTROL_PWM)
 14852              		.loc 1 1979 0
 14853 03ba D7F88430 		ldr	r3, [r7, #132]
 14854 03be 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 14855 03c2 012B     		cmp	r3, #1
 14856 03c4 0FD1     		bne	.L585
1980:..\src/command_processing.c ****                     strcat(info_string," - Pwm: ");
 14857              		.loc 1 1980 0
 14858 03c6 7869     		ldr	r0, [r7, #20]
 14859 03c8 FFF7FEFF 		bl	strlen
 14860 03cc 0346     		mov	r3, r0
 14861 03ce 1A46     		mov	r2, r3
 14862 03d0 7B69     		ldr	r3, [r7, #20]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 337


 14863 03d2 1344     		add	r3, r3, r2
 14864 03d4 9249     		ldr	r1, .L690+12
 14865 03d6 1A46     		mov	r2, r3
 14866 03d8 0B46     		mov	r3, r1
 14867 03da 03CB     		ldmia	r3!, {r0, r1}
 14868 03dc 1060     		str	r0, [r2]	@ unaligned
 14869 03de 5160     		str	r1, [r2, #4]	@ unaligned
 14870 03e0 1B78     		ldrb	r3, [r3]
 14871 03e2 1372     		strb	r3, [r2, #8]
 14872 03e4 0FE0     		b	.L584
 14873              	.L585:
1981:..\src/command_processing.c ****                 else
1982:..\src/command_processing.c ****                     strcat(info_string," - Position: ");
 14874              		.loc 1 1982 0
 14875 03e6 7869     		ldr	r0, [r7, #20]
 14876 03e8 FFF7FEFF 		bl	strlen
 14877 03ec 0346     		mov	r3, r0
 14878 03ee 1A46     		mov	r2, r3
 14879 03f0 7B69     		ldr	r3, [r7, #20]
 14880 03f2 1344     		add	r3, r3, r2
 14881 03f4 8B4A     		ldr	r2, .L690+16
 14882 03f6 1C46     		mov	r4, r3
 14883 03f8 1346     		mov	r3, r2
 14884 03fa 07CB     		ldmia	r3!, {r0, r1, r2}
 14885 03fc 2060     		str	r0, [r4]	@ unaligned
 14886 03fe 6160     		str	r1, [r4, #4]	@ unaligned
 14887 0400 A260     		str	r2, [r4, #8]	@ unaligned
 14888 0402 1B88     		ldrh	r3, [r3]	@ unaligned
 14889 0404 A381     		strh	r3, [r4, #12]	@ unaligned
 14890              	.L584:
1983:..\src/command_processing.c ****             }
1984:..\src/command_processing.c ****             if(MOT->control_mode == CONTROL_CURRENT) {
 14891              		.loc 1 1984 0
 14892 0406 D7F88430 		ldr	r3, [r7, #132]
 14893 040a 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 14894 040e 022B     		cmp	r3, #2
 14895 0410 13D1     		bne	.L586
1985:..\src/command_processing.c ****                 sprintf(str, "%d ", (int)(g_refOld[MOTOR_IDX].curr));
 14896              		.loc 1 1985 0
 14897 0412 97F88B30 		ldrb	r3, [r7, #139]	@ zero_extendqisi2
 14898 0416 844A     		ldr	r2, .L690+20
 14899 0418 1B01     		lsls	r3, r3, #4
 14900 041a 1344     		add	r3, r3, r2
 14901 041c 0433     		adds	r3, r3, #4
 14902 041e 1A68     		ldr	r2, [r3]
 14903 0420 07F11C03 		add	r3, r7, #28
 14904 0424 8149     		ldr	r1, .L690+24
 14905 0426 1846     		mov	r0, r3
 14906 0428 FFF7FEFF 		bl	sprintf
1986:..\src/command_processing.c ****                 strcat(info_string,str);
 14907              		.loc 1 1986 0
 14908 042c 07F11C03 		add	r3, r7, #28
 14909 0430 1946     		mov	r1, r3
 14910 0432 7869     		ldr	r0, [r7, #20]
 14911 0434 FFF7FEFF 		bl	strcat
 14912 0438 39E0     		b	.L587
 14913              	.L586:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 338


1987:..\src/command_processing.c ****             }
1988:..\src/command_processing.c ****             else {
1989:..\src/command_processing.c ****                 if(MOT->control_mode == CONTROL_PWM) {
 14914              		.loc 1 1989 0
 14915 043a D7F88430 		ldr	r3, [r7, #132]
 14916 043e 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 14917 0442 012B     		cmp	r3, #1
 14918 0444 13D1     		bne	.L588
1990:..\src/command_processing.c ****                     sprintf(str, "%d ", (int)(g_refOld[MOTOR_IDX].pwm));
 14919              		.loc 1 1990 0
 14920 0446 97F88B30 		ldrb	r3, [r7, #139]	@ zero_extendqisi2
 14921 044a 774A     		ldr	r2, .L690+20
 14922 044c 1B01     		lsls	r3, r3, #4
 14923 044e 1344     		add	r3, r3, r2
 14924 0450 0833     		adds	r3, r3, #8
 14925 0452 1A68     		ldr	r2, [r3]
 14926 0454 07F11C03 		add	r3, r7, #28
 14927 0458 7449     		ldr	r1, .L690+24
 14928 045a 1846     		mov	r0, r3
 14929 045c FFF7FEFF 		bl	sprintf
1991:..\src/command_processing.c ****                     strcat(info_string,str);
 14930              		.loc 1 1991 0
 14931 0460 07F11C03 		add	r3, r7, #28
 14932 0464 1946     		mov	r1, r3
 14933 0466 7869     		ldr	r0, [r7, #20]
 14934 0468 FFF7FEFF 		bl	strcat
 14935 046c 1FE0     		b	.L587
 14936              	.L588:
1992:..\src/command_processing.c ****                 }
1993:..\src/command_processing.c ****                 else {
1994:..\src/command_processing.c ****                     sprintf(str, "%d ", (int)(g_refOld[MOTOR_IDX].pos >> MEM_P->enc[ENC_L].res[0]))
 14937              		.loc 1 1994 0
 14938 046e 97F88B30 		ldrb	r3, [r7, #139]	@ zero_extendqisi2
 14939 0472 6D4A     		ldr	r2, .L690+20
 14940 0474 1B01     		lsls	r3, r3, #4
 14941 0476 1344     		add	r3, r3, r2
 14942 0478 1968     		ldr	r1, [r3]
 14943 047a 97F88320 		ldrb	r2, [r7, #131]	@ zero_extendqisi2
 14944 047e D7F88C00 		ldr	r0, [r7, #140]
 14945 0482 1346     		mov	r3, r2
 14946 0484 5B00     		lsls	r3, r3, #1
 14947 0486 1344     		add	r3, r3, r2
 14948 0488 1B01     		lsls	r3, r3, #4
 14949 048a 0344     		add	r3, r3, r0
 14950 048c 03F29513 		addw	r3, r3, #405
 14951 0490 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 14952 0492 41FA03F2 		asr	r2, r1, r3
 14953 0496 07F11C03 		add	r3, r7, #28
 14954 049a 6449     		ldr	r1, .L690+24
 14955 049c 1846     		mov	r0, r3
 14956 049e FFF7FEFF 		bl	sprintf
1995:..\src/command_processing.c ****                     strcat(info_string,str);
 14957              		.loc 1 1995 0
 14958 04a2 07F11C03 		add	r3, r7, #28
 14959 04a6 1946     		mov	r1, r3
 14960 04a8 7869     		ldr	r0, [r7, #20]
 14961 04aa FFF7FEFF 		bl	strcat
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 339


 14962              	.L587:
1996:..\src/command_processing.c ****                 }
1997:..\src/command_processing.c ****             }
1998:..\src/command_processing.c ****             strcat(info_string,"\r\n");
 14963              		.loc 1 1998 0
 14964 04ae 7869     		ldr	r0, [r7, #20]
 14965 04b0 FFF7FEFF 		bl	strlen
 14966 04b4 0346     		mov	r3, r0
 14967 04b6 1A46     		mov	r2, r3
 14968 04b8 7B69     		ldr	r3, [r7, #20]
 14969 04ba 1344     		add	r3, r3, r2
 14970 04bc 5C4A     		ldr	r2, .L690+28
 14971 04be 1188     		ldrh	r1, [r2]	@ unaligned
 14972 04c0 9278     		ldrb	r2, [r2, #2]
 14973 04c2 1980     		strh	r1, [r3]	@ unaligned
 14974 04c4 9A70     		strb	r2, [r3, #2]
1999:..\src/command_processing.c **** 
2000:..\src/command_processing.c ****             sprintf(str, "Motor enabled: ");
 14975              		.loc 1 2000 0
 14976 04c6 07F11C03 		add	r3, r7, #28
 14977 04ca 5A4A     		ldr	r2, .L690+32
 14978 04cc 1C46     		mov	r4, r3
 14979 04ce 1346     		mov	r3, r2
 14980 04d0 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 14981 04d2 84E80F00 		stmia	r4, {r0, r1, r2, r3}
2001:..\src/command_processing.c ****             if (g_ref[MOTOR_IDX].onoff & 0x01) {
 14982              		.loc 1 2001 0
 14983 04d6 97F88B30 		ldrb	r3, [r7, #139]	@ zero_extendqisi2
 14984 04da 574A     		ldr	r2, .L690+36
 14985 04dc 1B01     		lsls	r3, r3, #4
 14986 04de 1344     		add	r3, r3, r2
 14987 04e0 0C33     		adds	r3, r3, #12
 14988 04e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 14989 04e4 03F00103 		and	r3, r3, #1
 14990 04e8 002B     		cmp	r3, #0
 14991 04ea 0FD0     		beq	.L589
2002:..\src/command_processing.c ****                 strcat(str, "YES\r\n");
 14992              		.loc 1 2002 0
 14993 04ec 07F11C03 		add	r3, r7, #28
 14994 04f0 1846     		mov	r0, r3
 14995 04f2 FFF7FEFF 		bl	strlen
 14996 04f6 0346     		mov	r3, r0
 14997 04f8 1A46     		mov	r2, r3
 14998 04fa 07F11C03 		add	r3, r7, #28
 14999 04fe 1344     		add	r3, r3, r2
 15000 0500 4E4A     		ldr	r2, .L690+40
 15001 0502 1068     		ldr	r0, [r2]	@ unaligned
 15002 0504 1860     		str	r0, [r3]	@ unaligned
 15003 0506 9288     		ldrh	r2, [r2, #4]	@ unaligned
 15004 0508 9A80     		strh	r2, [r3, #4]	@ unaligned
 15005 050a 0EE0     		b	.L590
 15006              	.L589:
2003:..\src/command_processing.c ****             } else {
2004:..\src/command_processing.c ****                 strcat(str, "NO\r\n");
 15007              		.loc 1 2004 0
 15008 050c 07F11C03 		add	r3, r7, #28
 15009 0510 1846     		mov	r0, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 340


 15010 0512 FFF7FEFF 		bl	strlen
 15011 0516 0346     		mov	r3, r0
 15012 0518 1A46     		mov	r2, r3
 15013 051a 07F11C03 		add	r3, r7, #28
 15014 051e 1344     		add	r3, r3, r2
 15015 0520 474A     		ldr	r2, .L690+44
 15016 0522 1068     		ldr	r0, [r2]	@ unaligned
 15017 0524 1860     		str	r0, [r3]	@ unaligned
 15018 0526 1279     		ldrb	r2, [r2, #4]
 15019 0528 1A71     		strb	r2, [r3, #4]
 15020              	.L590:
2005:..\src/command_processing.c ****             }
2006:..\src/command_processing.c ****             strcat(info_string, str);
 15021              		.loc 1 2006 0
 15022 052a 07F11C03 		add	r3, r7, #28
 15023 052e 1946     		mov	r1, r3
 15024 0530 7869     		ldr	r0, [r7, #20]
 15025 0532 FFF7FEFF 		bl	strcat
2007:..\src/command_processing.c ****                         
2008:..\src/command_processing.c ****             strcat(info_string, "PWM rescaling activation: ");
 15026              		.loc 1 2008 0
 15027 0536 7869     		ldr	r0, [r7, #20]
 15028 0538 FFF7FEFF 		bl	strlen
 15029 053c 0346     		mov	r3, r0
 15030 053e 1A46     		mov	r2, r3
 15031 0540 7B69     		ldr	r3, [r7, #20]
 15032 0542 1344     		add	r3, r3, r2
 15033 0544 3F4A     		ldr	r2, .L690+48
 15034 0546 1D46     		mov	r5, r3
 15035 0548 1446     		mov	r4, r2
 15036 054a 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 15037 054c 2860     		str	r0, [r5]	@ unaligned
 15038 054e 6960     		str	r1, [r5, #4]	@ unaligned
 15039 0550 AA60     		str	r2, [r5, #8]	@ unaligned
 15040 0552 EB60     		str	r3, [r5, #12]	@ unaligned
 15041 0554 03CC     		ldmia	r4!, {r0, r1}
 15042 0556 2861     		str	r0, [r5, #16]	@ unaligned
 15043 0558 6961     		str	r1, [r5, #20]	@ unaligned
 15044 055a 2388     		ldrh	r3, [r4]	@ unaligned
 15045 055c A278     		ldrb	r2, [r4, #2]
 15046 055e 2B83     		strh	r3, [r5, #24]	@ unaligned
 15047 0560 1346     		mov	r3, r2
 15048 0562 AB76     		strb	r3, [r5, #26]
2009:..\src/command_processing.c ****             if(MOT->activate_pwm_rescaling == MAXON_12V)
 15049              		.loc 1 2009 0
 15050 0564 D7F88430 		ldr	r3, [r7, #132]
 15051 0568 93F83130 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 15052 056c 012B     		cmp	r3, #1
 15053 056e 0CD1     		bne	.L591
2010:..\src/command_processing.c ****                 strcat(info_string, "YES\n");
 15054              		.loc 1 2010 0
 15055 0570 7869     		ldr	r0, [r7, #20]
 15056 0572 FFF7FEFF 		bl	strlen
 15057 0576 0346     		mov	r3, r0
 15058 0578 1A46     		mov	r2, r3
 15059 057a 7B69     		ldr	r3, [r7, #20]
 15060 057c 1344     		add	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 341


 15061 057e 324A     		ldr	r2, .L690+52
 15062 0580 1068     		ldr	r0, [r2]	@ unaligned
 15063 0582 1860     		str	r0, [r3]	@ unaligned
 15064 0584 1279     		ldrb	r2, [r2, #4]
 15065 0586 1A71     		strb	r2, [r3, #4]
 15066 0588 09E0     		b	.L592
 15067              	.L591:
2011:..\src/command_processing.c ****             else
2012:..\src/command_processing.c ****                 strcat(info_string, "NO\n");
 15068              		.loc 1 2012 0
 15069 058a 7869     		ldr	r0, [r7, #20]
 15070 058c FFF7FEFF 		bl	strlen
 15071 0590 0346     		mov	r3, r0
 15072 0592 1A46     		mov	r2, r3
 15073 0594 7B69     		ldr	r3, [r7, #20]
 15074 0596 1344     		add	r3, r3, r2
 15075 0598 2C4A     		ldr	r2, .L690+56
 15076 059a 1068     		ldr	r0, [r2]	@ unaligned
 15077 059c 1860     		str	r0, [r3]	@ unaligned
 15078              	.L592:
2013:..\src/command_processing.c ****             
2014:..\src/command_processing.c ****             sprintf(str, "PWM Limit: %d\r\n", (int) dev_pwm_limit[MOTOR_IDX]);
 15079              		.loc 1 2014 0
 15080 059e 97F88B30 		ldrb	r3, [r7, #139]	@ zero_extendqisi2
 15081 05a2 2B4A     		ldr	r2, .L690+60
 15082 05a4 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 15083 05a8 1A46     		mov	r2, r3
 15084 05aa 07F11C03 		add	r3, r7, #28
 15085 05ae 2949     		ldr	r1, .L690+64
 15086 05b0 1846     		mov	r0, r3
 15087 05b2 FFF7FEFF 		bl	sprintf
2015:..\src/command_processing.c ****             strcat(info_string, str);
 15088              		.loc 1 2015 0
 15089 05b6 07F11C03 		add	r3, r7, #28
 15090 05ba 1946     		mov	r1, r3
 15091 05bc 7869     		ldr	r0, [r7, #20]
 15092 05be FFF7FEFF 		bl	strcat
2016:..\src/command_processing.c **** 
2017:..\src/command_processing.c ****             strcat(info_string, "\r\nMEASUREMENTS INFO\r\n");
 15093              		.loc 1 2017 0
 15094 05c2 7869     		ldr	r0, [r7, #20]
 15095 05c4 FFF7FEFF 		bl	strlen
 15096 05c8 0346     		mov	r3, r0
 15097 05ca 1A46     		mov	r2, r3
 15098 05cc 7B69     		ldr	r3, [r7, #20]
 15099 05ce 1344     		add	r3, r3, r2
 15100 05d0 214A     		ldr	r2, .L690+68
 15101 05d2 1D46     		mov	r5, r3
 15102 05d4 1446     		mov	r4, r2
 15103 05d6 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 15104 05d8 2860     		str	r0, [r5]	@ unaligned
 15105 05da 6960     		str	r1, [r5, #4]	@ unaligned
 15106 05dc AA60     		str	r2, [r5, #8]	@ unaligned
 15107 05de EB60     		str	r3, [r5, #12]	@ unaligned
 15108 05e0 2068     		ldr	r0, [r4]	@ unaligned
 15109 05e2 2861     		str	r0, [r5, #16]	@ unaligned
 15110 05e4 A388     		ldrh	r3, [r4, #4]	@ unaligned
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 342


 15111 05e6 AB82     		strh	r3, [r5, #20]	@ unaligned
2018:..\src/command_processing.c ****             strcat(info_string, "Sensor value: ");
 15112              		.loc 1 2018 0
 15113 05e8 7869     		ldr	r0, [r7, #20]
 15114 05ea FFF7FEFF 		bl	strlen
 15115 05ee 0346     		mov	r3, r0
 15116 05f0 1A46     		mov	r2, r3
 15117 05f2 7B69     		ldr	r3, [r7, #20]
 15118 05f4 1344     		add	r3, r3, r2
 15119 05f6 194A     		ldr	r2, .L690+72
 15120 05f8 1C46     		mov	r4, r3
 15121 05fa 1346     		mov	r3, r2
 15122 05fc 07CB     		ldmia	r3!, {r0, r1, r2}
 15123 05fe 2060     		str	r0, [r4]	@ unaligned
 15124 0600 6160     		str	r1, [r4, #4]	@ unaligned
 15125 0602 A260     		str	r2, [r4, #8]	@ unaligned
 15126 0604 1A88     		ldrh	r2, [r3]	@ unaligned
 15127 0606 9B78     		ldrb	r3, [r3, #2]
 15128 0608 A281     		strh	r2, [r4, #12]	@ unaligned
 15129 060a A373     		strb	r3, [r4, #14]
2019:..\src/command_processing.c ****             for (i = 0; i < NUM_OF_SENSORS; i++) {
 15130              		.loc 1 2019 0
 15131 060c 0023     		movs	r3, #0
 15132 060e C7F89C30 		str	r3, [r7, #156]
 15133 0612 64E0     		b	.L593
 15134              	.L691:
 15135              		.align	2
 15136              	.L690:
 15137 0614 94130000 		.word	.LC167
 15138 0618 A4130000 		.word	.LC168
 15139 061c B4130000 		.word	.LC169
 15140 0620 C4130000 		.word	.LC170
 15141 0624 D0130000 		.word	.LC171
 15142 0628 00000000 		.word	g_refOld
 15143 062c E0130000 		.word	.LC172
 15144 0630 58110000 		.word	.LC152
 15145 0634 E4130000 		.word	.LC173
 15146 0638 00000000 		.word	g_ref
 15147 063c F4130000 		.word	.LC174
 15148 0640 FC130000 		.word	.LC175
 15149 0644 04140000 		.word	.LC176
 15150 0648 20140000 		.word	.LC177
 15151 064c 28140000 		.word	.LC178
 15152 0650 00000000 		.word	dev_pwm_limit
 15153 0654 2C140000 		.word	.LC179
 15154 0658 3C140000 		.word	.LC180
 15155 065c 54140000 		.word	.LC181
 15156              	.L595:
2020:..\src/command_processing.c ****                 sprintf(str, "%d", (int)(g_meas[ENC_L].pos[i] >> MEM_P->enc[ENC_L].res[i]));
 15157              		.loc 1 2020 0
 15158 0660 97F88320 		ldrb	r2, [r7, #131]	@ zero_extendqisi2
 15159 0664 B849     		ldr	r1, .L692
 15160 0666 1346     		mov	r3, r2
 15161 0668 5B00     		lsls	r3, r3, #1
 15162 066a 1344     		add	r3, r3, r2
 15163 066c 9B00     		lsls	r3, r3, #2
 15164 066e 1344     		add	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 343


 15165 0670 D7F89C20 		ldr	r2, [r7, #156]
 15166 0674 1344     		add	r3, r3, r2
 15167 0676 51F82310 		ldr	r1, [r1, r3, lsl #2]
 15168 067a 97F88320 		ldrb	r2, [r7, #131]	@ zero_extendqisi2
 15169 067e D7F88C00 		ldr	r0, [r7, #140]
 15170 0682 1346     		mov	r3, r2
 15171 0684 5B00     		lsls	r3, r3, #1
 15172 0686 1344     		add	r3, r3, r2
 15173 0688 1B01     		lsls	r3, r3, #4
 15174 068a C218     		adds	r2, r0, r3
 15175 068c D7F89C30 		ldr	r3, [r7, #156]
 15176 0690 1344     		add	r3, r3, r2
 15177 0692 03F29513 		addw	r3, r3, #405
 15178 0696 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 15179 0698 41FA03F2 		asr	r2, r1, r3
 15180 069c 07F11C03 		add	r3, r7, #28
 15181 06a0 AA49     		ldr	r1, .L692+4
 15182 06a2 1846     		mov	r0, r3
 15183 06a4 FFF7FEFF 		bl	sprintf
2021:..\src/command_processing.c ****                 strcat(info_string, str);
 15184              		.loc 1 2021 0
 15185 06a8 07F11C03 		add	r3, r7, #28
 15186 06ac 1946     		mov	r1, r3
 15187 06ae 7869     		ldr	r0, [r7, #20]
 15188 06b0 FFF7FEFF 		bl	strcat
2022:..\src/command_processing.c ****                 if (i != NUM_OF_SENSORS-1){
 15189              		.loc 1 2022 0
 15190 06b4 D7F89C30 		ldr	r3, [r7, #156]
 15191 06b8 022B     		cmp	r3, #2
 15192 06ba 0BD0     		beq	.L594
2023:..\src/command_processing.c ****                     strcat(info_string, ", ");
 15193              		.loc 1 2023 0
 15194 06bc 7869     		ldr	r0, [r7, #20]
 15195 06be FFF7FEFF 		bl	strlen
 15196 06c2 0346     		mov	r3, r0
 15197 06c4 1A46     		mov	r2, r3
 15198 06c6 7B69     		ldr	r3, [r7, #20]
 15199 06c8 1344     		add	r3, r3, r2
 15200 06ca A14A     		ldr	r2, .L692+8
 15201 06cc 1188     		ldrh	r1, [r2]	@ unaligned
 15202 06ce 9278     		ldrb	r2, [r2, #2]
 15203 06d0 1980     		strh	r1, [r3]	@ unaligned
 15204 06d2 9A70     		strb	r2, [r3, #2]
 15205              	.L594:
2019:..\src/command_processing.c ****                 sprintf(str, "%d", (int)(g_meas[ENC_L].pos[i] >> MEM_P->enc[ENC_L].res[i]));
 15206              		.loc 1 2019 0 discriminator 2
 15207 06d4 D7F89C30 		ldr	r3, [r7, #156]
 15208 06d8 0133     		adds	r3, r3, #1
 15209 06da C7F89C30 		str	r3, [r7, #156]
 15210              	.L593:
2019:..\src/command_processing.c ****                 sprintf(str, "%d", (int)(g_meas[ENC_L].pos[i] >> MEM_P->enc[ENC_L].res[i]));
 15211              		.loc 1 2019 0 is_stmt 0 discriminator 1
 15212 06de D7F89C30 		ldr	r3, [r7, #156]
 15213 06e2 022B     		cmp	r3, #2
 15214 06e4 BCDD     		ble	.L595
2024:..\src/command_processing.c ****                 }                
2025:..\src/command_processing.c ****             }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 344


2026:..\src/command_processing.c ****             strcat(info_string, "\r\n");
 15215              		.loc 1 2026 0 is_stmt 1
 15216 06e6 7869     		ldr	r0, [r7, #20]
 15217 06e8 FFF7FEFF 		bl	strlen
 15218 06ec 0346     		mov	r3, r0
 15219 06ee 1A46     		mov	r2, r3
 15220 06f0 7B69     		ldr	r3, [r7, #20]
 15221 06f2 1344     		add	r3, r3, r2
 15222 06f4 974A     		ldr	r2, .L692+12
 15223 06f6 1188     		ldrh	r1, [r2]	@ unaligned
 15224 06f8 9278     		ldrb	r2, [r2, #2]
 15225 06fa 1980     		strh	r1, [r3]	@ unaligned
 15226 06fc 9A70     		strb	r2, [r3, #2]
2027:..\src/command_processing.c ****             
2028:..\src/command_processing.c ****             if (MOT->input_mode == INPUT_MODE_JOYSTICK){
 15227              		.loc 1 2028 0
 15228 06fe D7F88430 		ldr	r3, [r7, #132]
 15229 0702 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 15230 0706 062B     		cmp	r3, #6
 15231 0708 1AD1     		bne	.L596
2029:..\src/command_processing.c ****                 sprintf(str, "Joystick measurements: %d, %d", (int)g_adc_measOld.joystick[0], (int)
 15232              		.loc 1 2029 0
 15233 070a 934B     		ldr	r3, .L692+16
 15234 070c 1A6A     		ldr	r2, [r3, #32]
 15235 070e 924B     		ldr	r3, .L692+16
 15236 0710 5B6A     		ldr	r3, [r3, #36]
 15237 0712 07F11C00 		add	r0, r7, #28
 15238 0716 9149     		ldr	r1, .L692+20
 15239 0718 FFF7FEFF 		bl	sprintf
2030:..\src/command_processing.c ****                 strcat(info_string, str);
 15240              		.loc 1 2030 0
 15241 071c 07F11C03 		add	r3, r7, #28
 15242 0720 1946     		mov	r1, r3
 15243 0722 7869     		ldr	r0, [r7, #20]
 15244 0724 FFF7FEFF 		bl	strcat
2031:..\src/command_processing.c ****                 strcat(info_string, "\r\n");
 15245              		.loc 1 2031 0
 15246 0728 7869     		ldr	r0, [r7, #20]
 15247 072a FFF7FEFF 		bl	strlen
 15248 072e 0346     		mov	r3, r0
 15249 0730 1A46     		mov	r2, r3
 15250 0732 7B69     		ldr	r3, [r7, #20]
 15251 0734 1344     		add	r3, r3, r2
 15252 0736 874A     		ldr	r2, .L692+12
 15253 0738 1188     		ldrh	r1, [r2]	@ unaligned
 15254 073a 9278     		ldrb	r2, [r2, #2]
 15255 073c 1980     		strh	r1, [r3]	@ unaligned
 15256 073e 9A70     		strb	r2, [r3, #2]
 15257              	.L596:
2032:..\src/command_processing.c ****             }
2033:..\src/command_processing.c **** 
2034:..\src/command_processing.c ****             sprintf(str, "Battery %d Voltage (mV): %ld", MOTOR_IDX+1, (int32) dev_tension[MOTOR_IDX
 15258              		.loc 1 2034 0
 15259 0740 97F88B30 		ldrb	r3, [r7, #139]	@ zero_extendqisi2
 15260 0744 591C     		adds	r1, r3, #1
 15261 0746 97F88B30 		ldrb	r3, [r7, #139]	@ zero_extendqisi2
 15262 074a 854A     		ldr	r2, .L692+24
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 345


 15263 074c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 15264 0750 07F11C00 		add	r0, r7, #28
 15265 0754 0A46     		mov	r2, r1
 15266 0756 8349     		ldr	r1, .L692+28
 15267 0758 FFF7FEFF 		bl	sprintf
2035:..\src/command_processing.c ****             strcat(info_string, str);
 15268              		.loc 1 2035 0
 15269 075c 07F11C03 		add	r3, r7, #28
 15270 0760 1946     		mov	r1, r3
 15271 0762 7869     		ldr	r0, [r7, #20]
 15272 0764 FFF7FEFF 		bl	strcat
2036:..\src/command_processing.c ****             strcat(info_string, "\r\n");
 15273              		.loc 1 2036 0
 15274 0768 7869     		ldr	r0, [r7, #20]
 15275 076a FFF7FEFF 		bl	strlen
 15276 076e 0346     		mov	r3, r0
 15277 0770 1A46     		mov	r2, r3
 15278 0772 7B69     		ldr	r3, [r7, #20]
 15279 0774 1344     		add	r3, r3, r2
 15280 0776 774A     		ldr	r2, .L692+12
 15281 0778 1188     		ldrh	r1, [r2]	@ unaligned
 15282 077a 9278     		ldrb	r2, [r2, #2]
 15283 077c 1980     		strh	r1, [r3]	@ unaligned
 15284 077e 9A70     		strb	r2, [r3, #2]
2037:..\src/command_processing.c ****             
2038:..\src/command_processing.c ****             sprintf(str, "Full charge power tension %d (mV): %ld", MOTOR_IDX+1, (int32) pow_tension
 15285              		.loc 1 2038 0
 15286 0780 97F88B30 		ldrb	r3, [r7, #139]	@ zero_extendqisi2
 15287 0784 591C     		adds	r1, r3, #1
 15288 0786 97F88B30 		ldrb	r3, [r7, #139]	@ zero_extendqisi2
 15289 078a 774A     		ldr	r2, .L692+32
 15290 078c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 15291 0790 07F11C00 		add	r0, r7, #28
 15292 0794 0A46     		mov	r2, r1
 15293 0796 7549     		ldr	r1, .L692+36
 15294 0798 FFF7FEFF 		bl	sprintf
2039:..\src/command_processing.c ****             strcat(info_string, str);
 15295              		.loc 1 2039 0
 15296 079c 07F11C03 		add	r3, r7, #28
 15297 07a0 1946     		mov	r1, r3
 15298 07a2 7869     		ldr	r0, [r7, #20]
 15299 07a4 FFF7FEFF 		bl	strcat
2040:..\src/command_processing.c ****             strcat(info_string, "\r\n");
 15300              		.loc 1 2040 0
 15301 07a8 7869     		ldr	r0, [r7, #20]
 15302 07aa FFF7FEFF 		bl	strlen
 15303 07ae 0346     		mov	r3, r0
 15304 07b0 1A46     		mov	r2, r3
 15305 07b2 7B69     		ldr	r3, [r7, #20]
 15306 07b4 1344     		add	r3, r3, r2
 15307 07b6 674A     		ldr	r2, .L692+12
 15308 07b8 1188     		ldrh	r1, [r2]	@ unaligned
 15309 07ba 9278     		ldrb	r2, [r2, #2]
 15310 07bc 1980     		strh	r1, [r3]	@ unaligned
 15311 07be 9A70     		strb	r2, [r3, #2]
2041:..\src/command_processing.c **** 
2042:..\src/command_processing.c ****             sprintf(str, "Current %d (mA): %ld", MOTOR_IDX+1, (int32) g_meas[ENC_L].curr );
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 346


 15312              		.loc 1 2042 0
 15313 07c0 97F88B30 		ldrb	r3, [r7, #139]	@ zero_extendqisi2
 15314 07c4 5C1C     		adds	r4, r3, #1
 15315 07c6 97F88330 		ldrb	r3, [r7, #131]	@ zero_extendqisi2
 15316 07ca 5F4A     		ldr	r2, .L692
 15317 07cc 3421     		movs	r1, #52
 15318 07ce 01FB03F3 		mul	r3, r1, r3
 15319 07d2 1344     		add	r3, r3, r2
 15320 07d4 0C33     		adds	r3, r3, #12
 15321 07d6 1B68     		ldr	r3, [r3]
 15322 07d8 07F11C00 		add	r0, r7, #28
 15323 07dc 2246     		mov	r2, r4
 15324 07de 6449     		ldr	r1, .L692+40
 15325 07e0 FFF7FEFF 		bl	sprintf
2043:..\src/command_processing.c ****             strcat(info_string, str);
 15326              		.loc 1 2043 0
 15327 07e4 07F11C03 		add	r3, r7, #28
 15328 07e8 1946     		mov	r1, r3
 15329 07ea 7869     		ldr	r0, [r7, #20]
 15330 07ec FFF7FEFF 		bl	strcat
2044:..\src/command_processing.c ****             strcat(info_string, "\r\n");
 15331              		.loc 1 2044 0
 15332 07f0 7869     		ldr	r0, [r7, #20]
 15333 07f2 FFF7FEFF 		bl	strlen
 15334 07f6 0346     		mov	r3, r0
 15335 07f8 1A46     		mov	r2, r3
 15336 07fa 7B69     		ldr	r3, [r7, #20]
 15337 07fc 1344     		add	r3, r3, r2
 15338 07fe 554A     		ldr	r2, .L692+12
 15339 0800 1188     		ldrh	r1, [r2]	@ unaligned
 15340 0802 9278     		ldrb	r2, [r2, #2]
 15341 0804 1980     		strh	r1, [r3]	@ unaligned
 15342 0806 9A70     		strb	r2, [r3, #2]
2045:..\src/command_processing.c ****             
2046:..\src/command_processing.c ****             if (MOT->not_revers_motor_flag == TRUE){
 15343              		.loc 1 2046 0
 15344 0808 D7F88430 		ldr	r3, [r7, #132]
 15345 080c 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 15346 0810 012B     		cmp	r3, #1
 15347 0812 23D1     		bne	.L597
2047:..\src/command_processing.c ****                 sprintf(str, "Last Grasp Hold Current %d (mA): %ld", MOTOR_IDX+1, (int32) g_meas[EN
 15348              		.loc 1 2047 0
 15349 0814 97F88B30 		ldrb	r3, [r7, #139]	@ zero_extendqisi2
 15350 0818 5C1C     		adds	r4, r3, #1
 15351 081a 97F88330 		ldrb	r3, [r7, #131]	@ zero_extendqisi2
 15352 081e 4A4A     		ldr	r2, .L692
 15353 0820 3421     		movs	r1, #52
 15354 0822 01FB03F3 		mul	r3, r1, r3
 15355 0826 1344     		add	r3, r3, r2
 15356 0828 1433     		adds	r3, r3, #20
 15357 082a 1B68     		ldr	r3, [r3]
 15358 082c 07F11C00 		add	r0, r7, #28
 15359 0830 2246     		mov	r2, r4
 15360 0832 5049     		ldr	r1, .L692+44
 15361 0834 FFF7FEFF 		bl	sprintf
2048:..\src/command_processing.c ****                 strcat(info_string, str);
 15362              		.loc 1 2048 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 347


 15363 0838 07F11C03 		add	r3, r7, #28
 15364 083c 1946     		mov	r1, r3
 15365 083e 7869     		ldr	r0, [r7, #20]
 15366 0840 FFF7FEFF 		bl	strcat
2049:..\src/command_processing.c ****                 strcat(info_string, "\r\n");
 15367              		.loc 1 2049 0
 15368 0844 7869     		ldr	r0, [r7, #20]
 15369 0846 FFF7FEFF 		bl	strlen
 15370 084a 0346     		mov	r3, r0
 15371 084c 1A46     		mov	r2, r3
 15372 084e 7B69     		ldr	r3, [r7, #20]
 15373 0850 1344     		add	r3, r3, r2
 15374 0852 404A     		ldr	r2, .L692+12
 15375 0854 1188     		ldrh	r1, [r2]	@ unaligned
 15376 0856 9278     		ldrb	r2, [r2, #2]
 15377 0858 1980     		strh	r1, [r3]	@ unaligned
 15378 085a 9A70     		strb	r2, [r3, #2]
 15379              	.L597:
2050:..\src/command_processing.c ****             }
2051:..\src/command_processing.c ****             
2052:..\src/command_processing.c ****             sprintf(str, "\r\nMOTOR %d CONFIGURATION\r\n", MOTOR_IDX+1);
 15380              		.loc 1 2052 0
 15381 085c 97F88B30 		ldrb	r3, [r7, #139]	@ zero_extendqisi2
 15382 0860 5A1C     		adds	r2, r3, #1
 15383 0862 07F11C03 		add	r3, r7, #28
 15384 0866 4449     		ldr	r1, .L692+48
 15385 0868 1846     		mov	r0, r3
 15386 086a FFF7FEFF 		bl	sprintf
2053:..\src/command_processing.c ****             strcat(info_string, str);
 15387              		.loc 1 2053 0
 15388 086e 07F11C03 		add	r3, r7, #28
 15389 0872 1946     		mov	r1, r3
 15390 0874 7869     		ldr	r0, [r7, #20]
 15391 0876 FFF7FEFF 		bl	strcat
2054:..\src/command_processing.c **** 
2055:..\src/command_processing.c ****             strcat(info_string, "PID Controller: ");
 15392              		.loc 1 2055 0
 15393 087a 7869     		ldr	r0, [r7, #20]
 15394 087c FFF7FEFF 		bl	strlen
 15395 0880 0346     		mov	r3, r0
 15396 0882 1A46     		mov	r2, r3
 15397 0884 7B69     		ldr	r3, [r7, #20]
 15398 0886 1344     		add	r3, r3, r2
 15399 0888 3C4A     		ldr	r2, .L692+52
 15400 088a 1D46     		mov	r5, r3
 15401 088c 1446     		mov	r4, r2
 15402 088e 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 15403 0890 2860     		str	r0, [r5]	@ unaligned
 15404 0892 6960     		str	r1, [r5, #4]	@ unaligned
 15405 0894 AA60     		str	r2, [r5, #8]	@ unaligned
 15406 0896 EB60     		str	r3, [r5, #12]	@ unaligned
 15407 0898 2378     		ldrb	r3, [r4]
 15408 089a 2B74     		strb	r3, [r5, #16]
2056:..\src/command_processing.c ****             if(MOT->control_mode != CURR_AND_POS_CONTROL) {
 15409              		.loc 1 2056 0
 15410 089c D7F88430 		ldr	r3, [r7, #132]
 15411 08a0 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 348


 15412 08a4 032B     		cmp	r3, #3
 15413 08a6 73D0     		beq	.L598
2057:..\src/command_processing.c ****                 sprintf(str, "P -> %f  ", ((double) MOT->k_p / 65536));
 15414              		.loc 1 2057 0
 15415 08a8 D7F88430 		ldr	r3, [r7, #132]
 15416 08ac 1B68     		ldr	r3, [r3]
 15417 08ae 1846     		mov	r0, r3
 15418 08b0 FFF7FEFF 		bl	__aeabi_i2d
 15419 08b4 4FF00002 		mov	r2, #0
 15420 08b8 314B     		ldr	r3, .L692+56
 15421 08ba FFF7FEFF 		bl	__aeabi_ddiv
 15422 08be 0346     		mov	r3, r0
 15423 08c0 0C46     		mov	r4, r1
 15424 08c2 07F11C00 		add	r0, r7, #28
 15425 08c6 1A46     		mov	r2, r3
 15426 08c8 2346     		mov	r3, r4
 15427 08ca 2E49     		ldr	r1, .L692+60
 15428 08cc FFF7FEFF 		bl	sprintf
2058:..\src/command_processing.c ****                 strcat(info_string, str);
 15429              		.loc 1 2058 0
 15430 08d0 07F11C03 		add	r3, r7, #28
 15431 08d4 1946     		mov	r1, r3
 15432 08d6 7869     		ldr	r0, [r7, #20]
 15433 08d8 FFF7FEFF 		bl	strcat
2059:..\src/command_processing.c ****                 sprintf(str, "I -> %f  ", ((double) MOT->k_i / 65536));
 15434              		.loc 1 2059 0
 15435 08dc D7F88430 		ldr	r3, [r7, #132]
 15436 08e0 5B68     		ldr	r3, [r3, #4]
 15437 08e2 1846     		mov	r0, r3
 15438 08e4 FFF7FEFF 		bl	__aeabi_i2d
 15439 08e8 4FF00002 		mov	r2, #0
 15440 08ec 244B     		ldr	r3, .L692+56
 15441 08ee FFF7FEFF 		bl	__aeabi_ddiv
 15442 08f2 0346     		mov	r3, r0
 15443 08f4 0C46     		mov	r4, r1
 15444 08f6 07F11C00 		add	r0, r7, #28
 15445 08fa 1A46     		mov	r2, r3
 15446 08fc 2346     		mov	r3, r4
 15447 08fe 2249     		ldr	r1, .L692+64
 15448 0900 FFF7FEFF 		bl	sprintf
2060:..\src/command_processing.c ****                 strcat(info_string, str);
 15449              		.loc 1 2060 0
 15450 0904 07F11C03 		add	r3, r7, #28
 15451 0908 1946     		mov	r1, r3
 15452 090a 7869     		ldr	r0, [r7, #20]
 15453 090c FFF7FEFF 		bl	strcat
2061:..\src/command_processing.c ****                 sprintf(str, "D -> %f\r\n", ((double) MOT->k_d / 65536));
 15454              		.loc 1 2061 0
 15455 0910 D7F88430 		ldr	r3, [r7, #132]
 15456 0914 9B68     		ldr	r3, [r3, #8]
 15457 0916 1846     		mov	r0, r3
 15458 0918 FFF7FEFF 		bl	__aeabi_i2d
 15459 091c 4FF00002 		mov	r2, #0
 15460 0920 174B     		ldr	r3, .L692+56
 15461 0922 FFF7FEFF 		bl	__aeabi_ddiv
 15462 0926 0346     		mov	r3, r0
 15463 0928 0C46     		mov	r4, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 349


 15464 092a 07F11C00 		add	r0, r7, #28
 15465 092e 1A46     		mov	r2, r3
 15466 0930 2346     		mov	r3, r4
 15467 0932 1649     		ldr	r1, .L692+68
 15468 0934 FFF7FEFF 		bl	sprintf
2062:..\src/command_processing.c ****                 strcat(info_string, str);
 15469              		.loc 1 2062 0
 15470 0938 07F11C03 		add	r3, r7, #28
 15471 093c 1946     		mov	r1, r3
 15472 093e 7869     		ldr	r0, [r7, #20]
 15473 0940 FFF7FEFF 		bl	strcat
 15474 0944 72E0     		b	.L599
 15475              	.L693:
 15476 0946 00BF     		.align	2
 15477              	.L692:
 15478 0948 00000000 		.word	g_meas
 15479 094c 64140000 		.word	.LC182
 15480 0950 68140000 		.word	.LC183
 15481 0954 58110000 		.word	.LC152
 15482 0958 00000000 		.word	g_adc_measOld
 15483 095c 6C140000 		.word	.LC184
 15484 0960 00000000 		.word	dev_tension
 15485 0964 8C140000 		.word	.LC185
 15486 0968 00000000 		.word	pow_tension
 15487 096c AC140000 		.word	.LC186
 15488 0970 D4140000 		.word	.LC187
 15489 0974 EC140000 		.word	.LC188
 15490 0978 14150000 		.word	.LC189
 15491 097c 30150000 		.word	.LC190
 15492 0980 0000F040 		.word	1089470464
 15493 0984 44150000 		.word	.LC191
 15494 0988 50150000 		.word	.LC192
 15495 098c 5C150000 		.word	.LC193
 15496              	.L598:
2063:..\src/command_processing.c ****             }
2064:..\src/command_processing.c ****             else { 
2065:..\src/command_processing.c ****                 sprintf(str, "P -> %f  ", ((double) MOT->k_p_dl / 65536));
 15497              		.loc 1 2065 0
 15498 0990 D7F88430 		ldr	r3, [r7, #132]
 15499 0994 9B69     		ldr	r3, [r3, #24]
 15500 0996 1846     		mov	r0, r3
 15501 0998 FFF7FEFF 		bl	__aeabi_i2d
 15502 099c 4FF00002 		mov	r2, #0
 15503 09a0 CE4B     		ldr	r3, .L694
 15504 09a2 FFF7FEFF 		bl	__aeabi_ddiv
 15505 09a6 0346     		mov	r3, r0
 15506 09a8 0C46     		mov	r4, r1
 15507 09aa 07F11C00 		add	r0, r7, #28
 15508 09ae 1A46     		mov	r2, r3
 15509 09b0 2346     		mov	r3, r4
 15510 09b2 CB49     		ldr	r1, .L694+4
 15511 09b4 FFF7FEFF 		bl	sprintf
2066:..\src/command_processing.c ****                 strcat(info_string, str);
 15512              		.loc 1 2066 0
 15513 09b8 07F11C03 		add	r3, r7, #28
 15514 09bc 1946     		mov	r1, r3
 15515 09be 7869     		ldr	r0, [r7, #20]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 350


 15516 09c0 FFF7FEFF 		bl	strcat
2067:..\src/command_processing.c ****                 sprintf(str, "I -> %f  ", ((double) MOT->k_i_dl / 65536));
 15517              		.loc 1 2067 0
 15518 09c4 D7F88430 		ldr	r3, [r7, #132]
 15519 09c8 DB69     		ldr	r3, [r3, #28]
 15520 09ca 1846     		mov	r0, r3
 15521 09cc FFF7FEFF 		bl	__aeabi_i2d
 15522 09d0 4FF00002 		mov	r2, #0
 15523 09d4 C14B     		ldr	r3, .L694
 15524 09d6 FFF7FEFF 		bl	__aeabi_ddiv
 15525 09da 0346     		mov	r3, r0
 15526 09dc 0C46     		mov	r4, r1
 15527 09de 07F11C00 		add	r0, r7, #28
 15528 09e2 1A46     		mov	r2, r3
 15529 09e4 2346     		mov	r3, r4
 15530 09e6 BF49     		ldr	r1, .L694+8
 15531 09e8 FFF7FEFF 		bl	sprintf
2068:..\src/command_processing.c ****                 strcat(info_string, str);
 15532              		.loc 1 2068 0
 15533 09ec 07F11C03 		add	r3, r7, #28
 15534 09f0 1946     		mov	r1, r3
 15535 09f2 7869     		ldr	r0, [r7, #20]
 15536 09f4 FFF7FEFF 		bl	strcat
2069:..\src/command_processing.c ****                 sprintf(str, "D -> %f\r\n", ((double) MOT->k_d_dl / 65536));
 15537              		.loc 1 2069 0
 15538 09f8 D7F88430 		ldr	r3, [r7, #132]
 15539 09fc 1B6A     		ldr	r3, [r3, #32]
 15540 09fe 1846     		mov	r0, r3
 15541 0a00 FFF7FEFF 		bl	__aeabi_i2d
 15542 0a04 4FF00002 		mov	r2, #0
 15543 0a08 B44B     		ldr	r3, .L694
 15544 0a0a FFF7FEFF 		bl	__aeabi_ddiv
 15545 0a0e 0346     		mov	r3, r0
 15546 0a10 0C46     		mov	r4, r1
 15547 0a12 07F11C00 		add	r0, r7, #28
 15548 0a16 1A46     		mov	r2, r3
 15549 0a18 2346     		mov	r3, r4
 15550 0a1a B349     		ldr	r1, .L694+12
 15551 0a1c FFF7FEFF 		bl	sprintf
2070:..\src/command_processing.c ****                 strcat(info_string, str);
 15552              		.loc 1 2070 0
 15553 0a20 07F11C03 		add	r3, r7, #28
 15554 0a24 1946     		mov	r1, r3
 15555 0a26 7869     		ldr	r0, [r7, #20]
 15556 0a28 FFF7FEFF 		bl	strcat
 15557              	.L599:
2071:..\src/command_processing.c ****             }
2072:..\src/command_processing.c **** 
2073:..\src/command_processing.c ****             strcat(info_string, "Current PID Controller: ");
 15558              		.loc 1 2073 0
 15559 0a2c 7869     		ldr	r0, [r7, #20]
 15560 0a2e FFF7FEFF 		bl	strlen
 15561 0a32 0346     		mov	r3, r0
 15562 0a34 1A46     		mov	r2, r3
 15563 0a36 7B69     		ldr	r3, [r7, #20]
 15564 0a38 1344     		add	r3, r3, r2
 15565 0a3a AC4A     		ldr	r2, .L694+16
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 351


 15566 0a3c 1D46     		mov	r5, r3
 15567 0a3e 1446     		mov	r4, r2
 15568 0a40 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 15569 0a42 2860     		str	r0, [r5]	@ unaligned
 15570 0a44 6960     		str	r1, [r5, #4]	@ unaligned
 15571 0a46 AA60     		str	r2, [r5, #8]	@ unaligned
 15572 0a48 EB60     		str	r3, [r5, #12]	@ unaligned
 15573 0a4a 03CC     		ldmia	r4!, {r0, r1}
 15574 0a4c 2861     		str	r0, [r5, #16]	@ unaligned
 15575 0a4e 6961     		str	r1, [r5, #20]	@ unaligned
 15576 0a50 2378     		ldrb	r3, [r4]
 15577 0a52 2B76     		strb	r3, [r5, #24]
2074:..\src/command_processing.c ****             if(MOT->control_mode != CURR_AND_POS_CONTROL) {
 15578              		.loc 1 2074 0
 15579 0a54 D7F88430 		ldr	r3, [r7, #132]
 15580 0a58 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 15581 0a5c 032B     		cmp	r3, #3
 15582 0a5e 4ED0     		beq	.L600
2075:..\src/command_processing.c ****                 sprintf(str, "P -> %f  ", ((double) MOT->k_p_c / 65536));
 15583              		.loc 1 2075 0
 15584 0a60 D7F88430 		ldr	r3, [r7, #132]
 15585 0a64 DB68     		ldr	r3, [r3, #12]
 15586 0a66 1846     		mov	r0, r3
 15587 0a68 FFF7FEFF 		bl	__aeabi_i2d
 15588 0a6c 4FF00002 		mov	r2, #0
 15589 0a70 9A4B     		ldr	r3, .L694
 15590 0a72 FFF7FEFF 		bl	__aeabi_ddiv
 15591 0a76 0346     		mov	r3, r0
 15592 0a78 0C46     		mov	r4, r1
 15593 0a7a 07F11C00 		add	r0, r7, #28
 15594 0a7e 1A46     		mov	r2, r3
 15595 0a80 2346     		mov	r3, r4
 15596 0a82 9749     		ldr	r1, .L694+4
 15597 0a84 FFF7FEFF 		bl	sprintf
2076:..\src/command_processing.c ****                 strcat(info_string, str);
 15598              		.loc 1 2076 0
 15599 0a88 07F11C03 		add	r3, r7, #28
 15600 0a8c 1946     		mov	r1, r3
 15601 0a8e 7869     		ldr	r0, [r7, #20]
 15602 0a90 FFF7FEFF 		bl	strcat
2077:..\src/command_processing.c ****                 sprintf(str, "I -> %f  ", ((double) MOT->k_i_c / 65536));
 15603              		.loc 1 2077 0
 15604 0a94 D7F88430 		ldr	r3, [r7, #132]
 15605 0a98 1B69     		ldr	r3, [r3, #16]
 15606 0a9a 1846     		mov	r0, r3
 15607 0a9c FFF7FEFF 		bl	__aeabi_i2d
 15608 0aa0 4FF00002 		mov	r2, #0
 15609 0aa4 8D4B     		ldr	r3, .L694
 15610 0aa6 FFF7FEFF 		bl	__aeabi_ddiv
 15611 0aaa 0346     		mov	r3, r0
 15612 0aac 0C46     		mov	r4, r1
 15613 0aae 07F11C00 		add	r0, r7, #28
 15614 0ab2 1A46     		mov	r2, r3
 15615 0ab4 2346     		mov	r3, r4
 15616 0ab6 8B49     		ldr	r1, .L694+8
 15617 0ab8 FFF7FEFF 		bl	sprintf
2078:..\src/command_processing.c ****                 strcat(info_string, str);
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 352


 15618              		.loc 1 2078 0
 15619 0abc 07F11C03 		add	r3, r7, #28
 15620 0ac0 1946     		mov	r1, r3
 15621 0ac2 7869     		ldr	r0, [r7, #20]
 15622 0ac4 FFF7FEFF 		bl	strcat
2079:..\src/command_processing.c ****                 sprintf(str, "D -> %f\r\n", ((double) MOT->k_d_c / 65536));
 15623              		.loc 1 2079 0
 15624 0ac8 D7F88430 		ldr	r3, [r7, #132]
 15625 0acc 5B69     		ldr	r3, [r3, #20]
 15626 0ace 1846     		mov	r0, r3
 15627 0ad0 FFF7FEFF 		bl	__aeabi_i2d
 15628 0ad4 4FF00002 		mov	r2, #0
 15629 0ad8 804B     		ldr	r3, .L694
 15630 0ada FFF7FEFF 		bl	__aeabi_ddiv
 15631 0ade 0346     		mov	r3, r0
 15632 0ae0 0C46     		mov	r4, r1
 15633 0ae2 07F11C00 		add	r0, r7, #28
 15634 0ae6 1A46     		mov	r2, r3
 15635 0ae8 2346     		mov	r3, r4
 15636 0aea 7F49     		ldr	r1, .L694+12
 15637 0aec FFF7FEFF 		bl	sprintf
2080:..\src/command_processing.c ****                 strcat(info_string, str);
 15638              		.loc 1 2080 0
 15639 0af0 07F11C03 		add	r3, r7, #28
 15640 0af4 1946     		mov	r1, r3
 15641 0af6 7869     		ldr	r0, [r7, #20]
 15642 0af8 FFF7FEFF 		bl	strcat
 15643 0afc 4DE0     		b	.L601
 15644              	.L600:
2081:..\src/command_processing.c **** 
2082:..\src/command_processing.c ****             }
2083:..\src/command_processing.c ****             else {
2084:..\src/command_processing.c ****                 sprintf(str, "P -> %f  ", ((double) MOT->k_p_c_dl / 65536));
 15645              		.loc 1 2084 0
 15646 0afe D7F88430 		ldr	r3, [r7, #132]
 15647 0b02 5B6A     		ldr	r3, [r3, #36]
 15648 0b04 1846     		mov	r0, r3
 15649 0b06 FFF7FEFF 		bl	__aeabi_i2d
 15650 0b0a 4FF00002 		mov	r2, #0
 15651 0b0e 734B     		ldr	r3, .L694
 15652 0b10 FFF7FEFF 		bl	__aeabi_ddiv
 15653 0b14 0346     		mov	r3, r0
 15654 0b16 0C46     		mov	r4, r1
 15655 0b18 07F11C00 		add	r0, r7, #28
 15656 0b1c 1A46     		mov	r2, r3
 15657 0b1e 2346     		mov	r3, r4
 15658 0b20 6F49     		ldr	r1, .L694+4
 15659 0b22 FFF7FEFF 		bl	sprintf
2085:..\src/command_processing.c ****                 strcat(info_string, str);
 15660              		.loc 1 2085 0
 15661 0b26 07F11C03 		add	r3, r7, #28
 15662 0b2a 1946     		mov	r1, r3
 15663 0b2c 7869     		ldr	r0, [r7, #20]
 15664 0b2e FFF7FEFF 		bl	strcat
2086:..\src/command_processing.c ****                 sprintf(str, "I -> %f  ", ((double) MOT->k_i_c_dl / 65536));
 15665              		.loc 1 2086 0
 15666 0b32 D7F88430 		ldr	r3, [r7, #132]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 353


 15667 0b36 9B6A     		ldr	r3, [r3, #40]
 15668 0b38 1846     		mov	r0, r3
 15669 0b3a FFF7FEFF 		bl	__aeabi_i2d
 15670 0b3e 4FF00002 		mov	r2, #0
 15671 0b42 664B     		ldr	r3, .L694
 15672 0b44 FFF7FEFF 		bl	__aeabi_ddiv
 15673 0b48 0346     		mov	r3, r0
 15674 0b4a 0C46     		mov	r4, r1
 15675 0b4c 07F11C00 		add	r0, r7, #28
 15676 0b50 1A46     		mov	r2, r3
 15677 0b52 2346     		mov	r3, r4
 15678 0b54 6349     		ldr	r1, .L694+8
 15679 0b56 FFF7FEFF 		bl	sprintf
2087:..\src/command_processing.c ****                 strcat(info_string, str);
 15680              		.loc 1 2087 0
 15681 0b5a 07F11C03 		add	r3, r7, #28
 15682 0b5e 1946     		mov	r1, r3
 15683 0b60 7869     		ldr	r0, [r7, #20]
 15684 0b62 FFF7FEFF 		bl	strcat
2088:..\src/command_processing.c ****                 sprintf(str, "D -> %f\r\n", ((double) MOT->k_d_c_dl / 65536));
 15685              		.loc 1 2088 0
 15686 0b66 D7F88430 		ldr	r3, [r7, #132]
 15687 0b6a DB6A     		ldr	r3, [r3, #44]
 15688 0b6c 1846     		mov	r0, r3
 15689 0b6e FFF7FEFF 		bl	__aeabi_i2d
 15690 0b72 4FF00002 		mov	r2, #0
 15691 0b76 594B     		ldr	r3, .L694
 15692 0b78 FFF7FEFF 		bl	__aeabi_ddiv
 15693 0b7c 0346     		mov	r3, r0
 15694 0b7e 0C46     		mov	r4, r1
 15695 0b80 07F11C00 		add	r0, r7, #28
 15696 0b84 1A46     		mov	r2, r3
 15697 0b86 2346     		mov	r3, r4
 15698 0b88 5749     		ldr	r1, .L694+12
 15699 0b8a FFF7FEFF 		bl	sprintf
2089:..\src/command_processing.c ****                 strcat(info_string, str);
 15700              		.loc 1 2089 0
 15701 0b8e 07F11C03 		add	r3, r7, #28
 15702 0b92 1946     		mov	r1, r3
 15703 0b94 7869     		ldr	r0, [r7, #20]
 15704 0b96 FFF7FEFF 		bl	strcat
 15705              	.L601:
2090:..\src/command_processing.c ****             }
2091:..\src/command_processing.c ****             if (MOT->activ == 0x01)
 15706              		.loc 1 2091 0
 15707 0b9a D7F88430 		ldr	r3, [r7, #132]
 15708 0b9e 93F83030 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 15709 0ba2 012B     		cmp	r3, #1
 15710 0ba4 14D1     		bne	.L602
2092:..\src/command_processing.c ****                 strcat(info_string, "Startup activation: YES\r\n");
 15711              		.loc 1 2092 0
 15712 0ba6 7869     		ldr	r0, [r7, #20]
 15713 0ba8 FFF7FEFF 		bl	strlen
 15714 0bac 0346     		mov	r3, r0
 15715 0bae 1A46     		mov	r2, r3
 15716 0bb0 7B69     		ldr	r3, [r7, #20]
 15717 0bb2 1344     		add	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 354


 15718 0bb4 4E4A     		ldr	r2, .L694+20
 15719 0bb6 1D46     		mov	r5, r3
 15720 0bb8 1446     		mov	r4, r2
 15721 0bba 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 15722 0bbc 2860     		str	r0, [r5]	@ unaligned
 15723 0bbe 6960     		str	r1, [r5, #4]	@ unaligned
 15724 0bc0 AA60     		str	r2, [r5, #8]	@ unaligned
 15725 0bc2 EB60     		str	r3, [r5, #12]	@ unaligned
 15726 0bc4 03CC     		ldmia	r4!, {r0, r1}
 15727 0bc6 2861     		str	r0, [r5, #16]	@ unaligned
 15728 0bc8 6961     		str	r1, [r5, #20]	@ unaligned
 15729 0bca 2388     		ldrh	r3, [r4]	@ unaligned
 15730 0bcc 2B83     		strh	r3, [r5, #24]	@ unaligned
 15731 0bce 13E0     		b	.L603
 15732              	.L602:
2093:..\src/command_processing.c ****             else
2094:..\src/command_processing.c ****                 strcat(info_string, "Startup activation: NO\r\n");
 15733              		.loc 1 2094 0
 15734 0bd0 7869     		ldr	r0, [r7, #20]
 15735 0bd2 FFF7FEFF 		bl	strlen
 15736 0bd6 0346     		mov	r3, r0
 15737 0bd8 1A46     		mov	r2, r3
 15738 0bda 7B69     		ldr	r3, [r7, #20]
 15739 0bdc 1344     		add	r3, r3, r2
 15740 0bde 454A     		ldr	r2, .L694+24
 15741 0be0 1D46     		mov	r5, r3
 15742 0be2 1446     		mov	r4, r2
 15743 0be4 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 15744 0be6 2860     		str	r0, [r5]	@ unaligned
 15745 0be8 6960     		str	r1, [r5, #4]	@ unaligned
 15746 0bea AA60     		str	r2, [r5, #8]	@ unaligned
 15747 0bec EB60     		str	r3, [r5, #12]	@ unaligned
 15748 0bee 03CC     		ldmia	r4!, {r0, r1}
 15749 0bf0 2861     		str	r0, [r5, #16]	@ unaligned
 15750 0bf2 6961     		str	r1, [r5, #20]	@ unaligned
 15751 0bf4 2378     		ldrb	r3, [r4]
 15752 0bf6 2B76     		strb	r3, [r5, #24]
 15753              	.L603:
2095:..\src/command_processing.c **** 
2096:..\src/command_processing.c ****             switch(MOT->input_mode) {
 15754              		.loc 1 2096 0
 15755 0bf8 D7F88430 		ldr	r3, [r7, #132]
 15756 0bfc 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 15757 0c00 072B     		cmp	r3, #7
 15758 0c02 00F2EA80 		bhi	.L604
 15759 0c06 01A2     		adr	r2, .L606
 15760 0c08 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 15761              		.p2align 2
 15762              	.L606:
 15763 0c0c 2D0C0000 		.word	.L605+1
 15764 0c10 510C0000 		.word	.L607+1
 15765 0c14 790C0000 		.word	.L608+1
 15766 0c18 AB0C0000 		.word	.L609+1
 15767 0c1c 090D0000 		.word	.L610+1
 15768 0c20 370D0000 		.word	.L611+1
 15769 0c24 670D0000 		.word	.L612+1
 15770 0c28 950D0000 		.word	.L613+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 355


 15771              		.p2align 1
 15772              	.L605:
2097:..\src/command_processing.c ****                 case INPUT_MODE_EXTERNAL:
2098:..\src/command_processing.c ****                     strcat(info_string, "Input mode: USB\r\n");
 15773              		.loc 1 2098 0
 15774 0c2c 7869     		ldr	r0, [r7, #20]
 15775 0c2e FFF7FEFF 		bl	strlen
 15776 0c32 0346     		mov	r3, r0
 15777 0c34 1A46     		mov	r2, r3
 15778 0c36 7B69     		ldr	r3, [r7, #20]
 15779 0c38 1344     		add	r3, r3, r2
 15780 0c3a 2F4A     		ldr	r2, .L694+28
 15781 0c3c 1D46     		mov	r5, r3
 15782 0c3e 1446     		mov	r4, r2
 15783 0c40 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 15784 0c42 2860     		str	r0, [r5]	@ unaligned
 15785 0c44 6960     		str	r1, [r5, #4]	@ unaligned
 15786 0c46 AA60     		str	r2, [r5, #8]	@ unaligned
 15787 0c48 EB60     		str	r3, [r5, #12]	@ unaligned
 15788 0c4a 2388     		ldrh	r3, [r4]	@ unaligned
 15789 0c4c 2B82     		strh	r3, [r5, #16]	@ unaligned
2099:..\src/command_processing.c ****                     break;
 15790              		.loc 1 2099 0
 15791 0c4e C4E0     		b	.L604
 15792              	.L607:
2100:..\src/command_processing.c ****                 case INPUT_MODE_ENCODER3:
2101:..\src/command_processing.c ****                     strcat(info_string, "Input mode: Handle\r\n");
 15793              		.loc 1 2101 0
 15794 0c50 7869     		ldr	r0, [r7, #20]
 15795 0c52 FFF7FEFF 		bl	strlen
 15796 0c56 0346     		mov	r3, r0
 15797 0c58 1A46     		mov	r2, r3
 15798 0c5a 7B69     		ldr	r3, [r7, #20]
 15799 0c5c 1344     		add	r3, r3, r2
 15800 0c5e 274A     		ldr	r2, .L694+32
 15801 0c60 1D46     		mov	r5, r3
 15802 0c62 1446     		mov	r4, r2
 15803 0c64 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 15804 0c66 2860     		str	r0, [r5]	@ unaligned
 15805 0c68 6960     		str	r1, [r5, #4]	@ unaligned
 15806 0c6a AA60     		str	r2, [r5, #8]	@ unaligned
 15807 0c6c EB60     		str	r3, [r5, #12]	@ unaligned
 15808 0c6e 2068     		ldr	r0, [r4]	@ unaligned
 15809 0c70 2861     		str	r0, [r5, #16]	@ unaligned
 15810 0c72 2379     		ldrb	r3, [r4, #4]
 15811 0c74 2B75     		strb	r3, [r5, #20]
2102:..\src/command_processing.c ****                     break;
 15812              		.loc 1 2102 0
 15813 0c76 B0E0     		b	.L604
 15814              	.L608:
2103:..\src/command_processing.c ****                 case INPUT_MODE_EMG_PROPORTIONAL:
2104:..\src/command_processing.c ****                     strcat(info_string, "Input mode: EMG proportional\r\n");
 15815              		.loc 1 2104 0
 15816 0c78 7869     		ldr	r0, [r7, #20]
 15817 0c7a FFF7FEFF 		bl	strlen
 15818 0c7e 0346     		mov	r3, r0
 15819 0c80 1A46     		mov	r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 356


 15820 0c82 7B69     		ldr	r3, [r7, #20]
 15821 0c84 1344     		add	r3, r3, r2
 15822 0c86 1E4A     		ldr	r2, .L694+36
 15823 0c88 1D46     		mov	r5, r3
 15824 0c8a 1446     		mov	r4, r2
 15825 0c8c 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 15826 0c8e 2860     		str	r0, [r5]	@ unaligned
 15827 0c90 6960     		str	r1, [r5, #4]	@ unaligned
 15828 0c92 AA60     		str	r2, [r5, #8]	@ unaligned
 15829 0c94 EB60     		str	r3, [r5, #12]	@ unaligned
 15830 0c96 07CC     		ldmia	r4!, {r0, r1, r2}
 15831 0c98 2861     		str	r0, [r5, #16]	@ unaligned
 15832 0c9a 6961     		str	r1, [r5, #20]	@ unaligned
 15833 0c9c AA61     		str	r2, [r5, #24]	@ unaligned
 15834 0c9e 2388     		ldrh	r3, [r4]	@ unaligned
 15835 0ca0 A278     		ldrb	r2, [r4, #2]
 15836 0ca2 AB83     		strh	r3, [r5, #28]	@ unaligned
 15837 0ca4 1346     		mov	r3, r2
 15838 0ca6 AB77     		strb	r3, [r5, #30]
2105:..\src/command_processing.c ****                     break;
 15839              		.loc 1 2105 0
 15840 0ca8 97E0     		b	.L604
 15841              	.L609:
2106:..\src/command_processing.c ****                 case INPUT_MODE_EMG_INTEGRAL:
2107:..\src/command_processing.c ****                     strcat(info_string, "Input mode: EMG integral\r\n");
 15842              		.loc 1 2107 0
 15843 0caa 7869     		ldr	r0, [r7, #20]
 15844 0cac FFF7FEFF 		bl	strlen
 15845 0cb0 0346     		mov	r3, r0
 15846 0cb2 1A46     		mov	r2, r3
 15847 0cb4 7B69     		ldr	r3, [r7, #20]
 15848 0cb6 1344     		add	r3, r3, r2
 15849 0cb8 124A     		ldr	r2, .L694+40
 15850 0cba 1D46     		mov	r5, r3
 15851 0cbc 1446     		mov	r4, r2
 15852 0cbe 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 15853 0cc0 2860     		str	r0, [r5]	@ unaligned
 15854 0cc2 6960     		str	r1, [r5, #4]	@ unaligned
 15855 0cc4 AA60     		str	r2, [r5, #8]	@ unaligned
 15856 0cc6 EB60     		str	r3, [r5, #12]	@ unaligned
 15857 0cc8 03CC     		ldmia	r4!, {r0, r1}
 15858 0cca 2861     		str	r0, [r5, #16]	@ unaligned
 15859 0ccc 6961     		str	r1, [r5, #20]	@ unaligned
 15860 0cce 2388     		ldrh	r3, [r4]	@ unaligned
 15861 0cd0 A278     		ldrb	r2, [r4, #2]
 15862 0cd2 2B83     		strh	r3, [r5, #24]	@ unaligned
 15863 0cd4 1346     		mov	r3, r2
 15864 0cd6 AB76     		strb	r3, [r5, #26]
2108:..\src/command_processing.c ****                     break;
 15865              		.loc 1 2108 0
 15866 0cd8 7FE0     		b	.L604
 15867              	.L695:
 15868 0cda 00BF     		.align	2
 15869              	.L694:
 15870 0cdc 0000F040 		.word	1089470464
 15871 0ce0 44150000 		.word	.LC191
 15872 0ce4 50150000 		.word	.LC192
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 357


 15873 0ce8 5C150000 		.word	.LC193
 15874 0cec 68150000 		.word	.LC194
 15875 0cf0 84150000 		.word	.LC195
 15876 0cf4 A0150000 		.word	.LC196
 15877 0cf8 BC150000 		.word	.LC197
 15878 0cfc D0150000 		.word	.LC198
 15879 0d00 E8150000 		.word	.LC199
 15880 0d04 08160000 		.word	.LC200
 15881              	.L610:
2109:..\src/command_processing.c ****                 case INPUT_MODE_EMG_FCFS:
2110:..\src/command_processing.c ****                     strcat(info_string, "Input mode: EMG FCFS\r\n");
 15882              		.loc 1 2110 0
 15883 0d08 7869     		ldr	r0, [r7, #20]
 15884 0d0a FFF7FEFF 		bl	strlen
 15885 0d0e 0346     		mov	r3, r0
 15886 0d10 1A46     		mov	r2, r3
 15887 0d12 7B69     		ldr	r3, [r7, #20]
 15888 0d14 1344     		add	r3, r3, r2
 15889 0d16 A44A     		ldr	r2, .L696
 15890 0d18 1C46     		mov	r4, r3
 15891 0d1a 1546     		mov	r5, r2
 15892 0d1c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 15893 0d1e 2060     		str	r0, [r4]	@ unaligned
 15894 0d20 6160     		str	r1, [r4, #4]	@ unaligned
 15895 0d22 A260     		str	r2, [r4, #8]	@ unaligned
 15896 0d24 E360     		str	r3, [r4, #12]	@ unaligned
 15897 0d26 2868     		ldr	r0, [r5]	@ unaligned
 15898 0d28 2061     		str	r0, [r4, #16]	@ unaligned
 15899 0d2a AB88     		ldrh	r3, [r5, #4]	@ unaligned
 15900 0d2c AA79     		ldrb	r2, [r5, #6]
 15901 0d2e A382     		strh	r3, [r4, #20]	@ unaligned
 15902 0d30 1346     		mov	r3, r2
 15903 0d32 A375     		strb	r3, [r4, #22]
2111:..\src/command_processing.c ****                     break;
 15904              		.loc 1 2111 0
 15905 0d34 51E0     		b	.L604
 15906              	.L611:
2112:..\src/command_processing.c ****                 case INPUT_MODE_EMG_FCFS_ADV:
2113:..\src/command_processing.c ****                     strcat(info_string, "Input mode: EMG FCFS ADV\r\n");
 15907              		.loc 1 2113 0
 15908 0d36 7869     		ldr	r0, [r7, #20]
 15909 0d38 FFF7FEFF 		bl	strlen
 15910 0d3c 0346     		mov	r3, r0
 15911 0d3e 1A46     		mov	r2, r3
 15912 0d40 7B69     		ldr	r3, [r7, #20]
 15913 0d42 1344     		add	r3, r3, r2
 15914 0d44 994A     		ldr	r2, .L696+4
 15915 0d46 1D46     		mov	r5, r3
 15916 0d48 1446     		mov	r4, r2
 15917 0d4a 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 15918 0d4c 2860     		str	r0, [r5]	@ unaligned
 15919 0d4e 6960     		str	r1, [r5, #4]	@ unaligned
 15920 0d50 AA60     		str	r2, [r5, #8]	@ unaligned
 15921 0d52 EB60     		str	r3, [r5, #12]	@ unaligned
 15922 0d54 03CC     		ldmia	r4!, {r0, r1}
 15923 0d56 2861     		str	r0, [r5, #16]	@ unaligned
 15924 0d58 6961     		str	r1, [r5, #20]	@ unaligned
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 358


 15925 0d5a 2388     		ldrh	r3, [r4]	@ unaligned
 15926 0d5c A278     		ldrb	r2, [r4, #2]
 15927 0d5e 2B83     		strh	r3, [r5, #24]	@ unaligned
 15928 0d60 1346     		mov	r3, r2
 15929 0d62 AB76     		strb	r3, [r5, #26]
2114:..\src/command_processing.c ****                     break;
 15930              		.loc 1 2114 0
 15931 0d64 39E0     		b	.L604
 15932              	.L612:
2115:..\src/command_processing.c ****                 case INPUT_MODE_JOYSTICK:
2116:..\src/command_processing.c ****                     strcat(info_string, "Input mode: Joystick\r\n");
 15933              		.loc 1 2116 0
 15934 0d66 7869     		ldr	r0, [r7, #20]
 15935 0d68 FFF7FEFF 		bl	strlen
 15936 0d6c 0346     		mov	r3, r0
 15937 0d6e 1A46     		mov	r2, r3
 15938 0d70 7B69     		ldr	r3, [r7, #20]
 15939 0d72 1344     		add	r3, r3, r2
 15940 0d74 8E4A     		ldr	r2, .L696+8
 15941 0d76 1C46     		mov	r4, r3
 15942 0d78 1546     		mov	r5, r2
 15943 0d7a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 15944 0d7c 2060     		str	r0, [r4]	@ unaligned
 15945 0d7e 6160     		str	r1, [r4, #4]	@ unaligned
 15946 0d80 A260     		str	r2, [r4, #8]	@ unaligned
 15947 0d82 E360     		str	r3, [r4, #12]	@ unaligned
 15948 0d84 2868     		ldr	r0, [r5]	@ unaligned
 15949 0d86 2061     		str	r0, [r4, #16]	@ unaligned
 15950 0d88 AB88     		ldrh	r3, [r5, #4]	@ unaligned
 15951 0d8a AA79     		ldrb	r2, [r5, #6]
 15952 0d8c A382     		strh	r3, [r4, #20]	@ unaligned
 15953 0d8e 1346     		mov	r3, r2
 15954 0d90 A375     		strb	r3, [r4, #22]
2117:..\src/command_processing.c ****                     break;
 15955              		.loc 1 2117 0
 15956 0d92 22E0     		b	.L604
 15957              	.L613:
2118:..\src/command_processing.c ****                 case INPUT_MODE_EMG_PROPORTIONAL_NC:
2119:..\src/command_processing.c ****                     strcat(info_string, "Input mode: EMG proportional Normally Closed\r\n");
 15958              		.loc 1 2119 0
 15959 0d94 7869     		ldr	r0, [r7, #20]
 15960 0d96 FFF7FEFF 		bl	strlen
 15961 0d9a 0346     		mov	r3, r0
 15962 0d9c 1A46     		mov	r2, r3
 15963 0d9e 7B69     		ldr	r3, [r7, #20]
 15964 0da0 1344     		add	r3, r3, r2
 15965 0da2 844A     		ldr	r2, .L696+12
 15966 0da4 1546     		mov	r5, r2
 15967 0da6 9E46     		mov	lr, r3
 15968 0da8 05F1200C 		add	ip, r5, #32
 15969              	.L614:
 15970 0dac 7446     		mov	r4, lr
 15971 0dae 2E46     		mov	r6, r5
 15972 0db0 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 15973 0db2 2060     		str	r0, [r4]	@ unaligned
 15974 0db4 6160     		str	r1, [r4, #4]	@ unaligned
 15975 0db6 A260     		str	r2, [r4, #8]	@ unaligned
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 359


 15976 0db8 E360     		str	r3, [r4, #12]	@ unaligned
 15977 0dba 1035     		adds	r5, r5, #16
 15978 0dbc 0EF1100E 		add	lr, lr, #16
 15979 0dc0 6545     		cmp	r5, ip
 15980 0dc2 F3D1     		bne	.L614
 15981 0dc4 7446     		mov	r4, lr
 15982 0dc6 2B46     		mov	r3, r5
 15983 0dc8 07CB     		ldmia	r3!, {r0, r1, r2}
 15984 0dca 2060     		str	r0, [r4]	@ unaligned
 15985 0dcc 6160     		str	r1, [r4, #4]	@ unaligned
 15986 0dce A260     		str	r2, [r4, #8]	@ unaligned
 15987 0dd0 1A88     		ldrh	r2, [r3]	@ unaligned
 15988 0dd2 9B78     		ldrb	r3, [r3, #2]
 15989 0dd4 A281     		strh	r2, [r4, #12]	@ unaligned
 15990 0dd6 A373     		strb	r3, [r4, #14]
2120:..\src/command_processing.c ****                     break;
 15991              		.loc 1 2120 0
 15992 0dd8 00BF     		nop
 15993              	.L604:
2121:..\src/command_processing.c ****             }
2122:..\src/command_processing.c **** 
2123:..\src/command_processing.c ****             switch(MOT->control_mode) {
 15994              		.loc 1 2123 0
 15995 0dda D7F88430 		ldr	r3, [r7, #132]
 15996 0dde 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 15997 0de2 032B     		cmp	r3, #3
 15998 0de4 63D8     		bhi	.L687
 15999 0de6 01A2     		adr	r2, .L617
 16000 0de8 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 16001              		.p2align 2
 16002              	.L617:
 16003 0dec FD0D0000 		.word	.L616+1
 16004 0df0 270E0000 		.word	.L618+1
 16005 0df4 4B0E0000 		.word	.L619+1
 16006 0df8 710E0000 		.word	.L620+1
 16007              		.p2align 1
 16008              	.L616:
2124:..\src/command_processing.c ****                 case CONTROL_ANGLE:
2125:..\src/command_processing.c ****                     strcat(info_string, "Control mode: Position\r\n");
 16009              		.loc 1 2125 0
 16010 0dfc 7869     		ldr	r0, [r7, #20]
 16011 0dfe FFF7FEFF 		bl	strlen
 16012 0e02 0346     		mov	r3, r0
 16013 0e04 1A46     		mov	r2, r3
 16014 0e06 7B69     		ldr	r3, [r7, #20]
 16015 0e08 1344     		add	r3, r3, r2
 16016 0e0a 6B4A     		ldr	r2, .L696+16
 16017 0e0c 1D46     		mov	r5, r3
 16018 0e0e 1446     		mov	r4, r2
 16019 0e10 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 16020 0e12 2860     		str	r0, [r5]	@ unaligned
 16021 0e14 6960     		str	r1, [r5, #4]	@ unaligned
 16022 0e16 AA60     		str	r2, [r5, #8]	@ unaligned
 16023 0e18 EB60     		str	r3, [r5, #12]	@ unaligned
 16024 0e1a 03CC     		ldmia	r4!, {r0, r1}
 16025 0e1c 2861     		str	r0, [r5, #16]	@ unaligned
 16026 0e1e 6961     		str	r1, [r5, #20]	@ unaligned
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 360


 16027 0e20 2378     		ldrb	r3, [r4]
 16028 0e22 2B76     		strb	r3, [r5, #24]
2126:..\src/command_processing.c ****                     break;
 16029              		.loc 1 2126 0
 16030 0e24 44E0     		b	.L621
 16031              	.L618:
2127:..\src/command_processing.c ****                 case CONTROL_PWM:
2128:..\src/command_processing.c ****                     strcat(info_string, "Control mode: PWM\r\n");
 16032              		.loc 1 2128 0
 16033 0e26 7869     		ldr	r0, [r7, #20]
 16034 0e28 FFF7FEFF 		bl	strlen
 16035 0e2c 0346     		mov	r3, r0
 16036 0e2e 1A46     		mov	r2, r3
 16037 0e30 7B69     		ldr	r3, [r7, #20]
 16038 0e32 1344     		add	r3, r3, r2
 16039 0e34 614A     		ldr	r2, .L696+20
 16040 0e36 1D46     		mov	r5, r3
 16041 0e38 1446     		mov	r4, r2
 16042 0e3a 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 16043 0e3c 2860     		str	r0, [r5]	@ unaligned
 16044 0e3e 6960     		str	r1, [r5, #4]	@ unaligned
 16045 0e40 AA60     		str	r2, [r5, #8]	@ unaligned
 16046 0e42 EB60     		str	r3, [r5, #12]	@ unaligned
 16047 0e44 2068     		ldr	r0, [r4]	@ unaligned
 16048 0e46 2861     		str	r0, [r5, #16]	@ unaligned
2129:..\src/command_processing.c ****                     break;
 16049              		.loc 1 2129 0
 16050 0e48 32E0     		b	.L621
 16051              	.L619:
2130:..\src/command_processing.c ****                 case CONTROL_CURRENT:
2131:..\src/command_processing.c ****                     strcat(info_string, "Control mode: Current\r\n");
 16052              		.loc 1 2131 0
 16053 0e4a 7869     		ldr	r0, [r7, #20]
 16054 0e4c FFF7FEFF 		bl	strlen
 16055 0e50 0346     		mov	r3, r0
 16056 0e52 1A46     		mov	r2, r3
 16057 0e54 7B69     		ldr	r3, [r7, #20]
 16058 0e56 1344     		add	r3, r3, r2
 16059 0e58 594A     		ldr	r2, .L696+24
 16060 0e5a 1D46     		mov	r5, r3
 16061 0e5c 1446     		mov	r4, r2
 16062 0e5e 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 16063 0e60 2860     		str	r0, [r5]	@ unaligned
 16064 0e62 6960     		str	r1, [r5, #4]	@ unaligned
 16065 0e64 AA60     		str	r2, [r5, #8]	@ unaligned
 16066 0e66 EB60     		str	r3, [r5, #12]	@ unaligned
 16067 0e68 03CC     		ldmia	r4!, {r0, r1}
 16068 0e6a 2861     		str	r0, [r5, #16]	@ unaligned
 16069 0e6c 6961     		str	r1, [r5, #20]	@ unaligned
2132:..\src/command_processing.c ****                     break;
 16070              		.loc 1 2132 0
 16071 0e6e 1FE0     		b	.L621
 16072              	.L620:
2133:..\src/command_processing.c ****                 case CURR_AND_POS_CONTROL:
2134:..\src/command_processing.c ****                     strcat(info_string, "Control mode: Position and Current\r\n");
 16073              		.loc 1 2134 0
 16074 0e70 7869     		ldr	r0, [r7, #20]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 361


 16075 0e72 FFF7FEFF 		bl	strlen
 16076 0e76 0346     		mov	r3, r0
 16077 0e78 1A46     		mov	r2, r3
 16078 0e7a 7B69     		ldr	r3, [r7, #20]
 16079 0e7c 1344     		add	r3, r3, r2
 16080 0e7e 514A     		ldr	r2, .L696+28
 16081 0e80 1446     		mov	r4, r2
 16082 0e82 9E46     		mov	lr, r3
 16083 0e84 04F1200C 		add	ip, r4, #32
 16084              	.L622:
 16085 0e88 7546     		mov	r5, lr
 16086 0e8a 2646     		mov	r6, r4
 16087 0e8c 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 16088 0e8e 2860     		str	r0, [r5]	@ unaligned
 16089 0e90 6960     		str	r1, [r5, #4]	@ unaligned
 16090 0e92 AA60     		str	r2, [r5, #8]	@ unaligned
 16091 0e94 EB60     		str	r3, [r5, #12]	@ unaligned
 16092 0e96 1034     		adds	r4, r4, #16
 16093 0e98 0EF1100E 		add	lr, lr, #16
 16094 0e9c 6445     		cmp	r4, ip
 16095 0e9e F3D1     		bne	.L622
 16096 0ea0 7346     		mov	r3, lr
 16097 0ea2 2246     		mov	r2, r4
 16098 0ea4 1068     		ldr	r0, [r2]	@ unaligned
 16099 0ea6 1860     		str	r0, [r3]	@ unaligned
 16100 0ea8 1279     		ldrb	r2, [r2, #4]
 16101 0eaa 1A71     		strb	r2, [r3, #4]
2135:..\src/command_processing.c ****                     break;
 16102              		.loc 1 2135 0
 16103 0eac 00E0     		b	.L621
 16104              	.L687:
2136:..\src/command_processing.c ****                 default:
2137:..\src/command_processing.c ****                     break;
 16105              		.loc 1 2137 0
 16106 0eae 00BF     		nop
 16107              	.L621:
2138:..\src/command_processing.c ****             }
2139:..\src/command_processing.c **** 
2140:..\src/command_processing.c ****             if (MEM_P->enc[ENC_L].double_encoder_on_off)
 16108              		.loc 1 2140 0
 16109 0eb0 97F88320 		ldrb	r2, [r7, #131]	@ zero_extendqisi2
 16110 0eb4 D7F88C10 		ldr	r1, [r7, #140]
 16111 0eb8 1346     		mov	r3, r2
 16112 0eba 5B00     		lsls	r3, r3, #1
 16113 0ebc 1344     		add	r3, r3, r2
 16114 0ebe 1B01     		lsls	r3, r3, #4
 16115 0ec0 0B44     		add	r3, r3, r1
 16116 0ec2 03F5D873 		add	r3, r3, #432
 16117 0ec6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 16118 0ec8 002B     		cmp	r3, #0
 16119 0eca 1CD0     		beq	.L623
2141:..\src/command_processing.c ****                 strcat(info_string, "Absolute encoder position: YES\r\n");
 16120              		.loc 1 2141 0
 16121 0ecc 7869     		ldr	r0, [r7, #20]
 16122 0ece FFF7FEFF 		bl	strlen
 16123 0ed2 0346     		mov	r3, r0
 16124 0ed4 1A46     		mov	r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 362


 16125 0ed6 7B69     		ldr	r3, [r7, #20]
 16126 0ed8 1344     		add	r3, r3, r2
 16127 0eda 3B4A     		ldr	r2, .L696+32
 16128 0edc 1446     		mov	r4, r2
 16129 0ede 9E46     		mov	lr, r3
 16130 0ee0 04F1200C 		add	ip, r4, #32
 16131              	.L624:
 16132 0ee4 7546     		mov	r5, lr
 16133 0ee6 2646     		mov	r6, r4
 16134 0ee8 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 16135 0eea 2860     		str	r0, [r5]	@ unaligned
 16136 0eec 6960     		str	r1, [r5, #4]	@ unaligned
 16137 0eee AA60     		str	r2, [r5, #8]	@ unaligned
 16138 0ef0 EB60     		str	r3, [r5, #12]	@ unaligned
 16139 0ef2 1034     		adds	r4, r4, #16
 16140 0ef4 0EF1100E 		add	lr, lr, #16
 16141 0ef8 6445     		cmp	r4, ip
 16142 0efa F3D1     		bne	.L624
 16143 0efc 7346     		mov	r3, lr
 16144 0efe 2246     		mov	r2, r4
 16145 0f00 1278     		ldrb	r2, [r2]
 16146 0f02 1A70     		strb	r2, [r3]
 16147 0f04 13E0     		b	.L625
 16148              	.L623:
2142:..\src/command_processing.c ****             else
2143:..\src/command_processing.c ****                 strcat(info_string, "Absolute encoder position: NO\r\n");
 16149              		.loc 1 2143 0
 16150 0f06 7869     		ldr	r0, [r7, #20]
 16151 0f08 FFF7FEFF 		bl	strlen
 16152 0f0c 0346     		mov	r3, r0
 16153 0f0e 1A46     		mov	r2, r3
 16154 0f10 7B69     		ldr	r3, [r7, #20]
 16155 0f12 1344     		add	r3, r3, r2
 16156 0f14 2D4A     		ldr	r2, .L696+36
 16157 0f16 1C46     		mov	r4, r3
 16158 0f18 1546     		mov	r5, r2
 16159 0f1a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 16160 0f1c 2060     		str	r0, [r4]	@ unaligned
 16161 0f1e 6160     		str	r1, [r4, #4]	@ unaligned
 16162 0f20 A260     		str	r2, [r4, #8]	@ unaligned
 16163 0f22 E360     		str	r3, [r4, #12]	@ unaligned
 16164 0f24 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 16165 0f26 2061     		str	r0, [r4, #16]	@ unaligned
 16166 0f28 6161     		str	r1, [r4, #20]	@ unaligned
 16167 0f2a A261     		str	r2, [r4, #24]	@ unaligned
 16168 0f2c E361     		str	r3, [r4, #28]	@ unaligned
 16169              	.L625:
2144:..\src/command_processing.c **** 
2145:..\src/command_processing.c ****             sprintf(str, "Motor-Handle Ratio: %d\r\n", (int)MEM_P->enc[ENC_L].motor_handle_ratio);
 16170              		.loc 1 2145 0
 16171 0f2e 97F88320 		ldrb	r2, [r7, #131]	@ zero_extendqisi2
 16172 0f32 D7F88C10 		ldr	r1, [r7, #140]
 16173 0f36 1346     		mov	r3, r2
 16174 0f38 5B00     		lsls	r3, r3, #1
 16175 0f3a 1344     		add	r3, r3, r2
 16176 0f3c 1B01     		lsls	r3, r3, #4
 16177 0f3e 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 363


 16178 0f40 03F5DA73 		add	r3, r3, #436
 16179 0f44 93F90030 		ldrsb	r3, [r3]
 16180 0f48 1A46     		mov	r2, r3
 16181 0f4a 07F11C03 		add	r3, r7, #28
 16182 0f4e 2049     		ldr	r1, .L696+40
 16183 0f50 1846     		mov	r0, r3
 16184 0f52 FFF7FEFF 		bl	sprintf
2146:..\src/command_processing.c ****             strcat(info_string, str);
 16185              		.loc 1 2146 0
 16186 0f56 07F11C03 		add	r3, r7, #28
 16187 0f5a 1946     		mov	r1, r3
 16188 0f5c 7869     		ldr	r0, [r7, #20]
 16189 0f5e FFF7FEFF 		bl	strcat
2147:..\src/command_processing.c **** #ifdef GENERIC_FW       // decided not to show when using SOFTHAND_FW to streamline ping, since the
2148:..\src/command_processing.c ****             strcat(info_string, "Encoder indices used for motor control: ");
 16190              		.loc 1 2148 0
 16191 0f62 7869     		ldr	r0, [r7, #20]
 16192 0f64 FFF7FEFF 		bl	strlen
 16193 0f68 0346     		mov	r3, r0
 16194 0f6a 1A46     		mov	r2, r3
 16195 0f6c 7B69     		ldr	r3, [r7, #20]
 16196 0f6e 1344     		add	r3, r3, r2
 16197 0f70 184A     		ldr	r2, .L696+44
 16198 0f72 1446     		mov	r4, r2
 16199 0f74 9E46     		mov	lr, r3
 16200 0f76 04F1200C 		add	ip, r4, #32
 16201              	.L626:
 16202 0f7a 7546     		mov	r5, lr
 16203 0f7c 2646     		mov	r6, r4
 16204 0f7e 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 16205 0f80 2860     		str	r0, [r5]	@ unaligned
 16206 0f82 6960     		str	r1, [r5, #4]	@ unaligned
 16207 0f84 AA60     		str	r2, [r5, #8]	@ unaligned
 16208 0f86 EB60     		str	r3, [r5, #12]	@ unaligned
 16209 0f88 1034     		adds	r4, r4, #16
 16210 0f8a 0EF1100E 		add	lr, lr, #16
 16211 0f8e 6445     		cmp	r4, ip
 16212 0f90 F3D1     		bne	.L626
 16213 0f92 7246     		mov	r2, lr
 16214 0f94 2346     		mov	r3, r4
 16215 0f96 03CB     		ldmia	r3!, {r0, r1}
 16216 0f98 1060     		str	r0, [r2]	@ unaligned
 16217 0f9a 5160     		str	r1, [r2, #4]	@ unaligned
 16218 0f9c 1B78     		ldrb	r3, [r3]
 16219 0f9e 1372     		strb	r3, [r2, #8]
2149:..\src/command_processing.c ****             for (i = 0; i < NUM_OF_SENSORS; ++i) {
 16220              		.loc 1 2149 0
 16221 0fa0 0023     		movs	r3, #0
 16222 0fa2 C7F89C30 		str	r3, [r7, #156]
 16223 0fa6 48E0     		b	.L627
 16224              	.L697:
 16225              		.align	2
 16226              	.L696:
 16227 0fa8 24160000 		.word	.LC201
 16228 0fac 3C160000 		.word	.LC202
 16229 0fb0 58160000 		.word	.LC203
 16230 0fb4 70160000 		.word	.LC204
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 364


 16231 0fb8 A0160000 		.word	.LC205
 16232 0fbc BC160000 		.word	.LC206
 16233 0fc0 D0160000 		.word	.LC207
 16234 0fc4 E8160000 		.word	.LC208
 16235 0fc8 10170000 		.word	.LC209
 16236 0fcc 34170000 		.word	.LC210
 16237 0fd0 54170000 		.word	.LC211
 16238 0fd4 70170000 		.word	.LC212
 16239              	.L629:
2150:..\src/command_processing.c ****                 sprintf(str, "%d", (int) MEM_P->enc[ENC_L].Enc_idx_use_for_control[i]);
 16240              		.loc 1 2150 0
 16241 0fd8 97F88320 		ldrb	r2, [r7, #131]	@ zero_extendqisi2
 16242 0fdc D7F88C10 		ldr	r1, [r7, #140]
 16243 0fe0 1346     		mov	r3, r2
 16244 0fe2 5B00     		lsls	r3, r3, #1
 16245 0fe4 1344     		add	r3, r3, r2
 16246 0fe6 1B01     		lsls	r3, r3, #4
 16247 0fe8 CA18     		adds	r2, r1, r3
 16248 0fea D7F89C30 		ldr	r3, [r7, #156]
 16249 0fee 1344     		add	r3, r3, r2
 16250 0ff0 03F2B113 		addw	r3, r3, #433
 16251 0ff4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 16252 0ff6 1A46     		mov	r2, r3
 16253 0ff8 07F11C03 		add	r3, r7, #28
 16254 0ffc AE49     		ldr	r1, .L698
 16255 0ffe 1846     		mov	r0, r3
 16256 1000 FFF7FEFF 		bl	sprintf
2151:..\src/command_processing.c ****                 strcat(info_string, str);
 16257              		.loc 1 2151 0
 16258 1004 07F11C03 		add	r3, r7, #28
 16259 1008 1946     		mov	r1, r3
 16260 100a 7869     		ldr	r0, [r7, #20]
 16261 100c FFF7FEFF 		bl	strcat
2152:..\src/command_processing.c ****                 if (i != NUM_OF_SENSORS-1){
 16262              		.loc 1 2152 0
 16263 1010 D7F89C30 		ldr	r3, [r7, #156]
 16264 1014 022B     		cmp	r3, #2
 16265 1016 0BD0     		beq	.L628
2153:..\src/command_processing.c ****                     strcat(info_string, ", ");
 16266              		.loc 1 2153 0
 16267 1018 7869     		ldr	r0, [r7, #20]
 16268 101a FFF7FEFF 		bl	strlen
 16269 101e 0346     		mov	r3, r0
 16270 1020 1A46     		mov	r2, r3
 16271 1022 7B69     		ldr	r3, [r7, #20]
 16272 1024 1344     		add	r3, r3, r2
 16273 1026 A54A     		ldr	r2, .L698+4
 16274 1028 1188     		ldrh	r1, [r2]	@ unaligned
 16275 102a 9278     		ldrb	r2, [r2, #2]
 16276 102c 1980     		strh	r1, [r3]	@ unaligned
 16277 102e 9A70     		strb	r2, [r3, #2]
 16278              	.L628:
2149:..\src/command_processing.c ****                 sprintf(str, "%d", (int) MEM_P->enc[ENC_L].Enc_idx_use_for_control[i]);
 16279              		.loc 1 2149 0 discriminator 2
 16280 1030 D7F89C30 		ldr	r3, [r7, #156]
 16281 1034 0133     		adds	r3, r3, #1
 16282 1036 C7F89C30 		str	r3, [r7, #156]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 365


 16283              	.L627:
2149:..\src/command_processing.c ****                 sprintf(str, "%d", (int) MEM_P->enc[ENC_L].Enc_idx_use_for_control[i]);
 16284              		.loc 1 2149 0 is_stmt 0 discriminator 1
 16285 103a D7F89C30 		ldr	r3, [r7, #156]
 16286 103e 022B     		cmp	r3, #2
 16287 1040 CADD     		ble	.L629
2154:..\src/command_processing.c ****                 }                
2155:..\src/command_processing.c ****             }
2156:..\src/command_processing.c ****             strcat(info_string, "\r\n");
 16288              		.loc 1 2156 0 is_stmt 1
 16289 1042 7869     		ldr	r0, [r7, #20]
 16290 1044 FFF7FEFF 		bl	strlen
 16291 1048 0346     		mov	r3, r0
 16292 104a 1A46     		mov	r2, r3
 16293 104c 7B69     		ldr	r3, [r7, #20]
 16294 104e 1344     		add	r3, r3, r2
 16295 1050 9B4A     		ldr	r2, .L698+8
 16296 1052 1188     		ldrh	r1, [r2]	@ unaligned
 16297 1054 9278     		ldrb	r2, [r2, #2]
 16298 1056 1980     		strh	r1, [r3]	@ unaligned
 16299 1058 9A70     		strb	r2, [r3, #2]
2157:..\src/command_processing.c ****             sprintf(str, "First Gear: %d teeth\r\n", (int)MEM_P->enc[ENC_L].gears_params[0]);
 16300              		.loc 1 2157 0
 16301 105a 97F88320 		ldrb	r2, [r7, #131]	@ zero_extendqisi2
 16302 105e D7F88C10 		ldr	r1, [r7, #140]
 16303 1062 1346     		mov	r3, r2
 16304 1064 5B00     		lsls	r3, r3, #1
 16305 1066 1344     		add	r3, r3, r2
 16306 1068 1B01     		lsls	r3, r3, #4
 16307 106a 0B44     		add	r3, r3, r1
 16308 106c 03F2B513 		addw	r3, r3, #437
 16309 1070 93F90030 		ldrsb	r3, [r3]
 16310 1074 1A46     		mov	r2, r3
 16311 1076 07F11C03 		add	r3, r7, #28
 16312 107a 9249     		ldr	r1, .L698+12
 16313 107c 1846     		mov	r0, r3
 16314 107e FFF7FEFF 		bl	sprintf
2158:..\src/command_processing.c ****             strcat(info_string, str);
 16315              		.loc 1 2158 0
 16316 1082 07F11C03 		add	r3, r7, #28
 16317 1086 1946     		mov	r1, r3
 16318 1088 7869     		ldr	r0, [r7, #20]
 16319 108a FFF7FEFF 		bl	strcat
2159:..\src/command_processing.c ****             sprintf(str, "Second Gear: %d teeth\r\n", (int)MEM_P->enc[ENC_L].gears_params[1]);
 16320              		.loc 1 2159 0
 16321 108e 97F88320 		ldrb	r2, [r7, #131]	@ zero_extendqisi2
 16322 1092 D7F88C10 		ldr	r1, [r7, #140]
 16323 1096 1346     		mov	r3, r2
 16324 1098 5B00     		lsls	r3, r3, #1
 16325 109a 1344     		add	r3, r3, r2
 16326 109c 1B01     		lsls	r3, r3, #4
 16327 109e 0B44     		add	r3, r3, r1
 16328 10a0 03F5DB73 		add	r3, r3, #438
 16329 10a4 93F90030 		ldrsb	r3, [r3]
 16330 10a8 1A46     		mov	r2, r3
 16331 10aa 07F11C03 		add	r3, r7, #28
 16332 10ae 8649     		ldr	r1, .L698+16
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 366


 16333 10b0 1846     		mov	r0, r3
 16334 10b2 FFF7FEFF 		bl	sprintf
2160:..\src/command_processing.c ****             strcat(info_string, str);
 16335              		.loc 1 2160 0
 16336 10b6 07F11C03 		add	r3, r7, #28
 16337 10ba 1946     		mov	r1, r3
 16338 10bc 7869     		ldr	r0, [r7, #20]
 16339 10be FFF7FEFF 		bl	strcat
2161:..\src/command_processing.c ****             sprintf(str, "Gear invariant: %d\r\n", (int)MEM_P->enc[ENC_L].gears_params[2]);
 16340              		.loc 1 2161 0
 16341 10c2 97F88320 		ldrb	r2, [r7, #131]	@ zero_extendqisi2
 16342 10c6 D7F88C10 		ldr	r1, [r7, #140]
 16343 10ca 1346     		mov	r3, r2
 16344 10cc 5B00     		lsls	r3, r3, #1
 16345 10ce 1344     		add	r3, r3, r2
 16346 10d0 1B01     		lsls	r3, r3, #4
 16347 10d2 0B44     		add	r3, r3, r1
 16348 10d4 03F2B713 		addw	r3, r3, #439
 16349 10d8 93F90030 		ldrsb	r3, [r3]
 16350 10dc 1A46     		mov	r2, r3
 16351 10de 07F11C03 		add	r3, r7, #28
 16352 10e2 7A49     		ldr	r1, .L698+20
 16353 10e4 1846     		mov	r0, r3
 16354 10e6 FFF7FEFF 		bl	sprintf
2162:..\src/command_processing.c ****             strcat(info_string, str);
 16355              		.loc 1 2162 0
 16356 10ea 07F11C03 		add	r3, r7, #28
 16357 10ee 1946     		mov	r1, r3
 16358 10f0 7869     		ldr	r0, [r7, #20]
 16359 10f2 FFF7FEFF 		bl	strcat
2163:..\src/command_processing.c **** #endif            
2164:..\src/command_processing.c ****             strcat(info_string, "\r\n");
 16360              		.loc 1 2164 0
 16361 10f6 7869     		ldr	r0, [r7, #20]
 16362 10f8 FFF7FEFF 		bl	strlen
 16363 10fc 0346     		mov	r3, r0
 16364 10fe 1A46     		mov	r2, r3
 16365 1100 7B69     		ldr	r3, [r7, #20]
 16366 1102 1344     		add	r3, r3, r2
 16367 1104 6E4A     		ldr	r2, .L698+8
 16368 1106 1188     		ldrh	r1, [r2]	@ unaligned
 16369 1108 9278     		ldrb	r2, [r2, #2]
 16370 110a 1980     		strh	r1, [r3]	@ unaligned
 16371 110c 9A70     		strb	r2, [r3, #2]
2165:..\src/command_processing.c **** 
2166:..\src/command_processing.c ****             strcat(info_string, "Sensor resolution: ");
 16372              		.loc 1 2166 0
 16373 110e 7869     		ldr	r0, [r7, #20]
 16374 1110 FFF7FEFF 		bl	strlen
 16375 1114 0346     		mov	r3, r0
 16376 1116 1A46     		mov	r2, r3
 16377 1118 7B69     		ldr	r3, [r7, #20]
 16378 111a 1344     		add	r3, r3, r2
 16379 111c 6C4A     		ldr	r2, .L698+24
 16380 111e 1D46     		mov	r5, r3
 16381 1120 1446     		mov	r4, r2
 16382 1122 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 367


 16383 1124 2860     		str	r0, [r5]	@ unaligned
 16384 1126 6960     		str	r1, [r5, #4]	@ unaligned
 16385 1128 AA60     		str	r2, [r5, #8]	@ unaligned
 16386 112a EB60     		str	r3, [r5, #12]	@ unaligned
 16387 112c 2068     		ldr	r0, [r4]	@ unaligned
 16388 112e 2861     		str	r0, [r5, #16]	@ unaligned
2167:..\src/command_processing.c ****             for (i = 0; i < NUM_OF_SENSORS; ++i) {
 16389              		.loc 1 2167 0
 16390 1130 0023     		movs	r3, #0
 16391 1132 C7F89C30 		str	r3, [r7, #156]
 16392 1136 30E0     		b	.L630
 16393              	.L632:
2168:..\src/command_processing.c ****                 sprintf(str, "%d", (int) MEM_P->enc[ENC_L].res[i]);
 16394              		.loc 1 2168 0
 16395 1138 97F88320 		ldrb	r2, [r7, #131]	@ zero_extendqisi2
 16396 113c D7F88C10 		ldr	r1, [r7, #140]
 16397 1140 1346     		mov	r3, r2
 16398 1142 5B00     		lsls	r3, r3, #1
 16399 1144 1344     		add	r3, r3, r2
 16400 1146 1B01     		lsls	r3, r3, #4
 16401 1148 CA18     		adds	r2, r1, r3
 16402 114a D7F89C30 		ldr	r3, [r7, #156]
 16403 114e 1344     		add	r3, r3, r2
 16404 1150 03F29513 		addw	r3, r3, #405
 16405 1154 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 16406 1156 1A46     		mov	r2, r3
 16407 1158 07F11C03 		add	r3, r7, #28
 16408 115c 5649     		ldr	r1, .L698
 16409 115e 1846     		mov	r0, r3
 16410 1160 FFF7FEFF 		bl	sprintf
2169:..\src/command_processing.c ****                 strcat(info_string, str);
 16411              		.loc 1 2169 0
 16412 1164 07F11C03 		add	r3, r7, #28
 16413 1168 1946     		mov	r1, r3
 16414 116a 7869     		ldr	r0, [r7, #20]
 16415 116c FFF7FEFF 		bl	strcat
2170:..\src/command_processing.c ****                 if (i != NUM_OF_SENSORS-1){
 16416              		.loc 1 2170 0
 16417 1170 D7F89C30 		ldr	r3, [r7, #156]
 16418 1174 022B     		cmp	r3, #2
 16419 1176 0BD0     		beq	.L631
2171:..\src/command_processing.c ****                     strcat(info_string, ", ");
 16420              		.loc 1 2171 0
 16421 1178 7869     		ldr	r0, [r7, #20]
 16422 117a FFF7FEFF 		bl	strlen
 16423 117e 0346     		mov	r3, r0
 16424 1180 1A46     		mov	r2, r3
 16425 1182 7B69     		ldr	r3, [r7, #20]
 16426 1184 1344     		add	r3, r3, r2
 16427 1186 4D4A     		ldr	r2, .L698+4
 16428 1188 1188     		ldrh	r1, [r2]	@ unaligned
 16429 118a 9278     		ldrb	r2, [r2, #2]
 16430 118c 1980     		strh	r1, [r3]	@ unaligned
 16431 118e 9A70     		strb	r2, [r3, #2]
 16432              	.L631:
2167:..\src/command_processing.c ****                 sprintf(str, "%d", (int) MEM_P->enc[ENC_L].res[i]);
 16433              		.loc 1 2167 0 discriminator 2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 368


 16434 1190 D7F89C30 		ldr	r3, [r7, #156]
 16435 1194 0133     		adds	r3, r3, #1
 16436 1196 C7F89C30 		str	r3, [r7, #156]
 16437              	.L630:
2167:..\src/command_processing.c ****                 sprintf(str, "%d", (int) MEM_P->enc[ENC_L].res[i]);
 16438              		.loc 1 2167 0 is_stmt 0 discriminator 1
 16439 119a D7F89C30 		ldr	r3, [r7, #156]
 16440 119e 022B     		cmp	r3, #2
 16441 11a0 CADD     		ble	.L632
2172:..\src/command_processing.c ****                 }                
2173:..\src/command_processing.c ****             }
2174:..\src/command_processing.c ****             strcat(info_string, "\r\n");
 16442              		.loc 1 2174 0 is_stmt 1
 16443 11a2 7869     		ldr	r0, [r7, #20]
 16444 11a4 FFF7FEFF 		bl	strlen
 16445 11a8 0346     		mov	r3, r0
 16446 11aa 1A46     		mov	r2, r3
 16447 11ac 7B69     		ldr	r3, [r7, #20]
 16448 11ae 1344     		add	r3, r3, r2
 16449 11b0 434A     		ldr	r2, .L698+8
 16450 11b2 1188     		ldrh	r1, [r2]	@ unaligned
 16451 11b4 9278     		ldrb	r2, [r2, #2]
 16452 11b6 1980     		strh	r1, [r3]	@ unaligned
 16453 11b8 9A70     		strb	r2, [r3, #2]
2175:..\src/command_processing.c **** 
2176:..\src/command_processing.c ****             strcat(info_string, "Measurement Offset: ");
 16454              		.loc 1 2176 0
 16455 11ba 7869     		ldr	r0, [r7, #20]
 16456 11bc FFF7FEFF 		bl	strlen
 16457 11c0 0346     		mov	r3, r0
 16458 11c2 1A46     		mov	r2, r3
 16459 11c4 7B69     		ldr	r3, [r7, #20]
 16460 11c6 1344     		add	r3, r3, r2
 16461 11c8 424A     		ldr	r2, .L698+28
 16462 11ca 1D46     		mov	r5, r3
 16463 11cc 1446     		mov	r4, r2
 16464 11ce 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 16465 11d0 2860     		str	r0, [r5]	@ unaligned
 16466 11d2 6960     		str	r1, [r5, #4]	@ unaligned
 16467 11d4 AA60     		str	r2, [r5, #8]	@ unaligned
 16468 11d6 EB60     		str	r3, [r5, #12]	@ unaligned
 16469 11d8 2068     		ldr	r0, [r4]	@ unaligned
 16470 11da 2861     		str	r0, [r5, #16]	@ unaligned
 16471 11dc 2379     		ldrb	r3, [r4, #4]
 16472 11de 2B75     		strb	r3, [r5, #20]
2177:..\src/command_processing.c ****             for (i = 0; i < NUM_OF_SENSORS; ++i) {
 16473              		.loc 1 2177 0
 16474 11e0 0023     		movs	r3, #0
 16475 11e2 C7F89C30 		str	r3, [r7, #156]
 16476 11e6 3FE0     		b	.L633
 16477              	.L635:
2178:..\src/command_processing.c ****                 sprintf(str, "%ld", (int32) MEM_P->enc[ENC_L].m_off[i] >> MEM_P->enc[ENC_L].res[i])
 16478              		.loc 1 2178 0
 16479 11e8 97F88320 		ldrb	r2, [r7, #131]	@ zero_extendqisi2
 16480 11ec D7F88C10 		ldr	r1, [r7, #140]
 16481 11f0 1346     		mov	r3, r2
 16482 11f2 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 369


 16483 11f4 1344     		add	r3, r3, r2
 16484 11f6 9B00     		lsls	r3, r3, #2
 16485 11f8 D7F89C20 		ldr	r2, [r7, #156]
 16486 11fc 1344     		add	r3, r3, r2
 16487 11fe 6633     		adds	r3, r3, #102
 16488 1200 51F82310 		ldr	r1, [r1, r3, lsl #2]
 16489 1204 97F88320 		ldrb	r2, [r7, #131]	@ zero_extendqisi2
 16490 1208 D7F88C00 		ldr	r0, [r7, #140]
 16491 120c 1346     		mov	r3, r2
 16492 120e 5B00     		lsls	r3, r3, #1
 16493 1210 1344     		add	r3, r3, r2
 16494 1212 1B01     		lsls	r3, r3, #4
 16495 1214 C218     		adds	r2, r0, r3
 16496 1216 D7F89C30 		ldr	r3, [r7, #156]
 16497 121a 1344     		add	r3, r3, r2
 16498 121c 03F29513 		addw	r3, r3, #405
 16499 1220 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 16500 1222 41FA03F2 		asr	r2, r1, r3
 16501 1226 07F11C03 		add	r3, r7, #28
 16502 122a 2B49     		ldr	r1, .L698+32
 16503 122c 1846     		mov	r0, r3
 16504 122e FFF7FEFF 		bl	sprintf
2179:..\src/command_processing.c ****                 strcat(info_string, str);
 16505              		.loc 1 2179 0
 16506 1232 07F11C03 		add	r3, r7, #28
 16507 1236 1946     		mov	r1, r3
 16508 1238 7869     		ldr	r0, [r7, #20]
 16509 123a FFF7FEFF 		bl	strcat
2180:..\src/command_processing.c ****                 if (i != NUM_OF_SENSORS-1){
 16510              		.loc 1 2180 0
 16511 123e D7F89C30 		ldr	r3, [r7, #156]
 16512 1242 022B     		cmp	r3, #2
 16513 1244 0BD0     		beq	.L634
2181:..\src/command_processing.c ****                     strcat(info_string, ", ");
 16514              		.loc 1 2181 0
 16515 1246 7869     		ldr	r0, [r7, #20]
 16516 1248 FFF7FEFF 		bl	strlen
 16517 124c 0346     		mov	r3, r0
 16518 124e 1A46     		mov	r2, r3
 16519 1250 7B69     		ldr	r3, [r7, #20]
 16520 1252 1344     		add	r3, r3, r2
 16521 1254 194A     		ldr	r2, .L698+4
 16522 1256 1188     		ldrh	r1, [r2]	@ unaligned
 16523 1258 9278     		ldrb	r2, [r2, #2]
 16524 125a 1980     		strh	r1, [r3]	@ unaligned
 16525 125c 9A70     		strb	r2, [r3, #2]
 16526              	.L634:
2177:..\src/command_processing.c ****                 sprintf(str, "%ld", (int32) MEM_P->enc[ENC_L].m_off[i] >> MEM_P->enc[ENC_L].res[i])
 16527              		.loc 1 2177 0 discriminator 2
 16528 125e D7F89C30 		ldr	r3, [r7, #156]
 16529 1262 0133     		adds	r3, r3, #1
 16530 1264 C7F89C30 		str	r3, [r7, #156]
 16531              	.L633:
2177:..\src/command_processing.c ****                 sprintf(str, "%ld", (int32) MEM_P->enc[ENC_L].m_off[i] >> MEM_P->enc[ENC_L].res[i])
 16532              		.loc 1 2177 0 is_stmt 0 discriminator 1
 16533 1268 D7F89C30 		ldr	r3, [r7, #156]
 16534 126c 022B     		cmp	r3, #2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 370


 16535 126e BBDD     		ble	.L635
2182:..\src/command_processing.c ****                 }
2183:..\src/command_processing.c ****             }
2184:..\src/command_processing.c ****             strcat(info_string, "\r\n");
 16536              		.loc 1 2184 0 is_stmt 1
 16537 1270 7869     		ldr	r0, [r7, #20]
 16538 1272 FFF7FEFF 		bl	strlen
 16539 1276 0346     		mov	r3, r0
 16540 1278 1A46     		mov	r2, r3
 16541 127a 7B69     		ldr	r3, [r7, #20]
 16542 127c 1344     		add	r3, r3, r2
 16543 127e 104A     		ldr	r2, .L698+8
 16544 1280 1188     		ldrh	r1, [r2]	@ unaligned
 16545 1282 9278     		ldrb	r2, [r2, #2]
 16546 1284 1980     		strh	r1, [r3]	@ unaligned
 16547 1286 9A70     		strb	r2, [r3, #2]
2185:..\src/command_processing.c ****                 
2186:..\src/command_processing.c ****             strcat(info_string, "Measurement Multiplier: ");
 16548              		.loc 1 2186 0
 16549 1288 7869     		ldr	r0, [r7, #20]
 16550 128a FFF7FEFF 		bl	strlen
 16551 128e 0346     		mov	r3, r0
 16552 1290 1A46     		mov	r2, r3
 16553 1292 7B69     		ldr	r3, [r7, #20]
 16554 1294 1344     		add	r3, r3, r2
 16555 1296 114A     		ldr	r2, .L698+36
 16556 1298 1D46     		mov	r5, r3
 16557 129a 1446     		mov	r4, r2
 16558 129c 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 16559 129e 2860     		str	r0, [r5]	@ unaligned
 16560 12a0 6960     		str	r1, [r5, #4]	@ unaligned
 16561 12a2 AA60     		str	r2, [r5, #8]	@ unaligned
 16562 12a4 EB60     		str	r3, [r5, #12]	@ unaligned
 16563 12a6 03CC     		ldmia	r4!, {r0, r1}
 16564 12a8 2861     		str	r0, [r5, #16]	@ unaligned
 16565 12aa 6961     		str	r1, [r5, #20]	@ unaligned
 16566 12ac 2378     		ldrb	r3, [r4]
 16567 12ae 2B76     		strb	r3, [r5, #24]
2187:..\src/command_processing.c ****             for (i = 0; i < NUM_OF_SENSORS; ++i) {
 16568              		.loc 1 2187 0
 16569 12b0 0023     		movs	r3, #0
 16570 12b2 C7F89C30 		str	r3, [r7, #156]
 16571 12b6 49E0     		b	.L636
 16572              	.L699:
 16573              		.align	2
 16574              	.L698:
 16575 12b8 64140000 		.word	.LC182
 16576 12bc 68140000 		.word	.LC183
 16577 12c0 58110000 		.word	.LC152
 16578 12c4 9C170000 		.word	.LC213
 16579 12c8 B4170000 		.word	.LC214
 16580 12cc CC170000 		.word	.LC215
 16581 12d0 E4170000 		.word	.LC216
 16582 12d4 F8170000 		.word	.LC217
 16583 12d8 10180000 		.word	.LC218
 16584 12dc 14180000 		.word	.LC219
 16585              	.L638:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 371


2188:..\src/command_processing.c ****                 sprintf(str,"%f", (float) MEM_P->enc[ENC_L].m_mult[i]);
 16586              		.loc 1 2188 0
 16587 12e0 97F88320 		ldrb	r2, [r7, #131]	@ zero_extendqisi2
 16588 12e4 D7F88C10 		ldr	r1, [r7, #140]
 16589 12e8 1346     		mov	r3, r2
 16590 12ea 5B00     		lsls	r3, r3, #1
 16591 12ec 1344     		add	r3, r3, r2
 16592 12ee 9B00     		lsls	r3, r3, #2
 16593 12f0 D7F89C20 		ldr	r2, [r7, #156]
 16594 12f4 1344     		add	r3, r3, r2
 16595 12f6 6833     		adds	r3, r3, #104
 16596 12f8 9B00     		lsls	r3, r3, #2
 16597 12fa 0B44     		add	r3, r3, r1
 16598 12fc 5B68     		ldr	r3, [r3, #4]	@ float
 16599 12fe 1846     		mov	r0, r3
 16600 1300 FFF7FEFF 		bl	__aeabi_f2d
 16601 1304 0346     		mov	r3, r0
 16602 1306 0C46     		mov	r4, r1
 16603 1308 07F11C00 		add	r0, r7, #28
 16604 130c 1A46     		mov	r2, r3
 16605 130e 2346     		mov	r3, r4
 16606 1310 CA49     		ldr	r1, .L700
 16607 1312 FFF7FEFF 		bl	sprintf
2189:..\src/command_processing.c ****                 strcat(info_string, str);
 16608              		.loc 1 2189 0
 16609 1316 07F11C03 		add	r3, r7, #28
 16610 131a 1946     		mov	r1, r3
 16611 131c 7869     		ldr	r0, [r7, #20]
 16612 131e FFF7FEFF 		bl	strcat
2190:..\src/command_processing.c ****                 if (i != NUM_OF_SENSORS-1){
 16613              		.loc 1 2190 0
 16614 1322 D7F89C30 		ldr	r3, [r7, #156]
 16615 1326 022B     		cmp	r3, #2
 16616 1328 0BD0     		beq	.L637
2191:..\src/command_processing.c ****                     strcat(info_string, ", ");
 16617              		.loc 1 2191 0
 16618 132a 7869     		ldr	r0, [r7, #20]
 16619 132c FFF7FEFF 		bl	strlen
 16620 1330 0346     		mov	r3, r0
 16621 1332 1A46     		mov	r2, r3
 16622 1334 7B69     		ldr	r3, [r7, #20]
 16623 1336 1344     		add	r3, r3, r2
 16624 1338 C14A     		ldr	r2, .L700+4
 16625 133a 1188     		ldrh	r1, [r2]	@ unaligned
 16626 133c 9278     		ldrb	r2, [r2, #2]
 16627 133e 1980     		strh	r1, [r3]	@ unaligned
 16628 1340 9A70     		strb	r2, [r3, #2]
 16629              	.L637:
2187:..\src/command_processing.c ****                 sprintf(str,"%f", (float) MEM_P->enc[ENC_L].m_mult[i]);
 16630              		.loc 1 2187 0 discriminator 2
 16631 1342 D7F89C30 		ldr	r3, [r7, #156]
 16632 1346 0133     		adds	r3, r3, #1
 16633 1348 C7F89C30 		str	r3, [r7, #156]
 16634              	.L636:
2187:..\src/command_processing.c ****                 sprintf(str,"%f", (float) MEM_P->enc[ENC_L].m_mult[i]);
 16635              		.loc 1 2187 0 is_stmt 0 discriminator 1
 16636 134c D7F89C30 		ldr	r3, [r7, #156]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 372


 16637 1350 022B     		cmp	r3, #2
 16638 1352 C5DD     		ble	.L638
2192:..\src/command_processing.c ****                 }
2193:..\src/command_processing.c ****             }
2194:..\src/command_processing.c ****             strcat(info_string, "\r\n");
 16639              		.loc 1 2194 0 is_stmt 1
 16640 1354 7869     		ldr	r0, [r7, #20]
 16641 1356 FFF7FEFF 		bl	strlen
 16642 135a 0346     		mov	r3, r0
 16643 135c 1A46     		mov	r2, r3
 16644 135e 7B69     		ldr	r3, [r7, #20]
 16645 1360 1344     		add	r3, r3, r2
 16646 1362 B84A     		ldr	r2, .L700+8
 16647 1364 1188     		ldrh	r1, [r2]	@ unaligned
 16648 1366 9278     		ldrb	r2, [r2, #2]
 16649 1368 1980     		strh	r1, [r3]	@ unaligned
 16650 136a 9A70     		strb	r2, [r3, #2]
2195:..\src/command_processing.c ****             
2196:..\src/command_processing.c ****     		sprintf(str, "Current lookup table: %f, %f, %f, %f, %f, %f\r\n", 
2197:..\src/command_processing.c ****                 MOT->curr_lookup[0], MOT->curr_lookup[1], MOT->curr_lookup[2], 
 16651              		.loc 1 2197 0
 16652 136c D7F88430 		ldr	r3, [r7, #132]
 16653 1370 5B6C     		ldr	r3, [r3, #68]	@ float
2196:..\src/command_processing.c ****                 MOT->curr_lookup[0], MOT->curr_lookup[1], MOT->curr_lookup[2], 
 16654              		.loc 1 2196 0
 16655 1372 1846     		mov	r0, r3
 16656 1374 FFF7FEFF 		bl	__aeabi_f2d
 16657 1378 C7E90201 		strd	r0, [r7, #8]
 16658              		.loc 1 2197 0
 16659 137c D7F88430 		ldr	r3, [r7, #132]
 16660 1380 9B6C     		ldr	r3, [r3, #72]	@ float
2196:..\src/command_processing.c ****                 MOT->curr_lookup[0], MOT->curr_lookup[1], MOT->curr_lookup[2], 
 16661              		.loc 1 2196 0
 16662 1382 1846     		mov	r0, r3
 16663 1384 FFF7FEFF 		bl	__aeabi_f2d
 16664 1388 0446     		mov	r4, r0
 16665 138a 0D46     		mov	r5, r1
 16666              		.loc 1 2197 0
 16667 138c D7F88430 		ldr	r3, [r7, #132]
 16668 1390 DB6C     		ldr	r3, [r3, #76]	@ float
2196:..\src/command_processing.c ****                 MOT->curr_lookup[0], MOT->curr_lookup[1], MOT->curr_lookup[2], 
 16669              		.loc 1 2196 0
 16670 1392 1846     		mov	r0, r3
 16671 1394 FFF7FEFF 		bl	__aeabi_f2d
 16672 1398 8046     		mov	r8, r0
 16673 139a 8946     		mov	r9, r1
2198:..\src/command_processing.c ****                 MOT->curr_lookup[3], MOT->curr_lookup[4], MOT->curr_lookup[5]);
 16674              		.loc 1 2198 0
 16675 139c D7F88430 		ldr	r3, [r7, #132]
 16676 13a0 1B6D     		ldr	r3, [r3, #80]	@ float
2196:..\src/command_processing.c ****                 MOT->curr_lookup[0], MOT->curr_lookup[1], MOT->curr_lookup[2], 
 16677              		.loc 1 2196 0
 16678 13a2 1846     		mov	r0, r3
 16679 13a4 FFF7FEFF 		bl	__aeabi_f2d
 16680 13a8 8246     		mov	r10, r0
 16681 13aa 8B46     		mov	fp, r1
 16682              		.loc 1 2198 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 373


 16683 13ac D7F88430 		ldr	r3, [r7, #132]
 16684 13b0 5B6D     		ldr	r3, [r3, #84]	@ float
2196:..\src/command_processing.c ****                 MOT->curr_lookup[0], MOT->curr_lookup[1], MOT->curr_lookup[2], 
 16685              		.loc 1 2196 0
 16686 13b2 1846     		mov	r0, r3
 16687 13b4 FFF7FEFF 		bl	__aeabi_f2d
 16688 13b8 C7E90001 		strd	r0, [r7]
 16689              		.loc 1 2198 0
 16690 13bc D7F88430 		ldr	r3, [r7, #132]
 16691 13c0 9B6D     		ldr	r3, [r3, #88]	@ float
2196:..\src/command_processing.c ****                 MOT->curr_lookup[0], MOT->curr_lookup[1], MOT->curr_lookup[2], 
 16692              		.loc 1 2196 0
 16693 13c2 1846     		mov	r0, r3
 16694 13c4 FFF7FEFF 		bl	__aeabi_f2d
 16695 13c8 0246     		mov	r2, r0
 16696 13ca 0B46     		mov	r3, r1
 16697 13cc 07F11C00 		add	r0, r7, #28
 16698 13d0 CDE90823 		strd	r2, [sp, #32]
 16699 13d4 D7E90012 		ldrd	r1, [r7]
 16700 13d8 CDE90612 		strd	r1, [sp, #24]
 16701 13dc CDE904AB 		strd	r10, [sp, #16]
 16702 13e0 CDE90289 		strd	r8, [sp, #8]
 16703 13e4 CDE90045 		strd	r4, [sp]
 16704 13e8 D7E90223 		ldrd	r2, [r7, #8]
 16705 13ec 9649     		ldr	r1, .L700+12
 16706 13ee FFF7FEFF 		bl	sprintf
2199:..\src/command_processing.c **** 		    strcat(info_string, str);       
 16707              		.loc 1 2199 0
 16708 13f2 07F11C03 		add	r3, r7, #28
 16709 13f6 1946     		mov	r1, r3
 16710 13f8 7869     		ldr	r0, [r7, #20]
 16711 13fa FFF7FEFF 		bl	strcat
2200:..\src/command_processing.c **** 
2201:..\src/command_processing.c ****             sprintf(str, "Position limit active: %d", (int)MOT->pos_lim_flag);
 16712              		.loc 1 2201 0
 16713 13fe D7F88430 		ldr	r3, [r7, #132]
 16714 1402 93F83330 		ldrb	r3, [r3, #51]	@ zero_extendqisi2
 16715 1406 1A46     		mov	r2, r3
 16716 1408 07F11C03 		add	r3, r7, #28
 16717 140c 8F49     		ldr	r1, .L700+16
 16718 140e 1846     		mov	r0, r3
 16719 1410 FFF7FEFF 		bl	sprintf
2202:..\src/command_processing.c ****             strcat(info_string, str);
 16720              		.loc 1 2202 0
 16721 1414 07F11C03 		add	r3, r7, #28
 16722 1418 1946     		mov	r1, r3
 16723 141a 7869     		ldr	r0, [r7, #20]
 16724 141c FFF7FEFF 		bl	strcat
2203:..\src/command_processing.c ****             strcat(info_string, "\r\n");
 16725              		.loc 1 2203 0
 16726 1420 7869     		ldr	r0, [r7, #20]
 16727 1422 FFF7FEFF 		bl	strlen
 16728 1426 0346     		mov	r3, r0
 16729 1428 1A46     		mov	r2, r3
 16730 142a 7B69     		ldr	r3, [r7, #20]
 16731 142c 1344     		add	r3, r3, r2
 16732 142e 854A     		ldr	r2, .L700+8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 374


 16733 1430 1188     		ldrh	r1, [r2]	@ unaligned
 16734 1432 9278     		ldrb	r2, [r2, #2]
 16735 1434 1980     		strh	r1, [r3]	@ unaligned
 16736 1436 9A70     		strb	r2, [r3, #2]
2204:..\src/command_processing.c **** 
2205:..\src/command_processing.c ****             sprintf(str, "Position limit motor: inf -> %ld  ", (int32)MOT->pos_lim_inf >> MEM_P->en
 16737              		.loc 1 2205 0
 16738 1438 D7F88430 		ldr	r3, [r7, #132]
 16739 143c 596B     		ldr	r1, [r3, #52]
 16740 143e 97F88320 		ldrb	r2, [r7, #131]	@ zero_extendqisi2
 16741 1442 D7F88C00 		ldr	r0, [r7, #140]
 16742 1446 1346     		mov	r3, r2
 16743 1448 5B00     		lsls	r3, r3, #1
 16744 144a 1344     		add	r3, r3, r2
 16745 144c 1B01     		lsls	r3, r3, #4
 16746 144e 0344     		add	r3, r3, r0
 16747 1450 03F29513 		addw	r3, r3, #405
 16748 1454 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 16749 1456 41FA03F2 		asr	r2, r1, r3
 16750 145a 07F11C03 		add	r3, r7, #28
 16751 145e 7C49     		ldr	r1, .L700+20
 16752 1460 1846     		mov	r0, r3
 16753 1462 FFF7FEFF 		bl	sprintf
2206:..\src/command_processing.c ****             strcat(info_string, str);
 16754              		.loc 1 2206 0
 16755 1466 07F11C03 		add	r3, r7, #28
 16756 146a 1946     		mov	r1, r3
 16757 146c 7869     		ldr	r0, [r7, #20]
 16758 146e FFF7FEFF 		bl	strcat
2207:..\src/command_processing.c ****             sprintf(str, "sup -> %ld\r\n", (int32)MOT->pos_lim_sup >> MEM_P->enc[ENC_L].res[0]);
 16759              		.loc 1 2207 0
 16760 1472 D7F88430 		ldr	r3, [r7, #132]
 16761 1476 996B     		ldr	r1, [r3, #56]
 16762 1478 97F88320 		ldrb	r2, [r7, #131]	@ zero_extendqisi2
 16763 147c D7F88C00 		ldr	r0, [r7, #140]
 16764 1480 1346     		mov	r3, r2
 16765 1482 5B00     		lsls	r3, r3, #1
 16766 1484 1344     		add	r3, r3, r2
 16767 1486 1B01     		lsls	r3, r3, #4
 16768 1488 0344     		add	r3, r3, r0
 16769 148a 03F29513 		addw	r3, r3, #405
 16770 148e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 16771 1490 41FA03F2 		asr	r2, r1, r3
 16772 1494 07F11C03 		add	r3, r7, #28
 16773 1498 6E49     		ldr	r1, .L700+24
 16774 149a 1846     		mov	r0, r3
 16775 149c FFF7FEFF 		bl	sprintf
2208:..\src/command_processing.c ****             strcat(info_string, str);
 16776              		.loc 1 2208 0
 16777 14a0 07F11C03 		add	r3, r7, #28
 16778 14a4 1946     		mov	r1, r3
 16779 14a6 7869     		ldr	r0, [r7, #20]
 16780 14a8 FFF7FEFF 		bl	strcat
2209:..\src/command_processing.c **** 
2210:..\src/command_processing.c ****             sprintf(str, "Max step pos and neg: %d %d", (int)MOT->max_step_pos, (int)MOT->max_step_
 16781              		.loc 1 2210 0
 16782 14ac D7F88430 		ldr	r3, [r7, #132]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 375


 16783 14b0 1A6C     		ldr	r2, [r3, #64]
 16784 14b2 D7F88430 		ldr	r3, [r7, #132]
 16785 14b6 DB6B     		ldr	r3, [r3, #60]
 16786 14b8 07F11C00 		add	r0, r7, #28
 16787 14bc 6649     		ldr	r1, .L700+28
 16788 14be FFF7FEFF 		bl	sprintf
2211:..\src/command_processing.c ****             strcat(info_string, str);
 16789              		.loc 1 2211 0
 16790 14c2 07F11C03 		add	r3, r7, #28
 16791 14c6 1946     		mov	r1, r3
 16792 14c8 7869     		ldr	r0, [r7, #20]
 16793 14ca FFF7FEFF 		bl	strcat
2212:..\src/command_processing.c ****             strcat(info_string, "\r\n");
 16794              		.loc 1 2212 0
 16795 14ce 7869     		ldr	r0, [r7, #20]
 16796 14d0 FFF7FEFF 		bl	strlen
 16797 14d4 0346     		mov	r3, r0
 16798 14d6 1A46     		mov	r2, r3
 16799 14d8 7B69     		ldr	r3, [r7, #20]
 16800 14da 1344     		add	r3, r3, r2
 16801 14dc 594A     		ldr	r2, .L700+8
 16802 14de 1188     		ldrh	r1, [r2]	@ unaligned
 16803 14e0 9278     		ldrb	r2, [r2, #2]
 16804 14e2 1980     		strh	r1, [r3]	@ unaligned
 16805 14e4 9A70     		strb	r2, [r3, #2]
2213:..\src/command_processing.c **** 
2214:..\src/command_processing.c ****             sprintf(str, "Current limit: %d\r\n", (int)MOT->current_limit);
 16806              		.loc 1 2214 0
 16807 14e6 D7F88430 		ldr	r3, [r7, #132]
 16808 14ea B3F95C30 		ldrsh	r3, [r3, #92]
 16809 14ee 1A46     		mov	r2, r3
 16810 14f0 07F11C03 		add	r3, r7, #28
 16811 14f4 5949     		ldr	r1, .L700+32
 16812 14f6 1846     		mov	r0, r3
 16813 14f8 FFF7FEFF 		bl	sprintf
2215:..\src/command_processing.c ****             strcat(info_string, str);
 16814              		.loc 1 2215 0
 16815 14fc 07F11C03 		add	r3, r7, #28
 16816 1500 1946     		mov	r1, r3
 16817 1502 7869     		ldr	r0, [r7, #20]
 16818 1504 FFF7FEFF 		bl	strcat
2216:..\src/command_processing.c **** #ifdef GENERIC_FW       // decided not to show when using SOFTHAND_FW to streamline ping, since the
2217:..\src/command_processing.c ****             sprintf(str, "Motor board associated encoder line: %d\r\n", (int)MOT->encoder_line);
 16819              		.loc 1 2217 0
 16820 1508 D7F88430 		ldr	r3, [r7, #132]
 16821 150c 93F86030 		ldrb	r3, [r3, #96]	@ zero_extendqisi2
 16822 1510 1A46     		mov	r2, r3
 16823 1512 07F11C03 		add	r3, r7, #28
 16824 1516 5249     		ldr	r1, .L700+36
 16825 1518 1846     		mov	r0, r3
 16826 151a FFF7FEFF 		bl	sprintf
2218:..\src/command_processing.c ****             strcat(info_string, str);
 16827              		.loc 1 2218 0
 16828 151e 07F11C03 		add	r3, r7, #28
 16829 1522 1946     		mov	r1, r3
 16830 1524 7869     		ldr	r0, [r7, #20]
 16831 1526 FFF7FEFF 		bl	strcat
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 376


2219:..\src/command_processing.c ****             switch(MOT->motor_driver_type) {
 16832              		.loc 1 2219 0
 16833 152a D7F88430 		ldr	r3, [r7, #132]
 16834 152e 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 16835 1532 012B     		cmp	r3, #1
 16836 1534 21D0     		beq	.L640
 16837 1536 022B     		cmp	r3, #2
 16838 1538 3CD0     		beq	.L641
 16839 153a 002B     		cmp	r3, #0
 16840 153c 00D0     		beq	.L642
2220:..\src/command_processing.c ****                 case DRIVER_MC33887:
2221:..\src/command_processing.c ****                     strcat(info_string, "Driver type: MC33887 (Standard)\r\n");
2222:..\src/command_processing.c ****                     break;
2223:..\src/command_processing.c ****                 case DRIVER_VNH5019:
2224:..\src/command_processing.c ****                     strcat(info_string, "Driver type: VNH5019 (High power)\r\n");
2225:..\src/command_processing.c ****                     break;
2226:..\src/command_processing.c ****                 case DRIVER_BRUSHLESS:
2227:..\src/command_processing.c ****                     strcat(info_string, "Driver type: ESC (Brushless)\r\n");
2228:..\src/command_processing.c ****                     break;
2229:..\src/command_processing.c ****                 default:
2230:..\src/command_processing.c ****                     break;
 16841              		.loc 1 2230 0
 16842 153e 52E0     		b	.L644
 16843              	.L642:
2221:..\src/command_processing.c ****                     break;
 16844              		.loc 1 2221 0
 16845 1540 7869     		ldr	r0, [r7, #20]
 16846 1542 FFF7FEFF 		bl	strlen
 16847 1546 0346     		mov	r3, r0
 16848 1548 1A46     		mov	r2, r3
 16849 154a 7B69     		ldr	r3, [r7, #20]
 16850 154c 1344     		add	r3, r3, r2
 16851 154e 454A     		ldr	r2, .L700+40
 16852 1550 1446     		mov	r4, r2
 16853 1552 9E46     		mov	lr, r3
 16854 1554 04F1200C 		add	ip, r4, #32
 16855              	.L643:
 16856 1558 7546     		mov	r5, lr
 16857 155a 2646     		mov	r6, r4
 16858 155c 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 16859 155e 2860     		str	r0, [r5]	@ unaligned
 16860 1560 6960     		str	r1, [r5, #4]	@ unaligned
 16861 1562 AA60     		str	r2, [r5, #8]	@ unaligned
 16862 1564 EB60     		str	r3, [r5, #12]	@ unaligned
 16863 1566 1034     		adds	r4, r4, #16
 16864 1568 0EF1100E 		add	lr, lr, #16
 16865 156c 6445     		cmp	r4, ip
 16866 156e F3D1     		bne	.L643
 16867 1570 7246     		mov	r2, lr
 16868 1572 2346     		mov	r3, r4
 16869 1574 1B88     		ldrh	r3, [r3]	@ unaligned
 16870 1576 1380     		strh	r3, [r2]	@ unaligned
2222:..\src/command_processing.c ****                 case DRIVER_VNH5019:
 16871              		.loc 1 2222 0
 16872 1578 35E0     		b	.L644
 16873              	.L640:
2224:..\src/command_processing.c ****                     break;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 377


 16874              		.loc 1 2224 0
 16875 157a 7869     		ldr	r0, [r7, #20]
 16876 157c FFF7FEFF 		bl	strlen
 16877 1580 0346     		mov	r3, r0
 16878 1582 1A46     		mov	r2, r3
 16879 1584 7B69     		ldr	r3, [r7, #20]
 16880 1586 1344     		add	r3, r3, r2
 16881 1588 374A     		ldr	r2, .L700+44
 16882 158a 1446     		mov	r4, r2
 16883 158c 9E46     		mov	lr, r3
 16884 158e 04F1200C 		add	ip, r4, #32
 16885              	.L645:
 16886 1592 7546     		mov	r5, lr
 16887 1594 2646     		mov	r6, r4
 16888 1596 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 16889 1598 2860     		str	r0, [r5]	@ unaligned
 16890 159a 6960     		str	r1, [r5, #4]	@ unaligned
 16891 159c AA60     		str	r2, [r5, #8]	@ unaligned
 16892 159e EB60     		str	r3, [r5, #12]	@ unaligned
 16893 15a0 1034     		adds	r4, r4, #16
 16894 15a2 0EF1100E 		add	lr, lr, #16
 16895 15a6 6445     		cmp	r4, ip
 16896 15a8 F3D1     		bne	.L645
 16897 15aa 7346     		mov	r3, lr
 16898 15ac 2246     		mov	r2, r4
 16899 15ae 1068     		ldr	r0, [r2]	@ unaligned
 16900 15b0 1860     		str	r0, [r3]	@ unaligned
2225:..\src/command_processing.c ****                 case DRIVER_BRUSHLESS:
 16901              		.loc 1 2225 0
 16902 15b2 18E0     		b	.L644
 16903              	.L641:
2227:..\src/command_processing.c ****                     break;
 16904              		.loc 1 2227 0
 16905 15b4 7869     		ldr	r0, [r7, #20]
 16906 15b6 FFF7FEFF 		bl	strlen
 16907 15ba 0346     		mov	r3, r0
 16908 15bc 1A46     		mov	r2, r3
 16909 15be 7B69     		ldr	r3, [r7, #20]
 16910 15c0 1344     		add	r3, r3, r2
 16911 15c2 2A4A     		ldr	r2, .L700+48
 16912 15c4 1D46     		mov	r5, r3
 16913 15c6 1446     		mov	r4, r2
 16914 15c8 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 16915 15ca 2860     		str	r0, [r5]	@ unaligned
 16916 15cc 6960     		str	r1, [r5, #4]	@ unaligned
 16917 15ce AA60     		str	r2, [r5, #8]	@ unaligned
 16918 15d0 EB60     		str	r3, [r5, #12]	@ unaligned
 16919 15d2 07CC     		ldmia	r4!, {r0, r1, r2}
 16920 15d4 2861     		str	r0, [r5, #16]	@ unaligned
 16921 15d6 6961     		str	r1, [r5, #20]	@ unaligned
 16922 15d8 AA61     		str	r2, [r5, #24]	@ unaligned
 16923 15da 2388     		ldrh	r3, [r4]	@ unaligned
 16924 15dc A278     		ldrb	r2, [r4, #2]
 16925 15de AB83     		strh	r3, [r5, #28]	@ unaligned
 16926 15e0 1346     		mov	r3, r2
 16927 15e2 AB77     		strb	r3, [r5, #30]
2228:..\src/command_processing.c ****                 default:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 378


 16928              		.loc 1 2228 0
 16929 15e4 00BF     		nop
 16930              	.L644:
2231:..\src/command_processing.c ****             }
2232:..\src/command_processing.c ****             sprintf(str, "PWM rate limiter value: %d\r\n", (int)MOT->pwm_rate_limiter);
 16931              		.loc 1 2232 0
 16932 15e6 D7F88430 		ldr	r3, [r7, #132]
 16933 15ea 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 16934 15ee 1A46     		mov	r2, r3
 16935 15f0 07F11C03 		add	r3, r7, #28
 16936 15f4 1E49     		ldr	r1, .L700+52
 16937 15f6 1846     		mov	r0, r3
 16938 15f8 FFF7FEFF 		bl	sprintf
2233:..\src/command_processing.c ****             strcat(info_string, str);
 16939              		.loc 1 2233 0
 16940 15fc 07F11C03 		add	r3, r7, #28
 16941 1600 1946     		mov	r1, r3
 16942 1602 7869     		ldr	r0, [r7, #20]
 16943 1604 FFF7FEFF 		bl	strcat
2234:..\src/command_processing.c ****             if (MOT->not_revers_motor_flag)
 16944              		.loc 1 2234 0
 16945 1608 D7F88430 		ldr	r3, [r7, #132]
 16946 160c 93F86230 		ldrb	r3, [r3, #98]	@ zero_extendqisi2
 16947 1610 002B     		cmp	r3, #0
 16948 1612 31D0     		beq	.L646
2235:..\src/command_processing.c ****                 strcat(info_string, "Not reversible motor: YES\r\n");
 16949              		.loc 1 2235 0
 16950 1614 7869     		ldr	r0, [r7, #20]
 16951 1616 FFF7FEFF 		bl	strlen
 16952 161a 0346     		mov	r3, r0
 16953 161c 1A46     		mov	r2, r3
 16954 161e 7B69     		ldr	r3, [r7, #20]
 16955 1620 1344     		add	r3, r3, r2
 16956 1622 144A     		ldr	r2, .L700+56
 16957 1624 1D46     		mov	r5, r3
 16958 1626 1446     		mov	r4, r2
 16959 1628 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 16960 162a 2860     		str	r0, [r5]	@ unaligned
 16961 162c 6960     		str	r1, [r5, #4]	@ unaligned
 16962 162e AA60     		str	r2, [r5, #8]	@ unaligned
 16963 1630 EB60     		str	r3, [r5, #12]	@ unaligned
 16964 1632 07CC     		ldmia	r4!, {r0, r1, r2}
 16965 1634 2861     		str	r0, [r5, #16]	@ unaligned
 16966 1636 6961     		str	r1, [r5, #20]	@ unaligned
 16967 1638 AA61     		str	r2, [r5, #24]	@ unaligned
 16968 163a 34E0     		b	.L647
 16969              	.L701:
 16970              		.align	2
 16971              	.L700:
 16972 163c 30180000 		.word	.LC220
 16973 1640 68140000 		.word	.LC183
 16974 1644 58110000 		.word	.LC152
 16975 1648 34180000 		.word	.LC221
 16976 164c 64180000 		.word	.LC222
 16977 1650 80180000 		.word	.LC223
 16978 1654 A4180000 		.word	.LC224
 16979 1658 B4180000 		.word	.LC225
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 379


 16980 165c D0180000 		.word	.LC226
 16981 1660 E4180000 		.word	.LC227
 16982 1664 10190000 		.word	.LC228
 16983 1668 34190000 		.word	.LC229
 16984 166c 58190000 		.word	.LC230
 16985 1670 78190000 		.word	.LC231
 16986 1674 98190000 		.word	.LC232
 16987              	.L646:
2236:..\src/command_processing.c ****             else
2237:..\src/command_processing.c ****                 strcat(info_string, "Not reversible motor: NO\r\n");
 16988              		.loc 1 2237 0
 16989 1678 7869     		ldr	r0, [r7, #20]
 16990 167a FFF7FEFF 		bl	strlen
 16991 167e 0346     		mov	r3, r0
 16992 1680 1A46     		mov	r2, r3
 16993 1682 7B69     		ldr	r3, [r7, #20]
 16994 1684 1344     		add	r3, r3, r2
 16995 1686 A24A     		ldr	r2, .L702
 16996 1688 1D46     		mov	r5, r3
 16997 168a 1446     		mov	r4, r2
 16998 168c 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 16999 168e 2860     		str	r0, [r5]	@ unaligned
 17000 1690 6960     		str	r1, [r5, #4]	@ unaligned
 17001 1692 AA60     		str	r2, [r5, #8]	@ unaligned
 17002 1694 EB60     		str	r3, [r5, #12]	@ unaligned
 17003 1696 03CC     		ldmia	r4!, {r0, r1}
 17004 1698 2861     		str	r0, [r5, #16]	@ unaligned
 17005 169a 6961     		str	r1, [r5, #20]	@ unaligned
 17006 169c 2388     		ldrh	r3, [r4]	@ unaligned
 17007 169e A278     		ldrb	r2, [r4, #2]
 17008 16a0 2B83     		strh	r3, [r5, #24]	@ unaligned
 17009 16a2 1346     		mov	r3, r2
 17010 16a4 AB76     		strb	r3, [r5, #26]
 17011              	.L647:
2238:..\src/command_processing.c **** #endif                
2239:..\src/command_processing.c ****             strcat(info_string, "\r\n");
 17012              		.loc 1 2239 0 discriminator 2
 17013 16a6 7869     		ldr	r0, [r7, #20]
 17014 16a8 FFF7FEFF 		bl	strlen
 17015 16ac 0346     		mov	r3, r0
 17016 16ae 1A46     		mov	r2, r3
 17017 16b0 7B69     		ldr	r3, [r7, #20]
 17018 16b2 1344     		add	r3, r3, r2
 17019 16b4 974A     		ldr	r2, .L702+4
 17020 16b6 1188     		ldrh	r1, [r2]	@ unaligned
 17021 16b8 9278     		ldrb	r2, [r2, #2]
 17022 16ba 1980     		strh	r1, [r3]	@ unaligned
 17023 16bc 9A70     		strb	r2, [r3, #2]
 17024              	.LBE26:
1966:..\src/command_processing.c ****             
 17025              		.loc 1 1966 0 discriminator 2
 17026 16be 97F89B30 		ldrb	r3, [r7, #155]	@ zero_extendqisi2
 17027 16c2 0133     		adds	r3, r3, #1
 17028 16c4 87F89B30 		strb	r3, [r7, #155]
 17029              	.L582:
1966:..\src/command_processing.c ****             
 17030              		.loc 1 1966 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 380


 17031 16c8 D7F88C30 		ldr	r3, [r7, #140]
 17032 16cc 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 17033 16d0 97F89B20 		ldrb	r2, [r7, #155]	@ zero_extendqisi2
 17034 16d4 9A42     		cmp	r2, r3
 17035 16d6 7EF625AE 		bls	.L648
 17036              	.LBE25:
2240:..\src/command_processing.c ****         }
2241:..\src/command_processing.c ****       
2242:..\src/command_processing.c ****         strcat(info_string, "EMG CONFIGURATION\r\n");
 17037              		.loc 1 2242 0 is_stmt 1
 17038 16da 7869     		ldr	r0, [r7, #20]
 17039 16dc FFF7FEFF 		bl	strlen
 17040 16e0 0346     		mov	r3, r0
 17041 16e2 1A46     		mov	r2, r3
 17042 16e4 7B69     		ldr	r3, [r7, #20]
 17043 16e6 1344     		add	r3, r3, r2
 17044 16e8 8B4A     		ldr	r2, .L702+8
 17045 16ea 1D46     		mov	r5, r3
 17046 16ec 1446     		mov	r4, r2
 17047 16ee 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 17048 16f0 2860     		str	r0, [r5]	@ unaligned
 17049 16f2 6960     		str	r1, [r5, #4]	@ unaligned
 17050 16f4 AA60     		str	r2, [r5, #8]	@ unaligned
 17051 16f6 EB60     		str	r3, [r5, #12]	@ unaligned
 17052 16f8 2068     		ldr	r0, [r4]	@ unaligned
 17053 16fa 2861     		str	r0, [r5, #16]	@ unaligned
2243:..\src/command_processing.c ****         sprintf(str, "EMG thresholds [0 - 1024]: %u, %u", MEM_P->emg.emg_threshold[0], MEM_P->emg.e
 17054              		.loc 1 2243 0
 17055 16fc D7F88C30 		ldr	r3, [r7, #140]
 17056 1700 B3F8F031 		ldrh	r3, [r3, #496]
 17057 1704 1A46     		mov	r2, r3
 17058 1706 D7F88C30 		ldr	r3, [r7, #140]
 17059 170a B3F8F231 		ldrh	r3, [r3, #498]
 17060 170e 07F11C00 		add	r0, r7, #28
 17061 1712 8249     		ldr	r1, .L702+12
 17062 1714 FFF7FEFF 		bl	sprintf
2244:..\src/command_processing.c ****         strcat(info_string, str);
 17063              		.loc 1 2244 0
 17064 1718 07F11C03 		add	r3, r7, #28
 17065 171c 1946     		mov	r1, r3
 17066 171e 7869     		ldr	r0, [r7, #20]
 17067 1720 FFF7FEFF 		bl	strcat
2245:..\src/command_processing.c ****         strcat(info_string, "\r\n");
 17068              		.loc 1 2245 0
 17069 1724 7869     		ldr	r0, [r7, #20]
 17070 1726 FFF7FEFF 		bl	strlen
 17071 172a 0346     		mov	r3, r0
 17072 172c 1A46     		mov	r2, r3
 17073 172e 7B69     		ldr	r3, [r7, #20]
 17074 1730 1344     		add	r3, r3, r2
 17075 1732 784A     		ldr	r2, .L702+4
 17076 1734 1188     		ldrh	r1, [r2]	@ unaligned
 17077 1736 9278     		ldrb	r2, [r2, #2]
 17078 1738 1980     		strh	r1, [r3]	@ unaligned
 17079 173a 9A70     		strb	r2, [r3, #2]
2246:..\src/command_processing.c **** 
2247:..\src/command_processing.c ****         sprintf(str, "EMG max values [0 - 4096]: %lu, %lu", MEM_P->emg.emg_max_value[0], MEM_P->emg
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 381


 17080              		.loc 1 2247 0
 17081 173c D7F88C30 		ldr	r3, [r7, #140]
 17082 1740 D3F8F421 		ldr	r2, [r3, #500]
 17083 1744 D7F88C30 		ldr	r3, [r7, #140]
 17084 1748 D3F8F831 		ldr	r3, [r3, #504]
 17085 174c 07F11C00 		add	r0, r7, #28
 17086 1750 7349     		ldr	r1, .L702+16
 17087 1752 FFF7FEFF 		bl	sprintf
2248:..\src/command_processing.c ****         strcat(info_string, str);
 17088              		.loc 1 2248 0
 17089 1756 07F11C03 		add	r3, r7, #28
 17090 175a 1946     		mov	r1, r3
 17091 175c 7869     		ldr	r0, [r7, #20]
 17092 175e FFF7FEFF 		bl	strcat
2249:..\src/command_processing.c ****         strcat(info_string, "\r\n");
 17093              		.loc 1 2249 0
 17094 1762 7869     		ldr	r0, [r7, #20]
 17095 1764 FFF7FEFF 		bl	strlen
 17096 1768 0346     		mov	r3, r0
 17097 176a 1A46     		mov	r2, r3
 17098 176c 7B69     		ldr	r3, [r7, #20]
 17099 176e 1344     		add	r3, r3, r2
 17100 1770 684A     		ldr	r2, .L702+4
 17101 1772 1188     		ldrh	r1, [r2]	@ unaligned
 17102 1774 9278     		ldrb	r2, [r2, #2]
 17103 1776 1980     		strh	r1, [r3]	@ unaligned
 17104 1778 9A70     		strb	r2, [r3, #2]
2250:..\src/command_processing.c **** 
2251:..\src/command_processing.c ****         if (MEM_P->emg.switch_emg)
 17105              		.loc 1 2251 0
 17106 177a D7F88C30 		ldr	r3, [r7, #140]
 17107 177e 93F8FF31 		ldrb	r3, [r3, #511]	@ zero_extendqisi2
 17108 1782 002B     		cmp	r3, #0
 17109 1784 13D0     		beq	.L649
2252:..\src/command_processing.c ****             strcat(info_string, "EMG inversion: YES\r\n");
 17110              		.loc 1 2252 0
 17111 1786 7869     		ldr	r0, [r7, #20]
 17112 1788 FFF7FEFF 		bl	strlen
 17113 178c 0346     		mov	r3, r0
 17114 178e 1A46     		mov	r2, r3
 17115 1790 7B69     		ldr	r3, [r7, #20]
 17116 1792 1344     		add	r3, r3, r2
 17117 1794 634A     		ldr	r2, .L702+20
 17118 1796 1D46     		mov	r5, r3
 17119 1798 1446     		mov	r4, r2
 17120 179a 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 17121 179c 2860     		str	r0, [r5]	@ unaligned
 17122 179e 6960     		str	r1, [r5, #4]	@ unaligned
 17123 17a0 AA60     		str	r2, [r5, #8]	@ unaligned
 17124 17a2 EB60     		str	r3, [r5, #12]	@ unaligned
 17125 17a4 2068     		ldr	r0, [r4]	@ unaligned
 17126 17a6 2861     		str	r0, [r5, #16]	@ unaligned
 17127 17a8 2379     		ldrb	r3, [r4, #4]
 17128 17aa 2B75     		strb	r3, [r5, #20]
 17129 17ac 10E0     		b	.L650
 17130              	.L649:
2253:..\src/command_processing.c ****         else
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 382


2254:..\src/command_processing.c ****             strcat(info_string, "EMG inversion: NO\r\n");
 17131              		.loc 1 2254 0
 17132 17ae 7869     		ldr	r0, [r7, #20]
 17133 17b0 FFF7FEFF 		bl	strlen
 17134 17b4 0346     		mov	r3, r0
 17135 17b6 1A46     		mov	r2, r3
 17136 17b8 7B69     		ldr	r3, [r7, #20]
 17137 17ba 1344     		add	r3, r3, r2
 17138 17bc 5A4A     		ldr	r2, .L702+24
 17139 17be 1D46     		mov	r5, r3
 17140 17c0 1446     		mov	r4, r2
 17141 17c2 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 17142 17c4 2860     		str	r0, [r5]	@ unaligned
 17143 17c6 6960     		str	r1, [r5, #4]	@ unaligned
 17144 17c8 AA60     		str	r2, [r5, #8]	@ unaligned
 17145 17ca EB60     		str	r3, [r5, #12]	@ unaligned
 17146 17cc 2068     		ldr	r0, [r4]	@ unaligned
 17147 17ce 2861     		str	r0, [r5, #16]	@ unaligned
 17148              	.L650:
2255:..\src/command_processing.c ****             
2256:..\src/command_processing.c ****         if (MEM_P->emg.emg_calibration_flag)
 17149              		.loc 1 2256 0
 17150 17d0 D7F88C30 		ldr	r3, [r7, #140]
 17151 17d4 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 17152 17d8 002B     		cmp	r3, #0
 17153 17da 17D0     		beq	.L651
2257:..\src/command_processing.c ****             strcat(info_string, "Calibration enabled: YES\r\n");
 17154              		.loc 1 2257 0
 17155 17dc 7869     		ldr	r0, [r7, #20]
 17156 17de FFF7FEFF 		bl	strlen
 17157 17e2 0346     		mov	r3, r0
 17158 17e4 1A46     		mov	r2, r3
 17159 17e6 7B69     		ldr	r3, [r7, #20]
 17160 17e8 1344     		add	r3, r3, r2
 17161 17ea 504A     		ldr	r2, .L702+28
 17162 17ec 1D46     		mov	r5, r3
 17163 17ee 1446     		mov	r4, r2
 17164 17f0 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 17165 17f2 2860     		str	r0, [r5]	@ unaligned
 17166 17f4 6960     		str	r1, [r5, #4]	@ unaligned
 17167 17f6 AA60     		str	r2, [r5, #8]	@ unaligned
 17168 17f8 EB60     		str	r3, [r5, #12]	@ unaligned
 17169 17fa 03CC     		ldmia	r4!, {r0, r1}
 17170 17fc 2861     		str	r0, [r5, #16]	@ unaligned
 17171 17fe 6961     		str	r1, [r5, #20]	@ unaligned
 17172 1800 2388     		ldrh	r3, [r4]	@ unaligned
 17173 1802 A278     		ldrb	r2, [r4, #2]
 17174 1804 2B83     		strh	r3, [r5, #24]	@ unaligned
 17175 1806 1346     		mov	r3, r2
 17176 1808 AB76     		strb	r3, [r5, #26]
 17177 180a 13E0     		b	.L652
 17178              	.L651:
2258:..\src/command_processing.c ****         else
2259:..\src/command_processing.c ****             strcat(info_string, "Calibration enabled: NO\r\n");
 17179              		.loc 1 2259 0
 17180 180c 7869     		ldr	r0, [r7, #20]
 17181 180e FFF7FEFF 		bl	strlen
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 383


 17182 1812 0346     		mov	r3, r0
 17183 1814 1A46     		mov	r2, r3
 17184 1816 7B69     		ldr	r3, [r7, #20]
 17185 1818 1344     		add	r3, r3, r2
 17186 181a 454A     		ldr	r2, .L702+32
 17187 181c 1D46     		mov	r5, r3
 17188 181e 1446     		mov	r4, r2
 17189 1820 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 17190 1822 2860     		str	r0, [r5]	@ unaligned
 17191 1824 6960     		str	r1, [r5, #4]	@ unaligned
 17192 1826 AA60     		str	r2, [r5, #8]	@ unaligned
 17193 1828 EB60     		str	r3, [r5, #12]	@ unaligned
 17194 182a 03CC     		ldmia	r4!, {r0, r1}
 17195 182c 2861     		str	r0, [r5, #16]	@ unaligned
 17196 182e 6961     		str	r1, [r5, #20]	@ unaligned
 17197 1830 2388     		ldrh	r3, [r4]	@ unaligned
 17198 1832 2B83     		strh	r3, [r5, #24]	@ unaligned
 17199              	.L652:
2260:..\src/command_processing.c **** 
2261:..\src/command_processing.c ****         sprintf(str, "EMG max speed: %d %d", (int)MEM_P->emg.emg_speed[0], (int)MEM_P->emg.emg_spee
 17200              		.loc 1 2261 0
 17201 1834 D7F88C30 		ldr	r3, [r7, #140]
 17202 1838 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 17203 183c 1A46     		mov	r2, r3
 17204 183e D7F88C30 		ldr	r3, [r7, #140]
 17205 1842 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 17206 1846 07F11C00 		add	r0, r7, #28
 17207 184a 3A49     		ldr	r1, .L702+36
 17208 184c FFF7FEFF 		bl	sprintf
2262:..\src/command_processing.c ****         strcat(info_string, str);
 17209              		.loc 1 2262 0
 17210 1850 07F11C03 		add	r3, r7, #28
 17211 1854 1946     		mov	r1, r3
 17212 1856 7869     		ldr	r0, [r7, #20]
 17213 1858 FFF7FEFF 		bl	strcat
2263:..\src/command_processing.c ****         strcat(info_string, "\r\n");
 17214              		.loc 1 2263 0
 17215 185c 7869     		ldr	r0, [r7, #20]
 17216 185e FFF7FEFF 		bl	strlen
 17217 1862 0346     		mov	r3, r0
 17218 1864 1A46     		mov	r2, r3
 17219 1866 7B69     		ldr	r3, [r7, #20]
 17220 1868 1344     		add	r3, r3, r2
 17221 186a 2A4A     		ldr	r2, .L702+4
 17222 186c 1188     		ldrh	r1, [r2]	@ unaligned
 17223 186e 9278     		ldrb	r2, [r2, #2]
 17224 1870 1980     		strh	r1, [r3]	@ unaligned
 17225 1872 9A70     		strb	r2, [r3, #2]
2264:..\src/command_processing.c **** 
2265:..\src/command_processing.c ****         if (MEM_P->exp.read_ADC_sensors_port_flag == TRUE){
 17226              		.loc 1 2265 0
 17227 1874 D7F88C30 		ldr	r3, [r7, #140]
 17228 1878 93F82732 		ldrb	r3, [r3, #551]	@ zero_extendqisi2
 17229 187c 012B     		cmp	r3, #1
 17230 187e 40F08A80 		bne	.L653
2266:..\src/command_processing.c ****             strcat(info_string, "Additional ADC sensors value:\r\n");
 17231              		.loc 1 2266 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 384


 17232 1882 7869     		ldr	r0, [r7, #20]
 17233 1884 FFF7FEFF 		bl	strlen
 17234 1888 0346     		mov	r3, r0
 17235 188a 1A46     		mov	r2, r3
 17236 188c 7B69     		ldr	r3, [r7, #20]
 17237 188e 1344     		add	r3, r3, r2
 17238 1890 294A     		ldr	r2, .L702+40
 17239 1892 1C46     		mov	r4, r3
 17240 1894 1546     		mov	r5, r2
 17241 1896 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 17242 1898 2060     		str	r0, [r4]	@ unaligned
 17243 189a 6160     		str	r1, [r4, #4]	@ unaligned
 17244 189c A260     		str	r2, [r4, #8]	@ unaligned
 17245 189e E360     		str	r3, [r4, #12]	@ unaligned
 17246 18a0 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 17247 18a2 2061     		str	r0, [r4, #16]	@ unaligned
 17248 18a4 6161     		str	r1, [r4, #20]	@ unaligned
 17249 18a6 A261     		str	r2, [r4, #24]	@ unaligned
 17250 18a8 E361     		str	r3, [r4, #28]	@ unaligned
2267:..\src/command_processing.c ****             for (i = 0; i < NUM_OF_ADDITIONAL_EMGS; ++i) {
 17251              		.loc 1 2267 0
 17252 18aa 0023     		movs	r3, #0
 17253 18ac C7F89C30 		str	r3, [r7, #156]
 17254 18b0 25E0     		b	.L654
 17255              	.L655:
2268:..\src/command_processing.c ****                 sprintf(str,"ADC %d -> %d", (int)(i + 1), (int) g_adc_meas.add_emg[i]);
 17256              		.loc 1 2268 0 discriminator 3
 17257 18b2 D7F89C30 		ldr	r3, [r7, #156]
 17258 18b6 591C     		adds	r1, r3, #1
 17259 18b8 204A     		ldr	r2, .L702+44
 17260 18ba D7F89C30 		ldr	r3, [r7, #156]
 17261 18be 0233     		adds	r3, r3, #2
 17262 18c0 52F82330 		ldr	r3, [r2, r3, lsl #2]
 17263 18c4 07F11C00 		add	r0, r7, #28
 17264 18c8 0A46     		mov	r2, r1
 17265 18ca 1D49     		ldr	r1, .L702+48
 17266 18cc FFF7FEFF 		bl	sprintf
2269:..\src/command_processing.c ****                 strcat(info_string, str);
 17267              		.loc 1 2269 0 discriminator 3
 17268 18d0 07F11C03 		add	r3, r7, #28
 17269 18d4 1946     		mov	r1, r3
 17270 18d6 7869     		ldr	r0, [r7, #20]
 17271 18d8 FFF7FEFF 		bl	strcat
2270:..\src/command_processing.c ****                 strcat(info_string,"\r\n");
 17272              		.loc 1 2270 0 discriminator 3
 17273 18dc 7869     		ldr	r0, [r7, #20]
 17274 18de FFF7FEFF 		bl	strlen
 17275 18e2 0346     		mov	r3, r0
 17276 18e4 1A46     		mov	r2, r3
 17277 18e6 7B69     		ldr	r3, [r7, #20]
 17278 18e8 1344     		add	r3, r3, r2
 17279 18ea 0A4A     		ldr	r2, .L702+4
 17280 18ec 1188     		ldrh	r1, [r2]	@ unaligned
 17281 18ee 9278     		ldrb	r2, [r2, #2]
 17282 18f0 1980     		strh	r1, [r3]	@ unaligned
 17283 18f2 9A70     		strb	r2, [r3, #2]
2267:..\src/command_processing.c ****                 sprintf(str,"ADC %d -> %d", (int)(i + 1), (int) g_adc_meas.add_emg[i]);
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 385


 17284              		.loc 1 2267 0 discriminator 3
 17285 18f4 D7F89C30 		ldr	r3, [r7, #156]
 17286 18f8 0133     		adds	r3, r3, #1
 17287 18fa C7F89C30 		str	r3, [r7, #156]
 17288              	.L654:
2267:..\src/command_processing.c ****                 sprintf(str,"ADC %d -> %d", (int)(i + 1), (int) g_adc_meas.add_emg[i]);
 17289              		.loc 1 2267 0 is_stmt 0 discriminator 1
 17290 18fe D7F89C30 		ldr	r3, [r7, #156]
 17291 1902 052B     		cmp	r3, #5
 17292 1904 D5DD     		ble	.L655
2271:..\src/command_processing.c ****             }
2272:..\src/command_processing.c ****             for (i = 0; i < NUM_OF_INPUT_EMGS; ++i) {
 17293              		.loc 1 2272 0 is_stmt 1
 17294 1906 0023     		movs	r3, #0
 17295 1908 C7F89C30 		str	r3, [r7, #156]
 17296 190c 3FE0     		b	.L656
 17297              	.L703:
 17298 190e 00BF     		.align	2
 17299              	.L702:
 17300 1910 B4190000 		.word	.LC233
 17301 1914 58110000 		.word	.LC152
 17302 1918 D0190000 		.word	.LC234
 17303 191c E4190000 		.word	.LC235
 17304 1920 081A0000 		.word	.LC236
 17305 1924 2C1A0000 		.word	.LC237
 17306 1928 441A0000 		.word	.LC238
 17307 192c 581A0000 		.word	.LC239
 17308 1930 741A0000 		.word	.LC240
 17309 1934 901A0000 		.word	.LC241
 17310 1938 A81A0000 		.word	.LC242
 17311 193c 00000000 		.word	g_adc_meas
 17312 1940 C81A0000 		.word	.LC243
 17313              	.L657:
2273:..\src/command_processing.c ****                 sprintf(str,"EMG input %d -> %d", (int)(i + 1), (int) g_adc_meas.emg[i]);
 17314              		.loc 1 2273 0 discriminator 3
 17315 1944 D7F89C30 		ldr	r3, [r7, #156]
 17316 1948 591C     		adds	r1, r3, #1
 17317 194a BD4A     		ldr	r2, .L704
 17318 194c D7F89C30 		ldr	r3, [r7, #156]
 17319 1950 52F82330 		ldr	r3, [r2, r3, lsl #2]
 17320 1954 07F11C00 		add	r0, r7, #28
 17321 1958 0A46     		mov	r2, r1
 17322 195a BA49     		ldr	r1, .L704+4
 17323 195c FFF7FEFF 		bl	sprintf
2274:..\src/command_processing.c ****                 strcat(info_string, str);
 17324              		.loc 1 2274 0 discriminator 3
 17325 1960 07F11C03 		add	r3, r7, #28
 17326 1964 1946     		mov	r1, r3
 17327 1966 7869     		ldr	r0, [r7, #20]
 17328 1968 FFF7FEFF 		bl	strcat
2275:..\src/command_processing.c ****                 strcat(info_string,"\r\n");
 17329              		.loc 1 2275 0 discriminator 3
 17330 196c 7869     		ldr	r0, [r7, #20]
 17331 196e FFF7FEFF 		bl	strlen
 17332 1972 0346     		mov	r3, r0
 17333 1974 1A46     		mov	r2, r3
 17334 1976 7B69     		ldr	r3, [r7, #20]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 386


 17335 1978 1344     		add	r3, r3, r2
 17336 197a B34A     		ldr	r2, .L704+8
 17337 197c 1188     		ldrh	r1, [r2]	@ unaligned
 17338 197e 9278     		ldrb	r2, [r2, #2]
 17339 1980 1980     		strh	r1, [r3]	@ unaligned
 17340 1982 9A70     		strb	r2, [r3, #2]
2272:..\src/command_processing.c ****                 sprintf(str,"EMG input %d -> %d", (int)(i + 1), (int) g_adc_meas.emg[i]);
 17341              		.loc 1 2272 0 discriminator 3
 17342 1984 D7F89C30 		ldr	r3, [r7, #156]
 17343 1988 0133     		adds	r3, r3, #1
 17344 198a C7F89C30 		str	r3, [r7, #156]
 17345              	.L656:
2272:..\src/command_processing.c ****                 sprintf(str,"EMG input %d -> %d", (int)(i + 1), (int) g_adc_meas.emg[i]);
 17346              		.loc 1 2272 0 is_stmt 0 discriminator 1
 17347 198e D7F89C30 		ldr	r3, [r7, #156]
 17348 1992 012B     		cmp	r3, #1
 17349 1994 D6DD     		ble	.L657
 17350              	.L653:
2276:..\src/command_processing.c ****             }
2277:..\src/command_processing.c ****         }
2278:..\src/command_processing.c **** 
2279:..\src/command_processing.c **** #ifdef GENERIC_FW
2280:..\src/command_processing.c ****     
2281:..\src/command_processing.c ****         strcat(info_string, "\r\n");
 17351              		.loc 1 2281 0 is_stmt 1
 17352 1996 7869     		ldr	r0, [r7, #20]
 17353 1998 FFF7FEFF 		bl	strlen
 17354 199c 0346     		mov	r3, r0
 17355 199e 1A46     		mov	r2, r3
 17356 19a0 7B69     		ldr	r3, [r7, #20]
 17357 19a2 1344     		add	r3, r3, r2
 17358 19a4 A84A     		ldr	r2, .L704+8
 17359 19a6 1188     		ldrh	r1, [r2]	@ unaligned
 17360 19a8 9278     		ldrb	r2, [r2, #2]
 17361 19aa 1980     		strh	r1, [r3]	@ unaligned
 17362 19ac 9A70     		strb	r2, [r3, #2]
2282:..\src/command_processing.c ****         strcat(info_string, "JOYSTICK CONFIGURATION\r\n");
 17363              		.loc 1 2282 0
 17364 19ae 7869     		ldr	r0, [r7, #20]
 17365 19b0 FFF7FEFF 		bl	strlen
 17366 19b4 0346     		mov	r3, r0
 17367 19b6 1A46     		mov	r2, r3
 17368 19b8 7B69     		ldr	r3, [r7, #20]
 17369 19ba 1344     		add	r3, r3, r2
 17370 19bc A34A     		ldr	r2, .L704+12
 17371 19be 1D46     		mov	r5, r3
 17372 19c0 1446     		mov	r4, r2
 17373 19c2 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 17374 19c4 2860     		str	r0, [r5]	@ unaligned
 17375 19c6 6960     		str	r1, [r5, #4]	@ unaligned
 17376 19c8 AA60     		str	r2, [r5, #8]	@ unaligned
 17377 19ca EB60     		str	r3, [r5, #12]	@ unaligned
 17378 19cc 03CC     		ldmia	r4!, {r0, r1}
 17379 19ce 2861     		str	r0, [r5, #16]	@ unaligned
 17380 19d0 6961     		str	r1, [r5, #20]	@ unaligned
 17381 19d2 2378     		ldrb	r3, [r4]
 17382 19d4 2B76     		strb	r3, [r5, #24]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 387


2283:..\src/command_processing.c ****         sprintf(str, "Closure speed: %d", c_mem.JOY_spec.joystick_closure_speed);
 17383              		.loc 1 2283 0
 17384 19d6 9E4B     		ldr	r3, .L704+16
 17385 19d8 B3F8B032 		ldrh	r3, [r3, #688]
 17386 19dc 1A46     		mov	r2, r3
 17387 19de 07F11C03 		add	r3, r7, #28
 17388 19e2 9C49     		ldr	r1, .L704+20
 17389 19e4 1846     		mov	r0, r3
 17390 19e6 FFF7FEFF 		bl	sprintf
2284:..\src/command_processing.c ****         strcat(info_string, str);
 17391              		.loc 1 2284 0
 17392 19ea 07F11C03 		add	r3, r7, #28
 17393 19ee 1946     		mov	r1, r3
 17394 19f0 7869     		ldr	r0, [r7, #20]
 17395 19f2 FFF7FEFF 		bl	strcat
2285:..\src/command_processing.c ****         strcat(info_string, "\r\n");
 17396              		.loc 1 2285 0
 17397 19f6 7869     		ldr	r0, [r7, #20]
 17398 19f8 FFF7FEFF 		bl	strlen
 17399 19fc 0346     		mov	r3, r0
 17400 19fe 1A46     		mov	r2, r3
 17401 1a00 7B69     		ldr	r3, [r7, #20]
 17402 1a02 1344     		add	r3, r3, r2
 17403 1a04 904A     		ldr	r2, .L704+8
 17404 1a06 1188     		ldrh	r1, [r2]	@ unaligned
 17405 1a08 9278     		ldrb	r2, [r2, #2]
 17406 1a0a 1980     		strh	r1, [r3]	@ unaligned
 17407 1a0c 9A70     		strb	r2, [r3, #2]
2286:..\src/command_processing.c **** 
2287:..\src/command_processing.c ****         sprintf(str, "Joystick Threshold: %d", c_mem.JOY_spec.joystick_threshold);
 17408              		.loc 1 2287 0
 17409 1a0e 904B     		ldr	r3, .L704+16
 17410 1a10 B3F9B232 		ldrsh	r3, [r3, #690]
 17411 1a14 1A46     		mov	r2, r3
 17412 1a16 07F11C03 		add	r3, r7, #28
 17413 1a1a 8F49     		ldr	r1, .L704+24
 17414 1a1c 1846     		mov	r0, r3
 17415 1a1e FFF7FEFF 		bl	sprintf
2288:..\src/command_processing.c ****         strcat(info_string, str);
 17416              		.loc 1 2288 0
 17417 1a22 07F11C03 		add	r3, r7, #28
 17418 1a26 1946     		mov	r1, r3
 17419 1a28 7869     		ldr	r0, [r7, #20]
 17420 1a2a FFF7FEFF 		bl	strcat
2289:..\src/command_processing.c ****         strcat(info_string, "\r\n");
 17421              		.loc 1 2289 0
 17422 1a2e 7869     		ldr	r0, [r7, #20]
 17423 1a30 FFF7FEFF 		bl	strlen
 17424 1a34 0346     		mov	r3, r0
 17425 1a36 1A46     		mov	r2, r3
 17426 1a38 7B69     		ldr	r3, [r7, #20]
 17427 1a3a 1344     		add	r3, r3, r2
 17428 1a3c 824A     		ldr	r2, .L704+8
 17429 1a3e 1188     		ldrh	r1, [r2]	@ unaligned
 17430 1a40 9278     		ldrb	r2, [r2, #2]
 17431 1a42 1980     		strh	r1, [r3]	@ unaligned
 17432 1a44 9A70     		strb	r2, [r3, #2]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 388


2290:..\src/command_processing.c ****         sprintf(str, "Joystick Gains - X:%hu  Y:%hu", c_mem.JOY_spec.joystick_gains[0], c_mem.JOY_s
 17433              		.loc 1 2290 0
 17434 1a46 824B     		ldr	r3, .L704+16
 17435 1a48 B3F8B432 		ldrh	r3, [r3, #692]
 17436 1a4c 1A46     		mov	r2, r3
 17437 1a4e 804B     		ldr	r3, .L704+16
 17438 1a50 B3F8B632 		ldrh	r3, [r3, #694]
 17439 1a54 07F11C00 		add	r0, r7, #28
 17440 1a58 8049     		ldr	r1, .L704+28
 17441 1a5a FFF7FEFF 		bl	sprintf
2291:..\src/command_processing.c ****         strcat(info_string, str);
 17442              		.loc 1 2291 0
 17443 1a5e 07F11C03 		add	r3, r7, #28
 17444 1a62 1946     		mov	r1, r3
 17445 1a64 7869     		ldr	r0, [r7, #20]
 17446 1a66 FFF7FEFF 		bl	strcat
2292:..\src/command_processing.c ****         strcat(info_string, "\r\n");
 17447              		.loc 1 2292 0
 17448 1a6a 7869     		ldr	r0, [r7, #20]
 17449 1a6c FFF7FEFF 		bl	strlen
 17450 1a70 0346     		mov	r3, r0
 17451 1a72 1A46     		mov	r2, r3
 17452 1a74 7B69     		ldr	r3, [r7, #20]
 17453 1a76 1344     		add	r3, r3, r2
 17454 1a78 734A     		ldr	r2, .L704+8
 17455 1a7a 1188     		ldrh	r1, [r2]	@ unaligned
 17456 1a7c 9278     		ldrb	r2, [r2, #2]
 17457 1a7e 1980     		strh	r1, [r3]	@ unaligned
 17458 1a80 9A70     		strb	r2, [r3, #2]
2293:..\src/command_processing.c **** 
2294:..\src/command_processing.c **** #endif
2295:..\src/command_processing.c ****         
2296:..\src/command_processing.c ****         if (MEM_P->SH.rest_position_flag) {
 17459              		.loc 1 2296 0
 17460 1a82 D7F88C30 		ldr	r3, [r7, #140]
 17461 1a86 93F8AC32 		ldrb	r3, [r3, #684]	@ zero_extendqisi2
 17462 1a8a 002B     		cmp	r3, #0
 17463 1a8c 63D0     		beq	.L658
2297:..\src/command_processing.c ****     		sprintf(str, "Rest time delay (ms): %d", (int)MEM_P->SH.rest_delay);
 17464              		.loc 1 2297 0
 17465 1a8e D7F88C30 		ldr	r3, [r7, #140]
 17466 1a92 D3F8A422 		ldr	r2, [r3, #676]
 17467 1a96 07F11C03 		add	r3, r7, #28
 17468 1a9a 7149     		ldr	r1, .L704+32
 17469 1a9c 1846     		mov	r0, r3
 17470 1a9e FFF7FEFF 		bl	sprintf
2298:..\src/command_processing.c ****             strcat(info_string, str);
 17471              		.loc 1 2298 0
 17472 1aa2 07F11C03 		add	r3, r7, #28
 17473 1aa6 1946     		mov	r1, r3
 17474 1aa8 7869     		ldr	r0, [r7, #20]
 17475 1aaa FFF7FEFF 		bl	strcat
2299:..\src/command_processing.c ****             strcat(info_string, "\r\n");
 17476              		.loc 1 2299 0
 17477 1aae 7869     		ldr	r0, [r7, #20]
 17478 1ab0 FFF7FEFF 		bl	strlen
 17479 1ab4 0346     		mov	r3, r0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 389


 17480 1ab6 1A46     		mov	r2, r3
 17481 1ab8 7B69     		ldr	r3, [r7, #20]
 17482 1aba 1344     		add	r3, r3, r2
 17483 1abc 624A     		ldr	r2, .L704+8
 17484 1abe 1188     		ldrh	r1, [r2]	@ unaligned
 17485 1ac0 9278     		ldrb	r2, [r2, #2]
 17486 1ac2 1980     		strh	r1, [r3]	@ unaligned
 17487 1ac4 9A70     		strb	r2, [r3, #2]
2300:..\src/command_processing.c ****             
2301:..\src/command_processing.c ****             sprintf(str, "Rest velocity closure (ticks/sec): %d", (int)MEM_P->SH.rest_vel);
 17488              		.loc 1 2301 0
 17489 1ac6 D7F88C30 		ldr	r3, [r7, #140]
 17490 1aca D3F8A822 		ldr	r2, [r3, #680]
 17491 1ace 07F11C03 		add	r3, r7, #28
 17492 1ad2 6449     		ldr	r1, .L704+36
 17493 1ad4 1846     		mov	r0, r3
 17494 1ad6 FFF7FEFF 		bl	sprintf
2302:..\src/command_processing.c ****             strcat(info_string, str);
 17495              		.loc 1 2302 0
 17496 1ada 07F11C03 		add	r3, r7, #28
 17497 1ade 1946     		mov	r1, r3
 17498 1ae0 7869     		ldr	r0, [r7, #20]
 17499 1ae2 FFF7FEFF 		bl	strcat
2303:..\src/command_processing.c ****             strcat(info_string, "\r\n");
 17500              		.loc 1 2303 0
 17501 1ae6 7869     		ldr	r0, [r7, #20]
 17502 1ae8 FFF7FEFF 		bl	strlen
 17503 1aec 0346     		mov	r3, r0
 17504 1aee 1A46     		mov	r2, r3
 17505 1af0 7B69     		ldr	r3, [r7, #20]
 17506 1af2 1344     		add	r3, r3, r2
 17507 1af4 544A     		ldr	r2, .L704+8
 17508 1af6 1188     		ldrh	r1, [r2]	@ unaligned
 17509 1af8 9278     		ldrb	r2, [r2, #2]
 17510 1afa 1980     		strh	r1, [r3]	@ unaligned
 17511 1afc 9A70     		strb	r2, [r3, #2]
2304:..\src/command_processing.c ****             
2305:..\src/command_processing.c ****             sprintf(str, "Rest position: %d", (int)(MEM_P->SH.rest_pos >> MEM_P->enc[MEM_P->motor[0
 17512              		.loc 1 2305 0
 17513 1afe D7F88C30 		ldr	r3, [r7, #140]
 17514 1b02 D3F8A022 		ldr	r2, [r3, #672]
 17515 1b06 D7F88C30 		ldr	r3, [r7, #140]
 17516 1b0a 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 17517 1b0e 1846     		mov	r0, r3
 17518 1b10 D7F88C10 		ldr	r1, [r7, #140]
 17519 1b14 0346     		mov	r3, r0
 17520 1b16 5B00     		lsls	r3, r3, #1
 17521 1b18 0344     		add	r3, r3, r0
 17522 1b1a 1B01     		lsls	r3, r3, #4
 17523 1b1c 0B44     		add	r3, r3, r1
 17524 1b1e 03F29513 		addw	r3, r3, #405
 17525 1b22 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 17526 1b24 1A41     		asrs	r2, r2, r3
 17527 1b26 07F11C03 		add	r3, r7, #28
 17528 1b2a 4F49     		ldr	r1, .L704+40
 17529 1b2c 1846     		mov	r0, r3
 17530 1b2e FFF7FEFF 		bl	sprintf
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 390


2306:..\src/command_processing.c ****             strcat(info_string, str);
 17531              		.loc 1 2306 0
 17532 1b32 07F11C03 		add	r3, r7, #28
 17533 1b36 1946     		mov	r1, r3
 17534 1b38 7869     		ldr	r0, [r7, #20]
 17535 1b3a FFF7FEFF 		bl	strcat
2307:..\src/command_processing.c ****             strcat(info_string, "\r\n");  
 17536              		.loc 1 2307 0
 17537 1b3e 7869     		ldr	r0, [r7, #20]
 17538 1b40 FFF7FEFF 		bl	strlen
 17539 1b44 0346     		mov	r3, r0
 17540 1b46 1A46     		mov	r2, r3
 17541 1b48 7B69     		ldr	r3, [r7, #20]
 17542 1b4a 1344     		add	r3, r3, r2
 17543 1b4c 3E4A     		ldr	r2, .L704+8
 17544 1b4e 1188     		ldrh	r1, [r2]	@ unaligned
 17545 1b50 9278     		ldrb	r2, [r2, #2]
 17546 1b52 1980     		strh	r1, [r3]	@ unaligned
 17547 1b54 9A70     		strb	r2, [r3, #2]
 17548              	.L658:
2308:..\src/command_processing.c ****         }
2309:..\src/command_processing.c **** 
2310:..\src/command_processing.c ****         if (MEM_P->imu.read_imu_flag) {
 17549              		.loc 1 2310 0
 17550 1b56 D7F88C30 		ldr	r3, [r7, #140]
 17551 1b5a 93F80032 		ldrb	r3, [r3, #512]	@ zero_extendqisi2
 17552 1b5e 002B     		cmp	r3, #0
 17553 1b60 00F0D281 		beq	.L659
2311:..\src/command_processing.c ****             sprintf(str, "IMU Connected: %d\r\n", (int) N_IMU_Connected);
 17554              		.loc 1 2311 0
 17555 1b64 414B     		ldr	r3, .L704+44
 17556 1b66 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 17557 1b68 1A46     		mov	r2, r3
 17558 1b6a 07F11C03 		add	r3, r7, #28
 17559 1b6e 4049     		ldr	r1, .L704+48
 17560 1b70 1846     		mov	r0, r3
 17561 1b72 FFF7FEFF 		bl	sprintf
2312:..\src/command_processing.c ****             strcat(info_string, str);
 17562              		.loc 1 2312 0
 17563 1b76 07F11C03 		add	r3, r7, #28
 17564 1b7a 1946     		mov	r1, r3
 17565 1b7c 7869     		ldr	r0, [r7, #20]
 17566 1b7e FFF7FEFF 		bl	strcat
2313:..\src/command_processing.c ****             
2314:..\src/command_processing.c ****             strcat(info_string, "\r\n");
 17567              		.loc 1 2314 0
 17568 1b82 7869     		ldr	r0, [r7, #20]
 17569 1b84 FFF7FEFF 		bl	strlen
 17570 1b88 0346     		mov	r3, r0
 17571 1b8a 1A46     		mov	r2, r3
 17572 1b8c 7B69     		ldr	r3, [r7, #20]
 17573 1b8e 1344     		add	r3, r3, r2
 17574 1b90 2D4A     		ldr	r2, .L704+8
 17575 1b92 1188     		ldrh	r1, [r2]	@ unaligned
 17576 1b94 9278     		ldrb	r2, [r2, #2]
 17577 1b96 1980     		strh	r1, [r3]	@ unaligned
 17578 1b98 9A70     		strb	r2, [r3, #2]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 391


2315:..\src/command_processing.c ****             
2316:..\src/command_processing.c ****             strcat(info_string, "IMUs CONFIGURATION\r\n");
 17579              		.loc 1 2316 0
 17580 1b9a 7869     		ldr	r0, [r7, #20]
 17581 1b9c FFF7FEFF 		bl	strlen
 17582 1ba0 0346     		mov	r3, r0
 17583 1ba2 1A46     		mov	r2, r3
 17584 1ba4 7B69     		ldr	r3, [r7, #20]
 17585 1ba6 1344     		add	r3, r3, r2
 17586 1ba8 324A     		ldr	r2, .L704+52
 17587 1baa 1D46     		mov	r5, r3
 17588 1bac 1446     		mov	r4, r2
 17589 1bae 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 17590 1bb0 2860     		str	r0, [r5]	@ unaligned
 17591 1bb2 6960     		str	r1, [r5, #4]	@ unaligned
 17592 1bb4 AA60     		str	r2, [r5, #8]	@ unaligned
 17593 1bb6 EB60     		str	r3, [r5, #12]	@ unaligned
 17594 1bb8 2068     		ldr	r0, [r4]	@ unaligned
 17595 1bba 2861     		str	r0, [r5, #16]	@ unaligned
 17596 1bbc 2379     		ldrb	r3, [r4, #4]
 17597 1bbe 2B75     		strb	r3, [r5, #20]
2317:..\src/command_processing.c ****             for (i=0; i<N_IMU_Connected; i++){
 17598              		.loc 1 2317 0
 17599 1bc0 0023     		movs	r3, #0
 17600 1bc2 C7F89C30 		str	r3, [r7, #156]
 17601 1bc6 88E1     		b	.L660
 17602              	.L671:
2318:..\src/command_processing.c ****                 sprintf(str, "Imu %d \r\n\tID: %d\r\n", i, (int) IMU_connected[i]);
 17603              		.loc 1 2318 0
 17604 1bc8 2B4A     		ldr	r2, .L704+56
 17605 1bca D7F89C30 		ldr	r3, [r7, #156]
 17606 1bce 1344     		add	r3, r3, r2
 17607 1bd0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 17608 1bd2 07F11C00 		add	r0, r7, #28
 17609 1bd6 D7F89C20 		ldr	r2, [r7, #156]
 17610 1bda 2849     		ldr	r1, .L704+60
 17611 1bdc FFF7FEFF 		bl	sprintf
2319:..\src/command_processing.c ****                 strcat(info_string, str);
 17612              		.loc 1 2319 0
 17613 1be0 07F11C03 		add	r3, r7, #28
 17614 1be4 1946     		mov	r1, r3
 17615 1be6 7869     		ldr	r0, [r7, #20]
 17616 1be8 FFF7FEFF 		bl	strcat
2320:..\src/command_processing.c ****                 
2321:..\src/command_processing.c ****                 sprintf(str, "\tAccelerometers: ");
 17617              		.loc 1 2321 0
 17618 1bec 07F11C03 		add	r3, r7, #28
 17619 1bf0 234A     		ldr	r2, .L704+64
 17620 1bf2 1C46     		mov	r4, r3
 17621 1bf4 1546     		mov	r5, r2
 17622 1bf6 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 17623 1bf8 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 17624 1bfa 2B68     		ldr	r3, [r5]
 17625 1bfc 2380     		strh	r3, [r4]	@ movhi
2322:..\src/command_processing.c ****                 if ((MEM_P->imu.IMU_conf[IMU_connected[i]][0]))
 17626              		.loc 1 2322 0
 17627 1bfe 1E4A     		ldr	r2, .L704+56
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 392


 17628 1c00 D7F89C30 		ldr	r3, [r7, #156]
 17629 1c04 1344     		add	r3, r3, r2
 17630 1c06 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 17631 1c08 1946     		mov	r1, r3
 17632 1c0a D7F88C20 		ldr	r2, [r7, #140]
 17633 1c0e 0B46     		mov	r3, r1
 17634 1c10 9B00     		lsls	r3, r3, #2
 17635 1c12 0B44     		add	r3, r3, r1
 17636 1c14 1344     		add	r3, r3, r2
 17637 1c16 03F20223 		addw	r3, r3, #514
 17638 1c1a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 17639 1c1c 002B     		cmp	r3, #0
 17640 1c1e 33D0     		beq	.L661
2323:..\src/command_processing.c ****                     strcat(str, "YES\r\n");
 17641              		.loc 1 2323 0
 17642 1c20 07F11C03 		add	r3, r7, #28
 17643 1c24 1846     		mov	r0, r3
 17644 1c26 FFF7FEFF 		bl	strlen
 17645 1c2a 0346     		mov	r3, r0
 17646 1c2c 1A46     		mov	r2, r3
 17647 1c2e 07F11C03 		add	r3, r7, #28
 17648 1c32 1344     		add	r3, r3, r2
 17649 1c34 134A     		ldr	r2, .L704+68
 17650 1c36 1068     		ldr	r0, [r2]	@ unaligned
 17651 1c38 1860     		str	r0, [r3]	@ unaligned
 17652 1c3a 9288     		ldrh	r2, [r2, #4]	@ unaligned
 17653 1c3c 9A80     		strh	r2, [r3, #4]	@ unaligned
 17654 1c3e 32E0     		b	.L662
 17655              	.L705:
 17656              		.align	2
 17657              	.L704:
 17658 1c40 00000000 		.word	g_adc_meas
 17659 1c44 D81A0000 		.word	.LC244
 17660 1c48 58110000 		.word	.LC152
 17661 1c4c EC1A0000 		.word	.LC245
 17662 1c50 00000000 		.word	c_mem
 17663 1c54 081B0000 		.word	.LC246
 17664 1c58 1C1B0000 		.word	.LC247
 17665 1c5c 341B0000 		.word	.LC248
 17666 1c60 541B0000 		.word	.LC249
 17667 1c64 701B0000 		.word	.LC250
 17668 1c68 981B0000 		.word	.LC251
 17669 1c6c 00000000 		.word	N_IMU_Connected
 17670 1c70 AC1B0000 		.word	.LC252
 17671 1c74 C01B0000 		.word	.LC253
 17672 1c78 00000000 		.word	IMU_connected
 17673 1c7c D81B0000 		.word	.LC254
 17674 1c80 EC1B0000 		.word	.LC255
 17675 1c84 F4130000 		.word	.LC174
 17676              	.L661:
2324:..\src/command_processing.c ****                 else
2325:..\src/command_processing.c ****                     strcat(str, "NO\r\n"); 
 17677              		.loc 1 2325 0
 17678 1c88 07F11C03 		add	r3, r7, #28
 17679 1c8c 1846     		mov	r0, r3
 17680 1c8e FFF7FEFF 		bl	strlen
 17681 1c92 0346     		mov	r3, r0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 393


 17682 1c94 1A46     		mov	r2, r3
 17683 1c96 07F11C03 		add	r3, r7, #28
 17684 1c9a 1344     		add	r3, r3, r2
 17685 1c9c BD4A     		ldr	r2, .L706
 17686 1c9e 1068     		ldr	r0, [r2]	@ unaligned
 17687 1ca0 1860     		str	r0, [r3]	@ unaligned
 17688 1ca2 1279     		ldrb	r2, [r2, #4]
 17689 1ca4 1A71     		strb	r2, [r3, #4]
 17690              	.L662:
2326:..\src/command_processing.c ****                 strcat(str, "\tGyroscopes: ");
 17691              		.loc 1 2326 0
 17692 1ca6 07F11C03 		add	r3, r7, #28
 17693 1caa 1846     		mov	r0, r3
 17694 1cac FFF7FEFF 		bl	strlen
 17695 1cb0 0346     		mov	r3, r0
 17696 1cb2 1A46     		mov	r2, r3
 17697 1cb4 07F11C03 		add	r3, r7, #28
 17698 1cb8 1344     		add	r3, r3, r2
 17699 1cba B74A     		ldr	r2, .L706+4
 17700 1cbc 1C46     		mov	r4, r3
 17701 1cbe 1346     		mov	r3, r2
 17702 1cc0 07CB     		ldmia	r3!, {r0, r1, r2}
 17703 1cc2 2060     		str	r0, [r4]	@ unaligned
 17704 1cc4 6160     		str	r1, [r4, #4]	@ unaligned
 17705 1cc6 A260     		str	r2, [r4, #8]	@ unaligned
 17706 1cc8 1B88     		ldrh	r3, [r3]	@ unaligned
 17707 1cca A381     		strh	r3, [r4, #12]	@ unaligned
2327:..\src/command_processing.c ****                 if ((MEM_P->imu.IMU_conf[IMU_connected[i]][1]))
 17708              		.loc 1 2327 0
 17709 1ccc B34A     		ldr	r2, .L706+8
 17710 1cce D7F89C30 		ldr	r3, [r7, #156]
 17711 1cd2 1344     		add	r3, r3, r2
 17712 1cd4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 17713 1cd6 1946     		mov	r1, r3
 17714 1cd8 D7F88C20 		ldr	r2, [r7, #140]
 17715 1cdc 0B46     		mov	r3, r1
 17716 1cde 9B00     		lsls	r3, r3, #2
 17717 1ce0 0B44     		add	r3, r3, r1
 17718 1ce2 1344     		add	r3, r3, r2
 17719 1ce4 03F20323 		addw	r3, r3, #515
 17720 1ce8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 17721 1cea 002B     		cmp	r3, #0
 17722 1cec 0FD0     		beq	.L663
2328:..\src/command_processing.c ****                     strcat(str, "YES\r\n");
 17723              		.loc 1 2328 0
 17724 1cee 07F11C03 		add	r3, r7, #28
 17725 1cf2 1846     		mov	r0, r3
 17726 1cf4 FFF7FEFF 		bl	strlen
 17727 1cf8 0346     		mov	r3, r0
 17728 1cfa 1A46     		mov	r2, r3
 17729 1cfc 07F11C03 		add	r3, r7, #28
 17730 1d00 1344     		add	r3, r3, r2
 17731 1d02 A74A     		ldr	r2, .L706+12
 17732 1d04 1068     		ldr	r0, [r2]	@ unaligned
 17733 1d06 1860     		str	r0, [r3]	@ unaligned
 17734 1d08 9288     		ldrh	r2, [r2, #4]	@ unaligned
 17735 1d0a 9A80     		strh	r2, [r3, #4]	@ unaligned
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 394


 17736 1d0c 0EE0     		b	.L664
 17737              	.L663:
2329:..\src/command_processing.c ****                 else
2330:..\src/command_processing.c ****                     strcat(str, "NO\r\n"); 
 17738              		.loc 1 2330 0
 17739 1d0e 07F11C03 		add	r3, r7, #28
 17740 1d12 1846     		mov	r0, r3
 17741 1d14 FFF7FEFF 		bl	strlen
 17742 1d18 0346     		mov	r3, r0
 17743 1d1a 1A46     		mov	r2, r3
 17744 1d1c 07F11C03 		add	r3, r7, #28
 17745 1d20 1344     		add	r3, r3, r2
 17746 1d22 9C4A     		ldr	r2, .L706
 17747 1d24 1068     		ldr	r0, [r2]	@ unaligned
 17748 1d26 1860     		str	r0, [r3]	@ unaligned
 17749 1d28 1279     		ldrb	r2, [r2, #4]
 17750 1d2a 1A71     		strb	r2, [r3, #4]
 17751              	.L664:
2331:..\src/command_processing.c ****                 strcat(str, "\tMagnetometers: ");
 17752              		.loc 1 2331 0
 17753 1d2c 07F11C03 		add	r3, r7, #28
 17754 1d30 1846     		mov	r0, r3
 17755 1d32 FFF7FEFF 		bl	strlen
 17756 1d36 0346     		mov	r3, r0
 17757 1d38 1A46     		mov	r2, r3
 17758 1d3a 07F11C03 		add	r3, r7, #28
 17759 1d3e 1344     		add	r3, r3, r2
 17760 1d40 984A     		ldr	r2, .L706+16
 17761 1d42 1D46     		mov	r5, r3
 17762 1d44 1446     		mov	r4, r2
 17763 1d46 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 17764 1d48 2860     		str	r0, [r5]	@ unaligned
 17765 1d4a 6960     		str	r1, [r5, #4]	@ unaligned
 17766 1d4c AA60     		str	r2, [r5, #8]	@ unaligned
 17767 1d4e EB60     		str	r3, [r5, #12]	@ unaligned
 17768 1d50 2378     		ldrb	r3, [r4]
 17769 1d52 2B74     		strb	r3, [r5, #16]
2332:..\src/command_processing.c ****                 if ((MEM_P->imu.IMU_conf[IMU_connected[i]][2]))
 17770              		.loc 1 2332 0
 17771 1d54 914A     		ldr	r2, .L706+8
 17772 1d56 D7F89C30 		ldr	r3, [r7, #156]
 17773 1d5a 1344     		add	r3, r3, r2
 17774 1d5c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 17775 1d5e 1946     		mov	r1, r3
 17776 1d60 D7F88C20 		ldr	r2, [r7, #140]
 17777 1d64 0B46     		mov	r3, r1
 17778 1d66 9B00     		lsls	r3, r3, #2
 17779 1d68 0B44     		add	r3, r3, r1
 17780 1d6a 1344     		add	r3, r3, r2
 17781 1d6c 03F50173 		add	r3, r3, #516
 17782 1d70 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 17783 1d72 002B     		cmp	r3, #0
 17784 1d74 0FD0     		beq	.L665
2333:..\src/command_processing.c ****                     strcat(str, "YES\r\n");
 17785              		.loc 1 2333 0
 17786 1d76 07F11C03 		add	r3, r7, #28
 17787 1d7a 1846     		mov	r0, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 395


 17788 1d7c FFF7FEFF 		bl	strlen
 17789 1d80 0346     		mov	r3, r0
 17790 1d82 1A46     		mov	r2, r3
 17791 1d84 07F11C03 		add	r3, r7, #28
 17792 1d88 1344     		add	r3, r3, r2
 17793 1d8a 854A     		ldr	r2, .L706+12
 17794 1d8c 1068     		ldr	r0, [r2]	@ unaligned
 17795 1d8e 1860     		str	r0, [r3]	@ unaligned
 17796 1d90 9288     		ldrh	r2, [r2, #4]	@ unaligned
 17797 1d92 9A80     		strh	r2, [r3, #4]	@ unaligned
 17798 1d94 0EE0     		b	.L666
 17799              	.L665:
2334:..\src/command_processing.c ****                 else
2335:..\src/command_processing.c ****                     strcat(str, "NO\r\n");
 17800              		.loc 1 2335 0
 17801 1d96 07F11C03 		add	r3, r7, #28
 17802 1d9a 1846     		mov	r0, r3
 17803 1d9c FFF7FEFF 		bl	strlen
 17804 1da0 0346     		mov	r3, r0
 17805 1da2 1A46     		mov	r2, r3
 17806 1da4 07F11C03 		add	r3, r7, #28
 17807 1da8 1344     		add	r3, r3, r2
 17808 1daa 7A4A     		ldr	r2, .L706
 17809 1dac 1068     		ldr	r0, [r2]	@ unaligned
 17810 1dae 1860     		str	r0, [r3]	@ unaligned
 17811 1db0 1279     		ldrb	r2, [r2, #4]
 17812 1db2 1A71     		strb	r2, [r3, #4]
 17813              	.L666:
2336:..\src/command_processing.c ****                 strcat(str, "\tQuaternion: ");                
 17814              		.loc 1 2336 0
 17815 1db4 07F11C03 		add	r3, r7, #28
 17816 1db8 1846     		mov	r0, r3
 17817 1dba FFF7FEFF 		bl	strlen
 17818 1dbe 0346     		mov	r3, r0
 17819 1dc0 1A46     		mov	r2, r3
 17820 1dc2 07F11C03 		add	r3, r7, #28
 17821 1dc6 1344     		add	r3, r3, r2
 17822 1dc8 774A     		ldr	r2, .L706+20
 17823 1dca 1C46     		mov	r4, r3
 17824 1dcc 1346     		mov	r3, r2
 17825 1dce 07CB     		ldmia	r3!, {r0, r1, r2}
 17826 1dd0 2060     		str	r0, [r4]	@ unaligned
 17827 1dd2 6160     		str	r1, [r4, #4]	@ unaligned
 17828 1dd4 A260     		str	r2, [r4, #8]	@ unaligned
 17829 1dd6 1B88     		ldrh	r3, [r3]	@ unaligned
 17830 1dd8 A381     		strh	r3, [r4, #12]	@ unaligned
2337:..\src/command_processing.c ****                 if ((MEM_P->imu.IMU_conf[IMU_connected[i]][3]))
 17831              		.loc 1 2337 0
 17832 1dda 704A     		ldr	r2, .L706+8
 17833 1ddc D7F89C30 		ldr	r3, [r7, #156]
 17834 1de0 1344     		add	r3, r3, r2
 17835 1de2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 17836 1de4 1946     		mov	r1, r3
 17837 1de6 D7F88C20 		ldr	r2, [r7, #140]
 17838 1dea 0B46     		mov	r3, r1
 17839 1dec 9B00     		lsls	r3, r3, #2
 17840 1dee 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 396


 17841 1df0 1344     		add	r3, r3, r2
 17842 1df2 03F20523 		addw	r3, r3, #517
 17843 1df6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 17844 1df8 002B     		cmp	r3, #0
 17845 1dfa 0FD0     		beq	.L667
2338:..\src/command_processing.c ****                     strcat(str, "YES\r\n");
 17846              		.loc 1 2338 0
 17847 1dfc 07F11C03 		add	r3, r7, #28
 17848 1e00 1846     		mov	r0, r3
 17849 1e02 FFF7FEFF 		bl	strlen
 17850 1e06 0346     		mov	r3, r0
 17851 1e08 1A46     		mov	r2, r3
 17852 1e0a 07F11C03 		add	r3, r7, #28
 17853 1e0e 1344     		add	r3, r3, r2
 17854 1e10 634A     		ldr	r2, .L706+12
 17855 1e12 1068     		ldr	r0, [r2]	@ unaligned
 17856 1e14 1860     		str	r0, [r3]	@ unaligned
 17857 1e16 9288     		ldrh	r2, [r2, #4]	@ unaligned
 17858 1e18 9A80     		strh	r2, [r3, #4]	@ unaligned
 17859 1e1a 0EE0     		b	.L668
 17860              	.L667:
2339:..\src/command_processing.c ****                 else
2340:..\src/command_processing.c ****                     strcat(str, "NO\r\n");
 17861              		.loc 1 2340 0
 17862 1e1c 07F11C03 		add	r3, r7, #28
 17863 1e20 1846     		mov	r0, r3
 17864 1e22 FFF7FEFF 		bl	strlen
 17865 1e26 0346     		mov	r3, r0
 17866 1e28 1A46     		mov	r2, r3
 17867 1e2a 07F11C03 		add	r3, r7, #28
 17868 1e2e 1344     		add	r3, r3, r2
 17869 1e30 584A     		ldr	r2, .L706
 17870 1e32 1068     		ldr	r0, [r2]	@ unaligned
 17871 1e34 1860     		str	r0, [r3]	@ unaligned
 17872 1e36 1279     		ldrb	r2, [r2, #4]
 17873 1e38 1A71     		strb	r2, [r3, #4]
 17874              	.L668:
2341:..\src/command_processing.c ****                 strcat(str, "\tTemperature: ");
 17875              		.loc 1 2341 0
 17876 1e3a 07F11C03 		add	r3, r7, #28
 17877 1e3e 1846     		mov	r0, r3
 17878 1e40 FFF7FEFF 		bl	strlen
 17879 1e44 0346     		mov	r3, r0
 17880 1e46 1A46     		mov	r2, r3
 17881 1e48 07F11C03 		add	r3, r7, #28
 17882 1e4c 1344     		add	r3, r3, r2
 17883 1e4e 574A     		ldr	r2, .L706+24
 17884 1e50 1C46     		mov	r4, r3
 17885 1e52 1346     		mov	r3, r2
 17886 1e54 07CB     		ldmia	r3!, {r0, r1, r2}
 17887 1e56 2060     		str	r0, [r4]	@ unaligned
 17888 1e58 6160     		str	r1, [r4, #4]	@ unaligned
 17889 1e5a A260     		str	r2, [r4, #8]	@ unaligned
 17890 1e5c 1A88     		ldrh	r2, [r3]	@ unaligned
 17891 1e5e 9B78     		ldrb	r3, [r3, #2]
 17892 1e60 A281     		strh	r2, [r4, #12]	@ unaligned
 17893 1e62 A373     		strb	r3, [r4, #14]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 397


2342:..\src/command_processing.c ****                 if ((MEM_P->imu.IMU_conf[IMU_connected[i]][4]))
 17894              		.loc 1 2342 0
 17895 1e64 4D4A     		ldr	r2, .L706+8
 17896 1e66 D7F89C30 		ldr	r3, [r7, #156]
 17897 1e6a 1344     		add	r3, r3, r2
 17898 1e6c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 17899 1e6e 1946     		mov	r1, r3
 17900 1e70 D7F88C20 		ldr	r2, [r7, #140]
 17901 1e74 0B46     		mov	r3, r1
 17902 1e76 9B00     		lsls	r3, r3, #2
 17903 1e78 0B44     		add	r3, r3, r1
 17904 1e7a 1344     		add	r3, r3, r2
 17905 1e7c 03F20623 		addw	r3, r3, #518
 17906 1e80 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 17907 1e82 002B     		cmp	r3, #0
 17908 1e84 0FD0     		beq	.L669
2343:..\src/command_processing.c ****                     strcat(str, "YES\r\n");
 17909              		.loc 1 2343 0
 17910 1e86 07F11C03 		add	r3, r7, #28
 17911 1e8a 1846     		mov	r0, r3
 17912 1e8c FFF7FEFF 		bl	strlen
 17913 1e90 0346     		mov	r3, r0
 17914 1e92 1A46     		mov	r2, r3
 17915 1e94 07F11C03 		add	r3, r7, #28
 17916 1e98 1344     		add	r3, r3, r2
 17917 1e9a 414A     		ldr	r2, .L706+12
 17918 1e9c 1068     		ldr	r0, [r2]	@ unaligned
 17919 1e9e 1860     		str	r0, [r3]	@ unaligned
 17920 1ea0 9288     		ldrh	r2, [r2, #4]	@ unaligned
 17921 1ea2 9A80     		strh	r2, [r3, #4]	@ unaligned
 17922 1ea4 0EE0     		b	.L670
 17923              	.L669:
2344:..\src/command_processing.c ****                 else
2345:..\src/command_processing.c ****                     strcat(str, "NO\r\n");
 17924              		.loc 1 2345 0
 17925 1ea6 07F11C03 		add	r3, r7, #28
 17926 1eaa 1846     		mov	r0, r3
 17927 1eac FFF7FEFF 		bl	strlen
 17928 1eb0 0346     		mov	r3, r0
 17929 1eb2 1A46     		mov	r2, r3
 17930 1eb4 07F11C03 		add	r3, r7, #28
 17931 1eb8 1344     		add	r3, r3, r2
 17932 1eba 364A     		ldr	r2, .L706
 17933 1ebc 1068     		ldr	r0, [r2]	@ unaligned
 17934 1ebe 1860     		str	r0, [r3]	@ unaligned
 17935 1ec0 1279     		ldrb	r2, [r2, #4]
 17936 1ec2 1A71     		strb	r2, [r3, #4]
 17937              	.L670:
2346:..\src/command_processing.c ****                      
2347:..\src/command_processing.c ****                 strcat(info_string, str);
 17938              		.loc 1 2347 0 discriminator 2
 17939 1ec4 07F11C03 		add	r3, r7, #28
 17940 1ec8 1946     		mov	r1, r3
 17941 1eca 7869     		ldr	r0, [r7, #20]
 17942 1ecc FFF7FEFF 		bl	strcat
2317:..\src/command_processing.c ****                 sprintf(str, "Imu %d \r\n\tID: %d\r\n", i, (int) IMU_connected[i]);
 17943              		.loc 1 2317 0 discriminator 2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 398


 17944 1ed0 D7F89C30 		ldr	r3, [r7, #156]
 17945 1ed4 0133     		adds	r3, r3, #1
 17946 1ed6 C7F89C30 		str	r3, [r7, #156]
 17947              	.L660:
2317:..\src/command_processing.c ****                 sprintf(str, "Imu %d \r\n\tID: %d\r\n", i, (int) IMU_connected[i]);
 17948              		.loc 1 2317 0 is_stmt 0 discriminator 1
 17949 1eda 354B     		ldr	r3, .L706+28
 17950 1edc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 17951 1ede 1A46     		mov	r2, r3
 17952 1ee0 D7F89C30 		ldr	r3, [r7, #156]
 17953 1ee4 9A42     		cmp	r2, r3
 17954 1ee6 3FF76FAE 		bgt	.L671
2348:..\src/command_processing.c ****             }       
2349:..\src/command_processing.c ****             
2350:..\src/command_processing.c ****             strcat(info_string, "\r\n");
 17955              		.loc 1 2350 0 is_stmt 1
 17956 1eea 7869     		ldr	r0, [r7, #20]
 17957 1eec FFF7FEFF 		bl	strlen
 17958 1ef0 0346     		mov	r3, r0
 17959 1ef2 1A46     		mov	r2, r3
 17960 1ef4 7B69     		ldr	r3, [r7, #20]
 17961 1ef6 1344     		add	r3, r3, r2
 17962 1ef8 2E4A     		ldr	r2, .L706+32
 17963 1efa 1188     		ldrh	r1, [r2]	@ unaligned
 17964 1efc 9278     		ldrb	r2, [r2, #2]
 17965 1efe 1980     		strh	r1, [r3]	@ unaligned
 17966 1f00 9A70     		strb	r2, [r3, #2]
2351:..\src/command_processing.c ****           
2352:..\src/command_processing.c ****             IMU_reading_info(info_string);
 17967              		.loc 1 2352 0
 17968 1f02 7869     		ldr	r0, [r7, #20]
 17969 1f04 FFF7FEFF 		bl	IMU_reading_info
 17970              	.L659:
2353:..\src/command_processing.c ****         }
2354:..\src/command_processing.c ****         
2355:..\src/command_processing.c ****         strcat(info_string, "\r\n");
 17971              		.loc 1 2355 0
 17972 1f08 7869     		ldr	r0, [r7, #20]
 17973 1f0a FFF7FEFF 		bl	strlen
 17974 1f0e 0346     		mov	r3, r0
 17975 1f10 1A46     		mov	r2, r3
 17976 1f12 7B69     		ldr	r3, [r7, #20]
 17977 1f14 1344     		add	r3, r3, r2
 17978 1f16 274A     		ldr	r2, .L706+32
 17979 1f18 1188     		ldrh	r1, [r2]	@ unaligned
 17980 1f1a 9278     		ldrb	r2, [r2, #2]
 17981 1f1c 1980     		strh	r1, [r3]	@ unaligned
 17982 1f1e 9A70     		strb	r2, [r3, #2]
2356:..\src/command_processing.c **** 
2357:..\src/command_processing.c **** #ifdef GENERIC_FW   
2358:..\src/command_processing.c ****         int j;
2359:..\src/command_processing.c ****         strcat(info_string, "ENCODER CONFIGURATION\r\n");
 17983              		.loc 1 2359 0
 17984 1f20 7869     		ldr	r0, [r7, #20]
 17985 1f22 FFF7FEFF 		bl	strlen
 17986 1f26 0346     		mov	r3, r0
 17987 1f28 1A46     		mov	r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 399


 17988 1f2a 7B69     		ldr	r3, [r7, #20]
 17989 1f2c 1344     		add	r3, r3, r2
 17990 1f2e 224A     		ldr	r2, .L706+36
 17991 1f30 1D46     		mov	r5, r3
 17992 1f32 1446     		mov	r4, r2
 17993 1f34 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 17994 1f36 2860     		str	r0, [r5]	@ unaligned
 17995 1f38 6960     		str	r1, [r5, #4]	@ unaligned
 17996 1f3a AA60     		str	r2, [r5, #8]	@ unaligned
 17997 1f3c EB60     		str	r3, [r5, #12]	@ unaligned
 17998 1f3e 03CC     		ldmia	r4!, {r0, r1}
 17999 1f40 2861     		str	r0, [r5, #16]	@ unaligned
 18000 1f42 6961     		str	r1, [r5, #20]	@ unaligned
2360:..\src/command_processing.c ****         for (i = 0; i < N_ENCODER_LINE_MAX; i++) {
 18001              		.loc 1 2360 0
 18002 1f44 0023     		movs	r3, #0
 18003 1f46 C7F89C30 		str	r3, [r7, #156]
 18004 1f4a BCE0     		b	.L672
 18005              	.L681:
2361:..\src/command_processing.c ****             sprintf(str, "Encoder Connected Line %d: %d", (int) i, (int) N_Encoder_Line_Connected[i
 18006              		.loc 1 2361 0
 18007 1f4c 1B4A     		ldr	r2, .L706+40
 18008 1f4e D7F89C30 		ldr	r3, [r7, #156]
 18009 1f52 1344     		add	r3, r3, r2
 18010 1f54 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 18011 1f56 07F11C00 		add	r0, r7, #28
 18012 1f5a D7F89C20 		ldr	r2, [r7, #156]
 18013 1f5e 1849     		ldr	r1, .L706+44
 18014 1f60 FFF7FEFF 		bl	sprintf
2362:..\src/command_processing.c ****             strcat(info_string, str);
 18015              		.loc 1 2362 0
 18016 1f64 07F11C03 		add	r3, r7, #28
 18017 1f68 1946     		mov	r1, r3
 18018 1f6a 7869     		ldr	r0, [r7, #20]
 18019 1f6c FFF7FEFF 		bl	strcat
2363:..\src/command_processing.c ****             if (MEM_P->dev.right_left == i) {
 18020              		.loc 1 2363 0
 18021 1f70 D7F88C30 		ldr	r3, [r7, #140]
 18022 1f74 93F8A730 		ldrb	r3, [r3, #167]	@ zero_extendqisi2
 18023 1f78 1A46     		mov	r2, r3
 18024 1f7a D7F89C30 		ldr	r3, [r7, #156]
 18025 1f7e 9A42     		cmp	r2, r3
 18026 1f80 2FD1     		bne	.L673
2364:..\src/command_processing.c ****                 sprintf(str, " [%s HAND main encoder line]", (MEM_P->dev.right_left?"LEFT":"RIGHT")
 18027              		.loc 1 2364 0
 18028 1f82 D7F88C30 		ldr	r3, [r7, #140]
 18029 1f86 93F8A730 		ldrb	r3, [r3, #167]	@ zero_extendqisi2
 18030 1f8a 002B     		cmp	r3, #0
 18031 1f8c 1CD0     		beq	.L674
 18032              		.loc 1 2364 0 is_stmt 0 discriminator 1
 18033 1f8e 0D4A     		ldr	r2, .L706+48
 18034 1f90 1BE0     		b	.L675
 18035              	.L707:
 18036 1f92 00BF     		.align	2
 18037              	.L706:
 18038 1f94 FC130000 		.word	.LC175
 18039 1f98 001C0000 		.word	.LC256
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 400


 18040 1f9c 00000000 		.word	IMU_connected
 18041 1fa0 F4130000 		.word	.LC174
 18042 1fa4 101C0000 		.word	.LC257
 18043 1fa8 241C0000 		.word	.LC258
 18044 1fac 341C0000 		.word	.LC259
 18045 1fb0 00000000 		.word	N_IMU_Connected
 18046 1fb4 58110000 		.word	.LC152
 18047 1fb8 441C0000 		.word	.LC260
 18048 1fbc 00000000 		.word	N_Encoder_Line_Connected
 18049 1fc0 5C1C0000 		.word	.LC261
 18050 1fc4 7C1C0000 		.word	.LC262
 18051              	.L674:
 18052              		.loc 1 2364 0 discriminator 2
 18053 1fc8 9C4A     		ldr	r2, .L708
 18054              	.L675:
 18055              		.loc 1 2364 0 discriminator 4
 18056 1fca 07F11C03 		add	r3, r7, #28
 18057 1fce 9C49     		ldr	r1, .L708+4
 18058 1fd0 1846     		mov	r0, r3
 18059 1fd2 FFF7FEFF 		bl	sprintf
2365:..\src/command_processing.c ****                 strcat(info_string, str);
 18060              		.loc 1 2365 0 is_stmt 1 discriminator 4
 18061 1fd6 07F11C03 		add	r3, r7, #28
 18062 1fda 1946     		mov	r1, r3
 18063 1fdc 7869     		ldr	r0, [r7, #20]
 18064 1fde FFF7FEFF 		bl	strcat
 18065              	.L673:
2366:..\src/command_processing.c ****             }
2367:..\src/command_processing.c ****             strcat(info_string, "\r\n");
 18066              		.loc 1 2367 0
 18067 1fe2 7869     		ldr	r0, [r7, #20]
 18068 1fe4 FFF7FEFF 		bl	strlen
 18069 1fe8 0346     		mov	r3, r0
 18070 1fea 1A46     		mov	r2, r3
 18071 1fec 7B69     		ldr	r3, [r7, #20]
 18072 1fee 1344     		add	r3, r3, r2
 18073 1ff0 944A     		ldr	r2, .L708+8
 18074 1ff2 1188     		ldrh	r1, [r2]	@ unaligned
 18075 1ff4 9278     		ldrb	r2, [r2, #2]
 18076 1ff6 1980     		strh	r1, [r3]	@ unaligned
 18077 1ff8 9A70     		strb	r2, [r3, #2]
2368:..\src/command_processing.c ****             if (N_Encoder_Line_Connected[i] > 0) {
 18078              		.loc 1 2368 0
 18079 1ffa 934A     		ldr	r2, .L708+12
 18080 1ffc D7F89C30 		ldr	r3, [r7, #156]
 18081 2000 1344     		add	r3, r3, r2
 18082 2002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 18083 2004 002B     		cmp	r3, #0
 18084 2006 59D0     		beq	.L676
2369:..\src/command_processing.c ****                 strcat(info_string, "Raw value [status]:\r\n");
 18085              		.loc 1 2369 0
 18086 2008 7869     		ldr	r0, [r7, #20]
 18087 200a FFF7FEFF 		bl	strlen
 18088 200e 0346     		mov	r3, r0
 18089 2010 1A46     		mov	r2, r3
 18090 2012 7B69     		ldr	r3, [r7, #20]
 18091 2014 1344     		add	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 401


 18092 2016 8D4A     		ldr	r2, .L708+16
 18093 2018 1D46     		mov	r5, r3
 18094 201a 1446     		mov	r4, r2
 18095 201c 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 18096 201e 2860     		str	r0, [r5]	@ unaligned
 18097 2020 6960     		str	r1, [r5, #4]	@ unaligned
 18098 2022 AA60     		str	r2, [r5, #8]	@ unaligned
 18099 2024 EB60     		str	r3, [r5, #12]	@ unaligned
 18100 2026 2068     		ldr	r0, [r4]	@ unaligned
 18101 2028 2861     		str	r0, [r5, #16]	@ unaligned
 18102 202a A388     		ldrh	r3, [r4, #4]	@ unaligned
 18103 202c AB82     		strh	r3, [r5, #20]	@ unaligned
2370:..\src/command_processing.c ****                 for (j = 0; j < N_Encoder_Line_Connected[i]; j++) {
 18104              		.loc 1 2370 0
 18105 202e 0023     		movs	r3, #0
 18106 2030 C7F89430 		str	r3, [r7, #148]
 18107 2034 2CE0     		b	.L677
 18108              	.L680:
2371:..\src/command_processing.c ****                     sprintf(str, "%d\t[%s]\r\n", (uint16) Encoder_Value[i][j], (Encoder_Check[i][j]
 18109              		.loc 1 2371 0
 18110 2036 8649     		ldr	r1, .L708+20
 18111 2038 D7F89C20 		ldr	r2, [r7, #156]
 18112 203c 1346     		mov	r3, r2
 18113 203e 9B00     		lsls	r3, r3, #2
 18114 2040 1344     		add	r3, r3, r2
 18115 2042 D7F89420 		ldr	r2, [r7, #148]
 18116 2046 1344     		add	r3, r3, r2
 18117 2048 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 18118 204c 1C46     		mov	r4, r3
 18119 204e 8149     		ldr	r1, .L708+24
 18120 2050 D7F89C20 		ldr	r2, [r7, #156]
 18121 2054 1346     		mov	r3, r2
 18122 2056 9B00     		lsls	r3, r3, #2
 18123 2058 1344     		add	r3, r3, r2
 18124 205a CA18     		adds	r2, r1, r3
 18125 205c D7F89430 		ldr	r3, [r7, #148]
 18126 2060 1344     		add	r3, r3, r2
 18127 2062 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 18128 2064 102B     		cmp	r3, #16
 18129 2066 01D1     		bne	.L678
 18130              		.loc 1 2371 0 is_stmt 0 discriminator 1
 18131 2068 7B4B     		ldr	r3, .L708+28
 18132 206a 00E0     		b	.L679
 18133              	.L678:
 18134              		.loc 1 2371 0 discriminator 2
 18135 206c 7B4B     		ldr	r3, .L708+32
 18136              	.L679:
 18137              		.loc 1 2371 0 discriminator 4
 18138 206e 07F11C00 		add	r0, r7, #28
 18139 2072 2246     		mov	r2, r4
 18140 2074 7A49     		ldr	r1, .L708+36
 18141 2076 FFF7FEFF 		bl	sprintf
2372:..\src/command_processing.c ****                     strcat(info_string, str);
 18142              		.loc 1 2372 0 is_stmt 1 discriminator 4
 18143 207a 07F11C03 		add	r3, r7, #28
 18144 207e 1946     		mov	r1, r3
 18145 2080 7869     		ldr	r0, [r7, #20]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 402


 18146 2082 FFF7FEFF 		bl	strcat
2370:..\src/command_processing.c ****                 for (j = 0; j < N_Encoder_Line_Connected[i]; j++) {
 18147              		.loc 1 2370 0 discriminator 4
 18148 2086 D7F89430 		ldr	r3, [r7, #148]
 18149 208a 0133     		adds	r3, r3, #1
 18150 208c C7F89430 		str	r3, [r7, #148]
 18151              	.L677:
2370:..\src/command_processing.c ****                 for (j = 0; j < N_Encoder_Line_Connected[i]; j++) {
 18152              		.loc 1 2370 0 is_stmt 0 discriminator 2
 18153 2090 6D4A     		ldr	r2, .L708+12
 18154 2092 D7F89C30 		ldr	r3, [r7, #156]
 18155 2096 1344     		add	r3, r3, r2
 18156 2098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 18157 209a 1A46     		mov	r2, r3
 18158 209c D7F89430 		ldr	r3, [r7, #148]
 18159 20a0 9A42     		cmp	r2, r3
 18160 20a2 C8DC     		bgt	.L680
2373:..\src/command_processing.c ****                 }
2374:..\src/command_processing.c ****                 strcat(info_string, "\r\n");
 18161              		.loc 1 2374 0 is_stmt 1
 18162 20a4 7869     		ldr	r0, [r7, #20]
 18163 20a6 FFF7FEFF 		bl	strlen
 18164 20aa 0346     		mov	r3, r0
 18165 20ac 1A46     		mov	r2, r3
 18166 20ae 7B69     		ldr	r3, [r7, #20]
 18167 20b0 1344     		add	r3, r3, r2
 18168 20b2 644A     		ldr	r2, .L708+8
 18169 20b4 1188     		ldrh	r1, [r2]	@ unaligned
 18170 20b6 9278     		ldrb	r2, [r2, #2]
 18171 20b8 1980     		strh	r1, [r3]	@ unaligned
 18172 20ba 9A70     		strb	r2, [r3, #2]
 18173              	.L676:
2360:..\src/command_processing.c ****             sprintf(str, "Encoder Connected Line %d: %d", (int) i, (int) N_Encoder_Line_Connected[i
 18174              		.loc 1 2360 0 discriminator 2
 18175 20bc D7F89C30 		ldr	r3, [r7, #156]
 18176 20c0 0133     		adds	r3, r3, #1
 18177 20c2 C7F89C30 		str	r3, [r7, #156]
 18178              	.L672:
2360:..\src/command_processing.c ****             sprintf(str, "Encoder Connected Line %d: %d", (int) i, (int) N_Encoder_Line_Connected[i
 18179              		.loc 1 2360 0 is_stmt 0 discriminator 1
 18180 20c6 D7F89C30 		ldr	r3, [r7, #156]
 18181 20ca 012B     		cmp	r3, #1
 18182 20cc 7FF73EAF 		ble	.L681
2375:..\src/command_processing.c ****             }
2376:..\src/command_processing.c ****         }
2377:..\src/command_processing.c **** #endif   
2378:..\src/command_processing.c ****         
2379:..\src/command_processing.c **** #ifdef MASTER_FW
2380:..\src/command_processing.c ****         if (MEM_P->MS.slave_comm_active)
2381:..\src/command_processing.c ****             strcat(info_string, "Slave communication active: YES\r\n");
2382:..\src/command_processing.c ****         else
2383:..\src/command_processing.c ****             strcat(info_string, "Slave communication active: NO\r\n");
2384:..\src/command_processing.c **** 
2385:..\src/command_processing.c ****         sprintf(str, "Slave ID: %d\r\n", (int)MEM_P->MS.slave_ID);
2386:..\src/command_processing.c ****         strcat(info_string, str);
2387:..\src/command_processing.c **** #endif
2388:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 403


2389:..\src/command_processing.c **** sprintf(str, "t_before_data_send_to_PC: %d us\r\n", (uint16)(t_before_data_send_to_PC/48));
 18183              		.loc 1 2389 0 is_stmt 1
 18184 20d0 644B     		ldr	r3, .L708+40
 18185 20d2 1B88     		ldrh	r3, [r3]
 18186 20d4 644A     		ldr	r2, .L708+44
 18187 20d6 A2FB0323 		umull	r2, r3, r2, r3
 18188 20da 5B09     		lsrs	r3, r3, #5
 18189 20dc 9BB2     		uxth	r3, r3
 18190 20de 1A46     		mov	r2, r3
 18191 20e0 07F11C03 		add	r3, r7, #28
 18192 20e4 6149     		ldr	r1, .L708+48
 18193 20e6 1846     		mov	r0, r3
 18194 20e8 FFF7FEFF 		bl	sprintf
2390:..\src/command_processing.c ****  strcat(info_string, str);
 18195              		.loc 1 2390 0
 18196 20ec 07F11C03 		add	r3, r7, #28
 18197 20f0 1946     		mov	r1, r3
 18198 20f2 7869     		ldr	r0, [r7, #20]
 18199 20f4 FFF7FEFF 		bl	strcat
2391:..\src/command_processing.c ****         sprintf(str, "t_after_data_send_to_PC: %d us\r\n", (uint16)(t_after_data_send_to_PC/48));
 18200              		.loc 1 2391 0
 18201 20f8 5D4B     		ldr	r3, .L708+52
 18202 20fa 1B88     		ldrh	r3, [r3]
 18203 20fc 5A4A     		ldr	r2, .L708+44
 18204 20fe A2FB0323 		umull	r2, r3, r2, r3
 18205 2102 5B09     		lsrs	r3, r3, #5
 18206 2104 9BB2     		uxth	r3, r3
 18207 2106 1A46     		mov	r2, r3
 18208 2108 07F11C03 		add	r3, r7, #28
 18209 210c 5949     		ldr	r1, .L708+56
 18210 210e 1846     		mov	r0, r3
 18211 2110 FFF7FEFF 		bl	sprintf
2392:..\src/command_processing.c ****  strcat(info_string, str);
 18212              		.loc 1 2392 0
 18213 2114 07F11C03 		add	r3, r7, #28
 18214 2118 1946     		mov	r1, r3
 18215 211a 7869     		ldr	r0, [r7, #20]
 18216 211c FFF7FEFF 		bl	strcat
2393:..\src/command_processing.c ****         
2394:..\src/command_processing.c **** sprintf(str, "time_to_send_data_to_PC: %d us\r\n\n", (uint16)(time_to_send_data_to_PC));
 18217              		.loc 1 2394 0
 18218 2120 554B     		ldr	r3, .L708+60
 18219 2122 1B88     		ldrh	r3, [r3]
 18220 2124 1A46     		mov	r2, r3
 18221 2126 07F11C03 		add	r3, r7, #28
 18222 212a 5449     		ldr	r1, .L708+64
 18223 212c 1846     		mov	r0, r3
 18224 212e FFF7FEFF 		bl	sprintf
2395:..\src/command_processing.c ****  strcat(info_string, str);
 18225              		.loc 1 2395 0
 18226 2132 07F11C03 		add	r3, r7, #28
 18227 2136 1946     		mov	r1, r3
 18228 2138 7869     		ldr	r0, [r7, #20]
 18229 213a FFF7FEFF 		bl	strcat
2396:..\src/command_processing.c ****         
2397:..\src/command_processing.c **** 
2398:..\src/command_processing.c **** uint8 plus;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 404


2399:..\src/command_processing.c **** for (plus=0; plus<(N_IMU_Connected); plus++){
 18230              		.loc 1 2399 0
 18231 213e 0023     		movs	r3, #0
 18232 2140 87F89330 		strb	r3, [r7, #147]
 18233 2144 6FE0     		b	.L682
 18234              	.L683:
2400:..\src/command_processing.c ****      sprintf(str, "t0_accel_ID_%d: %d us\r\n",(uint16)(ID[IMU_connected[plus]]), (uint16)(timer_val
 18235              		.loc 1 2400 0 discriminator 3
 18236 2146 97F89330 		ldrb	r3, [r7, #147]	@ zero_extendqisi2
 18237 214a 4D4A     		ldr	r2, .L708+68
 18238 214c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 18239 214e 1A46     		mov	r2, r3
 18240 2150 4C4B     		ldr	r3, .L708+72
 18241 2152 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 18242 2156 1946     		mov	r1, r3
 18243 2158 97F89330 		ldrb	r3, [r7, #147]	@ zero_extendqisi2
 18244 215c 4A4A     		ldr	r2, .L708+76
 18245 215e 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 18246 2162 414A     		ldr	r2, .L708+44
 18247 2164 A2FB0323 		umull	r2, r3, r2, r3
 18248 2168 5B09     		lsrs	r3, r3, #5
 18249 216a 9BB2     		uxth	r3, r3
 18250 216c 07F11C00 		add	r0, r7, #28
 18251 2170 0A46     		mov	r2, r1
 18252 2172 4649     		ldr	r1, .L708+80
 18253 2174 FFF7FEFF 		bl	sprintf
2401:..\src/command_processing.c ****         strcat(info_string, str);
 18254              		.loc 1 2401 0 discriminator 3
 18255 2178 07F11C03 		add	r3, r7, #28
 18256 217c 1946     		mov	r1, r3
 18257 217e 7869     		ldr	r0, [r7, #20]
 18258 2180 FFF7FEFF 		bl	strcat
2402:..\src/command_processing.c ****         
2403:..\src/command_processing.c ****      sprintf(str, "t1_accel_ID_%d: %d us\r\n",(uint16)(ID[IMU_connected[plus]]), (uint16)(timer_val
 18259              		.loc 1 2403 0 discriminator 3
 18260 2184 97F89330 		ldrb	r3, [r7, #147]	@ zero_extendqisi2
 18261 2188 3D4A     		ldr	r2, .L708+68
 18262 218a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 18263 218c 1A46     		mov	r2, r3
 18264 218e 3D4B     		ldr	r3, .L708+72
 18265 2190 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 18266 2194 1946     		mov	r1, r3
 18267 2196 97F89330 		ldrb	r3, [r7, #147]	@ zero_extendqisi2
 18268 219a 3D4A     		ldr	r2, .L708+84
 18269 219c 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 18270 21a0 314A     		ldr	r2, .L708+44
 18271 21a2 A2FB0323 		umull	r2, r3, r2, r3
 18272 21a6 5B09     		lsrs	r3, r3, #5
 18273 21a8 9BB2     		uxth	r3, r3
 18274 21aa 07F11C00 		add	r0, r7, #28
 18275 21ae 0A46     		mov	r2, r1
 18276 21b0 3849     		ldr	r1, .L708+88
 18277 21b2 FFF7FEFF 		bl	sprintf
2404:..\src/command_processing.c ****         strcat(info_string, str);
 18278              		.loc 1 2404 0 discriminator 3
 18279 21b6 07F11C03 		add	r3, r7, #28
 18280 21ba 1946     		mov	r1, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 405


 18281 21bc 7869     		ldr	r0, [r7, #20]
 18282 21be FFF7FEFF 		bl	strcat
2405:..\src/command_processing.c **** 
2406:..\src/command_processing.c ****         sprintf(str, "Time to get 3 axis_accel of IMU_ID_%d: %f us\r\n",(uint16)(ID[IMU_connected[p
 18283              		.loc 1 2406 0 discriminator 3
 18284 21c2 97F89330 		ldrb	r3, [r7, #147]	@ zero_extendqisi2
 18285 21c6 2E4A     		ldr	r2, .L708+68
 18286 21c8 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 18287 21ca 1A46     		mov	r2, r3
 18288 21cc 2D4B     		ldr	r3, .L708+72
 18289 21ce 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 18290 21d2 1D46     		mov	r5, r3
 18291 21d4 97F89330 		ldrb	r3, [r7, #147]	@ zero_extendqisi2
 18292 21d8 2F4A     		ldr	r2, .L708+92
 18293 21da 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 18294 21de 1846     		mov	r0, r3
 18295 21e0 FFF7FEFF 		bl	__aeabi_f2d
 18296 21e4 0346     		mov	r3, r0
 18297 21e6 0C46     		mov	r4, r1
 18298 21e8 07F11C00 		add	r0, r7, #28
 18299 21ec CDE90034 		strd	r3, [sp]
 18300 21f0 2A46     		mov	r2, r5
 18301 21f2 2A49     		ldr	r1, .L708+96
 18302 21f4 FFF7FEFF 		bl	sprintf
2407:..\src/command_processing.c ****         strcat(info_string, str);
 18303              		.loc 1 2407 0 discriminator 3
 18304 21f8 07F11C03 		add	r3, r7, #28
 18305 21fc 1946     		mov	r1, r3
 18306 21fe 7869     		ldr	r0, [r7, #20]
 18307 2200 FFF7FEFF 		bl	strcat
2408:..\src/command_processing.c ****   
2409:..\src/command_processing.c ****         strcat(info_string, "\r\n\0");      // End of info_string
 18308              		.loc 1 2409 0 discriminator 3
 18309 2204 7869     		ldr	r0, [r7, #20]
 18310 2206 FFF7FEFF 		bl	strlen
 18311 220a 0346     		mov	r3, r0
 18312 220c 1A46     		mov	r2, r3
 18313 220e 7B69     		ldr	r3, [r7, #20]
 18314 2210 1344     		add	r3, r3, r2
 18315 2212 234A     		ldr	r2, .L708+100
 18316 2214 1188     		ldrh	r1, [r2]	@ unaligned
 18317 2216 9278     		ldrb	r2, [r2, #2]
 18318 2218 1980     		strh	r1, [r3]	@ unaligned
 18319 221a 9A70     		strb	r2, [r3, #2]
2399:..\src/command_processing.c ****      sprintf(str, "t0_accel_ID_%d: %d us\r\n",(uint16)(ID[IMU_connected[plus]]), (uint16)(timer_val
 18320              		.loc 1 2399 0 discriminator 3
 18321 221c 97F89330 		ldrb	r3, [r7, #147]	@ zero_extendqisi2
 18322 2220 0133     		adds	r3, r3, #1
 18323 2222 87F89330 		strb	r3, [r7, #147]
 18324              	.L682:
2399:..\src/command_processing.c ****      sprintf(str, "t0_accel_ID_%d: %d us\r\n",(uint16)(ID[IMU_connected[plus]]), (uint16)(timer_val
 18325              		.loc 1 2399 0 is_stmt 0 discriminator 1
 18326 2226 1F4B     		ldr	r3, .L708+104
 18327 2228 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 18328 222a 97F89320 		ldrb	r2, [r7, #147]	@ zero_extendqisi2
 18329 222e 9A42     		cmp	r2, r3
 18330 2230 89D3     		bcc	.L683
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 406


 18331              	.L685:
 18332              	.LBE24:
2410:..\src/command_processing.c ****     }}}
 18333              		.loc 1 2410 0 is_stmt 1
 18334 2232 00BF     		nop
 18335 2234 A437     		adds	r7, r7, #164
 18336              		.cfi_def_cfa_offset 36
 18337 2236 BD46     		mov	sp, r7
 18338              		.cfi_def_cfa_register 13
 18339              		@ sp needed
 18340 2238 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 18341              	.L709:
 18342              		.align	2
 18343              	.L708:
 18344 223c 841C0000 		.word	.LC263
 18345 2240 8C1C0000 		.word	.LC264
 18346 2244 58110000 		.word	.LC152
 18347 2248 00000000 		.word	N_Encoder_Line_Connected
 18348 224c AC1C0000 		.word	.LC265
 18349 2250 00000000 		.word	Encoder_Value
 18350 2254 00000000 		.word	Encoder_Check
 18351 2258 C41C0000 		.word	.LC266
 18352 225c C81C0000 		.word	.LC267
 18353 2260 CC1C0000 		.word	.LC268
 18354 2264 00000000 		.word	t_before_data_send_to_PC
 18355 2268 ABAAAAAA 		.word	-1431655765
 18356 226c D81C0000 		.word	.LC269
 18357 2270 00000000 		.word	t_after_data_send_to_PC
 18358 2274 FC1C0000 		.word	.LC270
 18359 2278 00000000 		.word	time_to_send_data_to_PC
 18360 227c 201D0000 		.word	.LC271
 18361 2280 00000000 		.word	IMU_connected
 18362 2284 00000000 		.word	ID
 18363 2288 00000000 		.word	timer_value0
 18364 228c 441D0000 		.word	.LC272
 18365 2290 00000000 		.word	timer_value
 18366 2294 5C1D0000 		.word	.LC273
 18367 2298 00000000 		.word	cycle_time
 18368 229c 741D0000 		.word	.LC274
 18369 22a0 A41D0000 		.word	.LC275
 18370 22a4 00000000 		.word	N_IMU_Connected
 18371              		.cfi_endproc
 18372              	.LFE72:
 18373              		.size	prepare_generic_info, .-prepare_generic_info
 18374              		.section	.rodata
 18375              		.align	2
 18376              	.LC276:
 18377 1da8 0D0A5553 		.ascii	"\015\012USAGE STATISTICS\015\012\000"
 18377      41474520 
 18377      53544154 
 18377      49535449 
 18377      43530D0A 
 18378 1dbd 000000   		.align	2
 18379              	.LC277:
 18380 1dc0 44617465 		.ascii	"Date of HW maintenance: %02d/%02d/20%02d\015\012\000"
 18380      206F6620 
 18380      4857206D 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 407


 18380      61696E74 
 18380      656E616E 
 18381 1deb 00       		.align	2
 18382              	.LC278:
 18383 1dec 44617465 		.ascii	"Date of usage stats period begin: %02d/%02d/20%02d\015"
 18383      206F6620 
 18383      75736167 
 18383      65207374 
 18383      61747320 
 18384 1e1f 0A00     		.ascii	"\012\000"
 18385 1e21 000000   		.align	2
 18386              	.LC279:
 18387 1e24 4C617374 		.ascii	"Last checked Time: %02d/%02d/20%02d %02d:%02d:%02d\015"
 18387      20636865 
 18387      636B6564 
 18387      2054696D 
 18387      653A2025 
 18388 1e57 0A00     		.ascii	"\012\000"
 18389 1e59 000000   		.align	2
 18390              	.LC280:
 18391 1e5c 506F7369 		.ascii	"Positions histogram (ticks):\015\012\000"
 18391      74696F6E 
 18391      73206869 
 18391      73746F67 
 18391      72616D20 
 18392 1e7b 00       		.align	2
 18393              	.LC281:
 18394 1e7c 42696E20 		.ascii	"Bin %d [%d-%d]: %lu\015\012\000"
 18394      2564205B 
 18394      25642D25 
 18394      645D3A20 
 18394      256C750D 
 18395 1e92 0000     		.align	2
 18396              	.LC282:
 18397 1e94 43757272 		.ascii	"Current histogram (mA):\015\012\000"
 18397      656E7420 
 18397      68697374 
 18397      6F677261 
 18397      6D20286D 
 18398 1eae 0000     		.align	2
 18399              	.LC283:
 18400 1eb0 54687265 		.ascii	"Threshold %d [%d-%d]: %lu\015\012\000"
 18400      73686F6C 
 18400      64202564 
 18400      205B2564 
 18400      2D25645D 
 18401              		.align	2
 18402              	.LC284:
 18403 1ecc 4D6F7469 		.ascii	"Motions through EMG counter: %lu, %lu\000"
 18403      6F6E7320 
 18403      7468726F 
 18403      75676820 
 18403      454D4720 
 18404 1ef2 0000     		.align	2
 18405              	.LC285:
 18406 1ef4 52657374 		.ascii	"Rest position occurrences: %lu\000"
 18406      20706F73 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 408


 18406      6974696F 
 18406      6E206F63 
 18406      63757272 
 18407 1f13 00       		.align	2
 18408              	.LC286:
 18409 1f14 416E676C 		.ascii	"Angle total displacement (ticks): %lu\000"
 18409      6520746F 
 18409      74616C20 
 18409      64697370 
 18409      6C616365 
 18410 1f3a 0000     		.align	2
 18411              	.LC287:
 18412 1f3c 546F7461 		.ascii	"Total power on time (sec): %lu\000"
 18412      6C20706F 
 18412      77657220 
 18412      6F6E2074 
 18412      696D6520 
 18413 1f5b 00       		.align	2
 18414              	.LC288:
 18415 1f5c 546F7461 		.ascii	"Total rest position time (sec): %lu\000"
 18415      6C207265 
 18415      73742070 
 18415      6F736974 
 18415      696F6E20 
 18416              		.section	.text.prepare_counter_info,"ax",%progbits
 18417              		.align	2
 18418              		.global	prepare_counter_info
 18419              		.thumb
 18420              		.thumb_func
 18421              		.type	prepare_counter_info, %function
 18422              	prepare_counter_info:
 18423              	.LFB73:
2411:..\src/command_processing.c **** 
2412:..\src/command_processing.c **** 
2413:..\src/command_processing.c **** //==============================================================================
2414:..\src/command_processing.c **** //                                                 PREPARE GENERIC COUNTERS INFO
2415:..\src/command_processing.c **** //==============================================================================
2416:..\src/command_processing.c **** 
2417:..\src/command_processing.c **** void prepare_counter_info(char *info_string)
2418:..\src/command_processing.c **** {
 18424              		.loc 1 2418 0
 18425              		.cfi_startproc
 18426              		@ args = 0, pretend = 0, frame = 432
 18427              		@ frame_needed = 1, uses_anonymous_args = 0
 18428 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 18429              		.cfi_def_cfa_offset 20
 18430              		.cfi_offset 4, -20
 18431              		.cfi_offset 5, -16
 18432              		.cfi_offset 6, -12
 18433              		.cfi_offset 7, -8
 18434              		.cfi_offset 14, -4
 18435 0002 F1B0     		sub	sp, sp, #452
 18436              		.cfi_def_cfa_offset 472
 18437 0004 04AF     		add	r7, sp, #16
 18438              		.cfi_def_cfa 7, 456
 18439 0006 3B1D     		adds	r3, r7, #4
 18440 0008 1860     		str	r0, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 409


2419:..\src/command_processing.c ****     char str[100];  
2420:..\src/command_processing.c ****     int i;
2421:..\src/command_processing.c ****     int step;
2422:..\src/command_processing.c **** 
2423:..\src/command_processing.c ****     struct st_eeprom* MEM_P = &g_mem;    
 18441              		.loc 1 2423 0
 18442 000a 964B     		ldr	r3, .L716
 18443 000c C7F8A831 		str	r3, [r7, #424]
2424:..\src/command_processing.c ****     struct st_motor* MOT = &(MEM_P->motor[0]);      // Default motor
 18444              		.loc 1 2424 0
 18445 0010 D7F8A831 		ldr	r3, [r7, #424]
 18446 0014 B033     		adds	r3, r3, #176
 18447 0016 C7F8A431 		str	r3, [r7, #420]
2425:..\src/command_processing.c ****     uint8 ENC_L = MOT->encoder_line;                // Associated encoder line
 18448              		.loc 1 2425 0
 18449 001a D7F8A431 		ldr	r3, [r7, #420]
 18450 001e 93F86030 		ldrb	r3, [r3, #96]
 18451 0022 87F8A331 		strb	r3, [r7, #419]
2426:..\src/command_processing.c ****     
2427:..\src/command_processing.c ****     strcpy(info_string, "");
 18452              		.loc 1 2427 0
 18453 0026 3B1D     		adds	r3, r7, #4
 18454 0028 1B68     		ldr	r3, [r3]
 18455 002a 0022     		movs	r2, #0
 18456 002c 1A70     		strb	r2, [r3]
2428:..\src/command_processing.c ****     
2429:..\src/command_processing.c ****     strcat(info_string, "\r\nUSAGE STATISTICS\r\n");
 18457              		.loc 1 2429 0
 18458 002e 3B1D     		adds	r3, r7, #4
 18459 0030 1868     		ldr	r0, [r3]
 18460 0032 FFF7FEFF 		bl	strlen
 18461 0036 0346     		mov	r3, r0
 18462 0038 1A46     		mov	r2, r3
 18463 003a 3B1D     		adds	r3, r7, #4
 18464 003c 1B68     		ldr	r3, [r3]
 18465 003e 1344     		add	r3, r3, r2
 18466 0040 894A     		ldr	r2, .L716+4
 18467 0042 1D46     		mov	r5, r3
 18468 0044 1446     		mov	r4, r2
 18469 0046 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 18470 0048 2860     		str	r0, [r5]	@ unaligned
 18471 004a 6960     		str	r1, [r5, #4]	@ unaligned
 18472 004c AA60     		str	r2, [r5, #8]	@ unaligned
 18473 004e EB60     		str	r3, [r5, #12]	@ unaligned
 18474 0050 2068     		ldr	r0, [r4]	@ unaligned
 18475 0052 2861     		str	r0, [r5, #16]	@ unaligned
 18476 0054 2379     		ldrb	r3, [r4, #4]
 18477 0056 2B75     		strb	r3, [r5, #20]
2430:..\src/command_processing.c ****     strcat(info_string, "\r\n");
 18478              		.loc 1 2430 0
 18479 0058 3B1D     		adds	r3, r7, #4
 18480 005a 1868     		ldr	r0, [r3]
 18481 005c FFF7FEFF 		bl	strlen
 18482 0060 0346     		mov	r3, r0
 18483 0062 1A46     		mov	r2, r3
 18484 0064 3B1D     		adds	r3, r7, #4
 18485 0066 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 410


 18486 0068 1344     		add	r3, r3, r2
 18487 006a 804A     		ldr	r2, .L716+8
 18488 006c 1188     		ldrh	r1, [r2]	@ unaligned
 18489 006e 9278     		ldrb	r2, [r2, #2]
 18490 0070 1980     		strh	r1, [r3]	@ unaligned
 18491 0072 9A70     		strb	r2, [r3, #2]
2431:..\src/command_processing.c ****     
2432:..\src/command_processing.c ****     sprintf(str, "Date of HW maintenance: %02d/%02d/20%02d\r\n", (int)MEM_P->dev.hw_maint_date[0], 
 18492              		.loc 1 2432 0
 18493 0074 D7F8A831 		ldr	r3, [r7, #424]
 18494 0078 93F8A130 		ldrb	r3, [r3, #161]	@ zero_extendqisi2
 18495 007c 1A46     		mov	r2, r3
 18496 007e D7F8A831 		ldr	r3, [r7, #424]
 18497 0082 93F8A230 		ldrb	r3, [r3, #162]	@ zero_extendqisi2
 18498 0086 1946     		mov	r1, r3
 18499 0088 D7F8A831 		ldr	r3, [r7, #424]
 18500 008c 93F8A330 		ldrb	r3, [r3, #163]	@ zero_extendqisi2
 18501 0090 07F59C70 		add	r0, r7, #312
 18502 0094 0093     		str	r3, [sp]
 18503 0096 0B46     		mov	r3, r1
 18504 0098 7549     		ldr	r1, .L716+12
 18505 009a FFF7FEFF 		bl	sprintf
2433:..\src/command_processing.c ****     strcat(info_string, str);
 18506              		.loc 1 2433 0
 18507 009e 07F59C72 		add	r2, r7, #312
 18508 00a2 3B1D     		adds	r3, r7, #4
 18509 00a4 1146     		mov	r1, r2
 18510 00a6 1868     		ldr	r0, [r3]
 18511 00a8 FFF7FEFF 		bl	strcat
2434:..\src/command_processing.c ****     
2435:..\src/command_processing.c ****     sprintf(str, "Date of usage stats period begin: %02d/%02d/20%02d\r\n", (int)MEM_P->dev.stats_pe
 18512              		.loc 1 2435 0
 18513 00ac D7F8A831 		ldr	r3, [r7, #424]
 18514 00b0 93F8A430 		ldrb	r3, [r3, #164]	@ zero_extendqisi2
 18515 00b4 1A46     		mov	r2, r3
 18516 00b6 D7F8A831 		ldr	r3, [r7, #424]
 18517 00ba 93F8A530 		ldrb	r3, [r3, #165]	@ zero_extendqisi2
 18518 00be 1946     		mov	r1, r3
 18519 00c0 D7F8A831 		ldr	r3, [r7, #424]
 18520 00c4 93F8A630 		ldrb	r3, [r3, #166]	@ zero_extendqisi2
 18521 00c8 07F59C70 		add	r0, r7, #312
 18522 00cc 0093     		str	r3, [sp]
 18523 00ce 0B46     		mov	r3, r1
 18524 00d0 6849     		ldr	r1, .L716+16
 18525 00d2 FFF7FEFF 		bl	sprintf
2436:..\src/command_processing.c ****     strcat(info_string, str);
 18526              		.loc 1 2436 0
 18527 00d6 07F59C72 		add	r2, r7, #312
 18528 00da 3B1D     		adds	r3, r7, #4
 18529 00dc 1146     		mov	r1, r2
 18530 00de 1868     		ldr	r0, [r3]
 18531 00e0 FFF7FEFF 		bl	strcat
2437:..\src/command_processing.c ****             
2438:..\src/command_processing.c ****     sprintf(str, "Last checked Time: %02d/%02d/20%02d %02d:%02d:%02d\r\n", (int)MEM_P->exp.curr_tim
 18532              		.loc 1 2438 0
 18533 00e4 D7F8A831 		ldr	r3, [r7, #424]
 18534 00e8 93F82032 		ldrb	r3, [r3, #544]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 411


 18535 00ec 1D46     		mov	r5, r3
 18536 00ee D7F8A831 		ldr	r3, [r7, #424]
 18537 00f2 93F82132 		ldrb	r3, [r3, #545]	@ zero_extendqisi2
 18538 00f6 1E46     		mov	r6, r3
 18539 00f8 D7F8A831 		ldr	r3, [r7, #424]
 18540 00fc 93F82232 		ldrb	r3, [r3, #546]	@ zero_extendqisi2
 18541 0100 1A46     		mov	r2, r3
 18542 0102 D7F8A831 		ldr	r3, [r7, #424]
 18543 0106 93F82332 		ldrb	r3, [r3, #547]	@ zero_extendqisi2
 18544 010a 1946     		mov	r1, r3
 18545 010c D7F8A831 		ldr	r3, [r7, #424]
 18546 0110 93F82432 		ldrb	r3, [r3, #548]	@ zero_extendqisi2
 18547 0114 1C46     		mov	r4, r3
 18548 0116 D7F8A831 		ldr	r3, [r7, #424]
 18549 011a 93F82532 		ldrb	r3, [r3, #549]	@ zero_extendqisi2
 18550 011e 07F59C70 		add	r0, r7, #312
 18551 0122 0393     		str	r3, [sp, #12]
 18552 0124 0294     		str	r4, [sp, #8]
 18553 0126 0191     		str	r1, [sp, #4]
 18554 0128 0092     		str	r2, [sp]
 18555 012a 3346     		mov	r3, r6
 18556 012c 2A46     		mov	r2, r5
 18557 012e 5249     		ldr	r1, .L716+20
 18558 0130 FFF7FEFF 		bl	sprintf
2439:..\src/command_processing.c ****     strcat(info_string, str);
 18559              		.loc 1 2439 0
 18560 0134 07F59C72 		add	r2, r7, #312
 18561 0138 3B1D     		adds	r3, r7, #4
 18562 013a 1146     		mov	r1, r2
 18563 013c 1868     		ldr	r0, [r3]
 18564 013e FFF7FEFF 		bl	strcat
2440:..\src/command_processing.c ****     
2441:..\src/command_processing.c ****     sprintf(str, "Positions histogram (ticks):\r\n");
 18565              		.loc 1 2441 0
 18566 0142 07F59C73 		add	r3, r7, #312
 18567 0146 4D4A     		ldr	r2, .L716+24
 18568 0148 1C46     		mov	r4, r3
 18569 014a 1546     		mov	r5, r2
 18570 014c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 18571 014e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 18572 0150 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 18573 0154 07C4     		stmia	r4!, {r0, r1, r2}
 18574 0156 2380     		strh	r3, [r4]	@ movhi
 18575 0158 0234     		adds	r4, r4, #2
 18576 015a 1B0C     		lsrs	r3, r3, #16
 18577 015c 2370     		strb	r3, [r4]
2442:..\src/command_processing.c ****     strcat(info_string, str);
 18578              		.loc 1 2442 0
 18579 015e 07F59C72 		add	r2, r7, #312
 18580 0162 3B1D     		adds	r3, r7, #4
 18581 0164 1146     		mov	r1, r2
 18582 0166 1868     		ldr	r0, [r3]
 18583 0168 FFF7FEFF 		bl	strcat
2443:..\src/command_processing.c ****     step = ( (int)(MOT->pos_lim_sup >> MEM_P->enc[ENC_L].res[0]) / 10);
 18584              		.loc 1 2443 0
 18585 016c D7F8A431 		ldr	r3, [r7, #420]
 18586 0170 996B     		ldr	r1, [r3, #56]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 412


 18587 0172 97F8A321 		ldrb	r2, [r7, #419]	@ zero_extendqisi2
 18588 0176 D7F8A801 		ldr	r0, [r7, #424]
 18589 017a 1346     		mov	r3, r2
 18590 017c 5B00     		lsls	r3, r3, #1
 18591 017e 1344     		add	r3, r3, r2
 18592 0180 1B01     		lsls	r3, r3, #4
 18593 0182 0344     		add	r3, r3, r0
 18594 0184 03F29513 		addw	r3, r3, #405
 18595 0188 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 18596 018a 41FA03F3 		asr	r3, r1, r3
 18597 018e 3C4A     		ldr	r2, .L716+28
 18598 0190 82FB0312 		smull	r1, r2, r2, r3
 18599 0194 9210     		asrs	r2, r2, #2
 18600 0196 DB17     		asrs	r3, r3, #31
 18601 0198 D31A     		subs	r3, r2, r3
 18602 019a C7F89C31 		str	r3, [r7, #412]
2444:..\src/command_processing.c ****     for (i=1; i<=10;i++){
 18603              		.loc 1 2444 0
 18604 019e 0123     		movs	r3, #1
 18605 01a0 C7F8AC31 		str	r3, [r7, #428]
 18606 01a4 2BE0     		b	.L711
 18607              	.L712:
2445:..\src/command_processing.c ****         sprintf(str, "Bin %d [%d-%d]: %lu\r\n", i, step*(i-1)+1, step*(i), MEM_P->cnt.position_hist
 18608              		.loc 1 2445 0 discriminator 3
 18609 01a6 D7F8AC31 		ldr	r3, [r7, #428]
 18610 01aa 013B     		subs	r3, r3, #1
 18611 01ac D7F89C21 		ldr	r2, [r7, #412]
 18612 01b0 02FB03F3 		mul	r3, r2, r3
 18613 01b4 5C1C     		adds	r4, r3, #1
 18614 01b6 D7F89C31 		ldr	r3, [r7, #412]
 18615 01ba D7F8AC21 		ldr	r2, [r7, #428]
 18616 01be 02FB03F3 		mul	r3, r2, r3
 18617 01c2 D7F8AC21 		ldr	r2, [r7, #428]
 18618 01c6 511E     		subs	r1, r2, #1
 18619 01c8 D7F8A821 		ldr	r2, [r7, #424]
 18620 01cc 0631     		adds	r1, r1, #6
 18621 01ce 52F82120 		ldr	r2, [r2, r1, lsl #2]
 18622 01d2 07F59C70 		add	r0, r7, #312
 18623 01d6 0192     		str	r2, [sp, #4]
 18624 01d8 0093     		str	r3, [sp]
 18625 01da 2346     		mov	r3, r4
 18626 01dc D7F8AC21 		ldr	r2, [r7, #428]
 18627 01e0 2849     		ldr	r1, .L716+32
 18628 01e2 FFF7FEFF 		bl	sprintf
2446:..\src/command_processing.c ****         strcat(info_string, str);
 18629              		.loc 1 2446 0 discriminator 3
 18630 01e6 07F59C72 		add	r2, r7, #312
 18631 01ea 3B1D     		adds	r3, r7, #4
 18632 01ec 1146     		mov	r1, r2
 18633 01ee 1868     		ldr	r0, [r3]
 18634 01f0 FFF7FEFF 		bl	strcat
2444:..\src/command_processing.c ****     for (i=1; i<=10;i++){
 18635              		.loc 1 2444 0 discriminator 3
 18636 01f4 D7F8AC31 		ldr	r3, [r7, #428]
 18637 01f8 0133     		adds	r3, r3, #1
 18638 01fa C7F8AC31 		str	r3, [r7, #428]
 18639              	.L711:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 413


2444:..\src/command_processing.c ****     for (i=1; i<=10;i++){
 18640              		.loc 1 2444 0 is_stmt 0 discriminator 1
 18641 01fe D7F8AC31 		ldr	r3, [r7, #428]
 18642 0202 0A2B     		cmp	r3, #10
 18643 0204 CFDD     		ble	.L712
2447:..\src/command_processing.c ****     }
2448:..\src/command_processing.c ****     strcat(info_string, "\r\n");
 18644              		.loc 1 2448 0 is_stmt 1
 18645 0206 3B1D     		adds	r3, r7, #4
 18646 0208 1868     		ldr	r0, [r3]
 18647 020a FFF7FEFF 		bl	strlen
 18648 020e 0346     		mov	r3, r0
 18649 0210 1A46     		mov	r2, r3
 18650 0212 3B1D     		adds	r3, r7, #4
 18651 0214 1B68     		ldr	r3, [r3]
 18652 0216 1344     		add	r3, r3, r2
 18653 0218 144A     		ldr	r2, .L716+8
 18654 021a 1188     		ldrh	r1, [r2]	@ unaligned
 18655 021c 9278     		ldrb	r2, [r2, #2]
 18656 021e 1980     		strh	r1, [r3]	@ unaligned
 18657 0220 9A70     		strb	r2, [r3, #2]
2449:..\src/command_processing.c ****     
2450:..\src/command_processing.c ****     sprintf(str, "Current histogram (mA):\r\n");
 18658              		.loc 1 2450 0
 18659 0222 07F59C73 		add	r3, r7, #312
 18660 0226 184A     		ldr	r2, .L716+36
 18661 0228 1C46     		mov	r4, r3
 18662 022a 1546     		mov	r5, r2
 18663 022c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 18664 022e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 18665 0230 95E80700 		ldmia	r5, {r0, r1, r2}
 18666 0234 03C4     		stmia	r4!, {r0, r1}
 18667 0236 2280     		strh	r2, [r4]	@ movhi
2451:..\src/command_processing.c ****     strcat(info_string, str);
 18668              		.loc 1 2451 0
 18669 0238 07F59C72 		add	r2, r7, #312
 18670 023c 3B1D     		adds	r3, r7, #4
 18671 023e 1146     		mov	r1, r2
 18672 0240 1868     		ldr	r0, [r3]
 18673 0242 FFF7FEFF 		bl	strcat
2452:..\src/command_processing.c ****     step = ( (int)(MOT->current_limit) / 4);
 18674              		.loc 1 2452 0
 18675 0246 D7F8A431 		ldr	r3, [r7, #420]
 18676 024a B3F95C30 		ldrsh	r3, [r3, #92]
 18677 024e 002B     		cmp	r3, #0
 18678 0250 00DA     		bge	.L713
 18679 0252 0333     		adds	r3, r3, #3
 18680              	.L713:
 18681 0254 9B10     		asrs	r3, r3, #2
 18682 0256 1BB2     		sxth	r3, r3
 18683 0258 C7F89C31 		str	r3, [r7, #412]
2453:..\src/command_processing.c ****     for (i=1; i<=4;i++){
 18684              		.loc 1 2453 0
 18685 025c 0123     		movs	r3, #1
 18686 025e C7F8AC31 		str	r3, [r7, #428]
 18687 0262 3EE0     		b	.L714
 18688              	.L717:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 414


 18689              		.align	2
 18690              	.L716:
 18691 0264 00000000 		.word	g_mem
 18692 0268 A81D0000 		.word	.LC276
 18693 026c 58110000 		.word	.LC152
 18694 0270 C01D0000 		.word	.LC277
 18695 0274 EC1D0000 		.word	.LC278
 18696 0278 241E0000 		.word	.LC279
 18697 027c 5C1E0000 		.word	.LC280
 18698 0280 67666666 		.word	1717986919
 18699 0284 7C1E0000 		.word	.LC281
 18700 0288 941E0000 		.word	.LC282
 18701              	.L715:
2454:..\src/command_processing.c ****         sprintf(str, "Threshold %d [%d-%d]: %lu\r\n", i, step*(i-1), step*(i), MEM_P->cnt.current_h
 18702              		.loc 1 2454 0 discriminator 3
 18703 028c D7F8AC31 		ldr	r3, [r7, #428]
 18704 0290 013B     		subs	r3, r3, #1
 18705 0292 D7F89C21 		ldr	r2, [r7, #412]
 18706 0296 02FB03F4 		mul	r4, r2, r3
 18707 029a D7F89C31 		ldr	r3, [r7, #412]
 18708 029e D7F8AC21 		ldr	r2, [r7, #428]
 18709 02a2 02FB03F3 		mul	r3, r2, r3
 18710 02a6 D7F8AC21 		ldr	r2, [r7, #428]
 18711 02aa 511E     		subs	r1, r2, #1
 18712 02ac D7F8A821 		ldr	r2, [r7, #424]
 18713 02b0 1031     		adds	r1, r1, #16
 18714 02b2 52F82120 		ldr	r2, [r2, r1, lsl #2]
 18715 02b6 07F59C70 		add	r0, r7, #312
 18716 02ba 0192     		str	r2, [sp, #4]
 18717 02bc 0093     		str	r3, [sp]
 18718 02be 2346     		mov	r3, r4
 18719 02c0 D7F8AC21 		ldr	r2, [r7, #428]
 18720 02c4 6B49     		ldr	r1, .L718
 18721 02c6 FFF7FEFF 		bl	sprintf
2455:..\src/command_processing.c ****         strcat(info_string, str);
 18722              		.loc 1 2455 0 discriminator 3
 18723 02ca 07F59C72 		add	r2, r7, #312
 18724 02ce 3B1D     		adds	r3, r7, #4
 18725 02d0 1146     		mov	r1, r2
 18726 02d2 1868     		ldr	r0, [r3]
 18727 02d4 FFF7FEFF 		bl	strcat
2453:..\src/command_processing.c ****     for (i=1; i<=4;i++){
 18728              		.loc 1 2453 0 discriminator 3
 18729 02d8 D7F8AC31 		ldr	r3, [r7, #428]
 18730 02dc 0133     		adds	r3, r3, #1
 18731 02de C7F8AC31 		str	r3, [r7, #428]
 18732              	.L714:
2453:..\src/command_processing.c ****     for (i=1; i<=4;i++){
 18733              		.loc 1 2453 0 is_stmt 0 discriminator 1
 18734 02e2 D7F8AC31 		ldr	r3, [r7, #428]
 18735 02e6 042B     		cmp	r3, #4
 18736 02e8 D0DD     		ble	.L715
2456:..\src/command_processing.c ****     }
2457:..\src/command_processing.c ****     strcat(info_string, "\r\n");
 18737              		.loc 1 2457 0 is_stmt 1
 18738 02ea 3B1D     		adds	r3, r7, #4
 18739 02ec 1868     		ldr	r0, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 415


 18740 02ee FFF7FEFF 		bl	strlen
 18741 02f2 0346     		mov	r3, r0
 18742 02f4 1A46     		mov	r2, r3
 18743 02f6 3B1D     		adds	r3, r7, #4
 18744 02f8 1B68     		ldr	r3, [r3]
 18745 02fa 1344     		add	r3, r3, r2
 18746 02fc 5E4A     		ldr	r2, .L718+4
 18747 02fe 1188     		ldrh	r1, [r2]	@ unaligned
 18748 0300 9278     		ldrb	r2, [r2, #2]
 18749 0302 1980     		strh	r1, [r3]	@ unaligned
 18750 0304 9A70     		strb	r2, [r3, #2]
2458:..\src/command_processing.c ****             
2459:..\src/command_processing.c ****     sprintf(str, "Motions through EMG counter: %lu, %lu", MEM_P->cnt.motion_counter[0], MEM_P->cnt.
 18751              		.loc 1 2459 0
 18752 0306 D7F8A831 		ldr	r3, [r7, #424]
 18753 030a DA6E     		ldr	r2, [r3, #108]
 18754 030c D7F8A831 		ldr	r3, [r7, #424]
 18755 0310 1B6F     		ldr	r3, [r3, #112]
 18756 0312 07F59C70 		add	r0, r7, #312
 18757 0316 5949     		ldr	r1, .L718+8
 18758 0318 FFF7FEFF 		bl	sprintf
2460:..\src/command_processing.c ****     strcat(info_string, str);
 18759              		.loc 1 2460 0
 18760 031c 07F59C72 		add	r2, r7, #312
 18761 0320 3B1D     		adds	r3, r7, #4
 18762 0322 1146     		mov	r1, r2
 18763 0324 1868     		ldr	r0, [r3]
 18764 0326 FFF7FEFF 		bl	strcat
2461:..\src/command_processing.c ****     strcat(info_string, "\r\n");
 18765              		.loc 1 2461 0
 18766 032a 3B1D     		adds	r3, r7, #4
 18767 032c 1868     		ldr	r0, [r3]
 18768 032e FFF7FEFF 		bl	strlen
 18769 0332 0346     		mov	r3, r0
 18770 0334 1A46     		mov	r2, r3
 18771 0336 3B1D     		adds	r3, r7, #4
 18772 0338 1B68     		ldr	r3, [r3]
 18773 033a 1344     		add	r3, r3, r2
 18774 033c 4E4A     		ldr	r2, .L718+4
 18775 033e 1188     		ldrh	r1, [r2]	@ unaligned
 18776 0340 9278     		ldrb	r2, [r2, #2]
 18777 0342 1980     		strh	r1, [r3]	@ unaligned
 18778 0344 9A70     		strb	r2, [r3, #2]
2462:..\src/command_processing.c ****     
2463:..\src/command_processing.c ****     sprintf(str, "Rest position occurrences: %lu", MEM_P->cnt.rest_counter);
 18779              		.loc 1 2463 0
 18780 0346 D7F8A831 		ldr	r3, [r7, #424]
 18781 034a 1A6D     		ldr	r2, [r3, #80]
 18782 034c 07F59C73 		add	r3, r7, #312
 18783 0350 4B49     		ldr	r1, .L718+12
 18784 0352 1846     		mov	r0, r3
 18785 0354 FFF7FEFF 		bl	sprintf
2464:..\src/command_processing.c ****     strcat(info_string, str);
 18786              		.loc 1 2464 0
 18787 0358 07F59C72 		add	r2, r7, #312
 18788 035c 3B1D     		adds	r3, r7, #4
 18789 035e 1146     		mov	r1, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 416


 18790 0360 1868     		ldr	r0, [r3]
 18791 0362 FFF7FEFF 		bl	strcat
2465:..\src/command_processing.c ****     strcat(info_string, "\r\n");
 18792              		.loc 1 2465 0
 18793 0366 3B1D     		adds	r3, r7, #4
 18794 0368 1868     		ldr	r0, [r3]
 18795 036a FFF7FEFF 		bl	strlen
 18796 036e 0346     		mov	r3, r0
 18797 0370 1A46     		mov	r2, r3
 18798 0372 3B1D     		adds	r3, r7, #4
 18799 0374 1B68     		ldr	r3, [r3]
 18800 0376 1344     		add	r3, r3, r2
 18801 0378 3F4A     		ldr	r2, .L718+4
 18802 037a 1188     		ldrh	r1, [r2]	@ unaligned
 18803 037c 9278     		ldrb	r2, [r2, #2]
 18804 037e 1980     		strh	r1, [r3]	@ unaligned
 18805 0380 9A70     		strb	r2, [r3, #2]
2466:..\src/command_processing.c ****     
2467:..\src/command_processing.c ****     sprintf(str, "Angle total displacement (ticks): %lu", MEM_P->cnt.wire_disp);
 18806              		.loc 1 2467 0
 18807 0382 D7F8A831 		ldr	r3, [r7, #424]
 18808 0386 5A6D     		ldr	r2, [r3, #84]
 18809 0388 07F59C73 		add	r3, r7, #312
 18810 038c 3D49     		ldr	r1, .L718+16
 18811 038e 1846     		mov	r0, r3
 18812 0390 FFF7FEFF 		bl	sprintf
2468:..\src/command_processing.c ****     strcat(info_string, str);
 18813              		.loc 1 2468 0
 18814 0394 07F59C72 		add	r2, r7, #312
 18815 0398 3B1D     		adds	r3, r7, #4
 18816 039a 1146     		mov	r1, r2
 18817 039c 1868     		ldr	r0, [r3]
 18818 039e FFF7FEFF 		bl	strcat
2469:..\src/command_processing.c ****     strcat(info_string, "\r\n");
 18819              		.loc 1 2469 0
 18820 03a2 3B1D     		adds	r3, r7, #4
 18821 03a4 1868     		ldr	r0, [r3]
 18822 03a6 FFF7FEFF 		bl	strlen
 18823 03aa 0346     		mov	r3, r0
 18824 03ac 1A46     		mov	r2, r3
 18825 03ae 3B1D     		adds	r3, r7, #4
 18826 03b0 1B68     		ldr	r3, [r3]
 18827 03b2 1344     		add	r3, r3, r2
 18828 03b4 304A     		ldr	r2, .L718+4
 18829 03b6 1188     		ldrh	r1, [r2]	@ unaligned
 18830 03b8 9278     		ldrb	r2, [r2, #2]
 18831 03ba 1980     		strh	r1, [r3]	@ unaligned
 18832 03bc 9A70     		strb	r2, [r3, #2]
2470:..\src/command_processing.c ****     
2471:..\src/command_processing.c ****     sprintf(str, "Total power on time (sec): %lu", MEM_P->cnt.total_runtime);
 18833              		.loc 1 2471 0
 18834 03be D7F8A831 		ldr	r3, [r7, #424]
 18835 03c2 9A6D     		ldr	r2, [r3, #88]
 18836 03c4 07F59C73 		add	r3, r7, #312
 18837 03c8 2F49     		ldr	r1, .L718+20
 18838 03ca 1846     		mov	r0, r3
 18839 03cc FFF7FEFF 		bl	sprintf
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 417


2472:..\src/command_processing.c ****     strcat(info_string, str);
 18840              		.loc 1 2472 0
 18841 03d0 07F59C72 		add	r2, r7, #312
 18842 03d4 3B1D     		adds	r3, r7, #4
 18843 03d6 1146     		mov	r1, r2
 18844 03d8 1868     		ldr	r0, [r3]
 18845 03da FFF7FEFF 		bl	strcat
2473:..\src/command_processing.c ****     strcat(info_string, "\r\n");
 18846              		.loc 1 2473 0
 18847 03de 3B1D     		adds	r3, r7, #4
 18848 03e0 1868     		ldr	r0, [r3]
 18849 03e2 FFF7FEFF 		bl	strlen
 18850 03e6 0346     		mov	r3, r0
 18851 03e8 1A46     		mov	r2, r3
 18852 03ea 3B1D     		adds	r3, r7, #4
 18853 03ec 1B68     		ldr	r3, [r3]
 18854 03ee 1344     		add	r3, r3, r2
 18855 03f0 214A     		ldr	r2, .L718+4
 18856 03f2 1188     		ldrh	r1, [r2]	@ unaligned
 18857 03f4 9278     		ldrb	r2, [r2, #2]
 18858 03f6 1980     		strh	r1, [r3]	@ unaligned
 18859 03f8 9A70     		strb	r2, [r3, #2]
2474:..\src/command_processing.c ****     
2475:..\src/command_processing.c ****     sprintf(str, "Total rest position time (sec): %lu", MEM_P->cnt.total_time_rest);
 18860              		.loc 1 2475 0
 18861 03fa D7F8A831 		ldr	r3, [r7, #424]
 18862 03fe DA6D     		ldr	r2, [r3, #92]
 18863 0400 07F59C73 		add	r3, r7, #312
 18864 0404 2149     		ldr	r1, .L718+24
 18865 0406 1846     		mov	r0, r3
 18866 0408 FFF7FEFF 		bl	sprintf
2476:..\src/command_processing.c ****     strcat(info_string, str);
 18867              		.loc 1 2476 0
 18868 040c 07F59C72 		add	r2, r7, #312
 18869 0410 3B1D     		adds	r3, r7, #4
 18870 0412 1146     		mov	r1, r2
 18871 0414 1868     		ldr	r0, [r3]
 18872 0416 FFF7FEFF 		bl	strcat
2477:..\src/command_processing.c ****     strcat(info_string, "\r\n");
 18873              		.loc 1 2477 0
 18874 041a 3B1D     		adds	r3, r7, #4
 18875 041c 1868     		ldr	r0, [r3]
 18876 041e FFF7FEFF 		bl	strlen
 18877 0422 0346     		mov	r3, r0
 18878 0424 1A46     		mov	r2, r3
 18879 0426 3B1D     		adds	r3, r7, #4
 18880 0428 1B68     		ldr	r3, [r3]
 18881 042a 1344     		add	r3, r3, r2
 18882 042c 124A     		ldr	r2, .L718+4
 18883 042e 1188     		ldrh	r1, [r2]	@ unaligned
 18884 0430 9278     		ldrb	r2, [r2, #2]
 18885 0432 1980     		strh	r1, [r3]	@ unaligned
 18886 0434 9A70     		strb	r2, [r3, #2]
2478:..\src/command_processing.c ****     
2479:..\src/command_processing.c ****     
2480:..\src/command_processing.c ****     // R01 Project statistics (some are duplicated)
2481:..\src/command_processing.c ****     char CYDATA R01_str[300];
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 418


2482:..\src/command_processing.c ****     prepare_R01_info(R01_str);
 18887              		.loc 1 2482 0
 18888 0436 07F10C03 		add	r3, r7, #12
 18889 043a 1846     		mov	r0, r3
 18890 043c FFF7FEFF 		bl	prepare_R01_info
2483:..\src/command_processing.c ****     strcat(info_string, "\r\n");
 18891              		.loc 1 2483 0
 18892 0440 3B1D     		adds	r3, r7, #4
 18893 0442 1868     		ldr	r0, [r3]
 18894 0444 FFF7FEFF 		bl	strlen
 18895 0448 0346     		mov	r3, r0
 18896 044a 1A46     		mov	r2, r3
 18897 044c 3B1D     		adds	r3, r7, #4
 18898 044e 1B68     		ldr	r3, [r3]
 18899 0450 1344     		add	r3, r3, r2
 18900 0452 094A     		ldr	r2, .L718+4
 18901 0454 1188     		ldrh	r1, [r2]	@ unaligned
 18902 0456 9278     		ldrb	r2, [r2, #2]
 18903 0458 1980     		strh	r1, [r3]	@ unaligned
 18904 045a 9A70     		strb	r2, [r3, #2]
2484:..\src/command_processing.c ****     strcat(info_string, R01_str);
 18905              		.loc 1 2484 0
 18906 045c 07F10C02 		add	r2, r7, #12
 18907 0460 3B1D     		adds	r3, r7, #4
 18908 0462 1146     		mov	r1, r2
 18909 0464 1868     		ldr	r0, [r3]
 18910 0466 FFF7FEFF 		bl	strcat
2485:..\src/command_processing.c **** }
 18911              		.loc 1 2485 0
 18912 046a 00BF     		nop
 18913 046c 07F5DA77 		add	r7, r7, #436
 18914              		.cfi_def_cfa_offset 20
 18915 0470 BD46     		mov	sp, r7
 18916              		.cfi_def_cfa_register 13
 18917              		@ sp needed
 18918 0472 F0BD     		pop	{r4, r5, r6, r7, pc}
 18919              	.L719:
 18920              		.align	2
 18921              	.L718:
 18922 0474 B01E0000 		.word	.LC283
 18923 0478 58110000 		.word	.LC152
 18924 047c CC1E0000 		.word	.LC284
 18925 0480 F41E0000 		.word	.LC285
 18926 0484 141F0000 		.word	.LC286
 18927 0488 3C1F0000 		.word	.LC287
 18928 048c 5C1F0000 		.word	.LC288
 18929              		.cfi_endproc
 18930              	.LFE73:
 18931              		.size	prepare_counter_info, .-prepare_counter_info
 18932              		.section	.rodata
 18933              		.align	2
 18934              	.LC289:
 18935 1f80 52303120 		.ascii	"R01 PROJECT STATISTICS\015\012\000"
 18935      50524F4A 
 18935      45435420 
 18935      53544154 
 18935      49535449 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 419


 18936 1f99 000000   		.align	2
 18937              	.LC290:
 18938 1f9c 506F7765 		.ascii	"Power cycles: %lu\000"
 18938      72206379 
 18938      636C6573 
 18938      3A20256C 
 18938      7500
 18939 1fae 0000     		.align	2
 18940              	.LC291:
 18941 1fb0 454D4720 		.ascii	"EMG activations counter: %lu, %lu\000"
 18941      61637469 
 18941      76617469 
 18941      6F6E7320 
 18941      636F756E 
 18942 1fd2 0000     		.align	2
 18943              	.LC292:
 18944 1fd4 4E756D62 		.ascii	"Number of motions (close/open): %lu, %lu\000"
 18944      6572206F 
 18944      66206D6F 
 18944      74696F6E 
 18944      73202863 
 18945 1ffd 000000   		.align	2
 18946              	.LC293:
 18947 2000 45786365 		.ascii	"Excessive signal activity (close/open): %lu, %lu\000"
 18947      73736976 
 18947      65207369 
 18947      676E616C 
 18947      20616374 
 18948 2031 000000   		.align	2
 18949              	.LC294:
 18950 2034 546F7461 		.ascii	"Total runtime (sec): %lu\000"
 18950      6C207275 
 18950      6E74696D 
 18950      65202873 
 18950      6563293A 
 18951              		.global	__aeabi_ui2f
 18952 204d 000000   		.align	2
 18953              	.LC295:
 18954 2050 41766572 		.ascii	"Average duration of a powered-on session (sec): %.4"
 18954      61676520 
 18954      64757261 
 18954      74696F6E 
 18954      206F6620 
 18955 2083 6600     		.ascii	"f\000"
 18956 2085 000000   		.align	2
 18957              	.LC296:
 18958 2088 46726571 		.ascii	"Frequency of motions: %.4f\000"
 18958      75656E63 
 18958      79206F66 
 18958      206D6F74 
 18958      696F6E73 
 18959              		.section	.text.prepare_R01_info,"ax",%progbits
 18960              		.align	2
 18961              		.global	prepare_R01_info
 18962              		.thumb
 18963              		.thumb_func
 18964              		.type	prepare_R01_info, %function
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 420


 18965              	prepare_R01_info:
 18966              	.LFB74:
2486:..\src/command_processing.c **** 
2487:..\src/command_processing.c **** //==============================================================================
2488:..\src/command_processing.c **** //                                                 PREPARE GENERIC COUNTERS INFO
2489:..\src/command_processing.c **** //==============================================================================
2490:..\src/command_processing.c **** 
2491:..\src/command_processing.c **** void prepare_R01_info(char *info_string)
2492:..\src/command_processing.c **** {
 18967              		.loc 1 2492 0
 18968              		.cfi_startproc
 18969              		@ args = 0, pretend = 0, frame = 168
 18970              		@ frame_needed = 1, uses_anonymous_args = 0
 18971 0000 B0B5     		push	{r4, r5, r7, lr}
 18972              		.cfi_def_cfa_offset 16
 18973              		.cfi_offset 4, -16
 18974              		.cfi_offset 5, -12
 18975              		.cfi_offset 7, -8
 18976              		.cfi_offset 14, -4
 18977 0002 AAB0     		sub	sp, sp, #168
 18978              		.cfi_def_cfa_offset 184
 18979 0004 00AF     		add	r7, sp, #0
 18980              		.cfi_def_cfa_register 7
 18981 0006 7860     		str	r0, [r7, #4]
2493:..\src/command_processing.c ****     char str[150];  
2494:..\src/command_processing.c **** 
2495:..\src/command_processing.c ****     struct st_eeprom* MEM_P = &g_mem;    
 18982              		.loc 1 2495 0
 18983 0008 8A4B     		ldr	r3, .L721
 18984 000a C7F8A430 		str	r3, [r7, #164]
2496:..\src/command_processing.c **** 
2497:..\src/command_processing.c ****     strcpy(info_string, "");
 18985              		.loc 1 2497 0
 18986 000e 7B68     		ldr	r3, [r7, #4]
 18987 0010 0022     		movs	r2, #0
 18988 0012 1A70     		strb	r2, [r3]
2498:..\src/command_processing.c ****     
2499:..\src/command_processing.c ****     strcat(info_string, "R01 PROJECT STATISTICS\r\n");
 18989              		.loc 1 2499 0
 18990 0014 7868     		ldr	r0, [r7, #4]
 18991 0016 FFF7FEFF 		bl	strlen
 18992 001a 0346     		mov	r3, r0
 18993 001c 1A46     		mov	r2, r3
 18994 001e 7B68     		ldr	r3, [r7, #4]
 18995 0020 1344     		add	r3, r3, r2
 18996 0022 854A     		ldr	r2, .L721+4
 18997 0024 1D46     		mov	r5, r3
 18998 0026 1446     		mov	r4, r2
 18999 0028 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 19000 002a 2860     		str	r0, [r5]	@ unaligned
 19001 002c 6960     		str	r1, [r5, #4]	@ unaligned
 19002 002e AA60     		str	r2, [r5, #8]	@ unaligned
 19003 0030 EB60     		str	r3, [r5, #12]	@ unaligned
 19004 0032 03CC     		ldmia	r4!, {r0, r1}
 19005 0034 2861     		str	r0, [r5, #16]	@ unaligned
 19006 0036 6961     		str	r1, [r5, #20]	@ unaligned
 19007 0038 2378     		ldrb	r3, [r4]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 421


 19008 003a 2B76     		strb	r3, [r5, #24]
2500:..\src/command_processing.c ****     strcat(info_string, "\r\n");
 19009              		.loc 1 2500 0
 19010 003c 7868     		ldr	r0, [r7, #4]
 19011 003e FFF7FEFF 		bl	strlen
 19012 0042 0346     		mov	r3, r0
 19013 0044 1A46     		mov	r2, r3
 19014 0046 7B68     		ldr	r3, [r7, #4]
 19015 0048 1344     		add	r3, r3, r2
 19016 004a 7C4A     		ldr	r2, .L721+8
 19017 004c 1188     		ldrh	r1, [r2]	@ unaligned
 19018 004e 9278     		ldrb	r2, [r2, #2]
 19019 0050 1980     		strh	r1, [r3]	@ unaligned
 19020 0052 9A70     		strb	r2, [r3, #2]
2501:..\src/command_processing.c ****     
2502:..\src/command_processing.c ****     sprintf(str, "Power cycles: %lu", MEM_P->cnt.power_cycles);
 19021              		.loc 1 2502 0
 19022 0054 D7F8A430 		ldr	r3, [r7, #164]
 19023 0058 1A6E     		ldr	r2, [r3, #96]
 19024 005a 07F10C03 		add	r3, r7, #12
 19025 005e 7849     		ldr	r1, .L721+12
 19026 0060 1846     		mov	r0, r3
 19027 0062 FFF7FEFF 		bl	sprintf
2503:..\src/command_processing.c ****     strcat(info_string, str);
 19028              		.loc 1 2503 0
 19029 0066 07F10C03 		add	r3, r7, #12
 19030 006a 1946     		mov	r1, r3
 19031 006c 7868     		ldr	r0, [r7, #4]
 19032 006e FFF7FEFF 		bl	strcat
2504:..\src/command_processing.c ****     strcat(info_string, "\r\n");
 19033              		.loc 1 2504 0
 19034 0072 7868     		ldr	r0, [r7, #4]
 19035 0074 FFF7FEFF 		bl	strlen
 19036 0078 0346     		mov	r3, r0
 19037 007a 1A46     		mov	r2, r3
 19038 007c 7B68     		ldr	r3, [r7, #4]
 19039 007e 1344     		add	r3, r3, r2
 19040 0080 6E4A     		ldr	r2, .L721+8
 19041 0082 1188     		ldrh	r1, [r2]	@ unaligned
 19042 0084 9278     		ldrb	r2, [r2, #2]
 19043 0086 1980     		strh	r1, [r3]	@ unaligned
 19044 0088 9A70     		strb	r2, [r3, #2]
2505:..\src/command_processing.c ****     
2506:..\src/command_processing.c ****     sprintf(str, "EMG activations counter: %lu, %lu", MEM_P->cnt.emg_act_counter[0], MEM_P->cnt.emg
 19045              		.loc 1 2506 0
 19046 008a D7F8A430 		ldr	r3, [r7, #164]
 19047 008e 1A69     		ldr	r2, [r3, #16]
 19048 0090 D7F8A430 		ldr	r3, [r7, #164]
 19049 0094 5B69     		ldr	r3, [r3, #20]
 19050 0096 07F10C00 		add	r0, r7, #12
 19051 009a 6A49     		ldr	r1, .L721+16
 19052 009c FFF7FEFF 		bl	sprintf
2507:..\src/command_processing.c ****     strcat(info_string, str);
 19053              		.loc 1 2507 0
 19054 00a0 07F10C03 		add	r3, r7, #12
 19055 00a4 1946     		mov	r1, r3
 19056 00a6 7868     		ldr	r0, [r7, #4]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 422


 19057 00a8 FFF7FEFF 		bl	strcat
2508:..\src/command_processing.c ****     strcat(info_string, "\r\n");
 19058              		.loc 1 2508 0
 19059 00ac 7868     		ldr	r0, [r7, #4]
 19060 00ae FFF7FEFF 		bl	strlen
 19061 00b2 0346     		mov	r3, r0
 19062 00b4 1A46     		mov	r2, r3
 19063 00b6 7B68     		ldr	r3, [r7, #4]
 19064 00b8 1344     		add	r3, r3, r2
 19065 00ba 604A     		ldr	r2, .L721+8
 19066 00bc 1188     		ldrh	r1, [r2]	@ unaligned
 19067 00be 9278     		ldrb	r2, [r2, #2]
 19068 00c0 1980     		strh	r1, [r3]	@ unaligned
 19069 00c2 9A70     		strb	r2, [r3, #2]
2509:..\src/command_processing.c ****     
2510:..\src/command_processing.c ****     sprintf(str, "Number of motions (close/open): %lu, %lu", MEM_P->cnt.motion_counter[0], MEM_P->c
 19070              		.loc 1 2510 0
 19071 00c4 D7F8A430 		ldr	r3, [r7, #164]
 19072 00c8 DA6E     		ldr	r2, [r3, #108]
 19073 00ca D7F8A430 		ldr	r3, [r7, #164]
 19074 00ce 1B6F     		ldr	r3, [r3, #112]
 19075 00d0 07F10C00 		add	r0, r7, #12
 19076 00d4 5C49     		ldr	r1, .L721+20
 19077 00d6 FFF7FEFF 		bl	sprintf
2511:..\src/command_processing.c ****     strcat(info_string, str);
 19078              		.loc 1 2511 0
 19079 00da 07F10C03 		add	r3, r7, #12
 19080 00de 1946     		mov	r1, r3
 19081 00e0 7868     		ldr	r0, [r7, #4]
 19082 00e2 FFF7FEFF 		bl	strcat
2512:..\src/command_processing.c ****     strcat(info_string, "\r\n");
 19083              		.loc 1 2512 0
 19084 00e6 7868     		ldr	r0, [r7, #4]
 19085 00e8 FFF7FEFF 		bl	strlen
 19086 00ec 0346     		mov	r3, r0
 19087 00ee 1A46     		mov	r2, r3
 19088 00f0 7B68     		ldr	r3, [r7, #4]
 19089 00f2 1344     		add	r3, r3, r2
 19090 00f4 514A     		ldr	r2, .L721+8
 19091 00f6 1188     		ldrh	r1, [r2]	@ unaligned
 19092 00f8 9278     		ldrb	r2, [r2, #2]
 19093 00fa 1980     		strh	r1, [r3]	@ unaligned
 19094 00fc 9A70     		strb	r2, [r3, #2]
2513:..\src/command_processing.c ****     
2514:..\src/command_processing.c ****     sprintf(str, "Excessive signal activity (close/open): %lu, %lu", MEM_P->cnt.excessive_signal_ac
 19095              		.loc 1 2514 0
 19096 00fe D7F8A430 		ldr	r3, [r7, #164]
 19097 0102 5A6E     		ldr	r2, [r3, #100]
 19098 0104 D7F8A430 		ldr	r3, [r7, #164]
 19099 0108 9B6E     		ldr	r3, [r3, #104]
 19100 010a 07F10C00 		add	r0, r7, #12
 19101 010e 4F49     		ldr	r1, .L721+24
 19102 0110 FFF7FEFF 		bl	sprintf
2515:..\src/command_processing.c ****     strcat(info_string, str);
 19103              		.loc 1 2515 0
 19104 0114 07F10C03 		add	r3, r7, #12
 19105 0118 1946     		mov	r1, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 423


 19106 011a 7868     		ldr	r0, [r7, #4]
 19107 011c FFF7FEFF 		bl	strcat
2516:..\src/command_processing.c ****     strcat(info_string, "\r\n");
 19108              		.loc 1 2516 0
 19109 0120 7868     		ldr	r0, [r7, #4]
 19110 0122 FFF7FEFF 		bl	strlen
 19111 0126 0346     		mov	r3, r0
 19112 0128 1A46     		mov	r2, r3
 19113 012a 7B68     		ldr	r3, [r7, #4]
 19114 012c 1344     		add	r3, r3, r2
 19115 012e 434A     		ldr	r2, .L721+8
 19116 0130 1188     		ldrh	r1, [r2]	@ unaligned
 19117 0132 9278     		ldrb	r2, [r2, #2]
 19118 0134 1980     		strh	r1, [r3]	@ unaligned
 19119 0136 9A70     		strb	r2, [r3, #2]
2517:..\src/command_processing.c ****     
2518:..\src/command_processing.c ****     sprintf(str, "Total runtime (sec): %lu", MEM_P->cnt.total_runtime);
 19120              		.loc 1 2518 0
 19121 0138 D7F8A430 		ldr	r3, [r7, #164]
 19122 013c 9A6D     		ldr	r2, [r3, #88]
 19123 013e 07F10C03 		add	r3, r7, #12
 19124 0142 4349     		ldr	r1, .L721+28
 19125 0144 1846     		mov	r0, r3
 19126 0146 FFF7FEFF 		bl	sprintf
2519:..\src/command_processing.c ****     strcat(info_string, str);
 19127              		.loc 1 2519 0
 19128 014a 07F10C03 		add	r3, r7, #12
 19129 014e 1946     		mov	r1, r3
 19130 0150 7868     		ldr	r0, [r7, #4]
 19131 0152 FFF7FEFF 		bl	strcat
2520:..\src/command_processing.c ****     strcat(info_string, "\r\n");
 19132              		.loc 1 2520 0
 19133 0156 7868     		ldr	r0, [r7, #4]
 19134 0158 FFF7FEFF 		bl	strlen
 19135 015c 0346     		mov	r3, r0
 19136 015e 1A46     		mov	r2, r3
 19137 0160 7B68     		ldr	r3, [r7, #4]
 19138 0162 1344     		add	r3, r3, r2
 19139 0164 354A     		ldr	r2, .L721+8
 19140 0166 1188     		ldrh	r1, [r2]	@ unaligned
 19141 0168 9278     		ldrb	r2, [r2, #2]
 19142 016a 1980     		strh	r1, [r3]	@ unaligned
 19143 016c 9A70     		strb	r2, [r3, #2]
2521:..\src/command_processing.c ****     
2522:..\src/command_processing.c ****     sprintf(str, "Average duration of a powered-on session (sec): %.4f", (float)(MEM_P->cnt.total_r
 19144              		.loc 1 2522 0
 19145 016e D7F8A430 		ldr	r3, [r7, #164]
 19146 0172 9A6D     		ldr	r2, [r3, #88]
 19147 0174 D7F8A430 		ldr	r3, [r7, #164]
 19148 0178 1B6E     		ldr	r3, [r3, #96]
 19149 017a B2FBF3F3 		udiv	r3, r2, r3
 19150 017e 1846     		mov	r0, r3
 19151 0180 FFF7FEFF 		bl	__aeabi_ui2f
 19152 0184 0346     		mov	r3, r0
 19153 0186 1846     		mov	r0, r3
 19154 0188 FFF7FEFF 		bl	__aeabi_f2d
 19155 018c 0346     		mov	r3, r0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 424


 19156 018e 0C46     		mov	r4, r1
 19157 0190 07F10C00 		add	r0, r7, #12
 19158 0194 1A46     		mov	r2, r3
 19159 0196 2346     		mov	r3, r4
 19160 0198 2E49     		ldr	r1, .L721+32
 19161 019a FFF7FEFF 		bl	sprintf
2523:..\src/command_processing.c ****     strcat(info_string, str);
 19162              		.loc 1 2523 0
 19163 019e 07F10C03 		add	r3, r7, #12
 19164 01a2 1946     		mov	r1, r3
 19165 01a4 7868     		ldr	r0, [r7, #4]
 19166 01a6 FFF7FEFF 		bl	strcat
2524:..\src/command_processing.c ****     strcat(info_string, "\r\n");
 19167              		.loc 1 2524 0
 19168 01aa 7868     		ldr	r0, [r7, #4]
 19169 01ac FFF7FEFF 		bl	strlen
 19170 01b0 0346     		mov	r3, r0
 19171 01b2 1A46     		mov	r2, r3
 19172 01b4 7B68     		ldr	r3, [r7, #4]
 19173 01b6 1344     		add	r3, r3, r2
 19174 01b8 204A     		ldr	r2, .L721+8
 19175 01ba 1188     		ldrh	r1, [r2]	@ unaligned
 19176 01bc 9278     		ldrb	r2, [r2, #2]
 19177 01be 1980     		strh	r1, [r3]	@ unaligned
 19178 01c0 9A70     		strb	r2, [r3, #2]
2525:..\src/command_processing.c ****     
2526:..\src/command_processing.c ****     sprintf(str, "Frequency of motions: %.4f", (float)((MEM_P->cnt.emg_act_counter[0] + MEM_P->cnt.
 19179              		.loc 1 2526 0
 19180 01c2 D7F8A430 		ldr	r3, [r7, #164]
 19181 01c6 1A69     		ldr	r2, [r3, #16]
 19182 01c8 D7F8A430 		ldr	r3, [r7, #164]
 19183 01cc 5B69     		ldr	r3, [r3, #20]
 19184 01ce 1344     		add	r3, r3, r2
 19185 01d0 1846     		mov	r0, r3
 19186 01d2 FFF7FEFF 		bl	__aeabi_ui2f
 19187 01d6 0446     		mov	r4, r0
 19188 01d8 D7F8A430 		ldr	r3, [r7, #164]
 19189 01dc 9B6D     		ldr	r3, [r3, #88]
 19190 01de 1846     		mov	r0, r3
 19191 01e0 FFF7FEFF 		bl	__aeabi_ui2f
 19192 01e4 0346     		mov	r3, r0
 19193 01e6 1946     		mov	r1, r3
 19194 01e8 2046     		mov	r0, r4
 19195 01ea FFF7FEFF 		bl	__aeabi_fdiv
 19196 01ee 0346     		mov	r3, r0
 19197 01f0 1846     		mov	r0, r3
 19198 01f2 FFF7FEFF 		bl	__aeabi_f2d
 19199 01f6 0346     		mov	r3, r0
 19200 01f8 0C46     		mov	r4, r1
 19201 01fa 07F10C00 		add	r0, r7, #12
 19202 01fe 1A46     		mov	r2, r3
 19203 0200 2346     		mov	r3, r4
 19204 0202 1549     		ldr	r1, .L721+36
 19205 0204 FFF7FEFF 		bl	sprintf
2527:..\src/command_processing.c ****     strcat(info_string, str);
 19206              		.loc 1 2527 0
 19207 0208 07F10C03 		add	r3, r7, #12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 425


 19208 020c 1946     		mov	r1, r3
 19209 020e 7868     		ldr	r0, [r7, #4]
 19210 0210 FFF7FEFF 		bl	strcat
2528:..\src/command_processing.c ****     strcat(info_string, "\r\n");
 19211              		.loc 1 2528 0
 19212 0214 7868     		ldr	r0, [r7, #4]
 19213 0216 FFF7FEFF 		bl	strlen
 19214 021a 0346     		mov	r3, r0
 19215 021c 1A46     		mov	r2, r3
 19216 021e 7B68     		ldr	r3, [r7, #4]
 19217 0220 1344     		add	r3, r3, r2
 19218 0222 064A     		ldr	r2, .L721+8
 19219 0224 1188     		ldrh	r1, [r2]	@ unaligned
 19220 0226 9278     		ldrb	r2, [r2, #2]
 19221 0228 1980     		strh	r1, [r3]	@ unaligned
 19222 022a 9A70     		strb	r2, [r3, #2]
2529:..\src/command_processing.c **** 
2530:..\src/command_processing.c **** }
 19223              		.loc 1 2530 0
 19224 022c 00BF     		nop
 19225 022e A837     		adds	r7, r7, #168
 19226              		.cfi_def_cfa_offset 16
 19227 0230 BD46     		mov	sp, r7
 19228              		.cfi_def_cfa_register 13
 19229              		@ sp needed
 19230 0232 B0BD     		pop	{r4, r5, r7, pc}
 19231              	.L722:
 19232              		.align	2
 19233              	.L721:
 19234 0234 00000000 		.word	g_mem
 19235 0238 801F0000 		.word	.LC289
 19236 023c 58110000 		.word	.LC152
 19237 0240 9C1F0000 		.word	.LC290
 19238 0244 B01F0000 		.word	.LC291
 19239 0248 D41F0000 		.word	.LC292
 19240 024c 00200000 		.word	.LC293
 19241 0250 34200000 		.word	.LC294
 19242 0254 50200000 		.word	.LC295
 19243 0258 88200000 		.word	.LC296
 19244              		.cfi_endproc
 19245              	.LFE74:
 19246              		.size	prepare_R01_info, .-prepare_R01_info
 19247              		.section	.rodata
 19248 20a3 00       		.align	2
 19249              	.LC297:
 19250 20a4 47656E65 		.ascii	"Generic firmware v. 1.10.1 (PSoC5)\000"
 19250      72696320 
 19250      6669726D 
 19250      77617265 
 19250      20762E20 
 19251 20c7 00       		.align	2
 19252              	.LC298:
 19253 20c8 4669726D 		.ascii	"Firmware version: %s\015\012\000"
 19253      77617265 
 19253      20766572 
 19253      73696F6E 
 19253      3A202573 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 426


 19254 20df 00       		.align	2
 19255              	.LC299:
 19256 20e0 506F7369 		.ascii	"Position PID: \000"
 19256      74696F6E 
 19256      20504944 
 19256      3A2000
 19257 20ef 00       		.align	2
 19258              	.LC300:
 19259 20f0 43757272 		.ascii	"Current PID: \000"
 19259      656E7420 
 19259      5049443A 
 19259      2000
 19260 20fe 0000     		.align	2
 19261              	.LC301:
 19262 2100 5265736F 		.ascii	"Resolutions: \000"
 19262      6C757469 
 19262      6F6E733A 
 19262      2000
 19263 210e 0000     		.align	2
 19264              	.LC302:
 19265 2110 4F666673 		.ascii	"Offsets: \000"
 19265      6574733A 
 19265      2000
 19266 211a 0000     		.align	2
 19267              	.LC303:
 19268 211c 4D756C74 		.ascii	"Multipliers: \000"
 19268      69706C69 
 19268      6572733A 
 19268      2000
 19269 212a 0000     		.align	2
 19270              	.LC304:
 19271 212c 43757272 		.ascii	"Current lookup table p[0] - p[5]: %f, %f, %f, %f, %"
 19271      656E7420 
 19271      6C6F6F6B 
 19271      75702074 
 19271      61626C65 
 19272 215f 662C2025 		.ascii	"f, %f\015\012\000"
 19272      660D0A00 
 19273 2167 00       		.align	2
 19274              	.LC305:
 19275 2168 506F7369 		.ascii	"Position limit active: %d\015\012\000"
 19275      74696F6E 
 19275      206C696D 
 19275      69742061 
 19275      63746976 
 19276              		.align	2
 19277              	.LC306:
 19278 2184 506F7369 		.ascii	"Position limits: inf -> %ld, sup -> %ld\015\012\000"
 19278      74696F6E 
 19278      206C696D 
 19278      6974733A 
 19278      20696E66 
 19279              		.section	.text.prepare_SD_param_info,"ax",%progbits
 19280              		.align	2
 19281              		.global	prepare_SD_param_info
 19282              		.thumb
 19283              		.thumb_func
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 427


 19284              		.type	prepare_SD_param_info, %function
 19285              	prepare_SD_param_info:
 19286              	.LFB75:
2531:..\src/command_processing.c **** 
2532:..\src/command_processing.c **** //==============================================================================
2533:..\src/command_processing.c **** //                                                    PREPARE SD CARD PARAM INFO
2534:..\src/command_processing.c **** //==============================================================================
2535:..\src/command_processing.c **** 
2536:..\src/command_processing.c **** void prepare_SD_param_info(char *info_string)
2537:..\src/command_processing.c **** {
 19287              		.loc 1 2537 0
 19288              		.cfi_startproc
 19289              		@ args = 0, pretend = 0, frame = 152
 19290              		@ frame_needed = 1, uses_anonymous_args = 0
 19291 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 19292              		.cfi_def_cfa_offset 36
 19293              		.cfi_offset 4, -36
 19294              		.cfi_offset 5, -32
 19295              		.cfi_offset 6, -28
 19296              		.cfi_offset 7, -24
 19297              		.cfi_offset 8, -20
 19298              		.cfi_offset 9, -16
 19299              		.cfi_offset 10, -12
 19300              		.cfi_offset 11, -8
 19301              		.cfi_offset 14, -4
 19302 0004 B1B0     		sub	sp, sp, #196
 19303              		.cfi_def_cfa_offset 232
 19304 0006 0AAF     		add	r7, sp, #40
 19305              		.cfi_def_cfa 7, 192
 19306 0008 7861     		str	r0, [r7, #20]
2538:..\src/command_processing.c ****     char str[100];  
2539:..\src/command_processing.c ****     int i;
2540:..\src/command_processing.c ****            
2541:..\src/command_processing.c ****     // NOTE: use g_mem structure instead of c_mem because when changing parameters c_mem struct is 
2542:..\src/command_processing.c ****     
2543:..\src/command_processing.c ****     struct st_eeprom* MEM_P = &g_mem;    
 19307              		.loc 1 2543 0
 19308 000a AC4B     		ldr	r3, .L788
 19309 000c C7F88C30 		str	r3, [r7, #140]
2544:..\src/command_processing.c ****         
2545:..\src/command_processing.c ****     sprintf(info_string, "Firmware version: %s\r\n", VERSION);
 19310              		.loc 1 2545 0
 19311 0010 AB4A     		ldr	r2, .L788+4
 19312 0012 AC49     		ldr	r1, .L788+8
 19313 0014 7869     		ldr	r0, [r7, #20]
 19314 0016 FFF7FEFF 		bl	sprintf
2546:..\src/command_processing.c ****     
2547:..\src/command_processing.c ****     sprintf(str, "ID: %d\r\n", (int) MEM_P->dev.id);
 19315              		.loc 1 2547 0
 19316 001a D7F88C30 		ldr	r3, [r7, #140]
 19317 001e 93F8A030 		ldrb	r3, [r3, #160]	@ zero_extendqisi2
 19318 0022 1A46     		mov	r2, r3
 19319 0024 07F11C03 		add	r3, r7, #28
 19320 0028 A749     		ldr	r1, .L788+12
 19321 002a 1846     		mov	r0, r3
 19322 002c FFF7FEFF 		bl	sprintf
2548:..\src/command_processing.c ****     strcat(info_string, str);
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 428


 19323              		.loc 1 2548 0
 19324 0030 07F11C03 		add	r3, r7, #28
 19325 0034 1946     		mov	r1, r3
 19326 0036 7869     		ldr	r0, [r7, #20]
 19327 0038 FFF7FEFF 		bl	strcat
2549:..\src/command_processing.c ****     switch(MEM_P->dev.right_left){
 19328              		.loc 1 2549 0
 19329 003c D7F88C30 		ldr	r3, [r7, #140]
 19330 0040 93F8A730 		ldrb	r3, [r3, #167]	@ zero_extendqisi2
 19331 0044 002B     		cmp	r3, #0
 19332 0046 02D0     		beq	.L725
 19333 0048 012B     		cmp	r3, #1
 19334 004a 15D0     		beq	.L726
 19335 004c 26E0     		b	.L724
 19336              	.L725:
2550:..\src/command_processing.c ****         case RIGHT_HAND:
2551:..\src/command_processing.c ****             strcat(info_string, "Hand side: RIGHT\r\n");
 19337              		.loc 1 2551 0
 19338 004e 7869     		ldr	r0, [r7, #20]
 19339 0050 FFF7FEFF 		bl	strlen
 19340 0054 0346     		mov	r3, r0
 19341 0056 1A46     		mov	r2, r3
 19342 0058 7B69     		ldr	r3, [r7, #20]
 19343 005a 1344     		add	r3, r3, r2
 19344 005c 9B4A     		ldr	r2, .L788+16
 19345 005e 1D46     		mov	r5, r3
 19346 0060 1446     		mov	r4, r2
 19347 0062 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 19348 0064 2860     		str	r0, [r5]	@ unaligned
 19349 0066 6960     		str	r1, [r5, #4]	@ unaligned
 19350 0068 AA60     		str	r2, [r5, #8]	@ unaligned
 19351 006a EB60     		str	r3, [r5, #12]	@ unaligned
 19352 006c 2388     		ldrh	r3, [r4]	@ unaligned
 19353 006e A278     		ldrb	r2, [r4, #2]
 19354 0070 2B82     		strh	r3, [r5, #16]	@ unaligned
 19355 0072 1346     		mov	r3, r2
 19356 0074 AB74     		strb	r3, [r5, #18]
2552:..\src/command_processing.c ****             break;
 19357              		.loc 1 2552 0
 19358 0076 11E0     		b	.L724
 19359              	.L726:
2553:..\src/command_processing.c ****         case LEFT_HAND:
2554:..\src/command_processing.c ****             strcat(info_string, "Hand side: LEFT\r\n");
 19360              		.loc 1 2554 0
 19361 0078 7869     		ldr	r0, [r7, #20]
 19362 007a FFF7FEFF 		bl	strlen
 19363 007e 0346     		mov	r3, r0
 19364 0080 1A46     		mov	r2, r3
 19365 0082 7B69     		ldr	r3, [r7, #20]
 19366 0084 1344     		add	r3, r3, r2
 19367 0086 924A     		ldr	r2, .L788+20
 19368 0088 1D46     		mov	r5, r3
 19369 008a 1446     		mov	r4, r2
 19370 008c 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 19371 008e 2860     		str	r0, [r5]	@ unaligned
 19372 0090 6960     		str	r1, [r5, #4]	@ unaligned
 19373 0092 AA60     		str	r2, [r5, #8]	@ unaligned
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 429


 19374 0094 EB60     		str	r3, [r5, #12]	@ unaligned
 19375 0096 2388     		ldrh	r3, [r4]	@ unaligned
 19376 0098 2B82     		strh	r3, [r5, #16]	@ unaligned
2555:..\src/command_processing.c ****             break;
 19377              		.loc 1 2555 0
 19378 009a 00BF     		nop
 19379              	.L724:
2556:..\src/command_processing.c ****     }
2557:..\src/command_processing.c **** 
2558:..\src/command_processing.c ****     sprintf(str, "Date of HW maintenance: %02d/%02d/20%02d\r\n", (int)MEM_P->dev.hw_maint_date[0], 
 19380              		.loc 1 2558 0
 19381 009c D7F88C30 		ldr	r3, [r7, #140]
 19382 00a0 93F8A130 		ldrb	r3, [r3, #161]	@ zero_extendqisi2
 19383 00a4 1A46     		mov	r2, r3
 19384 00a6 D7F88C30 		ldr	r3, [r7, #140]
 19385 00aa 93F8A230 		ldrb	r3, [r3, #162]	@ zero_extendqisi2
 19386 00ae 1946     		mov	r1, r3
 19387 00b0 D7F88C30 		ldr	r3, [r7, #140]
 19388 00b4 93F8A330 		ldrb	r3, [r3, #163]	@ zero_extendqisi2
 19389 00b8 07F11C00 		add	r0, r7, #28
 19390 00bc 0093     		str	r3, [sp]
 19391 00be 0B46     		mov	r3, r1
 19392 00c0 8449     		ldr	r1, .L788+24
 19393 00c2 FFF7FEFF 		bl	sprintf
2559:..\src/command_processing.c ****     strcat(info_string, str);
 19394              		.loc 1 2559 0
 19395 00c6 07F11C03 		add	r3, r7, #28
 19396 00ca 1946     		mov	r1, r3
 19397 00cc 7869     		ldr	r0, [r7, #20]
 19398 00ce FFF7FEFF 		bl	strcat
2560:..\src/command_processing.c ****     
2561:..\src/command_processing.c ****     sprintf(str, "Date of usage stats period begin: %02d/%02d/20%02d\r\n", (int)MEM_P->dev.stats_pe
 19399              		.loc 1 2561 0
 19400 00d2 D7F88C30 		ldr	r3, [r7, #140]
 19401 00d6 93F8A430 		ldrb	r3, [r3, #164]	@ zero_extendqisi2
 19402 00da 1A46     		mov	r2, r3
 19403 00dc D7F88C30 		ldr	r3, [r7, #140]
 19404 00e0 93F8A530 		ldrb	r3, [r3, #165]	@ zero_extendqisi2
 19405 00e4 1946     		mov	r1, r3
 19406 00e6 D7F88C30 		ldr	r3, [r7, #140]
 19407 00ea 93F8A630 		ldrb	r3, [r3, #166]	@ zero_extendqisi2
 19408 00ee 07F11C00 		add	r0, r7, #28
 19409 00f2 0093     		str	r3, [sp]
 19410 00f4 0B46     		mov	r3, r1
 19411 00f6 7849     		ldr	r1, .L788+28
 19412 00f8 FFF7FEFF 		bl	sprintf
2562:..\src/command_processing.c ****     strcat(info_string, str);
 19413              		.loc 1 2562 0
 19414 00fc 07F11C03 		add	r3, r7, #28
 19415 0100 1946     		mov	r1, r3
 19416 0102 7869     		ldr	r0, [r7, #20]
 19417 0104 FFF7FEFF 		bl	strcat
 19418              	.LBB27:
2563:..\src/command_processing.c ****     
2564:..\src/command_processing.c **** 	for (uint8 k = 0; k <= MEM_P->dev.use_2nd_motor_flag; k++) {
 19419              		.loc 1 2564 0
 19420 0108 0023     		movs	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 430


 19421 010a 87F89330 		strb	r3, [r7, #147]
 19422 010e 00F05EBE 		b	.L727
 19423              	.L771:
 19424              	.LBB28:
2565:..\src/command_processing.c ****             
2566:..\src/command_processing.c **** 	    uint8 MOTOR_IDX = k;
 19425              		.loc 1 2566 0
 19426 0112 97F89330 		ldrb	r3, [r7, #147]
 19427 0116 87F88B30 		strb	r3, [r7, #139]
2567:..\src/command_processing.c ****         struct st_motor* MOT = &(MEM_P->motor[MOTOR_IDX]);      // Default motor
 19428              		.loc 1 2567 0
 19429 011a 97F88B20 		ldrb	r2, [r7, #139]	@ zero_extendqisi2
 19430 011e 1346     		mov	r3, r2
 19431 0120 DB00     		lsls	r3, r3, #3
 19432 0122 9B1A     		subs	r3, r3, r2
 19433 0124 1B01     		lsls	r3, r3, #4
 19434 0126 B033     		adds	r3, r3, #176
 19435 0128 D7F88C20 		ldr	r2, [r7, #140]
 19436 012c 1344     		add	r3, r3, r2
 19437 012e C7F88430 		str	r3, [r7, #132]
2568:..\src/command_processing.c ****         uint8 ENC_L = MOT->encoder_line;             // Associated encoder line
 19438              		.loc 1 2568 0
 19439 0132 D7F88430 		ldr	r3, [r7, #132]
 19440 0136 93F86030 		ldrb	r3, [r3, #96]
 19441 013a 87F88330 		strb	r3, [r7, #131]
2569:..\src/command_processing.c ****               
2570:..\src/command_processing.c ****         sprintf(str, "MOTOR %d INFO\r\n", MOTOR_IDX+1);
 19442              		.loc 1 2570 0
 19443 013e 97F88B30 		ldrb	r3, [r7, #139]	@ zero_extendqisi2
 19444 0142 5A1C     		adds	r2, r3, #1
 19445 0144 07F11C03 		add	r3, r7, #28
 19446 0148 6449     		ldr	r1, .L788+32
 19447 014a 1846     		mov	r0, r3
 19448 014c FFF7FEFF 		bl	sprintf
2571:..\src/command_processing.c ****         strcat(info_string, str);
 19449              		.loc 1 2571 0
 19450 0150 07F11C03 		add	r3, r7, #28
 19451 0154 1946     		mov	r1, r3
 19452 0156 7869     		ldr	r0, [r7, #20]
 19453 0158 FFF7FEFF 		bl	strcat
2572:..\src/command_processing.c ****                     
2573:..\src/command_processing.c ****         strcat(info_string, "PWM rescaling activation: ");
 19454              		.loc 1 2573 0
 19455 015c 7869     		ldr	r0, [r7, #20]
 19456 015e FFF7FEFF 		bl	strlen
 19457 0162 0346     		mov	r3, r0
 19458 0164 1A46     		mov	r2, r3
 19459 0166 7B69     		ldr	r3, [r7, #20]
 19460 0168 1344     		add	r3, r3, r2
 19461 016a 5D4A     		ldr	r2, .L788+36
 19462 016c 1D46     		mov	r5, r3
 19463 016e 1446     		mov	r4, r2
 19464 0170 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 19465 0172 2860     		str	r0, [r5]	@ unaligned
 19466 0174 6960     		str	r1, [r5, #4]	@ unaligned
 19467 0176 AA60     		str	r2, [r5, #8]	@ unaligned
 19468 0178 EB60     		str	r3, [r5, #12]	@ unaligned
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 431


 19469 017a 03CC     		ldmia	r4!, {r0, r1}
 19470 017c 2861     		str	r0, [r5, #16]	@ unaligned
 19471 017e 6961     		str	r1, [r5, #20]	@ unaligned
 19472 0180 2388     		ldrh	r3, [r4]	@ unaligned
 19473 0182 A278     		ldrb	r2, [r4, #2]
 19474 0184 2B83     		strh	r3, [r5, #24]	@ unaligned
 19475 0186 1346     		mov	r3, r2
 19476 0188 AB76     		strb	r3, [r5, #26]
2574:..\src/command_processing.c ****         if(MOT->activate_pwm_rescaling == MAXON_12V)
 19477              		.loc 1 2574 0
 19478 018a D7F88430 		ldr	r3, [r7, #132]
 19479 018e 93F83130 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 19480 0192 012B     		cmp	r3, #1
 19481 0194 0CD1     		bne	.L728
2575:..\src/command_processing.c ****             strcat(info_string, "YES\r\n");
 19482              		.loc 1 2575 0
 19483 0196 7869     		ldr	r0, [r7, #20]
 19484 0198 FFF7FEFF 		bl	strlen
 19485 019c 0346     		mov	r3, r0
 19486 019e 1A46     		mov	r2, r3
 19487 01a0 7B69     		ldr	r3, [r7, #20]
 19488 01a2 1344     		add	r3, r3, r2
 19489 01a4 4F4A     		ldr	r2, .L788+40
 19490 01a6 1068     		ldr	r0, [r2]	@ unaligned
 19491 01a8 1860     		str	r0, [r3]	@ unaligned
 19492 01aa 9288     		ldrh	r2, [r2, #4]	@ unaligned
 19493 01ac 9A80     		strh	r2, [r3, #4]	@ unaligned
 19494 01ae 0BE0     		b	.L729
 19495              	.L728:
2576:..\src/command_processing.c ****         else
2577:..\src/command_processing.c ****             strcat(info_string, "NO\r\n");
 19496              		.loc 1 2577 0
 19497 01b0 7869     		ldr	r0, [r7, #20]
 19498 01b2 FFF7FEFF 		bl	strlen
 19499 01b6 0346     		mov	r3, r0
 19500 01b8 1A46     		mov	r2, r3
 19501 01ba 7B69     		ldr	r3, [r7, #20]
 19502 01bc 1344     		add	r3, r3, r2
 19503 01be 4A4A     		ldr	r2, .L788+44
 19504 01c0 1068     		ldr	r0, [r2]	@ unaligned
 19505 01c2 1860     		str	r0, [r3]	@ unaligned
 19506 01c4 1279     		ldrb	r2, [r2, #4]
 19507 01c6 1A71     		strb	r2, [r3, #4]
 19508              	.L729:
2578:..\src/command_processing.c ****         
2579:..\src/command_processing.c ****         sprintf(str, "PWM Limit: %d\r\n", (int) dev_pwm_limit[MOTOR_IDX]);
 19509              		.loc 1 2579 0
 19510 01c8 97F88B30 		ldrb	r3, [r7, #139]	@ zero_extendqisi2
 19511 01cc 474A     		ldr	r2, .L788+48
 19512 01ce 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 19513 01d2 1A46     		mov	r2, r3
 19514 01d4 07F11C03 		add	r3, r7, #28
 19515 01d8 4549     		ldr	r1, .L788+52
 19516 01da 1846     		mov	r0, r3
 19517 01dc FFF7FEFF 		bl	sprintf
2580:..\src/command_processing.c ****         strcat(info_string, str);
 19518              		.loc 1 2580 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 432


 19519 01e0 07F11C03 		add	r3, r7, #28
 19520 01e4 1946     		mov	r1, r3
 19521 01e6 7869     		ldr	r0, [r7, #20]
 19522 01e8 FFF7FEFF 		bl	strcat
2581:..\src/command_processing.c **** 
2582:..\src/command_processing.c ****         strcat(info_string, "Position PID: ");
 19523              		.loc 1 2582 0
 19524 01ec 7869     		ldr	r0, [r7, #20]
 19525 01ee FFF7FEFF 		bl	strlen
 19526 01f2 0346     		mov	r3, r0
 19527 01f4 1A46     		mov	r2, r3
 19528 01f6 7B69     		ldr	r3, [r7, #20]
 19529 01f8 1344     		add	r3, r3, r2
 19530 01fa 3E4A     		ldr	r2, .L788+56
 19531 01fc 1C46     		mov	r4, r3
 19532 01fe 1346     		mov	r3, r2
 19533 0200 07CB     		ldmia	r3!, {r0, r1, r2}
 19534 0202 2060     		str	r0, [r4]	@ unaligned
 19535 0204 6160     		str	r1, [r4, #4]	@ unaligned
 19536 0206 A260     		str	r2, [r4, #8]	@ unaligned
 19537 0208 1A88     		ldrh	r2, [r3]	@ unaligned
 19538 020a 9B78     		ldrb	r3, [r3, #2]
 19539 020c A281     		strh	r2, [r4, #12]	@ unaligned
 19540 020e A373     		strb	r3, [r4, #14]
2583:..\src/command_processing.c ****         if(MOT->control_mode != CURR_AND_POS_CONTROL) {
 19541              		.loc 1 2583 0
 19542 0210 D7F88430 		ldr	r3, [r7, #132]
 19543 0214 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 19544 0218 032B     		cmp	r3, #3
 19545 021a 75D0     		beq	.L730
2584:..\src/command_processing.c ****             sprintf(str, "P -> %f  ", ((double) MOT->k_p / 65536));
 19546              		.loc 1 2584 0
 19547 021c D7F88430 		ldr	r3, [r7, #132]
 19548 0220 1B68     		ldr	r3, [r3]
 19549 0222 1846     		mov	r0, r3
 19550 0224 FFF7FEFF 		bl	__aeabi_i2d
 19551 0228 4FF00002 		mov	r2, #0
 19552 022c 324B     		ldr	r3, .L788+60
 19553 022e FFF7FEFF 		bl	__aeabi_ddiv
 19554 0232 0346     		mov	r3, r0
 19555 0234 0C46     		mov	r4, r1
 19556 0236 07F11C00 		add	r0, r7, #28
 19557 023a 1A46     		mov	r2, r3
 19558 023c 2346     		mov	r3, r4
 19559 023e 2F49     		ldr	r1, .L788+64
 19560 0240 FFF7FEFF 		bl	sprintf
2585:..\src/command_processing.c ****             strcat(info_string, str);
 19561              		.loc 1 2585 0
 19562 0244 07F11C03 		add	r3, r7, #28
 19563 0248 1946     		mov	r1, r3
 19564 024a 7869     		ldr	r0, [r7, #20]
 19565 024c FFF7FEFF 		bl	strcat
2586:..\src/command_processing.c ****             sprintf(str, "I -> %f  ", ((double) MOT->k_i / 65536));
 19566              		.loc 1 2586 0
 19567 0250 D7F88430 		ldr	r3, [r7, #132]
 19568 0254 5B68     		ldr	r3, [r3, #4]
 19569 0256 1846     		mov	r0, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 433


 19570 0258 FFF7FEFF 		bl	__aeabi_i2d
 19571 025c 4FF00002 		mov	r2, #0
 19572 0260 254B     		ldr	r3, .L788+60
 19573 0262 FFF7FEFF 		bl	__aeabi_ddiv
 19574 0266 0346     		mov	r3, r0
 19575 0268 0C46     		mov	r4, r1
 19576 026a 07F11C00 		add	r0, r7, #28
 19577 026e 1A46     		mov	r2, r3
 19578 0270 2346     		mov	r3, r4
 19579 0272 2349     		ldr	r1, .L788+68
 19580 0274 FFF7FEFF 		bl	sprintf
2587:..\src/command_processing.c ****             strcat(info_string, str);
 19581              		.loc 1 2587 0
 19582 0278 07F11C03 		add	r3, r7, #28
 19583 027c 1946     		mov	r1, r3
 19584 027e 7869     		ldr	r0, [r7, #20]
 19585 0280 FFF7FEFF 		bl	strcat
2588:..\src/command_processing.c ****             sprintf(str, "D -> %f\r\n", ((double) MOT->k_d / 65536));
 19586              		.loc 1 2588 0
 19587 0284 D7F88430 		ldr	r3, [r7, #132]
 19588 0288 9B68     		ldr	r3, [r3, #8]
 19589 028a 1846     		mov	r0, r3
 19590 028c FFF7FEFF 		bl	__aeabi_i2d
 19591 0290 4FF00002 		mov	r2, #0
 19592 0294 184B     		ldr	r3, .L788+60
 19593 0296 FFF7FEFF 		bl	__aeabi_ddiv
 19594 029a 0346     		mov	r3, r0
 19595 029c 0C46     		mov	r4, r1
 19596 029e 07F11C00 		add	r0, r7, #28
 19597 02a2 1A46     		mov	r2, r3
 19598 02a4 2346     		mov	r3, r4
 19599 02a6 1749     		ldr	r1, .L788+72
 19600 02a8 FFF7FEFF 		bl	sprintf
2589:..\src/command_processing.c ****             strcat(info_string, str);
 19601              		.loc 1 2589 0
 19602 02ac 07F11C03 		add	r3, r7, #28
 19603 02b0 1946     		mov	r1, r3
 19604 02b2 7869     		ldr	r0, [r7, #20]
 19605 02b4 FFF7FEFF 		bl	strcat
 19606 02b8 74E0     		b	.L731
 19607              	.L789:
 19608 02ba 00BF     		.align	2
 19609              	.L788:
 19610 02bc 00000000 		.word	g_mem
 19611 02c0 A4200000 		.word	.LC297
 19612 02c4 C8200000 		.word	.LC298
 19613 02c8 88120000 		.word	.LC156
 19614 02cc 38130000 		.word	.LC162
 19615 02d0 4C130000 		.word	.LC163
 19616 02d4 C01D0000 		.word	.LC277
 19617 02d8 EC1D0000 		.word	.LC278
 19618 02dc 94130000 		.word	.LC167
 19619 02e0 04140000 		.word	.LC176
 19620 02e4 F4130000 		.word	.LC174
 19621 02e8 FC130000 		.word	.LC175
 19622 02ec 00000000 		.word	dev_pwm_limit
 19623 02f0 2C140000 		.word	.LC179
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 434


 19624 02f4 E0200000 		.word	.LC299
 19625 02f8 0000F040 		.word	1089470464
 19626 02fc 44150000 		.word	.LC191
 19627 0300 50150000 		.word	.LC192
 19628 0304 5C150000 		.word	.LC193
 19629              	.L730:
2590:..\src/command_processing.c ****         }
2591:..\src/command_processing.c ****         else { 
2592:..\src/command_processing.c ****             sprintf(str, "P -> %f  ", ((double) MOT->k_p_dl / 65536));
 19630              		.loc 1 2592 0
 19631 0308 D7F88430 		ldr	r3, [r7, #132]
 19632 030c 9B69     		ldr	r3, [r3, #24]
 19633 030e 1846     		mov	r0, r3
 19634 0310 FFF7FEFF 		bl	__aeabi_i2d
 19635 0314 4FF00002 		mov	r2, #0
 19636 0318 CC4B     		ldr	r3, .L790
 19637 031a FFF7FEFF 		bl	__aeabi_ddiv
 19638 031e 0346     		mov	r3, r0
 19639 0320 0C46     		mov	r4, r1
 19640 0322 07F11C00 		add	r0, r7, #28
 19641 0326 1A46     		mov	r2, r3
 19642 0328 2346     		mov	r3, r4
 19643 032a C949     		ldr	r1, .L790+4
 19644 032c FFF7FEFF 		bl	sprintf
2593:..\src/command_processing.c ****             strcat(info_string, str);
 19645              		.loc 1 2593 0
 19646 0330 07F11C03 		add	r3, r7, #28
 19647 0334 1946     		mov	r1, r3
 19648 0336 7869     		ldr	r0, [r7, #20]
 19649 0338 FFF7FEFF 		bl	strcat
2594:..\src/command_processing.c ****             sprintf(str, "I -> %f  ", ((double) MOT->k_i_dl / 65536));
 19650              		.loc 1 2594 0
 19651 033c D7F88430 		ldr	r3, [r7, #132]
 19652 0340 DB69     		ldr	r3, [r3, #28]
 19653 0342 1846     		mov	r0, r3
 19654 0344 FFF7FEFF 		bl	__aeabi_i2d
 19655 0348 4FF00002 		mov	r2, #0
 19656 034c BF4B     		ldr	r3, .L790
 19657 034e FFF7FEFF 		bl	__aeabi_ddiv
 19658 0352 0346     		mov	r3, r0
 19659 0354 0C46     		mov	r4, r1
 19660 0356 07F11C00 		add	r0, r7, #28
 19661 035a 1A46     		mov	r2, r3
 19662 035c 2346     		mov	r3, r4
 19663 035e BD49     		ldr	r1, .L790+8
 19664 0360 FFF7FEFF 		bl	sprintf
2595:..\src/command_processing.c ****             strcat(info_string, str);
 19665              		.loc 1 2595 0
 19666 0364 07F11C03 		add	r3, r7, #28
 19667 0368 1946     		mov	r1, r3
 19668 036a 7869     		ldr	r0, [r7, #20]
 19669 036c FFF7FEFF 		bl	strcat
2596:..\src/command_processing.c ****             sprintf(str, "D -> %f\r\n", ((double) MOT->k_d_dl / 65536));
 19670              		.loc 1 2596 0
 19671 0370 D7F88430 		ldr	r3, [r7, #132]
 19672 0374 1B6A     		ldr	r3, [r3, #32]
 19673 0376 1846     		mov	r0, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 435


 19674 0378 FFF7FEFF 		bl	__aeabi_i2d
 19675 037c 4FF00002 		mov	r2, #0
 19676 0380 B24B     		ldr	r3, .L790
 19677 0382 FFF7FEFF 		bl	__aeabi_ddiv
 19678 0386 0346     		mov	r3, r0
 19679 0388 0C46     		mov	r4, r1
 19680 038a 07F11C00 		add	r0, r7, #28
 19681 038e 1A46     		mov	r2, r3
 19682 0390 2346     		mov	r3, r4
 19683 0392 B149     		ldr	r1, .L790+12
 19684 0394 FFF7FEFF 		bl	sprintf
2597:..\src/command_processing.c ****             strcat(info_string, str);
 19685              		.loc 1 2597 0
 19686 0398 07F11C03 		add	r3, r7, #28
 19687 039c 1946     		mov	r1, r3
 19688 039e 7869     		ldr	r0, [r7, #20]
 19689 03a0 FFF7FEFF 		bl	strcat
 19690              	.L731:
2598:..\src/command_processing.c ****         }
2599:..\src/command_processing.c **** 
2600:..\src/command_processing.c ****         strcat(info_string, "Current PID: ");
 19691              		.loc 1 2600 0
 19692 03a4 7869     		ldr	r0, [r7, #20]
 19693 03a6 FFF7FEFF 		bl	strlen
 19694 03aa 0346     		mov	r3, r0
 19695 03ac 1A46     		mov	r2, r3
 19696 03ae 7B69     		ldr	r3, [r7, #20]
 19697 03b0 1344     		add	r3, r3, r2
 19698 03b2 AA4A     		ldr	r2, .L790+16
 19699 03b4 1C46     		mov	r4, r3
 19700 03b6 1346     		mov	r3, r2
 19701 03b8 07CB     		ldmia	r3!, {r0, r1, r2}
 19702 03ba 2060     		str	r0, [r4]	@ unaligned
 19703 03bc 6160     		str	r1, [r4, #4]	@ unaligned
 19704 03be A260     		str	r2, [r4, #8]	@ unaligned
 19705 03c0 1B88     		ldrh	r3, [r3]	@ unaligned
 19706 03c2 A381     		strh	r3, [r4, #12]	@ unaligned
2601:..\src/command_processing.c ****         if(MOT->control_mode != CURR_AND_POS_CONTROL) {
 19707              		.loc 1 2601 0
 19708 03c4 D7F88430 		ldr	r3, [r7, #132]
 19709 03c8 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 19710 03cc 032B     		cmp	r3, #3
 19711 03ce 4ED0     		beq	.L732
2602:..\src/command_processing.c ****             sprintf(str, "P -> %f  ", ((double) MOT->k_p_c / 65536));
 19712              		.loc 1 2602 0
 19713 03d0 D7F88430 		ldr	r3, [r7, #132]
 19714 03d4 DB68     		ldr	r3, [r3, #12]
 19715 03d6 1846     		mov	r0, r3
 19716 03d8 FFF7FEFF 		bl	__aeabi_i2d
 19717 03dc 4FF00002 		mov	r2, #0
 19718 03e0 9A4B     		ldr	r3, .L790
 19719 03e2 FFF7FEFF 		bl	__aeabi_ddiv
 19720 03e6 0346     		mov	r3, r0
 19721 03e8 0C46     		mov	r4, r1
 19722 03ea 07F11C00 		add	r0, r7, #28
 19723 03ee 1A46     		mov	r2, r3
 19724 03f0 2346     		mov	r3, r4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 436


 19725 03f2 9749     		ldr	r1, .L790+4
 19726 03f4 FFF7FEFF 		bl	sprintf
2603:..\src/command_processing.c ****             strcat(info_string, str);
 19727              		.loc 1 2603 0
 19728 03f8 07F11C03 		add	r3, r7, #28
 19729 03fc 1946     		mov	r1, r3
 19730 03fe 7869     		ldr	r0, [r7, #20]
 19731 0400 FFF7FEFF 		bl	strcat
2604:..\src/command_processing.c ****             sprintf(str, "I -> %f  ", ((double) MOT->k_i_c / 65536));
 19732              		.loc 1 2604 0
 19733 0404 D7F88430 		ldr	r3, [r7, #132]
 19734 0408 1B69     		ldr	r3, [r3, #16]
 19735 040a 1846     		mov	r0, r3
 19736 040c FFF7FEFF 		bl	__aeabi_i2d
 19737 0410 4FF00002 		mov	r2, #0
 19738 0414 8D4B     		ldr	r3, .L790
 19739 0416 FFF7FEFF 		bl	__aeabi_ddiv
 19740 041a 0346     		mov	r3, r0
 19741 041c 0C46     		mov	r4, r1
 19742 041e 07F11C00 		add	r0, r7, #28
 19743 0422 1A46     		mov	r2, r3
 19744 0424 2346     		mov	r3, r4
 19745 0426 8B49     		ldr	r1, .L790+8
 19746 0428 FFF7FEFF 		bl	sprintf
2605:..\src/command_processing.c ****             strcat(info_string, str);
 19747              		.loc 1 2605 0
 19748 042c 07F11C03 		add	r3, r7, #28
 19749 0430 1946     		mov	r1, r3
 19750 0432 7869     		ldr	r0, [r7, #20]
 19751 0434 FFF7FEFF 		bl	strcat
2606:..\src/command_processing.c ****             sprintf(str, "D -> %f\r\n", ((double) MOT->k_d_c / 65536));
 19752              		.loc 1 2606 0
 19753 0438 D7F88430 		ldr	r3, [r7, #132]
 19754 043c 5B69     		ldr	r3, [r3, #20]
 19755 043e 1846     		mov	r0, r3
 19756 0440 FFF7FEFF 		bl	__aeabi_i2d
 19757 0444 4FF00002 		mov	r2, #0
 19758 0448 804B     		ldr	r3, .L790
 19759 044a FFF7FEFF 		bl	__aeabi_ddiv
 19760 044e 0346     		mov	r3, r0
 19761 0450 0C46     		mov	r4, r1
 19762 0452 07F11C00 		add	r0, r7, #28
 19763 0456 1A46     		mov	r2, r3
 19764 0458 2346     		mov	r3, r4
 19765 045a 7F49     		ldr	r1, .L790+12
 19766 045c FFF7FEFF 		bl	sprintf
2607:..\src/command_processing.c ****             strcat(info_string, str);
 19767              		.loc 1 2607 0
 19768 0460 07F11C03 		add	r3, r7, #28
 19769 0464 1946     		mov	r1, r3
 19770 0466 7869     		ldr	r0, [r7, #20]
 19771 0468 FFF7FEFF 		bl	strcat
 19772 046c 4DE0     		b	.L733
 19773              	.L732:
2608:..\src/command_processing.c **** 
2609:..\src/command_processing.c ****         }
2610:..\src/command_processing.c ****         else {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 437


2611:..\src/command_processing.c ****             sprintf(str, "P -> %f  ", ((double) MOT->k_p_c_dl / 65536));
 19774              		.loc 1 2611 0
 19775 046e D7F88430 		ldr	r3, [r7, #132]
 19776 0472 5B6A     		ldr	r3, [r3, #36]
 19777 0474 1846     		mov	r0, r3
 19778 0476 FFF7FEFF 		bl	__aeabi_i2d
 19779 047a 4FF00002 		mov	r2, #0
 19780 047e 734B     		ldr	r3, .L790
 19781 0480 FFF7FEFF 		bl	__aeabi_ddiv
 19782 0484 0346     		mov	r3, r0
 19783 0486 0C46     		mov	r4, r1
 19784 0488 07F11C00 		add	r0, r7, #28
 19785 048c 1A46     		mov	r2, r3
 19786 048e 2346     		mov	r3, r4
 19787 0490 6F49     		ldr	r1, .L790+4
 19788 0492 FFF7FEFF 		bl	sprintf
2612:..\src/command_processing.c ****             strcat(info_string, str);
 19789              		.loc 1 2612 0
 19790 0496 07F11C03 		add	r3, r7, #28
 19791 049a 1946     		mov	r1, r3
 19792 049c 7869     		ldr	r0, [r7, #20]
 19793 049e FFF7FEFF 		bl	strcat
2613:..\src/command_processing.c ****             sprintf(str, "I -> %f  ", ((double) MOT->k_i_c_dl / 65536));
 19794              		.loc 1 2613 0
 19795 04a2 D7F88430 		ldr	r3, [r7, #132]
 19796 04a6 9B6A     		ldr	r3, [r3, #40]
 19797 04a8 1846     		mov	r0, r3
 19798 04aa FFF7FEFF 		bl	__aeabi_i2d
 19799 04ae 4FF00002 		mov	r2, #0
 19800 04b2 664B     		ldr	r3, .L790
 19801 04b4 FFF7FEFF 		bl	__aeabi_ddiv
 19802 04b8 0346     		mov	r3, r0
 19803 04ba 0C46     		mov	r4, r1
 19804 04bc 07F11C00 		add	r0, r7, #28
 19805 04c0 1A46     		mov	r2, r3
 19806 04c2 2346     		mov	r3, r4
 19807 04c4 6349     		ldr	r1, .L790+8
 19808 04c6 FFF7FEFF 		bl	sprintf
2614:..\src/command_processing.c ****             strcat(info_string, str);
 19809              		.loc 1 2614 0
 19810 04ca 07F11C03 		add	r3, r7, #28
 19811 04ce 1946     		mov	r1, r3
 19812 04d0 7869     		ldr	r0, [r7, #20]
 19813 04d2 FFF7FEFF 		bl	strcat
2615:..\src/command_processing.c ****             sprintf(str, "D -> %f\r\n", ((double) MOT->k_d_c_dl / 65536));
 19814              		.loc 1 2615 0
 19815 04d6 D7F88430 		ldr	r3, [r7, #132]
 19816 04da DB6A     		ldr	r3, [r3, #44]
 19817 04dc 1846     		mov	r0, r3
 19818 04de FFF7FEFF 		bl	__aeabi_i2d
 19819 04e2 4FF00002 		mov	r2, #0
 19820 04e6 594B     		ldr	r3, .L790
 19821 04e8 FFF7FEFF 		bl	__aeabi_ddiv
 19822 04ec 0346     		mov	r3, r0
 19823 04ee 0C46     		mov	r4, r1
 19824 04f0 07F11C00 		add	r0, r7, #28
 19825 04f4 1A46     		mov	r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 438


 19826 04f6 2346     		mov	r3, r4
 19827 04f8 5749     		ldr	r1, .L790+12
 19828 04fa FFF7FEFF 		bl	sprintf
2616:..\src/command_processing.c ****             strcat(info_string, str);
 19829              		.loc 1 2616 0
 19830 04fe 07F11C03 		add	r3, r7, #28
 19831 0502 1946     		mov	r1, r3
 19832 0504 7869     		ldr	r0, [r7, #20]
 19833 0506 FFF7FEFF 		bl	strcat
 19834              	.L733:
2617:..\src/command_processing.c ****         }
2618:..\src/command_processing.c ****         if (MOT->activ == 0x01)
 19835              		.loc 1 2618 0
 19836 050a D7F88430 		ldr	r3, [r7, #132]
 19837 050e 93F83030 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 19838 0512 012B     		cmp	r3, #1
 19839 0514 14D1     		bne	.L734
2619:..\src/command_processing.c ****             strcat(info_string, "Startup activation: YES\r\n");
 19840              		.loc 1 2619 0
 19841 0516 7869     		ldr	r0, [r7, #20]
 19842 0518 FFF7FEFF 		bl	strlen
 19843 051c 0346     		mov	r3, r0
 19844 051e 1A46     		mov	r2, r3
 19845 0520 7B69     		ldr	r3, [r7, #20]
 19846 0522 1344     		add	r3, r3, r2
 19847 0524 4E4A     		ldr	r2, .L790+20
 19848 0526 1D46     		mov	r5, r3
 19849 0528 1446     		mov	r4, r2
 19850 052a 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 19851 052c 2860     		str	r0, [r5]	@ unaligned
 19852 052e 6960     		str	r1, [r5, #4]	@ unaligned
 19853 0530 AA60     		str	r2, [r5, #8]	@ unaligned
 19854 0532 EB60     		str	r3, [r5, #12]	@ unaligned
 19855 0534 03CC     		ldmia	r4!, {r0, r1}
 19856 0536 2861     		str	r0, [r5, #16]	@ unaligned
 19857 0538 6961     		str	r1, [r5, #20]	@ unaligned
 19858 053a 2388     		ldrh	r3, [r4]	@ unaligned
 19859 053c 2B83     		strh	r3, [r5, #24]	@ unaligned
 19860 053e 13E0     		b	.L735
 19861              	.L734:
2620:..\src/command_processing.c ****         else
2621:..\src/command_processing.c ****             strcat(info_string, "Startup activation: NO\r\n");
 19862              		.loc 1 2621 0
 19863 0540 7869     		ldr	r0, [r7, #20]
 19864 0542 FFF7FEFF 		bl	strlen
 19865 0546 0346     		mov	r3, r0
 19866 0548 1A46     		mov	r2, r3
 19867 054a 7B69     		ldr	r3, [r7, #20]
 19868 054c 1344     		add	r3, r3, r2
 19869 054e 454A     		ldr	r2, .L790+24
 19870 0550 1D46     		mov	r5, r3
 19871 0552 1446     		mov	r4, r2
 19872 0554 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 19873 0556 2860     		str	r0, [r5]	@ unaligned
 19874 0558 6960     		str	r1, [r5, #4]	@ unaligned
 19875 055a AA60     		str	r2, [r5, #8]	@ unaligned
 19876 055c EB60     		str	r3, [r5, #12]	@ unaligned
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 439


 19877 055e 03CC     		ldmia	r4!, {r0, r1}
 19878 0560 2861     		str	r0, [r5, #16]	@ unaligned
 19879 0562 6961     		str	r1, [r5, #20]	@ unaligned
 19880 0564 2378     		ldrb	r3, [r4]
 19881 0566 2B76     		strb	r3, [r5, #24]
 19882              	.L735:
2622:..\src/command_processing.c **** 
2623:..\src/command_processing.c ****         switch(MOT->input_mode) {
 19883              		.loc 1 2623 0
 19884 0568 D7F88430 		ldr	r3, [r7, #132]
 19885 056c 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 19886 0570 072B     		cmp	r3, #7
 19887 0572 00F2EA80 		bhi	.L736
 19888 0576 01A2     		adr	r2, .L738
 19889 0578 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 19890              		.p2align 2
 19891              	.L738:
 19892 057c 9D050000 		.word	.L737+1
 19893 0580 C1050000 		.word	.L739+1
 19894 0584 E9050000 		.word	.L740+1
 19895 0588 1B060000 		.word	.L741+1
 19896 058c 79060000 		.word	.L742+1
 19897 0590 A7060000 		.word	.L743+1
 19898 0594 D7060000 		.word	.L744+1
 19899 0598 05070000 		.word	.L745+1
 19900              		.p2align 1
 19901              	.L737:
2624:..\src/command_processing.c ****             case INPUT_MODE_EXTERNAL:
2625:..\src/command_processing.c ****                 strcat(info_string, "Input mode: USB\r\n");
 19902              		.loc 1 2625 0
 19903 059c 7869     		ldr	r0, [r7, #20]
 19904 059e FFF7FEFF 		bl	strlen
 19905 05a2 0346     		mov	r3, r0
 19906 05a4 1A46     		mov	r2, r3
 19907 05a6 7B69     		ldr	r3, [r7, #20]
 19908 05a8 1344     		add	r3, r3, r2
 19909 05aa 2F4A     		ldr	r2, .L790+28
 19910 05ac 1D46     		mov	r5, r3
 19911 05ae 1446     		mov	r4, r2
 19912 05b0 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 19913 05b2 2860     		str	r0, [r5]	@ unaligned
 19914 05b4 6960     		str	r1, [r5, #4]	@ unaligned
 19915 05b6 AA60     		str	r2, [r5, #8]	@ unaligned
 19916 05b8 EB60     		str	r3, [r5, #12]	@ unaligned
 19917 05ba 2388     		ldrh	r3, [r4]	@ unaligned
 19918 05bc 2B82     		strh	r3, [r5, #16]	@ unaligned
2626:..\src/command_processing.c ****                 break;
 19919              		.loc 1 2626 0
 19920 05be C4E0     		b	.L736
 19921              	.L739:
2627:..\src/command_processing.c ****             case INPUT_MODE_ENCODER3:
2628:..\src/command_processing.c ****                 strcat(info_string, "Input mode: Handle\r\n");
 19922              		.loc 1 2628 0
 19923 05c0 7869     		ldr	r0, [r7, #20]
 19924 05c2 FFF7FEFF 		bl	strlen
 19925 05c6 0346     		mov	r3, r0
 19926 05c8 1A46     		mov	r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 440


 19927 05ca 7B69     		ldr	r3, [r7, #20]
 19928 05cc 1344     		add	r3, r3, r2
 19929 05ce 274A     		ldr	r2, .L790+32
 19930 05d0 1D46     		mov	r5, r3
 19931 05d2 1446     		mov	r4, r2
 19932 05d4 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 19933 05d6 2860     		str	r0, [r5]	@ unaligned
 19934 05d8 6960     		str	r1, [r5, #4]	@ unaligned
 19935 05da AA60     		str	r2, [r5, #8]	@ unaligned
 19936 05dc EB60     		str	r3, [r5, #12]	@ unaligned
 19937 05de 2068     		ldr	r0, [r4]	@ unaligned
 19938 05e0 2861     		str	r0, [r5, #16]	@ unaligned
 19939 05e2 2379     		ldrb	r3, [r4, #4]
 19940 05e4 2B75     		strb	r3, [r5, #20]
2629:..\src/command_processing.c ****                 break;
 19941              		.loc 1 2629 0
 19942 05e6 B0E0     		b	.L736
 19943              	.L740:
2630:..\src/command_processing.c ****             case INPUT_MODE_EMG_PROPORTIONAL:
2631:..\src/command_processing.c ****                 strcat(info_string, "Input mode: EMG proportional\r\n");
 19944              		.loc 1 2631 0
 19945 05e8 7869     		ldr	r0, [r7, #20]
 19946 05ea FFF7FEFF 		bl	strlen
 19947 05ee 0346     		mov	r3, r0
 19948 05f0 1A46     		mov	r2, r3
 19949 05f2 7B69     		ldr	r3, [r7, #20]
 19950 05f4 1344     		add	r3, r3, r2
 19951 05f6 1E4A     		ldr	r2, .L790+36
 19952 05f8 1D46     		mov	r5, r3
 19953 05fa 1446     		mov	r4, r2
 19954 05fc 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 19955 05fe 2860     		str	r0, [r5]	@ unaligned
 19956 0600 6960     		str	r1, [r5, #4]	@ unaligned
 19957 0602 AA60     		str	r2, [r5, #8]	@ unaligned
 19958 0604 EB60     		str	r3, [r5, #12]	@ unaligned
 19959 0606 07CC     		ldmia	r4!, {r0, r1, r2}
 19960 0608 2861     		str	r0, [r5, #16]	@ unaligned
 19961 060a 6961     		str	r1, [r5, #20]	@ unaligned
 19962 060c AA61     		str	r2, [r5, #24]	@ unaligned
 19963 060e 2388     		ldrh	r3, [r4]	@ unaligned
 19964 0610 A278     		ldrb	r2, [r4, #2]
 19965 0612 AB83     		strh	r3, [r5, #28]	@ unaligned
 19966 0614 1346     		mov	r3, r2
 19967 0616 AB77     		strb	r3, [r5, #30]
2632:..\src/command_processing.c ****                 break;
 19968              		.loc 1 2632 0
 19969 0618 97E0     		b	.L736
 19970              	.L741:
2633:..\src/command_processing.c ****             case INPUT_MODE_EMG_INTEGRAL:
2634:..\src/command_processing.c ****                 strcat(info_string, "Input mode: EMG integral\r\n");
 19971              		.loc 1 2634 0
 19972 061a 7869     		ldr	r0, [r7, #20]
 19973 061c FFF7FEFF 		bl	strlen
 19974 0620 0346     		mov	r3, r0
 19975 0622 1A46     		mov	r2, r3
 19976 0624 7B69     		ldr	r3, [r7, #20]
 19977 0626 1344     		add	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 441


 19978 0628 124A     		ldr	r2, .L790+40
 19979 062a 1D46     		mov	r5, r3
 19980 062c 1446     		mov	r4, r2
 19981 062e 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 19982 0630 2860     		str	r0, [r5]	@ unaligned
 19983 0632 6960     		str	r1, [r5, #4]	@ unaligned
 19984 0634 AA60     		str	r2, [r5, #8]	@ unaligned
 19985 0636 EB60     		str	r3, [r5, #12]	@ unaligned
 19986 0638 03CC     		ldmia	r4!, {r0, r1}
 19987 063a 2861     		str	r0, [r5, #16]	@ unaligned
 19988 063c 6961     		str	r1, [r5, #20]	@ unaligned
 19989 063e 2388     		ldrh	r3, [r4]	@ unaligned
 19990 0640 A278     		ldrb	r2, [r4, #2]
 19991 0642 2B83     		strh	r3, [r5, #24]	@ unaligned
 19992 0644 1346     		mov	r3, r2
 19993 0646 AB76     		strb	r3, [r5, #26]
2635:..\src/command_processing.c ****                 break;
 19994              		.loc 1 2635 0
 19995 0648 7FE0     		b	.L736
 19996              	.L791:
 19997 064a 00BF     		.align	2
 19998              	.L790:
 19999 064c 0000F040 		.word	1089470464
 20000 0650 44150000 		.word	.LC191
 20001 0654 50150000 		.word	.LC192
 20002 0658 5C150000 		.word	.LC193
 20003 065c F0200000 		.word	.LC300
 20004 0660 84150000 		.word	.LC195
 20005 0664 A0150000 		.word	.LC196
 20006 0668 BC150000 		.word	.LC197
 20007 066c D0150000 		.word	.LC198
 20008 0670 E8150000 		.word	.LC199
 20009 0674 08160000 		.word	.LC200
 20010              	.L742:
2636:..\src/command_processing.c ****             case INPUT_MODE_EMG_FCFS:
2637:..\src/command_processing.c ****                 strcat(info_string, "Input mode: EMG FCFS\r\n");
 20011              		.loc 1 2637 0
 20012 0678 7869     		ldr	r0, [r7, #20]
 20013 067a FFF7FEFF 		bl	strlen
 20014 067e 0346     		mov	r3, r0
 20015 0680 1A46     		mov	r2, r3
 20016 0682 7B69     		ldr	r3, [r7, #20]
 20017 0684 1344     		add	r3, r3, r2
 20018 0686 BA4A     		ldr	r2, .L792
 20019 0688 1C46     		mov	r4, r3
 20020 068a 1546     		mov	r5, r2
 20021 068c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 20022 068e 2060     		str	r0, [r4]	@ unaligned
 20023 0690 6160     		str	r1, [r4, #4]	@ unaligned
 20024 0692 A260     		str	r2, [r4, #8]	@ unaligned
 20025 0694 E360     		str	r3, [r4, #12]	@ unaligned
 20026 0696 2868     		ldr	r0, [r5]	@ unaligned
 20027 0698 2061     		str	r0, [r4, #16]	@ unaligned
 20028 069a AB88     		ldrh	r3, [r5, #4]	@ unaligned
 20029 069c AA79     		ldrb	r2, [r5, #6]
 20030 069e A382     		strh	r3, [r4, #20]	@ unaligned
 20031 06a0 1346     		mov	r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 442


 20032 06a2 A375     		strb	r3, [r4, #22]
2638:..\src/command_processing.c ****                 break;
 20033              		.loc 1 2638 0
 20034 06a4 51E0     		b	.L736
 20035              	.L743:
2639:..\src/command_processing.c ****             case INPUT_MODE_EMG_FCFS_ADV:
2640:..\src/command_processing.c ****                 strcat(info_string, "Input mode: EMG FCFS ADV\r\n");
 20036              		.loc 1 2640 0
 20037 06a6 7869     		ldr	r0, [r7, #20]
 20038 06a8 FFF7FEFF 		bl	strlen
 20039 06ac 0346     		mov	r3, r0
 20040 06ae 1A46     		mov	r2, r3
 20041 06b0 7B69     		ldr	r3, [r7, #20]
 20042 06b2 1344     		add	r3, r3, r2
 20043 06b4 AF4A     		ldr	r2, .L792+4
 20044 06b6 1D46     		mov	r5, r3
 20045 06b8 1446     		mov	r4, r2
 20046 06ba 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 20047 06bc 2860     		str	r0, [r5]	@ unaligned
 20048 06be 6960     		str	r1, [r5, #4]	@ unaligned
 20049 06c0 AA60     		str	r2, [r5, #8]	@ unaligned
 20050 06c2 EB60     		str	r3, [r5, #12]	@ unaligned
 20051 06c4 03CC     		ldmia	r4!, {r0, r1}
 20052 06c6 2861     		str	r0, [r5, #16]	@ unaligned
 20053 06c8 6961     		str	r1, [r5, #20]	@ unaligned
 20054 06ca 2388     		ldrh	r3, [r4]	@ unaligned
 20055 06cc A278     		ldrb	r2, [r4, #2]
 20056 06ce 2B83     		strh	r3, [r5, #24]	@ unaligned
 20057 06d0 1346     		mov	r3, r2
 20058 06d2 AB76     		strb	r3, [r5, #26]
2641:..\src/command_processing.c ****                 break;
 20059              		.loc 1 2641 0
 20060 06d4 39E0     		b	.L736
 20061              	.L744:
2642:..\src/command_processing.c ****             case INPUT_MODE_JOYSTICK:
2643:..\src/command_processing.c ****                 strcat(info_string, "Input mode: Joystick\r\n");
 20062              		.loc 1 2643 0
 20063 06d6 7869     		ldr	r0, [r7, #20]
 20064 06d8 FFF7FEFF 		bl	strlen
 20065 06dc 0346     		mov	r3, r0
 20066 06de 1A46     		mov	r2, r3
 20067 06e0 7B69     		ldr	r3, [r7, #20]
 20068 06e2 1344     		add	r3, r3, r2
 20069 06e4 A44A     		ldr	r2, .L792+8
 20070 06e6 1C46     		mov	r4, r3
 20071 06e8 1546     		mov	r5, r2
 20072 06ea 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 20073 06ec 2060     		str	r0, [r4]	@ unaligned
 20074 06ee 6160     		str	r1, [r4, #4]	@ unaligned
 20075 06f0 A260     		str	r2, [r4, #8]	@ unaligned
 20076 06f2 E360     		str	r3, [r4, #12]	@ unaligned
 20077 06f4 2868     		ldr	r0, [r5]	@ unaligned
 20078 06f6 2061     		str	r0, [r4, #16]	@ unaligned
 20079 06f8 AB88     		ldrh	r3, [r5, #4]	@ unaligned
 20080 06fa AA79     		ldrb	r2, [r5, #6]
 20081 06fc A382     		strh	r3, [r4, #20]	@ unaligned
 20082 06fe 1346     		mov	r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 443


 20083 0700 A375     		strb	r3, [r4, #22]
2644:..\src/command_processing.c ****                 break;
 20084              		.loc 1 2644 0
 20085 0702 22E0     		b	.L736
 20086              	.L745:
2645:..\src/command_processing.c ****             case INPUT_MODE_EMG_PROPORTIONAL_NC:
2646:..\src/command_processing.c ****                 strcat(info_string, "Input mode: EMG proportional Normally Closed\r\n");
 20087              		.loc 1 2646 0
 20088 0704 7869     		ldr	r0, [r7, #20]
 20089 0706 FFF7FEFF 		bl	strlen
 20090 070a 0346     		mov	r3, r0
 20091 070c 1A46     		mov	r2, r3
 20092 070e 7B69     		ldr	r3, [r7, #20]
 20093 0710 1344     		add	r3, r3, r2
 20094 0712 9A4A     		ldr	r2, .L792+12
 20095 0714 1546     		mov	r5, r2
 20096 0716 9E46     		mov	lr, r3
 20097 0718 05F1200C 		add	ip, r5, #32
 20098              	.L746:
 20099 071c 7446     		mov	r4, lr
 20100 071e 2E46     		mov	r6, r5
 20101 0720 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 20102 0722 2060     		str	r0, [r4]	@ unaligned
 20103 0724 6160     		str	r1, [r4, #4]	@ unaligned
 20104 0726 A260     		str	r2, [r4, #8]	@ unaligned
 20105 0728 E360     		str	r3, [r4, #12]	@ unaligned
 20106 072a 1035     		adds	r5, r5, #16
 20107 072c 0EF1100E 		add	lr, lr, #16
 20108 0730 6545     		cmp	r5, ip
 20109 0732 F3D1     		bne	.L746
 20110 0734 7446     		mov	r4, lr
 20111 0736 2B46     		mov	r3, r5
 20112 0738 07CB     		ldmia	r3!, {r0, r1, r2}
 20113 073a 2060     		str	r0, [r4]	@ unaligned
 20114 073c 6160     		str	r1, [r4, #4]	@ unaligned
 20115 073e A260     		str	r2, [r4, #8]	@ unaligned
 20116 0740 1A88     		ldrh	r2, [r3]	@ unaligned
 20117 0742 9B78     		ldrb	r3, [r3, #2]
 20118 0744 A281     		strh	r2, [r4, #12]	@ unaligned
 20119 0746 A373     		strb	r3, [r4, #14]
2647:..\src/command_processing.c ****                 break;
 20120              		.loc 1 2647 0
 20121 0748 00BF     		nop
 20122              	.L736:
2648:..\src/command_processing.c ****         }
2649:..\src/command_processing.c **** 
2650:..\src/command_processing.c ****         switch(MOT->control_mode) {
 20123              		.loc 1 2650 0
 20124 074a D7F88430 		ldr	r3, [r7, #132]
 20125 074e 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 20126 0752 032B     		cmp	r3, #3
 20127 0754 63D8     		bhi	.L786
 20128 0756 01A2     		adr	r2, .L749
 20129 0758 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 20130              		.p2align 2
 20131              	.L749:
 20132 075c 6D070000 		.word	.L748+1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 444


 20133 0760 97070000 		.word	.L750+1
 20134 0764 BB070000 		.word	.L751+1
 20135 0768 E1070000 		.word	.L752+1
 20136              		.p2align 1
 20137              	.L748:
2651:..\src/command_processing.c ****             case CONTROL_ANGLE:
2652:..\src/command_processing.c ****                 strcat(info_string, "Control mode: Position\r\n");
 20138              		.loc 1 2652 0
 20139 076c 7869     		ldr	r0, [r7, #20]
 20140 076e FFF7FEFF 		bl	strlen
 20141 0772 0346     		mov	r3, r0
 20142 0774 1A46     		mov	r2, r3
 20143 0776 7B69     		ldr	r3, [r7, #20]
 20144 0778 1344     		add	r3, r3, r2
 20145 077a 814A     		ldr	r2, .L792+16
 20146 077c 1D46     		mov	r5, r3
 20147 077e 1446     		mov	r4, r2
 20148 0780 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 20149 0782 2860     		str	r0, [r5]	@ unaligned
 20150 0784 6960     		str	r1, [r5, #4]	@ unaligned
 20151 0786 AA60     		str	r2, [r5, #8]	@ unaligned
 20152 0788 EB60     		str	r3, [r5, #12]	@ unaligned
 20153 078a 03CC     		ldmia	r4!, {r0, r1}
 20154 078c 2861     		str	r0, [r5, #16]	@ unaligned
 20155 078e 6961     		str	r1, [r5, #20]	@ unaligned
 20156 0790 2378     		ldrb	r3, [r4]
 20157 0792 2B76     		strb	r3, [r5, #24]
2653:..\src/command_processing.c ****                 break;
 20158              		.loc 1 2653 0
 20159 0794 44E0     		b	.L753
 20160              	.L750:
2654:..\src/command_processing.c ****             case CONTROL_PWM:
2655:..\src/command_processing.c ****                 strcat(info_string, "Control mode: PWM\r\n");
 20161              		.loc 1 2655 0
 20162 0796 7869     		ldr	r0, [r7, #20]
 20163 0798 FFF7FEFF 		bl	strlen
 20164 079c 0346     		mov	r3, r0
 20165 079e 1A46     		mov	r2, r3
 20166 07a0 7B69     		ldr	r3, [r7, #20]
 20167 07a2 1344     		add	r3, r3, r2
 20168 07a4 774A     		ldr	r2, .L792+20
 20169 07a6 1D46     		mov	r5, r3
 20170 07a8 1446     		mov	r4, r2
 20171 07aa 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 20172 07ac 2860     		str	r0, [r5]	@ unaligned
 20173 07ae 6960     		str	r1, [r5, #4]	@ unaligned
 20174 07b0 AA60     		str	r2, [r5, #8]	@ unaligned
 20175 07b2 EB60     		str	r3, [r5, #12]	@ unaligned
 20176 07b4 2068     		ldr	r0, [r4]	@ unaligned
 20177 07b6 2861     		str	r0, [r5, #16]	@ unaligned
2656:..\src/command_processing.c ****                 break;
 20178              		.loc 1 2656 0
 20179 07b8 32E0     		b	.L753
 20180              	.L751:
2657:..\src/command_processing.c ****             case CONTROL_CURRENT:
2658:..\src/command_processing.c ****                 strcat(info_string, "Control mode: Current\r\n");
 20181              		.loc 1 2658 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 445


 20182 07ba 7869     		ldr	r0, [r7, #20]
 20183 07bc FFF7FEFF 		bl	strlen
 20184 07c0 0346     		mov	r3, r0
 20185 07c2 1A46     		mov	r2, r3
 20186 07c4 7B69     		ldr	r3, [r7, #20]
 20187 07c6 1344     		add	r3, r3, r2
 20188 07c8 6F4A     		ldr	r2, .L792+24
 20189 07ca 1D46     		mov	r5, r3
 20190 07cc 1446     		mov	r4, r2
 20191 07ce 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 20192 07d0 2860     		str	r0, [r5]	@ unaligned
 20193 07d2 6960     		str	r1, [r5, #4]	@ unaligned
 20194 07d4 AA60     		str	r2, [r5, #8]	@ unaligned
 20195 07d6 EB60     		str	r3, [r5, #12]	@ unaligned
 20196 07d8 03CC     		ldmia	r4!, {r0, r1}
 20197 07da 2861     		str	r0, [r5, #16]	@ unaligned
 20198 07dc 6961     		str	r1, [r5, #20]	@ unaligned
2659:..\src/command_processing.c ****                 break;
 20199              		.loc 1 2659 0
 20200 07de 1FE0     		b	.L753
 20201              	.L752:
2660:..\src/command_processing.c ****             case CURR_AND_POS_CONTROL:
2661:..\src/command_processing.c ****                 strcat(info_string, "Control mode: Position and Current\r\n");
 20202              		.loc 1 2661 0
 20203 07e0 7869     		ldr	r0, [r7, #20]
 20204 07e2 FFF7FEFF 		bl	strlen
 20205 07e6 0346     		mov	r3, r0
 20206 07e8 1A46     		mov	r2, r3
 20207 07ea 7B69     		ldr	r3, [r7, #20]
 20208 07ec 1344     		add	r3, r3, r2
 20209 07ee 674A     		ldr	r2, .L792+28
 20210 07f0 1446     		mov	r4, r2
 20211 07f2 9E46     		mov	lr, r3
 20212 07f4 04F1200C 		add	ip, r4, #32
 20213              	.L754:
 20214 07f8 7546     		mov	r5, lr
 20215 07fa 2646     		mov	r6, r4
 20216 07fc 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 20217 07fe 2860     		str	r0, [r5]	@ unaligned
 20218 0800 6960     		str	r1, [r5, #4]	@ unaligned
 20219 0802 AA60     		str	r2, [r5, #8]	@ unaligned
 20220 0804 EB60     		str	r3, [r5, #12]	@ unaligned
 20221 0806 1034     		adds	r4, r4, #16
 20222 0808 0EF1100E 		add	lr, lr, #16
 20223 080c 6445     		cmp	r4, ip
 20224 080e F3D1     		bne	.L754
 20225 0810 7346     		mov	r3, lr
 20226 0812 2246     		mov	r2, r4
 20227 0814 1068     		ldr	r0, [r2]	@ unaligned
 20228 0816 1860     		str	r0, [r3]	@ unaligned
 20229 0818 1279     		ldrb	r2, [r2, #4]
 20230 081a 1A71     		strb	r2, [r3, #4]
2662:..\src/command_processing.c ****                 break;
 20231              		.loc 1 2662 0
 20232 081c 00E0     		b	.L753
 20233              	.L786:
2663:..\src/command_processing.c ****             default:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 446


2664:..\src/command_processing.c ****                 break;
 20234              		.loc 1 2664 0
 20235 081e 00BF     		nop
 20236              	.L753:
2665:..\src/command_processing.c ****         }
2666:..\src/command_processing.c **** 
2667:..\src/command_processing.c ****         if (MEM_P->enc[ENC_L].double_encoder_on_off)
 20237              		.loc 1 2667 0
 20238 0820 97F88320 		ldrb	r2, [r7, #131]	@ zero_extendqisi2
 20239 0824 D7F88C10 		ldr	r1, [r7, #140]
 20240 0828 1346     		mov	r3, r2
 20241 082a 5B00     		lsls	r3, r3, #1
 20242 082c 1344     		add	r3, r3, r2
 20243 082e 1B01     		lsls	r3, r3, #4
 20244 0830 0B44     		add	r3, r3, r1
 20245 0832 03F5D873 		add	r3, r3, #432
 20246 0836 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 20247 0838 002B     		cmp	r3, #0
 20248 083a 1CD0     		beq	.L755
2668:..\src/command_processing.c ****             strcat(info_string, "Absolute encoder position: YES\r\n");
 20249              		.loc 1 2668 0
 20250 083c 7869     		ldr	r0, [r7, #20]
 20251 083e FFF7FEFF 		bl	strlen
 20252 0842 0346     		mov	r3, r0
 20253 0844 1A46     		mov	r2, r3
 20254 0846 7B69     		ldr	r3, [r7, #20]
 20255 0848 1344     		add	r3, r3, r2
 20256 084a 514A     		ldr	r2, .L792+32
 20257 084c 1446     		mov	r4, r2
 20258 084e 9E46     		mov	lr, r3
 20259 0850 04F1200C 		add	ip, r4, #32
 20260              	.L756:
 20261 0854 7546     		mov	r5, lr
 20262 0856 2646     		mov	r6, r4
 20263 0858 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 20264 085a 2860     		str	r0, [r5]	@ unaligned
 20265 085c 6960     		str	r1, [r5, #4]	@ unaligned
 20266 085e AA60     		str	r2, [r5, #8]	@ unaligned
 20267 0860 EB60     		str	r3, [r5, #12]	@ unaligned
 20268 0862 1034     		adds	r4, r4, #16
 20269 0864 0EF1100E 		add	lr, lr, #16
 20270 0868 6445     		cmp	r4, ip
 20271 086a F3D1     		bne	.L756
 20272 086c 7346     		mov	r3, lr
 20273 086e 2246     		mov	r2, r4
 20274 0870 1278     		ldrb	r2, [r2]
 20275 0872 1A70     		strb	r2, [r3]
 20276 0874 13E0     		b	.L757
 20277              	.L755:
2669:..\src/command_processing.c ****         else
2670:..\src/command_processing.c ****             strcat(info_string, "Absolute encoder position: NO\r\n");
 20278              		.loc 1 2670 0
 20279 0876 7869     		ldr	r0, [r7, #20]
 20280 0878 FFF7FEFF 		bl	strlen
 20281 087c 0346     		mov	r3, r0
 20282 087e 1A46     		mov	r2, r3
 20283 0880 7B69     		ldr	r3, [r7, #20]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 447


 20284 0882 1344     		add	r3, r3, r2
 20285 0884 434A     		ldr	r2, .L792+36
 20286 0886 1C46     		mov	r4, r3
 20287 0888 1546     		mov	r5, r2
 20288 088a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 20289 088c 2060     		str	r0, [r4]	@ unaligned
 20290 088e 6160     		str	r1, [r4, #4]	@ unaligned
 20291 0890 A260     		str	r2, [r4, #8]	@ unaligned
 20292 0892 E360     		str	r3, [r4, #12]	@ unaligned
 20293 0894 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 20294 0896 2061     		str	r0, [r4, #16]	@ unaligned
 20295 0898 6161     		str	r1, [r4, #20]	@ unaligned
 20296 089a A261     		str	r2, [r4, #24]	@ unaligned
 20297 089c E361     		str	r3, [r4, #28]	@ unaligned
 20298              	.L757:
2671:..\src/command_processing.c **** 
2672:..\src/command_processing.c ****         strcat(info_string, "Resolutions: ");
 20299              		.loc 1 2672 0
 20300 089e 7869     		ldr	r0, [r7, #20]
 20301 08a0 FFF7FEFF 		bl	strlen
 20302 08a4 0346     		mov	r3, r0
 20303 08a6 1A46     		mov	r2, r3
 20304 08a8 7B69     		ldr	r3, [r7, #20]
 20305 08aa 1344     		add	r3, r3, r2
 20306 08ac 3A4A     		ldr	r2, .L792+40
 20307 08ae 1C46     		mov	r4, r3
 20308 08b0 1346     		mov	r3, r2
 20309 08b2 07CB     		ldmia	r3!, {r0, r1, r2}
 20310 08b4 2060     		str	r0, [r4]	@ unaligned
 20311 08b6 6160     		str	r1, [r4, #4]	@ unaligned
 20312 08b8 A260     		str	r2, [r4, #8]	@ unaligned
 20313 08ba 1B88     		ldrh	r3, [r3]	@ unaligned
 20314 08bc A381     		strh	r3, [r4, #12]	@ unaligned
2673:..\src/command_processing.c ****         for (i = 0; i < NUM_OF_SENSORS; ++i) {
 20315              		.loc 1 2673 0
 20316 08be 0023     		movs	r3, #0
 20317 08c0 C7F89430 		str	r3, [r7, #148]
 20318 08c4 30E0     		b	.L758
 20319              	.L760:
2674:..\src/command_processing.c ****             sprintf(str, "%d", (int) MEM_P->enc[ENC_L].res[i]);
 20320              		.loc 1 2674 0
 20321 08c6 97F88320 		ldrb	r2, [r7, #131]	@ zero_extendqisi2
 20322 08ca D7F88C10 		ldr	r1, [r7, #140]
 20323 08ce 1346     		mov	r3, r2
 20324 08d0 5B00     		lsls	r3, r3, #1
 20325 08d2 1344     		add	r3, r3, r2
 20326 08d4 1B01     		lsls	r3, r3, #4
 20327 08d6 CA18     		adds	r2, r1, r3
 20328 08d8 D7F89430 		ldr	r3, [r7, #148]
 20329 08dc 1344     		add	r3, r3, r2
 20330 08de 03F29513 		addw	r3, r3, #405
 20331 08e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 20332 08e4 1A46     		mov	r2, r3
 20333 08e6 07F11C03 		add	r3, r7, #28
 20334 08ea 2C49     		ldr	r1, .L792+44
 20335 08ec 1846     		mov	r0, r3
 20336 08ee FFF7FEFF 		bl	sprintf
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 448


2675:..\src/command_processing.c ****             strcat(info_string, str);
 20337              		.loc 1 2675 0
 20338 08f2 07F11C03 		add	r3, r7, #28
 20339 08f6 1946     		mov	r1, r3
 20340 08f8 7869     		ldr	r0, [r7, #20]
 20341 08fa FFF7FEFF 		bl	strcat
2676:..\src/command_processing.c ****             if (i != NUM_OF_SENSORS-1){
 20342              		.loc 1 2676 0
 20343 08fe D7F89430 		ldr	r3, [r7, #148]
 20344 0902 022B     		cmp	r3, #2
 20345 0904 0BD0     		beq	.L759
2677:..\src/command_processing.c ****                 strcat(info_string, ", ");
 20346              		.loc 1 2677 0
 20347 0906 7869     		ldr	r0, [r7, #20]
 20348 0908 FFF7FEFF 		bl	strlen
 20349 090c 0346     		mov	r3, r0
 20350 090e 1A46     		mov	r2, r3
 20351 0910 7B69     		ldr	r3, [r7, #20]
 20352 0912 1344     		add	r3, r3, r2
 20353 0914 224A     		ldr	r2, .L792+48
 20354 0916 1188     		ldrh	r1, [r2]	@ unaligned
 20355 0918 9278     		ldrb	r2, [r2, #2]
 20356 091a 1980     		strh	r1, [r3]	@ unaligned
 20357 091c 9A70     		strb	r2, [r3, #2]
 20358              	.L759:
2673:..\src/command_processing.c ****             sprintf(str, "%d", (int) MEM_P->enc[ENC_L].res[i]);
 20359              		.loc 1 2673 0 discriminator 2
 20360 091e D7F89430 		ldr	r3, [r7, #148]
 20361 0922 0133     		adds	r3, r3, #1
 20362 0924 C7F89430 		str	r3, [r7, #148]
 20363              	.L758:
2673:..\src/command_processing.c ****             sprintf(str, "%d", (int) MEM_P->enc[ENC_L].res[i]);
 20364              		.loc 1 2673 0 is_stmt 0 discriminator 1
 20365 0928 D7F89430 		ldr	r3, [r7, #148]
 20366 092c 022B     		cmp	r3, #2
 20367 092e CADD     		ble	.L760
2678:..\src/command_processing.c ****             }                
2679:..\src/command_processing.c ****         }
2680:..\src/command_processing.c ****         strcat(info_string, "\r\n");
 20368              		.loc 1 2680 0 is_stmt 1
 20369 0930 7869     		ldr	r0, [r7, #20]
 20370 0932 FFF7FEFF 		bl	strlen
 20371 0936 0346     		mov	r3, r0
 20372 0938 1A46     		mov	r2, r3
 20373 093a 7B69     		ldr	r3, [r7, #20]
 20374 093c 1344     		add	r3, r3, r2
 20375 093e 194A     		ldr	r2, .L792+52
 20376 0940 1188     		ldrh	r1, [r2]	@ unaligned
 20377 0942 9278     		ldrb	r2, [r2, #2]
 20378 0944 1980     		strh	r1, [r3]	@ unaligned
 20379 0946 9A70     		strb	r2, [r3, #2]
2681:..\src/command_processing.c **** 
2682:..\src/command_processing.c ****         strcat(info_string, "Offsets: ");
 20380              		.loc 1 2682 0
 20381 0948 7869     		ldr	r0, [r7, #20]
 20382 094a FFF7FEFF 		bl	strlen
 20383 094e 0346     		mov	r3, r0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 449


 20384 0950 1A46     		mov	r2, r3
 20385 0952 7B69     		ldr	r3, [r7, #20]
 20386 0954 1344     		add	r3, r3, r2
 20387 0956 1449     		ldr	r1, .L792+56
 20388 0958 1A46     		mov	r2, r3
 20389 095a 0B46     		mov	r3, r1
 20390 095c 03CB     		ldmia	r3!, {r0, r1}
 20391 095e 1060     		str	r0, [r2]	@ unaligned
 20392 0960 5160     		str	r1, [r2, #4]	@ unaligned
 20393 0962 1B88     		ldrh	r3, [r3]	@ unaligned
 20394 0964 1381     		strh	r3, [r2, #8]	@ unaligned
2683:..\src/command_processing.c ****         for (i = 0; i < NUM_OF_SENSORS; ++i) {
 20395              		.loc 1 2683 0
 20396 0966 0023     		movs	r3, #0
 20397 0968 C7F89430 		str	r3, [r7, #148]
 20398 096c 5EE0     		b	.L761
 20399              	.L793:
 20400 096e 00BF     		.align	2
 20401              	.L792:
 20402 0970 24160000 		.word	.LC201
 20403 0974 3C160000 		.word	.LC202
 20404 0978 58160000 		.word	.LC203
 20405 097c 70160000 		.word	.LC204
 20406 0980 A0160000 		.word	.LC205
 20407 0984 BC160000 		.word	.LC206
 20408 0988 D0160000 		.word	.LC207
 20409 098c E8160000 		.word	.LC208
 20410 0990 10170000 		.word	.LC209
 20411 0994 34170000 		.word	.LC210
 20412 0998 00210000 		.word	.LC301
 20413 099c 64140000 		.word	.LC182
 20414 09a0 68140000 		.word	.LC183
 20415 09a4 58110000 		.word	.LC152
 20416 09a8 10210000 		.word	.LC302
 20417              	.L763:
2684:..\src/command_processing.c ****             sprintf(str, "%ld", (int32) MEM_P->enc[ENC_L].m_off[i] >> MEM_P->enc[ENC_L].res[i]);
 20418              		.loc 1 2684 0
 20419 09ac 97F88320 		ldrb	r2, [r7, #131]	@ zero_extendqisi2
 20420 09b0 D7F88C10 		ldr	r1, [r7, #140]
 20421 09b4 1346     		mov	r3, r2
 20422 09b6 5B00     		lsls	r3, r3, #1
 20423 09b8 1344     		add	r3, r3, r2
 20424 09ba 9B00     		lsls	r3, r3, #2
 20425 09bc D7F89420 		ldr	r2, [r7, #148]
 20426 09c0 1344     		add	r3, r3, r2
 20427 09c2 6633     		adds	r3, r3, #102
 20428 09c4 51F82310 		ldr	r1, [r1, r3, lsl #2]
 20429 09c8 97F88320 		ldrb	r2, [r7, #131]	@ zero_extendqisi2
 20430 09cc D7F88C00 		ldr	r0, [r7, #140]
 20431 09d0 1346     		mov	r3, r2
 20432 09d2 5B00     		lsls	r3, r3, #1
 20433 09d4 1344     		add	r3, r3, r2
 20434 09d6 1B01     		lsls	r3, r3, #4
 20435 09d8 C218     		adds	r2, r0, r3
 20436 09da D7F89430 		ldr	r3, [r7, #148]
 20437 09de 1344     		add	r3, r3, r2
 20438 09e0 03F29513 		addw	r3, r3, #405
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 450


 20439 09e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 20440 09e6 41FA03F2 		asr	r2, r1, r3
 20441 09ea 07F11C03 		add	r3, r7, #28
 20442 09ee CF49     		ldr	r1, .L794
 20443 09f0 1846     		mov	r0, r3
 20444 09f2 FFF7FEFF 		bl	sprintf
2685:..\src/command_processing.c ****             strcat(info_string, str);
 20445              		.loc 1 2685 0
 20446 09f6 07F11C03 		add	r3, r7, #28
 20447 09fa 1946     		mov	r1, r3
 20448 09fc 7869     		ldr	r0, [r7, #20]
 20449 09fe FFF7FEFF 		bl	strcat
2686:..\src/command_processing.c ****             if (i != NUM_OF_SENSORS-1){
 20450              		.loc 1 2686 0
 20451 0a02 D7F89430 		ldr	r3, [r7, #148]
 20452 0a06 022B     		cmp	r3, #2
 20453 0a08 0BD0     		beq	.L762
2687:..\src/command_processing.c ****                 strcat(info_string, ", ");
 20454              		.loc 1 2687 0
 20455 0a0a 7869     		ldr	r0, [r7, #20]
 20456 0a0c FFF7FEFF 		bl	strlen
 20457 0a10 0346     		mov	r3, r0
 20458 0a12 1A46     		mov	r2, r3
 20459 0a14 7B69     		ldr	r3, [r7, #20]
 20460 0a16 1344     		add	r3, r3, r2
 20461 0a18 C54A     		ldr	r2, .L794+4
 20462 0a1a 1188     		ldrh	r1, [r2]	@ unaligned
 20463 0a1c 9278     		ldrb	r2, [r2, #2]
 20464 0a1e 1980     		strh	r1, [r3]	@ unaligned
 20465 0a20 9A70     		strb	r2, [r3, #2]
 20466              	.L762:
2683:..\src/command_processing.c ****             sprintf(str, "%ld", (int32) MEM_P->enc[ENC_L].m_off[i] >> MEM_P->enc[ENC_L].res[i]);
 20467              		.loc 1 2683 0 discriminator 2
 20468 0a22 D7F89430 		ldr	r3, [r7, #148]
 20469 0a26 0133     		adds	r3, r3, #1
 20470 0a28 C7F89430 		str	r3, [r7, #148]
 20471              	.L761:
2683:..\src/command_processing.c ****             sprintf(str, "%ld", (int32) MEM_P->enc[ENC_L].m_off[i] >> MEM_P->enc[ENC_L].res[i]);
 20472              		.loc 1 2683 0 is_stmt 0 discriminator 1
 20473 0a2c D7F89430 		ldr	r3, [r7, #148]
 20474 0a30 022B     		cmp	r3, #2
 20475 0a32 BBDD     		ble	.L763
2688:..\src/command_processing.c ****             }
2689:..\src/command_processing.c ****         }
2690:..\src/command_processing.c ****         strcat(info_string, "\r\n");
 20476              		.loc 1 2690 0 is_stmt 1
 20477 0a34 7869     		ldr	r0, [r7, #20]
 20478 0a36 FFF7FEFF 		bl	strlen
 20479 0a3a 0346     		mov	r3, r0
 20480 0a3c 1A46     		mov	r2, r3
 20481 0a3e 7B69     		ldr	r3, [r7, #20]
 20482 0a40 1344     		add	r3, r3, r2
 20483 0a42 BC4A     		ldr	r2, .L794+8
 20484 0a44 1188     		ldrh	r1, [r2]	@ unaligned
 20485 0a46 9278     		ldrb	r2, [r2, #2]
 20486 0a48 1980     		strh	r1, [r3]	@ unaligned
 20487 0a4a 9A70     		strb	r2, [r3, #2]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 451


2691:..\src/command_processing.c ****             
2692:..\src/command_processing.c ****         strcat(info_string, "Multipliers: ");
 20488              		.loc 1 2692 0
 20489 0a4c 7869     		ldr	r0, [r7, #20]
 20490 0a4e FFF7FEFF 		bl	strlen
 20491 0a52 0346     		mov	r3, r0
 20492 0a54 1A46     		mov	r2, r3
 20493 0a56 7B69     		ldr	r3, [r7, #20]
 20494 0a58 1344     		add	r3, r3, r2
 20495 0a5a B74A     		ldr	r2, .L794+12
 20496 0a5c 1C46     		mov	r4, r3
 20497 0a5e 1346     		mov	r3, r2
 20498 0a60 07CB     		ldmia	r3!, {r0, r1, r2}
 20499 0a62 2060     		str	r0, [r4]	@ unaligned
 20500 0a64 6160     		str	r1, [r4, #4]	@ unaligned
 20501 0a66 A260     		str	r2, [r4, #8]	@ unaligned
 20502 0a68 1B88     		ldrh	r3, [r3]	@ unaligned
 20503 0a6a A381     		strh	r3, [r4, #12]	@ unaligned
2693:..\src/command_processing.c ****         for (i = 0; i < NUM_OF_SENSORS; ++i) {
 20504              		.loc 1 2693 0
 20505 0a6c 0023     		movs	r3, #0
 20506 0a6e C7F89430 		str	r3, [r7, #148]
 20507 0a72 35E0     		b	.L764
 20508              	.L766:
2694:..\src/command_processing.c ****             sprintf(str,"%f", (float) MEM_P->enc[ENC_L].m_mult[i]);
 20509              		.loc 1 2694 0
 20510 0a74 97F88320 		ldrb	r2, [r7, #131]	@ zero_extendqisi2
 20511 0a78 D7F88C10 		ldr	r1, [r7, #140]
 20512 0a7c 1346     		mov	r3, r2
 20513 0a7e 5B00     		lsls	r3, r3, #1
 20514 0a80 1344     		add	r3, r3, r2
 20515 0a82 9B00     		lsls	r3, r3, #2
 20516 0a84 D7F89420 		ldr	r2, [r7, #148]
 20517 0a88 1344     		add	r3, r3, r2
 20518 0a8a 6833     		adds	r3, r3, #104
 20519 0a8c 9B00     		lsls	r3, r3, #2
 20520 0a8e 0B44     		add	r3, r3, r1
 20521 0a90 5B68     		ldr	r3, [r3, #4]	@ float
 20522 0a92 1846     		mov	r0, r3
 20523 0a94 FFF7FEFF 		bl	__aeabi_f2d
 20524 0a98 0346     		mov	r3, r0
 20525 0a9a 0C46     		mov	r4, r1
 20526 0a9c 07F11C00 		add	r0, r7, #28
 20527 0aa0 1A46     		mov	r2, r3
 20528 0aa2 2346     		mov	r3, r4
 20529 0aa4 A549     		ldr	r1, .L794+16
 20530 0aa6 FFF7FEFF 		bl	sprintf
2695:..\src/command_processing.c ****             strcat(info_string, str);
 20531              		.loc 1 2695 0
 20532 0aaa 07F11C03 		add	r3, r7, #28
 20533 0aae 1946     		mov	r1, r3
 20534 0ab0 7869     		ldr	r0, [r7, #20]
 20535 0ab2 FFF7FEFF 		bl	strcat
2696:..\src/command_processing.c ****             if (i != NUM_OF_SENSORS-1){
 20536              		.loc 1 2696 0
 20537 0ab6 D7F89430 		ldr	r3, [r7, #148]
 20538 0aba 022B     		cmp	r3, #2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 452


 20539 0abc 0BD0     		beq	.L765
2697:..\src/command_processing.c ****                 strcat(info_string, ", ");
 20540              		.loc 1 2697 0
 20541 0abe 7869     		ldr	r0, [r7, #20]
 20542 0ac0 FFF7FEFF 		bl	strlen
 20543 0ac4 0346     		mov	r3, r0
 20544 0ac6 1A46     		mov	r2, r3
 20545 0ac8 7B69     		ldr	r3, [r7, #20]
 20546 0aca 1344     		add	r3, r3, r2
 20547 0acc 984A     		ldr	r2, .L794+4
 20548 0ace 1188     		ldrh	r1, [r2]	@ unaligned
 20549 0ad0 9278     		ldrb	r2, [r2, #2]
 20550 0ad2 1980     		strh	r1, [r3]	@ unaligned
 20551 0ad4 9A70     		strb	r2, [r3, #2]
 20552              	.L765:
2693:..\src/command_processing.c ****             sprintf(str,"%f", (float) MEM_P->enc[ENC_L].m_mult[i]);
 20553              		.loc 1 2693 0 discriminator 2
 20554 0ad6 D7F89430 		ldr	r3, [r7, #148]
 20555 0ada 0133     		adds	r3, r3, #1
 20556 0adc C7F89430 		str	r3, [r7, #148]
 20557              	.L764:
2693:..\src/command_processing.c ****             sprintf(str,"%f", (float) MEM_P->enc[ENC_L].m_mult[i]);
 20558              		.loc 1 2693 0 is_stmt 0 discriminator 1
 20559 0ae0 D7F89430 		ldr	r3, [r7, #148]
 20560 0ae4 022B     		cmp	r3, #2
 20561 0ae6 C5DD     		ble	.L766
2698:..\src/command_processing.c ****             }
2699:..\src/command_processing.c ****         }
2700:..\src/command_processing.c ****         strcat(info_string, "\r\n");       
 20562              		.loc 1 2700 0 is_stmt 1
 20563 0ae8 7869     		ldr	r0, [r7, #20]
 20564 0aea FFF7FEFF 		bl	strlen
 20565 0aee 0346     		mov	r3, r0
 20566 0af0 1A46     		mov	r2, r3
 20567 0af2 7B69     		ldr	r3, [r7, #20]
 20568 0af4 1344     		add	r3, r3, r2
 20569 0af6 8F4A     		ldr	r2, .L794+8
 20570 0af8 1188     		ldrh	r1, [r2]	@ unaligned
 20571 0afa 9278     		ldrb	r2, [r2, #2]
 20572 0afc 1980     		strh	r1, [r3]	@ unaligned
 20573 0afe 9A70     		strb	r2, [r3, #2]
2701:..\src/command_processing.c **** 
2702:..\src/command_processing.c **** 		sprintf(str, "Current lookup table p[0] - p[5]: %f, %f, %f, %f, %f, %f\r\n", MOT->curr_lookup[0],
 20574              		.loc 1 2702 0
 20575 0b00 D7F88430 		ldr	r3, [r7, #132]
 20576 0b04 5B6C     		ldr	r3, [r3, #68]	@ float
 20577 0b06 1846     		mov	r0, r3
 20578 0b08 FFF7FEFF 		bl	__aeabi_f2d
 20579 0b0c C7E90201 		strd	r0, [r7, #8]
 20580 0b10 D7F88430 		ldr	r3, [r7, #132]
 20581 0b14 9B6C     		ldr	r3, [r3, #72]	@ float
 20582 0b16 1846     		mov	r0, r3
 20583 0b18 FFF7FEFF 		bl	__aeabi_f2d
 20584 0b1c 0446     		mov	r4, r0
 20585 0b1e 0D46     		mov	r5, r1
 20586 0b20 D7F88430 		ldr	r3, [r7, #132]
 20587 0b24 DB6C     		ldr	r3, [r3, #76]	@ float
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 453


 20588 0b26 1846     		mov	r0, r3
 20589 0b28 FFF7FEFF 		bl	__aeabi_f2d
 20590 0b2c 8046     		mov	r8, r0
 20591 0b2e 8946     		mov	r9, r1
 20592 0b30 D7F88430 		ldr	r3, [r7, #132]
 20593 0b34 1B6D     		ldr	r3, [r3, #80]	@ float
 20594 0b36 1846     		mov	r0, r3
 20595 0b38 FFF7FEFF 		bl	__aeabi_f2d
 20596 0b3c 8246     		mov	r10, r0
 20597 0b3e 8B46     		mov	fp, r1
 20598 0b40 D7F88430 		ldr	r3, [r7, #132]
 20599 0b44 5B6D     		ldr	r3, [r3, #84]	@ float
 20600 0b46 1846     		mov	r0, r3
 20601 0b48 FFF7FEFF 		bl	__aeabi_f2d
 20602 0b4c C7E90001 		strd	r0, [r7]
 20603 0b50 D7F88430 		ldr	r3, [r7, #132]
 20604 0b54 9B6D     		ldr	r3, [r3, #88]	@ float
 20605 0b56 1846     		mov	r0, r3
 20606 0b58 FFF7FEFF 		bl	__aeabi_f2d
 20607 0b5c 0246     		mov	r2, r0
 20608 0b5e 0B46     		mov	r3, r1
 20609 0b60 07F11C00 		add	r0, r7, #28
 20610 0b64 CDE90823 		strd	r2, [sp, #32]
 20611 0b68 D7E90012 		ldrd	r1, [r7]
 20612 0b6c CDE90612 		strd	r1, [sp, #24]
 20613 0b70 CDE904AB 		strd	r10, [sp, #16]
 20614 0b74 CDE90289 		strd	r8, [sp, #8]
 20615 0b78 CDE90045 		strd	r4, [sp]
 20616 0b7c D7E90223 		ldrd	r2, [r7, #8]
 20617 0b80 6F49     		ldr	r1, .L794+20
 20618 0b82 FFF7FEFF 		bl	sprintf
2703:..\src/command_processing.c **** 		strcat(info_string, str);
 20619              		.loc 1 2703 0
 20620 0b86 07F11C03 		add	r3, r7, #28
 20621 0b8a 1946     		mov	r1, r3
 20622 0b8c 7869     		ldr	r0, [r7, #20]
 20623 0b8e FFF7FEFF 		bl	strcat
2704:..\src/command_processing.c **** 
2705:..\src/command_processing.c **** 		sprintf(str, "Position limit active: %d\r\n", (int)MOT->pos_lim_flag);
 20624              		.loc 1 2705 0
 20625 0b92 D7F88430 		ldr	r3, [r7, #132]
 20626 0b96 93F83330 		ldrb	r3, [r3, #51]	@ zero_extendqisi2
 20627 0b9a 1A46     		mov	r2, r3
 20628 0b9c 07F11C03 		add	r3, r7, #28
 20629 0ba0 6849     		ldr	r1, .L794+24
 20630 0ba2 1846     		mov	r0, r3
 20631 0ba4 FFF7FEFF 		bl	sprintf
2706:..\src/command_processing.c **** 		strcat(info_string, str);
 20632              		.loc 1 2706 0
 20633 0ba8 07F11C03 		add	r3, r7, #28
 20634 0bac 1946     		mov	r1, r3
 20635 0bae 7869     		ldr	r0, [r7, #20]
 20636 0bb0 FFF7FEFF 		bl	strcat
2707:..\src/command_processing.c **** 
2708:..\src/command_processing.c **** 		sprintf(str, "Position limits: inf -> %ld, sup -> %ld\r\n", (int32)MOT->pos_lim_inf >> MEM_P->enc
 20637              		.loc 1 2708 0
 20638 0bb4 D7F88430 		ldr	r3, [r7, #132]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 454


 20639 0bb8 596B     		ldr	r1, [r3, #52]
 20640 0bba 97F88320 		ldrb	r2, [r7, #131]	@ zero_extendqisi2
 20641 0bbe D7F88C00 		ldr	r0, [r7, #140]
 20642 0bc2 1346     		mov	r3, r2
 20643 0bc4 5B00     		lsls	r3, r3, #1
 20644 0bc6 1344     		add	r3, r3, r2
 20645 0bc8 1B01     		lsls	r3, r3, #4
 20646 0bca 0344     		add	r3, r3, r0
 20647 0bcc 03F29513 		addw	r3, r3, #405
 20648 0bd0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 20649 0bd2 41FA03F4 		asr	r4, r1, r3
 20650 0bd6 D7F88430 		ldr	r3, [r7, #132]
 20651 0bda 996B     		ldr	r1, [r3, #56]
 20652 0bdc 97F88320 		ldrb	r2, [r7, #131]	@ zero_extendqisi2
 20653 0be0 D7F88C00 		ldr	r0, [r7, #140]
 20654 0be4 1346     		mov	r3, r2
 20655 0be6 5B00     		lsls	r3, r3, #1
 20656 0be8 1344     		add	r3, r3, r2
 20657 0bea 1B01     		lsls	r3, r3, #4
 20658 0bec 0344     		add	r3, r3, r0
 20659 0bee 03F29513 		addw	r3, r3, #405
 20660 0bf2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 20661 0bf4 41FA03F3 		asr	r3, r1, r3
 20662 0bf8 07F11C00 		add	r0, r7, #28
 20663 0bfc 2246     		mov	r2, r4
 20664 0bfe 5249     		ldr	r1, .L794+28
 20665 0c00 FFF7FEFF 		bl	sprintf
2709:..\src/command_processing.c **** 		strcat(info_string, str);
 20666              		.loc 1 2709 0
 20667 0c04 07F11C03 		add	r3, r7, #28
 20668 0c08 1946     		mov	r1, r3
 20669 0c0a 7869     		ldr	r0, [r7, #20]
 20670 0c0c FFF7FEFF 		bl	strcat
2710:..\src/command_processing.c **** 
2711:..\src/command_processing.c **** 		sprintf(str, "Current limit: %d\r\n", (int)MOT->current_limit);
 20671              		.loc 1 2711 0
 20672 0c10 D7F88430 		ldr	r3, [r7, #132]
 20673 0c14 B3F95C30 		ldrsh	r3, [r3, #92]
 20674 0c18 1A46     		mov	r2, r3
 20675 0c1a 07F11C03 		add	r3, r7, #28
 20676 0c1e 4B49     		ldr	r1, .L794+32
 20677 0c20 1846     		mov	r0, r3
 20678 0c22 FFF7FEFF 		bl	sprintf
2712:..\src/command_processing.c **** 		strcat(info_string, str);
 20679              		.loc 1 2712 0
 20680 0c26 07F11C03 		add	r3, r7, #28
 20681 0c2a 1946     		mov	r1, r3
 20682 0c2c 7869     		ldr	r0, [r7, #20]
 20683 0c2e FFF7FEFF 		bl	strcat
2713:..\src/command_processing.c **** 
2714:..\src/command_processing.c **** 		if ((MOT->input_mode == INPUT_MODE_EMG_PROPORTIONAL) ||
 20684              		.loc 1 2714 0
 20685 0c32 D7F88430 		ldr	r3, [r7, #132]
 20686 0c36 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 20687 0c3a 022B     		cmp	r3, #2
 20688 0c3c 18D0     		beq	.L767
2715:..\src/command_processing.c **** 			(MOT->input_mode == INPUT_MODE_EMG_INTEGRAL) ||
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 455


 20689              		.loc 1 2715 0 discriminator 1
 20690 0c3e D7F88430 		ldr	r3, [r7, #132]
 20691 0c42 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
2714:..\src/command_processing.c **** 			(MOT->input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 20692              		.loc 1 2714 0 discriminator 1
 20693 0c46 032B     		cmp	r3, #3
 20694 0c48 12D0     		beq	.L767
2716:..\src/command_processing.c **** 			(MOT->input_mode == INPUT_MODE_EMG_FCFS) ||
 20695              		.loc 1 2716 0
 20696 0c4a D7F88430 		ldr	r3, [r7, #132]
 20697 0c4e 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
2715:..\src/command_processing.c **** 			(MOT->input_mode == INPUT_MODE_EMG_INTEGRAL) ||
 20698              		.loc 1 2715 0
 20699 0c52 042B     		cmp	r3, #4
 20700 0c54 0CD0     		beq	.L767
2717:..\src/command_processing.c ****             (MOT->input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 20701              		.loc 1 2717 0
 20702 0c56 D7F88430 		ldr	r3, [r7, #132]
 20703 0c5a 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
2716:..\src/command_processing.c **** 			(MOT->input_mode == INPUT_MODE_EMG_FCFS) ||
 20704              		.loc 1 2716 0
 20705 0c5e 052B     		cmp	r3, #5
 20706 0c60 06D0     		beq	.L767
2718:..\src/command_processing.c **** 			(MOT->input_mode == INPUT_MODE_EMG_PROPORTIONAL_NC)) {
 20707              		.loc 1 2718 0
 20708 0c62 D7F88430 		ldr	r3, [r7, #132]
 20709 0c66 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
2717:..\src/command_processing.c ****             (MOT->input_mode == INPUT_MODE_EMG_FCFS_ADV) ||
 20710              		.loc 1 2717 0
 20711 0c6a 072B     		cmp	r3, #7
 20712 0c6c 40F0AA80 		bne	.L768
 20713              	.L767:
2719:..\src/command_processing.c **** 			sprintf(str, "EMG thresholds [0 - 1024]: %u, %u", MEM_P->emg.emg_threshold[0], MEM_P->emg.emg_th
 20714              		.loc 1 2719 0
 20715 0c70 D7F88C30 		ldr	r3, [r7, #140]
 20716 0c74 B3F8F031 		ldrh	r3, [r3, #496]
 20717 0c78 1A46     		mov	r2, r3
 20718 0c7a D7F88C30 		ldr	r3, [r7, #140]
 20719 0c7e B3F8F231 		ldrh	r3, [r3, #498]
 20720 0c82 07F11C00 		add	r0, r7, #28
 20721 0c86 3249     		ldr	r1, .L794+36
 20722 0c88 FFF7FEFF 		bl	sprintf
2720:..\src/command_processing.c **** 			strcat(info_string, str);
 20723              		.loc 1 2720 0
 20724 0c8c 07F11C03 		add	r3, r7, #28
 20725 0c90 1946     		mov	r1, r3
 20726 0c92 7869     		ldr	r0, [r7, #20]
 20727 0c94 FFF7FEFF 		bl	strcat
2721:..\src/command_processing.c **** 			strcat(info_string, "\r\n");
 20728              		.loc 1 2721 0
 20729 0c98 7869     		ldr	r0, [r7, #20]
 20730 0c9a FFF7FEFF 		bl	strlen
 20731 0c9e 0346     		mov	r3, r0
 20732 0ca0 1A46     		mov	r2, r3
 20733 0ca2 7B69     		ldr	r3, [r7, #20]
 20734 0ca4 1344     		add	r3, r3, r2
 20735 0ca6 234A     		ldr	r2, .L794+8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 456


 20736 0ca8 1188     		ldrh	r1, [r2]	@ unaligned
 20737 0caa 9278     		ldrb	r2, [r2, #2]
 20738 0cac 1980     		strh	r1, [r3]	@ unaligned
 20739 0cae 9A70     		strb	r2, [r3, #2]
2722:..\src/command_processing.c **** 
2723:..\src/command_processing.c **** 			sprintf(str, "EMG max values [0 - 4096]: %lu, %lu", MEM_P->emg.emg_max_value[0], MEM_P->emg.emg_
 20740              		.loc 1 2723 0
 20741 0cb0 D7F88C30 		ldr	r3, [r7, #140]
 20742 0cb4 D3F8F421 		ldr	r2, [r3, #500]
 20743 0cb8 D7F88C30 		ldr	r3, [r7, #140]
 20744 0cbc D3F8F831 		ldr	r3, [r3, #504]
 20745 0cc0 07F11C00 		add	r0, r7, #28
 20746 0cc4 2349     		ldr	r1, .L794+40
 20747 0cc6 FFF7FEFF 		bl	sprintf
2724:..\src/command_processing.c **** 			strcat(info_string, str);
 20748              		.loc 1 2724 0
 20749 0cca 07F11C03 		add	r3, r7, #28
 20750 0cce 1946     		mov	r1, r3
 20751 0cd0 7869     		ldr	r0, [r7, #20]
 20752 0cd2 FFF7FEFF 		bl	strcat
2725:..\src/command_processing.c **** 			strcat(info_string, "\r\n");
 20753              		.loc 1 2725 0
 20754 0cd6 7869     		ldr	r0, [r7, #20]
 20755 0cd8 FFF7FEFF 		bl	strlen
 20756 0cdc 0346     		mov	r3, r0
 20757 0cde 1A46     		mov	r2, r3
 20758 0ce0 7B69     		ldr	r3, [r7, #20]
 20759 0ce2 1344     		add	r3, r3, r2
 20760 0ce4 134A     		ldr	r2, .L794+8
 20761 0ce6 1188     		ldrh	r1, [r2]	@ unaligned
 20762 0ce8 9278     		ldrb	r2, [r2, #2]
 20763 0cea 1980     		strh	r1, [r3]	@ unaligned
 20764 0cec 9A70     		strb	r2, [r3, #2]
2726:..\src/command_processing.c **** 
2727:..\src/command_processing.c **** 			if (MEM_P->emg.emg_calibration_flag)
 20765              		.loc 1 2727 0
 20766 0cee D7F88C30 		ldr	r3, [r7, #140]
 20767 0cf2 93F8FE31 		ldrb	r3, [r3, #510]	@ zero_extendqisi2
 20768 0cf6 002B     		cmp	r3, #0
 20769 0cf8 30D0     		beq	.L769
2728:..\src/command_processing.c **** 				strcat(info_string, "Calibration enabled: YES\r\n");
 20770              		.loc 1 2728 0
 20771 0cfa 7869     		ldr	r0, [r7, #20]
 20772 0cfc FFF7FEFF 		bl	strlen
 20773 0d00 0346     		mov	r3, r0
 20774 0d02 1A46     		mov	r2, r3
 20775 0d04 7B69     		ldr	r3, [r7, #20]
 20776 0d06 1344     		add	r3, r3, r2
 20777 0d08 134A     		ldr	r2, .L794+44
 20778 0d0a 1D46     		mov	r5, r3
 20779 0d0c 1446     		mov	r4, r2
 20780 0d0e 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 20781 0d10 2860     		str	r0, [r5]	@ unaligned
 20782 0d12 6960     		str	r1, [r5, #4]	@ unaligned
 20783 0d14 AA60     		str	r2, [r5, #8]	@ unaligned
 20784 0d16 EB60     		str	r3, [r5, #12]	@ unaligned
 20785 0d18 03CC     		ldmia	r4!, {r0, r1}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 457


 20786 0d1a 2861     		str	r0, [r5, #16]	@ unaligned
 20787 0d1c 6961     		str	r1, [r5, #20]	@ unaligned
 20788 0d1e 2388     		ldrh	r3, [r4]	@ unaligned
 20789 0d20 A278     		ldrb	r2, [r4, #2]
 20790 0d22 2B83     		strh	r3, [r5, #24]	@ unaligned
 20791 0d24 1346     		mov	r3, r2
 20792 0d26 AB76     		strb	r3, [r5, #26]
 20793 0d28 2CE0     		b	.L770
 20794              	.L795:
 20795 0d2a 00BF     		.align	2
 20796              	.L794:
 20797 0d2c 10180000 		.word	.LC218
 20798 0d30 68140000 		.word	.LC183
 20799 0d34 58110000 		.word	.LC152
 20800 0d38 1C210000 		.word	.LC303
 20801 0d3c 30180000 		.word	.LC220
 20802 0d40 2C210000 		.word	.LC304
 20803 0d44 68210000 		.word	.LC305
 20804 0d48 84210000 		.word	.LC306
 20805 0d4c D0180000 		.word	.LC226
 20806 0d50 E4190000 		.word	.LC235
 20807 0d54 081A0000 		.word	.LC236
 20808 0d58 581A0000 		.word	.LC239
 20809              	.L769:
2729:..\src/command_processing.c **** 			else
2730:..\src/command_processing.c **** 				strcat(info_string, "Calibration enabled: NO\r\n");
 20810              		.loc 1 2730 0
 20811 0d5c 7869     		ldr	r0, [r7, #20]
 20812 0d5e FFF7FEFF 		bl	strlen
 20813 0d62 0346     		mov	r3, r0
 20814 0d64 1A46     		mov	r2, r3
 20815 0d66 7B69     		ldr	r3, [r7, #20]
 20816 0d68 1344     		add	r3, r3, r2
 20817 0d6a D04A     		ldr	r2, .L796
 20818 0d6c 1D46     		mov	r5, r3
 20819 0d6e 1446     		mov	r4, r2
 20820 0d70 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 20821 0d72 2860     		str	r0, [r5]	@ unaligned
 20822 0d74 6960     		str	r1, [r5, #4]	@ unaligned
 20823 0d76 AA60     		str	r2, [r5, #8]	@ unaligned
 20824 0d78 EB60     		str	r3, [r5, #12]	@ unaligned
 20825 0d7a 03CC     		ldmia	r4!, {r0, r1}
 20826 0d7c 2861     		str	r0, [r5, #16]	@ unaligned
 20827 0d7e 6961     		str	r1, [r5, #20]	@ unaligned
 20828 0d80 2388     		ldrh	r3, [r4]	@ unaligned
 20829 0d82 2B83     		strh	r3, [r5, #24]	@ unaligned
 20830              	.L770:
2731:..\src/command_processing.c **** 
2732:..\src/command_processing.c **** 			sprintf(str, "EMG max speed: %d %d", (int)MEM_P->emg.emg_speed[0], (int)MEM_P->emg.emg_speed[1])
 20831              		.loc 1 2732 0
 20832 0d84 D7F88C30 		ldr	r3, [r7, #140]
 20833 0d88 93F8FC31 		ldrb	r3, [r3, #508]	@ zero_extendqisi2
 20834 0d8c 1A46     		mov	r2, r3
 20835 0d8e D7F88C30 		ldr	r3, [r7, #140]
 20836 0d92 93F8FD31 		ldrb	r3, [r3, #509]	@ zero_extendqisi2
 20837 0d96 07F11C00 		add	r0, r7, #28
 20838 0d9a C549     		ldr	r1, .L796+4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 458


 20839 0d9c FFF7FEFF 		bl	sprintf
2733:..\src/command_processing.c **** 			strcat(info_string, str);
 20840              		.loc 1 2733 0
 20841 0da0 07F11C03 		add	r3, r7, #28
 20842 0da4 1946     		mov	r1, r3
 20843 0da6 7869     		ldr	r0, [r7, #20]
 20844 0da8 FFF7FEFF 		bl	strcat
2734:..\src/command_processing.c **** 			strcat(info_string, "\r\n");
 20845              		.loc 1 2734 0
 20846 0dac 7869     		ldr	r0, [r7, #20]
 20847 0dae FFF7FEFF 		bl	strlen
 20848 0db2 0346     		mov	r3, r0
 20849 0db4 1A46     		mov	r2, r3
 20850 0db6 7B69     		ldr	r3, [r7, #20]
 20851 0db8 1344     		add	r3, r3, r2
 20852 0dba BE4A     		ldr	r2, .L796+8
 20853 0dbc 1188     		ldrh	r1, [r2]	@ unaligned
 20854 0dbe 9278     		ldrb	r2, [r2, #2]
 20855 0dc0 1980     		strh	r1, [r3]	@ unaligned
 20856 0dc2 9A70     		strb	r2, [r3, #2]
 20857              	.L768:
 20858              	.LBE28:
2564:..\src/command_processing.c ****             
 20859              		.loc 1 2564 0 discriminator 2
 20860 0dc4 97F89330 		ldrb	r3, [r7, #147]	@ zero_extendqisi2
 20861 0dc8 0133     		adds	r3, r3, #1
 20862 0dca 87F89330 		strb	r3, [r7, #147]
 20863              	.L727:
2564:..\src/command_processing.c ****             
 20864              		.loc 1 2564 0 is_stmt 0 discriminator 1
 20865 0dce D7F88C30 		ldr	r3, [r7, #140]
 20866 0dd2 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 20867 0dd6 97F89320 		ldrb	r2, [r7, #147]	@ zero_extendqisi2
 20868 0dda 9A42     		cmp	r2, r3
 20869 0ddc 7FF699A9 		bls	.L771
 20870              	.LBE27:
2735:..\src/command_processing.c **** 		}
2736:..\src/command_processing.c **** 	}
2737:..\src/command_processing.c **** 	 
2738:..\src/command_processing.c ****     if (MEM_P->SH.rest_position_flag) {
 20871              		.loc 1 2738 0 is_stmt 1
 20872 0de0 D7F88C30 		ldr	r3, [r7, #140]
 20873 0de4 93F8AC32 		ldrb	r3, [r3, #684]	@ zero_extendqisi2
 20874 0de8 002B     		cmp	r3, #0
 20875 0dea 63D0     		beq	.L772
2739:..\src/command_processing.c **** 		sprintf(str, "Rest time delay (ms): %d", (int)MEM_P->SH.rest_delay);
 20876              		.loc 1 2739 0
 20877 0dec D7F88C30 		ldr	r3, [r7, #140]
 20878 0df0 D3F8A422 		ldr	r2, [r3, #676]
 20879 0df4 07F11C03 		add	r3, r7, #28
 20880 0df8 AF49     		ldr	r1, .L796+12
 20881 0dfa 1846     		mov	r0, r3
 20882 0dfc FFF7FEFF 		bl	sprintf
2740:..\src/command_processing.c ****         strcat(info_string, str);
 20883              		.loc 1 2740 0
 20884 0e00 07F11C03 		add	r3, r7, #28
 20885 0e04 1946     		mov	r1, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 459


 20886 0e06 7869     		ldr	r0, [r7, #20]
 20887 0e08 FFF7FEFF 		bl	strcat
2741:..\src/command_processing.c ****         strcat(info_string, "\r\n");
 20888              		.loc 1 2741 0
 20889 0e0c 7869     		ldr	r0, [r7, #20]
 20890 0e0e FFF7FEFF 		bl	strlen
 20891 0e12 0346     		mov	r3, r0
 20892 0e14 1A46     		mov	r2, r3
 20893 0e16 7B69     		ldr	r3, [r7, #20]
 20894 0e18 1344     		add	r3, r3, r2
 20895 0e1a A64A     		ldr	r2, .L796+8
 20896 0e1c 1188     		ldrh	r1, [r2]	@ unaligned
 20897 0e1e 9278     		ldrb	r2, [r2, #2]
 20898 0e20 1980     		strh	r1, [r3]	@ unaligned
 20899 0e22 9A70     		strb	r2, [r3, #2]
2742:..\src/command_processing.c ****         
2743:..\src/command_processing.c ****         sprintf(str, "Rest velocity closure (ticks/sec): %d", (int)MEM_P->SH.rest_vel);
 20900              		.loc 1 2743 0
 20901 0e24 D7F88C30 		ldr	r3, [r7, #140]
 20902 0e28 D3F8A822 		ldr	r2, [r3, #680]
 20903 0e2c 07F11C03 		add	r3, r7, #28
 20904 0e30 A249     		ldr	r1, .L796+16
 20905 0e32 1846     		mov	r0, r3
 20906 0e34 FFF7FEFF 		bl	sprintf
2744:..\src/command_processing.c ****         strcat(info_string, str);
 20907              		.loc 1 2744 0
 20908 0e38 07F11C03 		add	r3, r7, #28
 20909 0e3c 1946     		mov	r1, r3
 20910 0e3e 7869     		ldr	r0, [r7, #20]
 20911 0e40 FFF7FEFF 		bl	strcat
2745:..\src/command_processing.c ****         strcat(info_string, "\r\n");
 20912              		.loc 1 2745 0
 20913 0e44 7869     		ldr	r0, [r7, #20]
 20914 0e46 FFF7FEFF 		bl	strlen
 20915 0e4a 0346     		mov	r3, r0
 20916 0e4c 1A46     		mov	r2, r3
 20917 0e4e 7B69     		ldr	r3, [r7, #20]
 20918 0e50 1344     		add	r3, r3, r2
 20919 0e52 984A     		ldr	r2, .L796+8
 20920 0e54 1188     		ldrh	r1, [r2]	@ unaligned
 20921 0e56 9278     		ldrb	r2, [r2, #2]
 20922 0e58 1980     		strh	r1, [r3]	@ unaligned
 20923 0e5a 9A70     		strb	r2, [r3, #2]
2746:..\src/command_processing.c ****         
2747:..\src/command_processing.c ****         sprintf(str, "Rest position: %d", (int)(MEM_P->SH.rest_pos >> MEM_P->enc[MEM_P->motor[0].en
 20924              		.loc 1 2747 0
 20925 0e5c D7F88C30 		ldr	r3, [r7, #140]
 20926 0e60 D3F8A022 		ldr	r2, [r3, #672]
 20927 0e64 D7F88C30 		ldr	r3, [r7, #140]
 20928 0e68 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 20929 0e6c 1846     		mov	r0, r3
 20930 0e6e D7F88C10 		ldr	r1, [r7, #140]
 20931 0e72 0346     		mov	r3, r0
 20932 0e74 5B00     		lsls	r3, r3, #1
 20933 0e76 0344     		add	r3, r3, r0
 20934 0e78 1B01     		lsls	r3, r3, #4
 20935 0e7a 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 460


 20936 0e7c 03F29513 		addw	r3, r3, #405
 20937 0e80 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 20938 0e82 1A41     		asrs	r2, r2, r3
 20939 0e84 07F11C03 		add	r3, r7, #28
 20940 0e88 8D49     		ldr	r1, .L796+20
 20941 0e8a 1846     		mov	r0, r3
 20942 0e8c FFF7FEFF 		bl	sprintf
2748:..\src/command_processing.c ****         strcat(info_string, str);
 20943              		.loc 1 2748 0
 20944 0e90 07F11C03 		add	r3, r7, #28
 20945 0e94 1946     		mov	r1, r3
 20946 0e96 7869     		ldr	r0, [r7, #20]
 20947 0e98 FFF7FEFF 		bl	strcat
2749:..\src/command_processing.c ****         strcat(info_string, "\r\n");  
 20948              		.loc 1 2749 0
 20949 0e9c 7869     		ldr	r0, [r7, #20]
 20950 0e9e FFF7FEFF 		bl	strlen
 20951 0ea2 0346     		mov	r3, r0
 20952 0ea4 1A46     		mov	r2, r3
 20953 0ea6 7B69     		ldr	r3, [r7, #20]
 20954 0ea8 1344     		add	r3, r3, r2
 20955 0eaa 824A     		ldr	r2, .L796+8
 20956 0eac 1188     		ldrh	r1, [r2]	@ unaligned
 20957 0eae 9278     		ldrb	r2, [r2, #2]
 20958 0eb0 1980     		strh	r1, [r3]	@ unaligned
 20959 0eb2 9A70     		strb	r2, [r3, #2]
 20960              	.L772:
2750:..\src/command_processing.c ****     }
2751:..\src/command_processing.c **** 	
2752:..\src/command_processing.c **** 	if (MEM_P->imu.read_imu_flag) {
 20961              		.loc 1 2752 0
 20962 0eb4 D7F88C30 		ldr	r3, [r7, #140]
 20963 0eb8 93F80032 		ldrb	r3, [r3, #512]	@ zero_extendqisi2
 20964 0ebc 002B     		cmp	r3, #0
 20965 0ebe 00F0CB81 		beq	.L787
2753:..\src/command_processing.c **** 		sprintf(str, "IMU Connected: %d\r\n", (int) N_IMU_Connected);
 20966              		.loc 1 2753 0
 20967 0ec2 804B     		ldr	r3, .L796+24
 20968 0ec4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 20969 0ec6 1A46     		mov	r2, r3
 20970 0ec8 07F11C03 		add	r3, r7, #28
 20971 0ecc 7E49     		ldr	r1, .L796+28
 20972 0ece 1846     		mov	r0, r3
 20973 0ed0 FFF7FEFF 		bl	sprintf
2754:..\src/command_processing.c **** 		strcat(info_string, str);
 20974              		.loc 1 2754 0
 20975 0ed4 07F11C03 		add	r3, r7, #28
 20976 0ed8 1946     		mov	r1, r3
 20977 0eda 7869     		ldr	r0, [r7, #20]
 20978 0edc FFF7FEFF 		bl	strcat
2755:..\src/command_processing.c **** 		
2756:..\src/command_processing.c **** 		strcat(info_string, "\r\n");
 20979              		.loc 1 2756 0
 20980 0ee0 7869     		ldr	r0, [r7, #20]
 20981 0ee2 FFF7FEFF 		bl	strlen
 20982 0ee6 0346     		mov	r3, r0
 20983 0ee8 1A46     		mov	r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 461


 20984 0eea 7B69     		ldr	r3, [r7, #20]
 20985 0eec 1344     		add	r3, r3, r2
 20986 0eee 714A     		ldr	r2, .L796+8
 20987 0ef0 1188     		ldrh	r1, [r2]	@ unaligned
 20988 0ef2 9278     		ldrb	r2, [r2, #2]
 20989 0ef4 1980     		strh	r1, [r3]	@ unaligned
 20990 0ef6 9A70     		strb	r2, [r3, #2]
2757:..\src/command_processing.c **** 		
2758:..\src/command_processing.c **** 		strcat(info_string, "IMUs CONFIGURATION\r\n");
 20991              		.loc 1 2758 0
 20992 0ef8 7869     		ldr	r0, [r7, #20]
 20993 0efa FFF7FEFF 		bl	strlen
 20994 0efe 0346     		mov	r3, r0
 20995 0f00 1A46     		mov	r2, r3
 20996 0f02 7B69     		ldr	r3, [r7, #20]
 20997 0f04 1344     		add	r3, r3, r2
 20998 0f06 714A     		ldr	r2, .L796+32
 20999 0f08 1D46     		mov	r5, r3
 21000 0f0a 1446     		mov	r4, r2
 21001 0f0c 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 21002 0f0e 2860     		str	r0, [r5]	@ unaligned
 21003 0f10 6960     		str	r1, [r5, #4]	@ unaligned
 21004 0f12 AA60     		str	r2, [r5, #8]	@ unaligned
 21005 0f14 EB60     		str	r3, [r5, #12]	@ unaligned
 21006 0f16 2068     		ldr	r0, [r4]	@ unaligned
 21007 0f18 2861     		str	r0, [r5, #16]	@ unaligned
 21008 0f1a 2379     		ldrb	r3, [r4, #4]
 21009 0f1c 2B75     		strb	r3, [r5, #20]
2759:..\src/command_processing.c **** 		for (i=0; i<N_IMU_Connected; i++){
 21010              		.loc 1 2759 0
 21011 0f1e 0023     		movs	r3, #0
 21012 0f20 C7F89430 		str	r3, [r7, #148]
 21013 0f24 84E1     		b	.L774
 21014              	.L785:
2760:..\src/command_processing.c **** 			sprintf(str, "Imu %d \r\n\tID: %d\r\n", i, (int) IMU_connected[i]);
 21015              		.loc 1 2760 0
 21016 0f26 6A4A     		ldr	r2, .L796+36
 21017 0f28 D7F89430 		ldr	r3, [r7, #148]
 21018 0f2c 1344     		add	r3, r3, r2
 21019 0f2e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 21020 0f30 07F11C00 		add	r0, r7, #28
 21021 0f34 D7F89420 		ldr	r2, [r7, #148]
 21022 0f38 6649     		ldr	r1, .L796+40
 21023 0f3a FFF7FEFF 		bl	sprintf
2761:..\src/command_processing.c **** 			strcat(info_string, str);
 21024              		.loc 1 2761 0
 21025 0f3e 07F11C03 		add	r3, r7, #28
 21026 0f42 1946     		mov	r1, r3
 21027 0f44 7869     		ldr	r0, [r7, #20]
 21028 0f46 FFF7FEFF 		bl	strcat
2762:..\src/command_processing.c **** 			
2763:..\src/command_processing.c **** 			sprintf(str, "\tAccelerometers: ");
 21029              		.loc 1 2763 0
 21030 0f4a 07F11C03 		add	r3, r7, #28
 21031 0f4e 624A     		ldr	r2, .L796+44
 21032 0f50 1C46     		mov	r4, r3
 21033 0f52 1546     		mov	r5, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 462


 21034 0f54 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 21035 0f56 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 21036 0f58 2B68     		ldr	r3, [r5]
 21037 0f5a 2380     		strh	r3, [r4]	@ movhi
2764:..\src/command_processing.c **** 			if ((MEM_P->imu.IMU_conf[IMU_connected[i]][0]))
 21038              		.loc 1 2764 0
 21039 0f5c 5C4A     		ldr	r2, .L796+36
 21040 0f5e D7F89430 		ldr	r3, [r7, #148]
 21041 0f62 1344     		add	r3, r3, r2
 21042 0f64 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 21043 0f66 1946     		mov	r1, r3
 21044 0f68 D7F88C20 		ldr	r2, [r7, #140]
 21045 0f6c 0B46     		mov	r3, r1
 21046 0f6e 9B00     		lsls	r3, r3, #2
 21047 0f70 0B44     		add	r3, r3, r1
 21048 0f72 1344     		add	r3, r3, r2
 21049 0f74 03F20223 		addw	r3, r3, #514
 21050 0f78 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 21051 0f7a 002B     		cmp	r3, #0
 21052 0f7c 0FD0     		beq	.L775
2765:..\src/command_processing.c **** 				strcat(str, "YES\r\n");
 21053              		.loc 1 2765 0
 21054 0f7e 07F11C03 		add	r3, r7, #28
 21055 0f82 1846     		mov	r0, r3
 21056 0f84 FFF7FEFF 		bl	strlen
 21057 0f88 0346     		mov	r3, r0
 21058 0f8a 1A46     		mov	r2, r3
 21059 0f8c 07F11C03 		add	r3, r7, #28
 21060 0f90 1344     		add	r3, r3, r2
 21061 0f92 524A     		ldr	r2, .L796+48
 21062 0f94 1068     		ldr	r0, [r2]	@ unaligned
 21063 0f96 1860     		str	r0, [r3]	@ unaligned
 21064 0f98 9288     		ldrh	r2, [r2, #4]	@ unaligned
 21065 0f9a 9A80     		strh	r2, [r3, #4]	@ unaligned
 21066 0f9c 0EE0     		b	.L776
 21067              	.L775:
2766:..\src/command_processing.c **** 			else
2767:..\src/command_processing.c **** 				strcat(str, "NO\r\n"); 
 21068              		.loc 1 2767 0
 21069 0f9e 07F11C03 		add	r3, r7, #28
 21070 0fa2 1846     		mov	r0, r3
 21071 0fa4 FFF7FEFF 		bl	strlen
 21072 0fa8 0346     		mov	r3, r0
 21073 0faa 1A46     		mov	r2, r3
 21074 0fac 07F11C03 		add	r3, r7, #28
 21075 0fb0 1344     		add	r3, r3, r2
 21076 0fb2 4B4A     		ldr	r2, .L796+52
 21077 0fb4 1068     		ldr	r0, [r2]	@ unaligned
 21078 0fb6 1860     		str	r0, [r3]	@ unaligned
 21079 0fb8 1279     		ldrb	r2, [r2, #4]
 21080 0fba 1A71     		strb	r2, [r3, #4]
 21081              	.L776:
2768:..\src/command_processing.c **** 			strcat(str, "\tGyroscopes: ");
 21082              		.loc 1 2768 0
 21083 0fbc 07F11C03 		add	r3, r7, #28
 21084 0fc0 1846     		mov	r0, r3
 21085 0fc2 FFF7FEFF 		bl	strlen
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 463


 21086 0fc6 0346     		mov	r3, r0
 21087 0fc8 1A46     		mov	r2, r3
 21088 0fca 07F11C03 		add	r3, r7, #28
 21089 0fce 1344     		add	r3, r3, r2
 21090 0fd0 444A     		ldr	r2, .L796+56
 21091 0fd2 1C46     		mov	r4, r3
 21092 0fd4 1346     		mov	r3, r2
 21093 0fd6 07CB     		ldmia	r3!, {r0, r1, r2}
 21094 0fd8 2060     		str	r0, [r4]	@ unaligned
 21095 0fda 6160     		str	r1, [r4, #4]	@ unaligned
 21096 0fdc A260     		str	r2, [r4, #8]	@ unaligned
 21097 0fde 1B88     		ldrh	r3, [r3]	@ unaligned
 21098 0fe0 A381     		strh	r3, [r4, #12]	@ unaligned
2769:..\src/command_processing.c **** 			if ((MEM_P->imu.IMU_conf[IMU_connected[i]][1]))
 21099              		.loc 1 2769 0
 21100 0fe2 3B4A     		ldr	r2, .L796+36
 21101 0fe4 D7F89430 		ldr	r3, [r7, #148]
 21102 0fe8 1344     		add	r3, r3, r2
 21103 0fea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 21104 0fec 1946     		mov	r1, r3
 21105 0fee D7F88C20 		ldr	r2, [r7, #140]
 21106 0ff2 0B46     		mov	r3, r1
 21107 0ff4 9B00     		lsls	r3, r3, #2
 21108 0ff6 0B44     		add	r3, r3, r1
 21109 0ff8 1344     		add	r3, r3, r2
 21110 0ffa 03F20323 		addw	r3, r3, #515
 21111 0ffe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 21112 1000 002B     		cmp	r3, #0
 21113 1002 0FD0     		beq	.L777
2770:..\src/command_processing.c **** 				strcat(str, "YES\r\n");
 21114              		.loc 1 2770 0
 21115 1004 07F11C03 		add	r3, r7, #28
 21116 1008 1846     		mov	r0, r3
 21117 100a FFF7FEFF 		bl	strlen
 21118 100e 0346     		mov	r3, r0
 21119 1010 1A46     		mov	r2, r3
 21120 1012 07F11C03 		add	r3, r7, #28
 21121 1016 1344     		add	r3, r3, r2
 21122 1018 304A     		ldr	r2, .L796+48
 21123 101a 1068     		ldr	r0, [r2]	@ unaligned
 21124 101c 1860     		str	r0, [r3]	@ unaligned
 21125 101e 9288     		ldrh	r2, [r2, #4]	@ unaligned
 21126 1020 9A80     		strh	r2, [r3, #4]	@ unaligned
 21127 1022 0EE0     		b	.L778
 21128              	.L777:
2771:..\src/command_processing.c **** 			else
2772:..\src/command_processing.c **** 				strcat(str, "NO\r\n"); 
 21129              		.loc 1 2772 0
 21130 1024 07F11C03 		add	r3, r7, #28
 21131 1028 1846     		mov	r0, r3
 21132 102a FFF7FEFF 		bl	strlen
 21133 102e 0346     		mov	r3, r0
 21134 1030 1A46     		mov	r2, r3
 21135 1032 07F11C03 		add	r3, r7, #28
 21136 1036 1344     		add	r3, r3, r2
 21137 1038 294A     		ldr	r2, .L796+52
 21138 103a 1068     		ldr	r0, [r2]	@ unaligned
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 464


 21139 103c 1860     		str	r0, [r3]	@ unaligned
 21140 103e 1279     		ldrb	r2, [r2, #4]
 21141 1040 1A71     		strb	r2, [r3, #4]
 21142              	.L778:
2773:..\src/command_processing.c **** 			strcat(str, "\tMagnetometers: ");
 21143              		.loc 1 2773 0
 21144 1042 07F11C03 		add	r3, r7, #28
 21145 1046 1846     		mov	r0, r3
 21146 1048 FFF7FEFF 		bl	strlen
 21147 104c 0346     		mov	r3, r0
 21148 104e 1A46     		mov	r2, r3
 21149 1050 07F11C03 		add	r3, r7, #28
 21150 1054 1344     		add	r3, r3, r2
 21151 1056 244A     		ldr	r2, .L796+60
 21152 1058 1D46     		mov	r5, r3
 21153 105a 1446     		mov	r4, r2
 21154 105c 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 21155 105e 2860     		str	r0, [r5]	@ unaligned
 21156 1060 6960     		str	r1, [r5, #4]	@ unaligned
 21157 1062 AA60     		str	r2, [r5, #8]	@ unaligned
 21158 1064 EB60     		str	r3, [r5, #12]	@ unaligned
 21159 1066 2378     		ldrb	r3, [r4]
 21160 1068 2B74     		strb	r3, [r5, #16]
2774:..\src/command_processing.c **** 			if ((MEM_P->imu.IMU_conf[IMU_connected[i]][2]))
 21161              		.loc 1 2774 0
 21162 106a 194A     		ldr	r2, .L796+36
 21163 106c D7F89430 		ldr	r3, [r7, #148]
 21164 1070 1344     		add	r3, r3, r2
 21165 1072 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 21166 1074 1946     		mov	r1, r3
 21167 1076 D7F88C20 		ldr	r2, [r7, #140]
 21168 107a 0B46     		mov	r3, r1
 21169 107c 9B00     		lsls	r3, r3, #2
 21170 107e 0B44     		add	r3, r3, r1
 21171 1080 1344     		add	r3, r3, r2
 21172 1082 03F50173 		add	r3, r3, #516
 21173 1086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 21174 1088 002B     		cmp	r3, #0
 21175 108a 2FD0     		beq	.L779
2775:..\src/command_processing.c **** 				strcat(str, "YES\r\n");
 21176              		.loc 1 2775 0
 21177 108c 07F11C03 		add	r3, r7, #28
 21178 1090 1846     		mov	r0, r3
 21179 1092 FFF7FEFF 		bl	strlen
 21180 1096 0346     		mov	r3, r0
 21181 1098 1A46     		mov	r2, r3
 21182 109a 07F11C03 		add	r3, r7, #28
 21183 109e 1344     		add	r3, r3, r2
 21184 10a0 0E4A     		ldr	r2, .L796+48
 21185 10a2 1068     		ldr	r0, [r2]	@ unaligned
 21186 10a4 1860     		str	r0, [r3]	@ unaligned
 21187 10a6 9288     		ldrh	r2, [r2, #4]	@ unaligned
 21188 10a8 9A80     		strh	r2, [r3, #4]	@ unaligned
 21189 10aa 2EE0     		b	.L780
 21190              	.L797:
 21191              		.align	2
 21192              	.L796:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 465


 21193 10ac 741A0000 		.word	.LC240
 21194 10b0 901A0000 		.word	.LC241
 21195 10b4 58110000 		.word	.LC152
 21196 10b8 541B0000 		.word	.LC249
 21197 10bc 701B0000 		.word	.LC250
 21198 10c0 981B0000 		.word	.LC251
 21199 10c4 00000000 		.word	N_IMU_Connected
 21200 10c8 AC1B0000 		.word	.LC252
 21201 10cc C01B0000 		.word	.LC253
 21202 10d0 00000000 		.word	IMU_connected
 21203 10d4 D81B0000 		.word	.LC254
 21204 10d8 EC1B0000 		.word	.LC255
 21205 10dc F4130000 		.word	.LC174
 21206 10e0 FC130000 		.word	.LC175
 21207 10e4 001C0000 		.word	.LC256
 21208 10e8 101C0000 		.word	.LC257
 21209              	.L779:
2776:..\src/command_processing.c **** 			else
2777:..\src/command_processing.c **** 				strcat(str, "NO\r\n");
 21210              		.loc 1 2777 0
 21211 10ec 07F11C03 		add	r3, r7, #28
 21212 10f0 1846     		mov	r0, r3
 21213 10f2 FFF7FEFF 		bl	strlen
 21214 10f6 0346     		mov	r3, r0
 21215 10f8 1A46     		mov	r2, r3
 21216 10fa 07F11C03 		add	r3, r7, #28
 21217 10fe 1344     		add	r3, r3, r2
 21218 1100 584A     		ldr	r2, .L798
 21219 1102 1068     		ldr	r0, [r2]	@ unaligned
 21220 1104 1860     		str	r0, [r3]	@ unaligned
 21221 1106 1279     		ldrb	r2, [r2, #4]
 21222 1108 1A71     		strb	r2, [r3, #4]
 21223              	.L780:
2778:..\src/command_processing.c **** 			strcat(str, "\tQuaternion: ");                
 21224              		.loc 1 2778 0
 21225 110a 07F11C03 		add	r3, r7, #28
 21226 110e 1846     		mov	r0, r3
 21227 1110 FFF7FEFF 		bl	strlen
 21228 1114 0346     		mov	r3, r0
 21229 1116 1A46     		mov	r2, r3
 21230 1118 07F11C03 		add	r3, r7, #28
 21231 111c 1344     		add	r3, r3, r2
 21232 111e 524A     		ldr	r2, .L798+4
 21233 1120 1C46     		mov	r4, r3
 21234 1122 1346     		mov	r3, r2
 21235 1124 07CB     		ldmia	r3!, {r0, r1, r2}
 21236 1126 2060     		str	r0, [r4]	@ unaligned
 21237 1128 6160     		str	r1, [r4, #4]	@ unaligned
 21238 112a A260     		str	r2, [r4, #8]	@ unaligned
 21239 112c 1B88     		ldrh	r3, [r3]	@ unaligned
 21240 112e A381     		strh	r3, [r4, #12]	@ unaligned
2779:..\src/command_processing.c **** 			if ((MEM_P->imu.IMU_conf[IMU_connected[i]][3]))
 21241              		.loc 1 2779 0
 21242 1130 4E4A     		ldr	r2, .L798+8
 21243 1132 D7F89430 		ldr	r3, [r7, #148]
 21244 1136 1344     		add	r3, r3, r2
 21245 1138 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 466


 21246 113a 1946     		mov	r1, r3
 21247 113c D7F88C20 		ldr	r2, [r7, #140]
 21248 1140 0B46     		mov	r3, r1
 21249 1142 9B00     		lsls	r3, r3, #2
 21250 1144 0B44     		add	r3, r3, r1
 21251 1146 1344     		add	r3, r3, r2
 21252 1148 03F20523 		addw	r3, r3, #517
 21253 114c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 21254 114e 002B     		cmp	r3, #0
 21255 1150 0FD0     		beq	.L781
2780:..\src/command_processing.c **** 				strcat(str, "YES\r\n");
 21256              		.loc 1 2780 0
 21257 1152 07F11C03 		add	r3, r7, #28
 21258 1156 1846     		mov	r0, r3
 21259 1158 FFF7FEFF 		bl	strlen
 21260 115c 0346     		mov	r3, r0
 21261 115e 1A46     		mov	r2, r3
 21262 1160 07F11C03 		add	r3, r7, #28
 21263 1164 1344     		add	r3, r3, r2
 21264 1166 424A     		ldr	r2, .L798+12
 21265 1168 1068     		ldr	r0, [r2]	@ unaligned
 21266 116a 1860     		str	r0, [r3]	@ unaligned
 21267 116c 9288     		ldrh	r2, [r2, #4]	@ unaligned
 21268 116e 9A80     		strh	r2, [r3, #4]	@ unaligned
 21269 1170 0EE0     		b	.L782
 21270              	.L781:
2781:..\src/command_processing.c **** 			else
2782:..\src/command_processing.c **** 				strcat(str, "NO\r\n");
 21271              		.loc 1 2782 0
 21272 1172 07F11C03 		add	r3, r7, #28
 21273 1176 1846     		mov	r0, r3
 21274 1178 FFF7FEFF 		bl	strlen
 21275 117c 0346     		mov	r3, r0
 21276 117e 1A46     		mov	r2, r3
 21277 1180 07F11C03 		add	r3, r7, #28
 21278 1184 1344     		add	r3, r3, r2
 21279 1186 374A     		ldr	r2, .L798
 21280 1188 1068     		ldr	r0, [r2]	@ unaligned
 21281 118a 1860     		str	r0, [r3]	@ unaligned
 21282 118c 1279     		ldrb	r2, [r2, #4]
 21283 118e 1A71     		strb	r2, [r3, #4]
 21284              	.L782:
2783:..\src/command_processing.c **** 			strcat(str, "\tTemperature: ");
 21285              		.loc 1 2783 0
 21286 1190 07F11C03 		add	r3, r7, #28
 21287 1194 1846     		mov	r0, r3
 21288 1196 FFF7FEFF 		bl	strlen
 21289 119a 0346     		mov	r3, r0
 21290 119c 1A46     		mov	r2, r3
 21291 119e 07F11C03 		add	r3, r7, #28
 21292 11a2 1344     		add	r3, r3, r2
 21293 11a4 334A     		ldr	r2, .L798+16
 21294 11a6 1C46     		mov	r4, r3
 21295 11a8 1346     		mov	r3, r2
 21296 11aa 07CB     		ldmia	r3!, {r0, r1, r2}
 21297 11ac 2060     		str	r0, [r4]	@ unaligned
 21298 11ae 6160     		str	r1, [r4, #4]	@ unaligned
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 467


 21299 11b0 A260     		str	r2, [r4, #8]	@ unaligned
 21300 11b2 1A88     		ldrh	r2, [r3]	@ unaligned
 21301 11b4 9B78     		ldrb	r3, [r3, #2]
 21302 11b6 A281     		strh	r2, [r4, #12]	@ unaligned
 21303 11b8 A373     		strb	r3, [r4, #14]
2784:..\src/command_processing.c **** 			if ((MEM_P->imu.IMU_conf[IMU_connected[i]][4]))
 21304              		.loc 1 2784 0
 21305 11ba 2C4A     		ldr	r2, .L798+8
 21306 11bc D7F89430 		ldr	r3, [r7, #148]
 21307 11c0 1344     		add	r3, r3, r2
 21308 11c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 21309 11c4 1946     		mov	r1, r3
 21310 11c6 D7F88C20 		ldr	r2, [r7, #140]
 21311 11ca 0B46     		mov	r3, r1
 21312 11cc 9B00     		lsls	r3, r3, #2
 21313 11ce 0B44     		add	r3, r3, r1
 21314 11d0 1344     		add	r3, r3, r2
 21315 11d2 03F20623 		addw	r3, r3, #518
 21316 11d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 21317 11d8 002B     		cmp	r3, #0
 21318 11da 0FD0     		beq	.L783
2785:..\src/command_processing.c **** 				strcat(str, "YES\r\n");
 21319              		.loc 1 2785 0
 21320 11dc 07F11C03 		add	r3, r7, #28
 21321 11e0 1846     		mov	r0, r3
 21322 11e2 FFF7FEFF 		bl	strlen
 21323 11e6 0346     		mov	r3, r0
 21324 11e8 1A46     		mov	r2, r3
 21325 11ea 07F11C03 		add	r3, r7, #28
 21326 11ee 1344     		add	r3, r3, r2
 21327 11f0 1F4A     		ldr	r2, .L798+12
 21328 11f2 1068     		ldr	r0, [r2]	@ unaligned
 21329 11f4 1860     		str	r0, [r3]	@ unaligned
 21330 11f6 9288     		ldrh	r2, [r2, #4]	@ unaligned
 21331 11f8 9A80     		strh	r2, [r3, #4]	@ unaligned
 21332 11fa 0EE0     		b	.L784
 21333              	.L783:
2786:..\src/command_processing.c **** 			else
2787:..\src/command_processing.c **** 				strcat(str, "NO\r\n");
 21334              		.loc 1 2787 0
 21335 11fc 07F11C03 		add	r3, r7, #28
 21336 1200 1846     		mov	r0, r3
 21337 1202 FFF7FEFF 		bl	strlen
 21338 1206 0346     		mov	r3, r0
 21339 1208 1A46     		mov	r2, r3
 21340 120a 07F11C03 		add	r3, r7, #28
 21341 120e 1344     		add	r3, r3, r2
 21342 1210 144A     		ldr	r2, .L798
 21343 1212 1068     		ldr	r0, [r2]	@ unaligned
 21344 1214 1860     		str	r0, [r3]	@ unaligned
 21345 1216 1279     		ldrb	r2, [r2, #4]
 21346 1218 1A71     		strb	r2, [r3, #4]
 21347              	.L784:
2788:..\src/command_processing.c **** 				 
2789:..\src/command_processing.c **** 			strcat(info_string, str);
 21348              		.loc 1 2789 0 discriminator 2
 21349 121a 07F11C03 		add	r3, r7, #28
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 468


 21350 121e 1946     		mov	r1, r3
 21351 1220 7869     		ldr	r0, [r7, #20]
 21352 1222 FFF7FEFF 		bl	strcat
2759:..\src/command_processing.c **** 			sprintf(str, "Imu %d \r\n\tID: %d\r\n", i, (int) IMU_connected[i]);
 21353              		.loc 1 2759 0 discriminator 2
 21354 1226 D7F89430 		ldr	r3, [r7, #148]
 21355 122a 0133     		adds	r3, r3, #1
 21356 122c C7F89430 		str	r3, [r7, #148]
 21357              	.L774:
2759:..\src/command_processing.c **** 			sprintf(str, "Imu %d \r\n\tID: %d\r\n", i, (int) IMU_connected[i]);
 21358              		.loc 1 2759 0 is_stmt 0 discriminator 1
 21359 1230 114B     		ldr	r3, .L798+20
 21360 1232 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 21361 1234 1A46     		mov	r2, r3
 21362 1236 D7F89430 		ldr	r3, [r7, #148]
 21363 123a 9A42     		cmp	r2, r3
 21364 123c 3FF773AE 		bgt	.L785
2790:..\src/command_processing.c **** 		}       
2791:..\src/command_processing.c **** 		
2792:..\src/command_processing.c **** 		strcat(info_string, "\r\n");
 21365              		.loc 1 2792 0 is_stmt 1
 21366 1240 7869     		ldr	r0, [r7, #20]
 21367 1242 FFF7FEFF 		bl	strlen
 21368 1246 0346     		mov	r3, r0
 21369 1248 1A46     		mov	r2, r3
 21370 124a 7B69     		ldr	r3, [r7, #20]
 21371 124c 1344     		add	r3, r3, r2
 21372 124e 0B4A     		ldr	r2, .L798+24
 21373 1250 1188     		ldrh	r1, [r2]	@ unaligned
 21374 1252 9278     		ldrb	r2, [r2, #2]
 21375 1254 1980     		strh	r1, [r3]	@ unaligned
 21376 1256 9A70     		strb	r2, [r3, #2]
 21377              	.L787:
2793:..\src/command_processing.c **** 	}
2794:..\src/command_processing.c **** }
 21378              		.loc 1 2794 0
 21379 1258 00BF     		nop
 21380 125a 9C37     		adds	r7, r7, #156
 21381              		.cfi_def_cfa_offset 36
 21382 125c BD46     		mov	sp, r7
 21383              		.cfi_def_cfa_register 13
 21384              		@ sp needed
 21385 125e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 21386              	.L799:
 21387 1262 00BF     		.align	2
 21388              	.L798:
 21389 1264 FC130000 		.word	.LC175
 21390 1268 241C0000 		.word	.LC258
 21391 126c 00000000 		.word	IMU_connected
 21392 1270 F4130000 		.word	.LC174
 21393 1274 341C0000 		.word	.LC259
 21394 1278 00000000 		.word	N_IMU_Connected
 21395 127c 58110000 		.word	.LC152
 21396              		.cfi_endproc
 21397              	.LFE75:
 21398              		.size	prepare_SD_param_info, .-prepare_SD_param_info
 21399              		.section	.rodata
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 469


 21400 21ae 0000     		.align	2
 21401              	.LC307:
 21402 21b0 486F7572 		.ascii	"Hour,Min,Sec,\000"
 21402      2C4D696E 
 21402      2C536563 
 21402      2C00
 21403 21be 0000     		.align	2
 21404              	.LC308:
 21405 21c0 42696E5F 		.ascii	"Bin_%d_Pos,\000"
 21405      25645F50 
 21405      6F732C00 
 21406              		.align	2
 21407              	.LC309:
 21408 21cc 42696E5F 		.ascii	"Bin_%d_Curr,\000"
 21408      25645F43 
 21408      7572722C 
 21408      00
 21409 21d9 000000   		.align	2
 21410              	.LC310:
 21411 21dc 52657374 		.ascii	"Rest_times,Wire_disp,Total_rest_time,Power_cycles,E"
 21411      5F74696D 
 21411      65732C57 
 21411      6972655F 
 21411      64697370 
 21412 220f 4D475F31 		.ascii	"MG_1_act,EMG_2_act,EMG_1_excess,EMG_2_excess,Motion"
 21412      5F616374 
 21412      2C454D47 
 21412      5F325F61 
 21412      63742C45 
 21413 2242 5F312C4D 		.ascii	"_1,Motion_2,Total_runtime\000"
 21413      6F74696F 
 21413      6E5F322C 
 21413      546F7461 
 21413      6C5F7275 
 21414              		.section	.text.prepare_SD_legend,"ax",%progbits
 21415              		.align	2
 21416              		.global	prepare_SD_legend
 21417              		.thumb
 21418              		.thumb_func
 21419              		.type	prepare_SD_legend, %function
 21420              	prepare_SD_legend:
 21421              	.LFB76:
2795:..\src/command_processing.c **** 
2796:..\src/command_processing.c **** 
2797:..\src/command_processing.c **** //==============================================================================
2798:..\src/command_processing.c **** //                                                        PREPARE SD CARD LEGEND
2799:..\src/command_processing.c **** //==============================================================================
2800:..\src/command_processing.c **** void prepare_SD_legend(char *info_string)
2801:..\src/command_processing.c **** {
 21422              		.loc 1 2801 0
 21423              		.cfi_startproc
 21424              		@ args = 0, pretend = 0, frame = 152
 21425              		@ frame_needed = 1, uses_anonymous_args = 0
 21426 0000 90B5     		push	{r4, r7, lr}
 21427              		.cfi_def_cfa_offset 12
 21428              		.cfi_offset 4, -12
 21429              		.cfi_offset 7, -8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 470


 21430              		.cfi_offset 14, -4
 21431 0002 A7B0     		sub	sp, sp, #156
 21432              		.cfi_def_cfa_offset 168
 21433 0004 00AF     		add	r7, sp, #0
 21434              		.cfi_def_cfa_register 7
 21435 0006 7860     		str	r0, [r7, #4]
2802:..\src/command_processing.c ****     char str[140];  
2803:..\src/command_processing.c ****     int i;
2804:..\src/command_processing.c ****         
2805:..\src/command_processing.c ****     // Legend
2806:..\src/command_processing.c ****     strcpy(info_string, "Hour,Min,Sec,");
 21436              		.loc 1 2806 0
 21437 0008 7B68     		ldr	r3, [r7, #4]
 21438 000a 2F4A     		ldr	r2, .L805
 21439 000c 1C46     		mov	r4, r3
 21440 000e 1346     		mov	r3, r2
 21441 0010 07CB     		ldmia	r3!, {r0, r1, r2}
 21442 0012 2060     		str	r0, [r4]	@ unaligned
 21443 0014 6160     		str	r1, [r4, #4]	@ unaligned
 21444 0016 A260     		str	r2, [r4, #8]	@ unaligned
 21445 0018 1B88     		ldrh	r3, [r3]	@ unaligned
 21446 001a A381     		strh	r3, [r4, #12]	@ unaligned
2807:..\src/command_processing.c ****     for (i=1; i<=10;i++){       // Position bins
 21447              		.loc 1 2807 0
 21448 001c 0123     		movs	r3, #1
 21449 001e C7F89430 		str	r3, [r7, #148]
 21450 0022 12E0     		b	.L801
 21451              	.L802:
2808:..\src/command_processing.c ****         sprintf(str, "Bin_%d_Pos,", i); 
 21452              		.loc 1 2808 0 discriminator 3
 21453 0024 07F10803 		add	r3, r7, #8
 21454 0028 D7F89420 		ldr	r2, [r7, #148]
 21455 002c 2749     		ldr	r1, .L805+4
 21456 002e 1846     		mov	r0, r3
 21457 0030 FFF7FEFF 		bl	sprintf
2809:..\src/command_processing.c ****         strcat(info_string, str);
 21458              		.loc 1 2809 0 discriminator 3
 21459 0034 07F10803 		add	r3, r7, #8
 21460 0038 1946     		mov	r1, r3
 21461 003a 7868     		ldr	r0, [r7, #4]
 21462 003c FFF7FEFF 		bl	strcat
2807:..\src/command_processing.c ****     for (i=1; i<=10;i++){       // Position bins
 21463              		.loc 1 2807 0 discriminator 3
 21464 0040 D7F89430 		ldr	r3, [r7, #148]
 21465 0044 0133     		adds	r3, r3, #1
 21466 0046 C7F89430 		str	r3, [r7, #148]
 21467              	.L801:
2807:..\src/command_processing.c ****     for (i=1; i<=10;i++){       // Position bins
 21468              		.loc 1 2807 0 is_stmt 0 discriminator 1
 21469 004a D7F89430 		ldr	r3, [r7, #148]
 21470 004e 0A2B     		cmp	r3, #10
 21471 0050 E8DD     		ble	.L802
2810:..\src/command_processing.c ****     }
2811:..\src/command_processing.c ****     for (i=1; i<=4;i++){        // Current bins
 21472              		.loc 1 2811 0 is_stmt 1
 21473 0052 0123     		movs	r3, #1
 21474 0054 C7F89430 		str	r3, [r7, #148]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 471


 21475 0058 12E0     		b	.L803
 21476              	.L804:
2812:..\src/command_processing.c ****         sprintf(str, "Bin_%d_Curr,", i); 
 21477              		.loc 1 2812 0 discriminator 3
 21478 005a 07F10803 		add	r3, r7, #8
 21479 005e D7F89420 		ldr	r2, [r7, #148]
 21480 0062 1B49     		ldr	r1, .L805+8
 21481 0064 1846     		mov	r0, r3
 21482 0066 FFF7FEFF 		bl	sprintf
2813:..\src/command_processing.c ****         strcat(info_string, str);
 21483              		.loc 1 2813 0 discriminator 3
 21484 006a 07F10803 		add	r3, r7, #8
 21485 006e 1946     		mov	r1, r3
 21486 0070 7868     		ldr	r0, [r7, #4]
 21487 0072 FFF7FEFF 		bl	strcat
2811:..\src/command_processing.c ****         sprintf(str, "Bin_%d_Curr,", i); 
 21488              		.loc 1 2811 0 discriminator 3
 21489 0076 D7F89430 		ldr	r3, [r7, #148]
 21490 007a 0133     		adds	r3, r3, #1
 21491 007c C7F89430 		str	r3, [r7, #148]
 21492              	.L803:
2811:..\src/command_processing.c ****         sprintf(str, "Bin_%d_Curr,", i); 
 21493              		.loc 1 2811 0 is_stmt 0 discriminator 1
 21494 0080 D7F89430 		ldr	r3, [r7, #148]
 21495 0084 042B     		cmp	r3, #4
 21496 0086 E8DD     		ble	.L804
2814:..\src/command_processing.c ****     }
2815:..\src/command_processing.c ****     sprintf(str, "Rest_times,Wire_disp,Total_rest_time,Power_cycles,EMG_1_act,EMG_2_act,EMG_1_exces
 21497              		.loc 1 2815 0 is_stmt 1
 21498 0088 07F10803 		add	r3, r7, #8
 21499 008c 114A     		ldr	r2, .L805+12
 21500 008e 1846     		mov	r0, r3
 21501 0090 1146     		mov	r1, r2
 21502 0092 8023     		movs	r3, #128
 21503 0094 1A46     		mov	r2, r3
 21504 0096 FFF7FEFF 		bl	memcpy
2816:..\src/command_processing.c ****     strcat(info_string, str);
 21505              		.loc 1 2816 0
 21506 009a 07F10803 		add	r3, r7, #8
 21507 009e 1946     		mov	r1, r3
 21508 00a0 7868     		ldr	r0, [r7, #4]
 21509 00a2 FFF7FEFF 		bl	strcat
2817:..\src/command_processing.c ****     strcat(info_string, "\r\n");
 21510              		.loc 1 2817 0
 21511 00a6 7868     		ldr	r0, [r7, #4]
 21512 00a8 FFF7FEFF 		bl	strlen
 21513 00ac 0346     		mov	r3, r0
 21514 00ae 1A46     		mov	r2, r3
 21515 00b0 7B68     		ldr	r3, [r7, #4]
 21516 00b2 1344     		add	r3, r3, r2
 21517 00b4 084A     		ldr	r2, .L805+16
 21518 00b6 1188     		ldrh	r1, [r2]	@ unaligned
 21519 00b8 9278     		ldrb	r2, [r2, #2]
 21520 00ba 1980     		strh	r1, [r3]	@ unaligned
 21521 00bc 9A70     		strb	r2, [r3, #2]
2818:..\src/command_processing.c **** }
 21522              		.loc 1 2818 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 472


 21523 00be 00BF     		nop
 21524 00c0 9C37     		adds	r7, r7, #156
 21525              		.cfi_def_cfa_offset 12
 21526 00c2 BD46     		mov	sp, r7
 21527              		.cfi_def_cfa_register 13
 21528              		@ sp needed
 21529 00c4 90BD     		pop	{r4, r7, pc}
 21530              	.L806:
 21531 00c6 00BF     		.align	2
 21532              	.L805:
 21533 00c8 B0210000 		.word	.LC307
 21534 00cc C0210000 		.word	.LC308
 21535 00d0 CC210000 		.word	.LC309
 21536 00d4 DC210000 		.word	.LC310
 21537 00d8 58110000 		.word	.LC152
 21538              		.cfi_endproc
 21539              	.LFE76:
 21540              		.size	prepare_SD_legend, .-prepare_SD_legend
 21541              		.section	.rodata
 21542              		.align	2
 21543              	.LC311:
 21544 225c 25303264 		.ascii	"%02d,%02d,%02d,\000"
 21544      2C253032 
 21544      642C2530 
 21544      32642C00 
 21545              		.align	2
 21546              	.LC312:
 21547 226c 256C752C 		.ascii	"%lu,\000"
 21547      00
 21548 2271 000000   		.align	2
 21549              	.LC313:
 21550 2274 256C752C 		.ascii	"%lu,%lu,%lu,%lu,\000"
 21550      256C752C 
 21550      256C752C 
 21550      256C752C 
 21550      00
 21551 2285 000000   		.align	2
 21552              	.LC314:
 21553 2288 256C752C 		.ascii	"%lu,%lu,%lu,%lu,%lu,%lu,\000"
 21553      256C752C 
 21553      256C752C 
 21553      256C752C 
 21553      256C752C 
 21554 22a1 000000   		.align	2
 21555              	.LC315:
 21556 22a4 256C7500 		.ascii	"%lu\000"
 21557              		.section	.text.prepare_SD_info,"ax",%progbits
 21558              		.align	2
 21559              		.global	prepare_SD_info
 21560              		.thumb
 21561              		.thumb_func
 21562              		.type	prepare_SD_info, %function
 21563              	prepare_SD_info:
 21564              	.LFB77:
2819:..\src/command_processing.c **** 
2820:..\src/command_processing.c **** 
2821:..\src/command_processing.c **** //==============================================================================
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 473


2822:..\src/command_processing.c **** //                                                          PREPARE SD CARD INFO
2823:..\src/command_processing.c **** //==============================================================================
2824:..\src/command_processing.c **** void prepare_SD_info(char *info_string)
2825:..\src/command_processing.c **** {
 21565              		.loc 1 2825 0
 21566              		.cfi_startproc
 21567              		@ args = 0, pretend = 0, frame = 136
 21568              		@ frame_needed = 1, uses_anonymous_args = 0
 21569 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 21570              		.cfi_def_cfa_offset 20
 21571              		.cfi_offset 4, -20
 21572              		.cfi_offset 5, -16
 21573              		.cfi_offset 6, -12
 21574              		.cfi_offset 7, -8
 21575              		.cfi_offset 14, -4
 21576 0002 A7B0     		sub	sp, sp, #156
 21577              		.cfi_def_cfa_offset 176
 21578 0004 04AF     		add	r7, sp, #16
 21579              		.cfi_def_cfa 7, 160
 21580 0006 7860     		str	r0, [r7, #4]
2826:..\src/command_processing.c ****     char str[120];  
2827:..\src/command_processing.c ****     int i;
2828:..\src/command_processing.c ****             
2829:..\src/command_processing.c ****     strcpy(info_string, "");
 21581              		.loc 1 2829 0
 21582 0008 7B68     		ldr	r3, [r7, #4]
 21583 000a 0022     		movs	r2, #0
 21584 000c 1A70     		strb	r2, [r3]
2830:..\src/command_processing.c ****     
2831:..\src/command_processing.c ****     // Time
2832:..\src/command_processing.c ****     strcat(info_string, "");
2833:..\src/command_processing.c ****     sprintf(str, "%02d,%02d,%02d,", (int)g_mem.exp.curr_time[3], (int)g_mem.exp.curr_time[4], (int)
 21585              		.loc 1 2833 0
 21586 000e 554B     		ldr	r3, .L812
 21587 0010 93F82332 		ldrb	r3, [r3, #547]	@ zero_extendqisi2
 21588 0014 1A46     		mov	r2, r3
 21589 0016 534B     		ldr	r3, .L812
 21590 0018 93F82432 		ldrb	r3, [r3, #548]	@ zero_extendqisi2
 21591 001c 1946     		mov	r1, r3
 21592 001e 514B     		ldr	r3, .L812
 21593 0020 93F82532 		ldrb	r3, [r3, #549]	@ zero_extendqisi2
 21594 0024 07F10C00 		add	r0, r7, #12
 21595 0028 0093     		str	r3, [sp]
 21596 002a 0B46     		mov	r3, r1
 21597 002c 4E49     		ldr	r1, .L812+4
 21598 002e FFF7FEFF 		bl	sprintf
2834:..\src/command_processing.c ****     strcat(info_string, str);
 21599              		.loc 1 2834 0
 21600 0032 07F10C03 		add	r3, r7, #12
 21601 0036 1946     		mov	r1, r3
 21602 0038 7868     		ldr	r0, [r7, #4]
 21603 003a FFF7FEFF 		bl	strcat
2835:..\src/command_processing.c **** 
2836:..\src/command_processing.c ****     // Pos_Bin
2837:..\src/command_processing.c ****     for (i=1; i<=10;i++){
 21604              		.loc 1 2837 0
 21605 003e 0123     		movs	r3, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 474


 21606 0040 C7F88430 		str	r3, [r7, #132]
 21607 0044 17E0     		b	.L808
 21608              	.L809:
2838:..\src/command_processing.c ****         sprintf(str, "%lu,", g_mem.cnt.position_hist[i-1]); 
 21609              		.loc 1 2838 0 discriminator 3
 21610 0046 D7F88430 		ldr	r3, [r7, #132]
 21611 004a 013B     		subs	r3, r3, #1
 21612 004c 454A     		ldr	r2, .L812
 21613 004e 0633     		adds	r3, r3, #6
 21614 0050 52F82320 		ldr	r2, [r2, r3, lsl #2]
 21615 0054 07F10C03 		add	r3, r7, #12
 21616 0058 4449     		ldr	r1, .L812+8
 21617 005a 1846     		mov	r0, r3
 21618 005c FFF7FEFF 		bl	sprintf
2839:..\src/command_processing.c ****         strcat(info_string, str);
 21619              		.loc 1 2839 0 discriminator 3
 21620 0060 07F10C03 		add	r3, r7, #12
 21621 0064 1946     		mov	r1, r3
 21622 0066 7868     		ldr	r0, [r7, #4]
 21623 0068 FFF7FEFF 		bl	strcat
2837:..\src/command_processing.c ****         sprintf(str, "%lu,", g_mem.cnt.position_hist[i-1]); 
 21624              		.loc 1 2837 0 discriminator 3
 21625 006c D7F88430 		ldr	r3, [r7, #132]
 21626 0070 0133     		adds	r3, r3, #1
 21627 0072 C7F88430 		str	r3, [r7, #132]
 21628              	.L808:
2837:..\src/command_processing.c ****         sprintf(str, "%lu,", g_mem.cnt.position_hist[i-1]); 
 21629              		.loc 1 2837 0 is_stmt 0 discriminator 1
 21630 0076 D7F88430 		ldr	r3, [r7, #132]
 21631 007a 0A2B     		cmp	r3, #10
 21632 007c E3DD     		ble	.L809
2840:..\src/command_processing.c ****     }
2841:..\src/command_processing.c ****     
2842:..\src/command_processing.c ****     // Curr_Bin
2843:..\src/command_processing.c ****     for (i=1; i<=4;i++){
 21633              		.loc 1 2843 0 is_stmt 1
 21634 007e 0123     		movs	r3, #1
 21635 0080 C7F88430 		str	r3, [r7, #132]
 21636 0084 17E0     		b	.L810
 21637              	.L811:
2844:..\src/command_processing.c ****         sprintf(str, "%lu,", g_mem.cnt.current_hist[i-1]); 
 21638              		.loc 1 2844 0 discriminator 3
 21639 0086 D7F88430 		ldr	r3, [r7, #132]
 21640 008a 013B     		subs	r3, r3, #1
 21641 008c 354A     		ldr	r2, .L812
 21642 008e 1033     		adds	r3, r3, #16
 21643 0090 52F82320 		ldr	r2, [r2, r3, lsl #2]
 21644 0094 07F10C03 		add	r3, r7, #12
 21645 0098 3449     		ldr	r1, .L812+8
 21646 009a 1846     		mov	r0, r3
 21647 009c FFF7FEFF 		bl	sprintf
2845:..\src/command_processing.c ****         strcat(info_string, str);
 21648              		.loc 1 2845 0 discriminator 3
 21649 00a0 07F10C03 		add	r3, r7, #12
 21650 00a4 1946     		mov	r1, r3
 21651 00a6 7868     		ldr	r0, [r7, #4]
 21652 00a8 FFF7FEFF 		bl	strcat
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 475


2843:..\src/command_processing.c ****         sprintf(str, "%lu,", g_mem.cnt.current_hist[i-1]); 
 21653              		.loc 1 2843 0 discriminator 3
 21654 00ac D7F88430 		ldr	r3, [r7, #132]
 21655 00b0 0133     		adds	r3, r3, #1
 21656 00b2 C7F88430 		str	r3, [r7, #132]
 21657              	.L810:
2843:..\src/command_processing.c ****         sprintf(str, "%lu,", g_mem.cnt.current_hist[i-1]); 
 21658              		.loc 1 2843 0 is_stmt 0 discriminator 1
 21659 00b6 D7F88430 		ldr	r3, [r7, #132]
 21660 00ba 042B     		cmp	r3, #4
 21661 00bc E3DD     		ble	.L811
2846:..\src/command_processing.c ****     }
2847:..\src/command_processing.c **** 
2848:..\src/command_processing.c ****     // Rest_times, Wire_disp, Total_time_rest, Power_cycles
2849:..\src/command_processing.c ****     sprintf(str, "%lu,%lu,%lu,%lu,", g_mem.cnt.rest_counter, g_mem.cnt.wire_disp, g_mem.cnt.total_t
 21662              		.loc 1 2849 0 is_stmt 1
 21663 00be 294B     		ldr	r3, .L812
 21664 00c0 196D     		ldr	r1, [r3, #80]
 21665 00c2 284B     		ldr	r3, .L812
 21666 00c4 5C6D     		ldr	r4, [r3, #84]
 21667 00c6 274B     		ldr	r3, .L812
 21668 00c8 DB6D     		ldr	r3, [r3, #92]
 21669 00ca 264A     		ldr	r2, .L812
 21670 00cc 126E     		ldr	r2, [r2, #96]
 21671 00ce 07F10C00 		add	r0, r7, #12
 21672 00d2 0192     		str	r2, [sp, #4]
 21673 00d4 0093     		str	r3, [sp]
 21674 00d6 2346     		mov	r3, r4
 21675 00d8 0A46     		mov	r2, r1
 21676 00da 2549     		ldr	r1, .L812+12
 21677 00dc FFF7FEFF 		bl	sprintf
2850:..\src/command_processing.c ****     strcat(info_string, str);
 21678              		.loc 1 2850 0
 21679 00e0 07F10C03 		add	r3, r7, #12
 21680 00e4 1946     		mov	r1, r3
 21681 00e6 7868     		ldr	r0, [r7, #4]
 21682 00e8 FFF7FEFF 		bl	strcat
2851:..\src/command_processing.c ****     
2852:..\src/command_processing.c ****     // EMG_1_act, EMG_2_act, EMG_1_excess, EMG_2_excess, Motion_1, Motion_2
2853:..\src/command_processing.c ****     sprintf(str, "%lu,%lu,%lu,%lu,%lu,%lu,", g_mem.cnt.emg_act_counter[0], g_mem.cnt.emg_act_counte
 21683              		.loc 1 2853 0
 21684 00ec 1D4B     		ldr	r3, .L812
 21685 00ee 1D69     		ldr	r5, [r3, #16]
 21686 00f0 1C4B     		ldr	r3, .L812
 21687 00f2 5E69     		ldr	r6, [r3, #20]
 21688 00f4 1B4B     		ldr	r3, .L812
 21689 00f6 5B6E     		ldr	r3, [r3, #100]
 21690 00f8 1A4A     		ldr	r2, .L812
 21691 00fa 926E     		ldr	r2, [r2, #104]
 21692 00fc 1949     		ldr	r1, .L812
 21693 00fe C96E     		ldr	r1, [r1, #108]
 21694 0100 1848     		ldr	r0, .L812
 21695 0102 006F     		ldr	r0, [r0, #112]
 21696 0104 07F10C04 		add	r4, r7, #12
 21697 0108 0390     		str	r0, [sp, #12]
 21698 010a 0291     		str	r1, [sp, #8]
 21699 010c 0192     		str	r2, [sp, #4]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 476


 21700 010e 0093     		str	r3, [sp]
 21701 0110 3346     		mov	r3, r6
 21702 0112 2A46     		mov	r2, r5
 21703 0114 1749     		ldr	r1, .L812+16
 21704 0116 2046     		mov	r0, r4
 21705 0118 FFF7FEFF 		bl	sprintf
2854:..\src/command_processing.c ****                                     g_mem.cnt.excessive_signal_activity[0], g_mem.cnt.excessive_sig
2855:..\src/command_processing.c ****                                     g_mem.cnt.motion_counter[0], g_mem.cnt.motion_counter[1]);
2856:..\src/command_processing.c ****     strcat(info_string, str);
 21706              		.loc 1 2856 0
 21707 011c 07F10C03 		add	r3, r7, #12
 21708 0120 1946     		mov	r1, r3
 21709 0122 7868     		ldr	r0, [r7, #4]
 21710 0124 FFF7FEFF 		bl	strcat
2857:..\src/command_processing.c ****     
2858:..\src/command_processing.c ****     // Total_runtime
2859:..\src/command_processing.c ****     sprintf(str, "%lu", g_mem.cnt.total_runtime);
 21711              		.loc 1 2859 0
 21712 0128 0E4B     		ldr	r3, .L812
 21713 012a 9A6D     		ldr	r2, [r3, #88]
 21714 012c 07F10C03 		add	r3, r7, #12
 21715 0130 1149     		ldr	r1, .L812+20
 21716 0132 1846     		mov	r0, r3
 21717 0134 FFF7FEFF 		bl	sprintf
2860:..\src/command_processing.c ****     strcat(info_string, str);
 21718              		.loc 1 2860 0
 21719 0138 07F10C03 		add	r3, r7, #12
 21720 013c 1946     		mov	r1, r3
 21721 013e 7868     		ldr	r0, [r7, #4]
 21722 0140 FFF7FEFF 		bl	strcat
2861:..\src/command_processing.c ****     
2862:..\src/command_processing.c ****     strcat(info_string, "\r\n");
 21723              		.loc 1 2862 0
 21724 0144 7868     		ldr	r0, [r7, #4]
 21725 0146 FFF7FEFF 		bl	strlen
 21726 014a 0346     		mov	r3, r0
 21727 014c 1A46     		mov	r2, r3
 21728 014e 7B68     		ldr	r3, [r7, #4]
 21729 0150 1344     		add	r3, r3, r2
 21730 0152 0A4A     		ldr	r2, .L812+24
 21731 0154 1188     		ldrh	r1, [r2]	@ unaligned
 21732 0156 9278     		ldrb	r2, [r2, #2]
 21733 0158 1980     		strh	r1, [r3]	@ unaligned
 21734 015a 9A70     		strb	r2, [r3, #2]
2863:..\src/command_processing.c **** }
 21735              		.loc 1 2863 0
 21736 015c 00BF     		nop
 21737 015e 8C37     		adds	r7, r7, #140
 21738              		.cfi_def_cfa_offset 20
 21739 0160 BD46     		mov	sp, r7
 21740              		.cfi_def_cfa_register 13
 21741              		@ sp needed
 21742 0162 F0BD     		pop	{r4, r5, r6, r7, pc}
 21743              	.L813:
 21744              		.align	2
 21745              	.L812:
 21746 0164 00000000 		.word	g_mem
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 477


 21747 0168 5C220000 		.word	.LC311
 21748 016c 6C220000 		.word	.LC312
 21749 0170 74220000 		.word	.LC313
 21750 0174 88220000 		.word	.LC314
 21751 0178 A4220000 		.word	.LC315
 21752 017c 58110000 		.word	.LC152
 21753              		.cfi_endproc
 21754              	.LFE77:
 21755              		.size	prepare_SD_info, .-prepare_SD_info
 21756              		.section	.rodata
 21757              		.align	2
 21758              	.LC316:
 21759 22a8 54696D65 		.ascii	"Time,EMG1,EMG2\012\000"
 21759      2C454D47 
 21759      312C454D 
 21759      47320A00 
 21760              		.section	.text.prepare_SD_EMG_History_legend,"ax",%progbits
 21761              		.align	2
 21762              		.global	prepare_SD_EMG_History_legend
 21763              		.thumb
 21764              		.thumb_func
 21765              		.type	prepare_SD_EMG_History_legend, %function
 21766              	prepare_SD_EMG_History_legend:
 21767              	.LFB78:
2864:..\src/command_processing.c **** 
2865:..\src/command_processing.c **** //==============================================================================
2866:..\src/command_processing.c **** //                                            PREPARE SD CARD EMG HISTORY LEGEND
2867:..\src/command_processing.c **** //==============================================================================
2868:..\src/command_processing.c **** void prepare_SD_EMG_History_legend(char *info_string)
2869:..\src/command_processing.c **** {
 21768              		.loc 1 2869 0
 21769              		.cfi_startproc
 21770              		@ args = 0, pretend = 0, frame = 8
 21771              		@ frame_needed = 1, uses_anonymous_args = 0
 21772              		@ link register save eliminated.
 21773 0000 B0B4     		push	{r4, r5, r7}
 21774              		.cfi_def_cfa_offset 12
 21775              		.cfi_offset 4, -12
 21776              		.cfi_offset 5, -8
 21777              		.cfi_offset 7, -4
 21778 0002 83B0     		sub	sp, sp, #12
 21779              		.cfi_def_cfa_offset 24
 21780 0004 00AF     		add	r7, sp, #0
 21781              		.cfi_def_cfa_register 7
 21782 0006 7860     		str	r0, [r7, #4]
2870:..\src/command_processing.c ****         
2871:..\src/command_processing.c ****     // Legend
2872:..\src/command_processing.c ****     strcpy(info_string, "Time,EMG1,EMG2\n");
 21783              		.loc 1 2872 0
 21784 0008 7B68     		ldr	r3, [r7, #4]
 21785 000a 064A     		ldr	r2, .L815
 21786 000c 1C46     		mov	r4, r3
 21787 000e 1546     		mov	r5, r2
 21788 0010 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 21789 0012 2060     		str	r0, [r4]	@ unaligned
 21790 0014 6160     		str	r1, [r4, #4]	@ unaligned
 21791 0016 A260     		str	r2, [r4, #8]	@ unaligned
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 478


 21792 0018 E360     		str	r3, [r4, #12]	@ unaligned
2873:..\src/command_processing.c ****     
2874:..\src/command_processing.c **** }
 21793              		.loc 1 2874 0
 21794 001a 00BF     		nop
 21795 001c 0C37     		adds	r7, r7, #12
 21796              		.cfi_def_cfa_offset 12
 21797 001e BD46     		mov	sp, r7
 21798              		.cfi_def_cfa_register 13
 21799              		@ sp needed
 21800 0020 B0BC     		pop	{r4, r5, r7}
 21801              		.cfi_restore 7
 21802              		.cfi_restore 5
 21803              		.cfi_restore 4
 21804              		.cfi_def_cfa_offset 0
 21805 0022 7047     		bx	lr
 21806              	.L816:
 21807              		.align	2
 21808              	.L815:
 21809 0024 A8220000 		.word	.LC316
 21810              		.cfi_endproc
 21811              	.LFE78:
 21812              		.size	prepare_SD_EMG_History_legend, .-prepare_SD_EMG_History_legend
 21813              		.section	.rodata
 21814              		.align	2
 21815              	.LC317:
 21816 22b8 252E3166 		.ascii	"%.1f,%u,%u\012\000"
 21816      2C25752C 
 21816      25750A00 
 21817              		.global	__aeabi_dadd
 21818              		.global	__aeabi_d2f
 21819              		.section	.text.prepare_SD_EMG_history,"ax",%progbits
 21820              		.align	2
 21821              		.global	prepare_SD_EMG_history
 21822              		.thumb
 21823              		.thumb_func
 21824              		.type	prepare_SD_EMG_history, %function
 21825              	prepare_SD_EMG_history:
 21826              	.LFB79:
2875:..\src/command_processing.c **** 
2876:..\src/command_processing.c **** //==============================================================================
2877:..\src/command_processing.c **** //                                                   PREPARE SD CARD EMG HISTORY
2878:..\src/command_processing.c **** //==============================================================================
2879:..\src/command_processing.c **** void prepare_SD_EMG_history(char *info_string)
2880:..\src/command_processing.c **** {
 21827              		.loc 1 2880 0
 21828              		.cfi_startproc
 21829              		@ args = 0, pretend = 0, frame = 120
 21830              		@ frame_needed = 1, uses_anonymous_args = 0
 21831 0000 B0B5     		push	{r4, r5, r7, lr}
 21832              		.cfi_def_cfa_offset 16
 21833              		.cfi_offset 4, -16
 21834              		.cfi_offset 5, -12
 21835              		.cfi_offset 7, -8
 21836              		.cfi_offset 14, -4
 21837 0002 A0B0     		sub	sp, sp, #128
 21838              		.cfi_def_cfa_offset 144
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 479


 21839 0004 02AF     		add	r7, sp, #8
 21840              		.cfi_def_cfa 7, 136
 21841 0006 7860     		str	r0, [r7, #4]
2881:..\src/command_processing.c ****     char str_data[100] = "";
 21842              		.loc 1 2881 0
 21843 0008 0023     		movs	r3, #0
 21844 000a FB60     		str	r3, [r7, #12]
 21845 000c 07F11003 		add	r3, r7, #16
 21846 0010 6022     		movs	r2, #96
 21847 0012 0021     		movs	r1, #0
 21848 0014 1846     		mov	r0, r3
 21849 0016 FFF7FEFF 		bl	memset
2882:..\src/command_processing.c ****     uint16 v_idx = 0;
 21850              		.loc 1 2882 0
 21851 001a 0023     		movs	r3, #0
 21852 001c A7F87630 		strh	r3, [r7, #118]	@ movhi
2883:..\src/command_processing.c ****     static float h_time = 0.0;
2884:..\src/command_processing.c ****                 
2885:..\src/command_processing.c ****     strcpy(info_string, "");
 21853              		.loc 1 2885 0
 21854 0020 7B68     		ldr	r3, [r7, #4]
 21855 0022 0022     		movs	r2, #0
 21856 0024 1A70     		strb	r2, [r3]
 21857              	.LBB29:
2886:..\src/command_processing.c ****     
2887:..\src/command_processing.c ****     // Oldest samples of the vector
2888:..\src/command_processing.c ****     for (int i = 0; i < SAMPLES_FOR_EMG_HISTORY; i++){
 21858              		.loc 1 2888 0
 21859 0026 0023     		movs	r3, #0
 21860 0028 3B67     		str	r3, [r7, #112]
 21861 002a 4AE0     		b	.L818
 21862              	.L820:
2889:..\src/command_processing.c ****               
2890:..\src/command_processing.c ****         // Send line per line all the history vector
2891:..\src/command_processing.c ****         // First line (oldest) is made by values of emg_history_next_idx index (they will be the ne
2892:..\src/command_processing.c ****         v_idx = emg_history_next_idx + i;
 21863              		.loc 1 2892 0
 21864 002c 2C4B     		ldr	r3, .L821+8
 21865 002e 1B68     		ldr	r3, [r3]
 21866 0030 9AB2     		uxth	r2, r3
 21867 0032 3B6F     		ldr	r3, [r7, #112]
 21868 0034 9BB2     		uxth	r3, r3
 21869 0036 1344     		add	r3, r3, r2
 21870 0038 A7F87630 		strh	r3, [r7, #118]	@ movhi
2893:..\src/command_processing.c ****         if (v_idx > SAMPLES_FOR_EMG_HISTORY){
 21871              		.loc 1 2893 0
 21872 003c B7F87630 		ldrh	r3, [r7, #118]
 21873 0040 B3F5167F 		cmp	r3, #600
 21874 0044 05D9     		bls	.L819
2894:..\src/command_processing.c ****             v_idx -= SAMPLES_FOR_EMG_HISTORY;
 21875              		.loc 1 2894 0
 21876 0046 B7F87630 		ldrh	r3, [r7, #118]	@ movhi
 21877 004a A3F51673 		sub	r3, r3, #600
 21878 004e A7F87630 		strh	r3, [r7, #118]	@ movhi
 21879              	.L819:
2895:..\src/command_processing.c ****         }
2896:..\src/command_processing.c ****         
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 480


2897:..\src/command_processing.c ****         // Time vector is reconstructed setting oldest samples as t=0.0s
2898:..\src/command_processing.c ****         sprintf(str_data, "%.1f,%u,%u\n", h_time, emg_history[v_idx][0], emg_history[v_idx][1]);
 21880              		.loc 1 2898 0 discriminator 2
 21881 0052 244B     		ldr	r3, .L821+12
 21882 0054 1B68     		ldr	r3, [r3]	@ float
 21883 0056 1846     		mov	r0, r3
 21884 0058 FFF7FEFF 		bl	__aeabi_f2d
 21885 005c 0446     		mov	r4, r0
 21886 005e 0D46     		mov	r5, r1
 21887 0060 B7F87630 		ldrh	r3, [r7, #118]
 21888 0064 204A     		ldr	r2, .L821+16
 21889 0066 32F82330 		ldrh	r3, [r2, r3, lsl #2]
 21890 006a 1946     		mov	r1, r3
 21891 006c B7F87630 		ldrh	r3, [r7, #118]
 21892 0070 1D4A     		ldr	r2, .L821+16
 21893 0072 9B00     		lsls	r3, r3, #2
 21894 0074 1344     		add	r3, r3, r2
 21895 0076 5B88     		ldrh	r3, [r3, #2]
 21896 0078 07F10C00 		add	r0, r7, #12
 21897 007c 0193     		str	r3, [sp, #4]
 21898 007e 0091     		str	r1, [sp]
 21899 0080 2246     		mov	r2, r4
 21900 0082 2B46     		mov	r3, r5
 21901 0084 1949     		ldr	r1, .L821+20
 21902 0086 FFF7FEFF 		bl	sprintf
2899:..\src/command_processing.c ****         
2900:..\src/command_processing.c ****         strcat(info_string, str_data);
 21903              		.loc 1 2900 0 discriminator 2
 21904 008a 07F10C03 		add	r3, r7, #12
 21905 008e 1946     		mov	r1, r3
 21906 0090 7868     		ldr	r0, [r7, #4]
 21907 0092 FFF7FEFF 		bl	strcat
2901:..\src/command_processing.c ****         
2902:..\src/command_processing.c ****         h_time += 0.2;      // Row time interval is 200ms (5Hz)
 21908              		.loc 1 2902 0 discriminator 2
 21909 0096 134B     		ldr	r3, .L821+12
 21910 0098 1B68     		ldr	r3, [r3]	@ float
 21911 009a 1846     		mov	r0, r3
 21912 009c FFF7FEFF 		bl	__aeabi_f2d
 21913 00a0 0DA3     		adr	r3, .L821
 21914 00a2 D3E90023 		ldrd	r2, [r3]
 21915 00a6 FFF7FEFF 		bl	__aeabi_dadd
 21916 00aa 0346     		mov	r3, r0
 21917 00ac 0C46     		mov	r4, r1
 21918 00ae 1846     		mov	r0, r3
 21919 00b0 2146     		mov	r1, r4
 21920 00b2 FFF7FEFF 		bl	__aeabi_d2f
 21921 00b6 0246     		mov	r2, r0
 21922 00b8 0A4B     		ldr	r3, .L821+12
 21923 00ba 1A60     		str	r2, [r3]	@ float
2888:..\src/command_processing.c ****               
 21924              		.loc 1 2888 0 discriminator 2
 21925 00bc 3B6F     		ldr	r3, [r7, #112]
 21926 00be 0133     		adds	r3, r3, #1
 21927 00c0 3B67     		str	r3, [r7, #112]
 21928              	.L818:
2888:..\src/command_processing.c ****               
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 481


 21929              		.loc 1 2888 0 is_stmt 0 discriminator 1
 21930 00c2 3B6F     		ldr	r3, [r7, #112]
 21931 00c4 B3F5167F 		cmp	r3, #600
 21932 00c8 B0DB     		blt	.L820
 21933              	.LBE29:
2903:..\src/command_processing.c **** 
2904:..\src/command_processing.c ****     }
2905:..\src/command_processing.c ****     
2906:..\src/command_processing.c **** }
 21934              		.loc 1 2906 0 is_stmt 1
 21935 00ca 00BF     		nop
 21936 00cc 7837     		adds	r7, r7, #120
 21937              		.cfi_def_cfa_offset 16
 21938 00ce BD46     		mov	sp, r7
 21939              		.cfi_def_cfa_register 13
 21940              		@ sp needed
 21941 00d0 B0BD     		pop	{r4, r5, r7, pc}
 21942              	.L822:
 21943 00d2 00BFAFF3 		.align	3
 21943      0080
 21944              	.L821:
 21945 00d8 9A999999 		.word	-1717986918
 21946 00dc 9999C93F 		.word	1070176665
 21947 00e0 00000000 		.word	emg_history_next_idx
 21948 00e4 00000000 		.word	h_time.11232
 21949 00e8 00000000 		.word	emg_history
 21950 00ec B8220000 		.word	.LC317
 21951              		.cfi_endproc
 21952              	.LFE79:
 21953              		.size	prepare_SD_EMG_history, .-prepare_SD_EMG_history
 21954              		.section	.rodata
 21955              		.align	2
 21956              	.LC318:
 21957 22c4 53454E53 		.ascii	"SENSORS INFO\015\012\000"
 21957      4F525320 
 21957      494E464F 
 21957      0D0A00
 21958 22d3 00       		.align	2
 21959              	.LC319:
 21960 22d4 09416363 		.ascii	"\011Acc: %d\011%d\011%d\015\012\000"
 21960      3A202564 
 21960      09256409 
 21960      25640D0A 
 21960      00
 21961 22e5 000000   		.align	2
 21962              	.LC320:
 21963 22e8 09477972 		.ascii	"\011Gyro: %d\011%d\011%d\015\012\000"
 21963      6F3A2025 
 21963      64092564 
 21963      0925640D 
 21963      0A00
 21964 22fa 0000     		.align	2
 21965              	.LC321:
 21966 22fc 094D6167 		.ascii	"\011Mag: %d\011%d\011%d\015\012\000"
 21966      3A202564 
 21966      09256409 
 21966      25640D0A 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 482


 21966      00
 21967 230d 000000   		.align	2
 21968              	.LC322:
 21969 2310 09517561 		.ascii	"\011Quat: %.3f\011%.3f\011%.3f\011%.3f\015\012\000"
 21969      743A2025 
 21969      2E336609 
 21969      252E3366 
 21969      09252E33 
 21970 232d 000000   		.align	2
 21971              	.LC323:
 21972 2330 0954656D 		.ascii	"\011Temperature: %d\015\012\000"
 21972      70657261 
 21972      74757265 
 21972      3A202564 
 21972      0D0A00
 21973              		.section	.text.IMU_reading_info,"ax",%progbits
 21974              		.align	2
 21975              		.global	IMU_reading_info
 21976              		.thumb
 21977              		.thumb_func
 21978              		.type	IMU_reading_info, %function
 21979              	IMU_reading_info:
 21980              	.LFB80:
2907:..\src/command_processing.c **** 
2908:..\src/command_processing.c **** //==============================================================================
2909:..\src/command_processing.c **** //                                                              IMU READING INFO
2910:..\src/command_processing.c **** //==============================================================================
2911:..\src/command_processing.c **** 
2912:..\src/command_processing.c **** void IMU_reading_info(char *info_string)
2913:..\src/command_processing.c **** {
 21981              		.loc 1 2913 0
 21982              		.cfi_startproc
 21983              		@ args = 0, pretend = 0, frame = 312
 21984              		@ frame_needed = 1, uses_anonymous_args = 0
 21985 0000 2DE9B04F 		push	{r4, r5, r7, r8, r9, r10, fp, lr}
 21986              		.cfi_def_cfa_offset 32
 21987              		.cfi_offset 4, -32
 21988              		.cfi_offset 5, -28
 21989              		.cfi_offset 7, -24
 21990              		.cfi_offset 8, -20
 21991              		.cfi_offset 9, -16
 21992              		.cfi_offset 10, -12
 21993              		.cfi_offset 11, -8
 21994              		.cfi_offset 14, -4
 21995 0004 D4B0     		sub	sp, sp, #336
 21996              		.cfi_def_cfa_offset 368
 21997 0006 06AF     		add	r7, sp, #24
 21998              		.cfi_def_cfa 7, 344
 21999 0008 3B1D     		adds	r3, r7, #4
 22000 000a 1860     		str	r0, [r3]
2914:..\src/command_processing.c ****     char str[300];  
2915:..\src/command_processing.c ****     int i;
2916:..\src/command_processing.c ****                  
2917:..\src/command_processing.c ****     strcat(info_string, "SENSORS INFO\r\n");
 22001              		.loc 1 2917 0
 22002 000c 3B1D     		adds	r3, r7, #4
 22003 000e 1868     		ldr	r0, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 483


 22004 0010 FFF7FEFF 		bl	strlen
 22005 0014 0346     		mov	r3, r0
 22006 0016 1A46     		mov	r2, r3
 22007 0018 3B1D     		adds	r3, r7, #4
 22008 001a 1B68     		ldr	r3, [r3]
 22009 001c 1344     		add	r3, r3, r2
 22010 001e C94A     		ldr	r2, .L831
 22011 0020 1C46     		mov	r4, r3
 22012 0022 1346     		mov	r3, r2
 22013 0024 07CB     		ldmia	r3!, {r0, r1, r2}
 22014 0026 2060     		str	r0, [r4]	@ unaligned
 22015 0028 6160     		str	r1, [r4, #4]	@ unaligned
 22016 002a A260     		str	r2, [r4, #8]	@ unaligned
 22017 002c 1A88     		ldrh	r2, [r3]	@ unaligned
 22018 002e 9B78     		ldrb	r3, [r3, #2]
 22019 0030 A281     		strh	r2, [r4, #12]	@ unaligned
 22020 0032 A373     		strb	r3, [r4, #14]
2918:..\src/command_processing.c ****     for (i=0; i<N_IMU_Connected; i++){
 22021              		.loc 1 2918 0
 22022 0034 0023     		movs	r3, #0
 22023 0036 C7F83431 		str	r3, [r7, #308]
 22024 003a 66E1     		b	.L824
 22025              	.L830:
2919:..\src/command_processing.c ****         sprintf(str, "Imu %d \r\n\tID: %d\r\n", i, (int) IMU_connected[i]);
 22026              		.loc 1 2919 0
 22027 003c C24A     		ldr	r2, .L831+4
 22028 003e D7F83431 		ldr	r3, [r7, #308]
 22029 0042 1344     		add	r3, r3, r2
 22030 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 22031 0046 07F10800 		add	r0, r7, #8
 22032 004a D7F83421 		ldr	r2, [r7, #308]
 22033 004e BF49     		ldr	r1, .L831+8
 22034 0050 FFF7FEFF 		bl	sprintf
2920:..\src/command_processing.c ****         strcat(info_string, str);
 22035              		.loc 1 2920 0
 22036 0054 07F10802 		add	r2, r7, #8
 22037 0058 3B1D     		adds	r3, r7, #4
 22038 005a 1146     		mov	r1, r2
 22039 005c 1868     		ldr	r0, [r3]
 22040 005e FFF7FEFF 		bl	strcat
2921:..\src/command_processing.c ****         
2922:..\src/command_processing.c ****         if ((c_mem.imu.IMU_conf[IMU_connected[i]][0])){
 22041              		.loc 1 2922 0
 22042 0062 B94A     		ldr	r2, .L831+4
 22043 0064 D7F83431 		ldr	r3, [r7, #308]
 22044 0068 1344     		add	r3, r3, r2
 22045 006a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 22046 006c 1946     		mov	r1, r3
 22047 006e B84A     		ldr	r2, .L831+12
 22048 0070 0B46     		mov	r3, r1
 22049 0072 9B00     		lsls	r3, r3, #2
 22050 0074 0B44     		add	r3, r3, r1
 22051 0076 1344     		add	r3, r3, r2
 22052 0078 03F20223 		addw	r3, r3, #514
 22053 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 22054 007e 002B     		cmp	r3, #0
 22055 0080 31D0     		beq	.L825
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 484


2923:..\src/command_processing.c ****             sprintf(str, "\tAcc: %d\t%d\t%d\r\n", (int16) g_imu[i].accel_value[0], (int16) g_imu[i]
 22056              		.loc 1 2923 0
 22057 0082 B449     		ldr	r1, .L831+16
 22058 0084 D7F83421 		ldr	r2, [r7, #308]
 22059 0088 1346     		mov	r3, r2
 22060 008a 9B00     		lsls	r3, r3, #2
 22061 008c 1344     		add	r3, r3, r2
 22062 008e DB00     		lsls	r3, r3, #3
 22063 0090 0B44     		add	r3, r3, r1
 22064 0092 0233     		adds	r3, r3, #2
 22065 0094 B3F90030 		ldrsh	r3, [r3]
 22066 0098 1C46     		mov	r4, r3
 22067 009a AE49     		ldr	r1, .L831+16
 22068 009c D7F83421 		ldr	r2, [r7, #308]
 22069 00a0 1346     		mov	r3, r2
 22070 00a2 9B00     		lsls	r3, r3, #2
 22071 00a4 1344     		add	r3, r3, r2
 22072 00a6 DB00     		lsls	r3, r3, #3
 22073 00a8 0B44     		add	r3, r3, r1
 22074 00aa 0433     		adds	r3, r3, #4
 22075 00ac B3F90030 		ldrsh	r3, [r3]
 22076 00b0 1D46     		mov	r5, r3
 22077 00b2 A849     		ldr	r1, .L831+16
 22078 00b4 D7F83421 		ldr	r2, [r7, #308]
 22079 00b8 1346     		mov	r3, r2
 22080 00ba 9B00     		lsls	r3, r3, #2
 22081 00bc 1344     		add	r3, r3, r2
 22082 00be DB00     		lsls	r3, r3, #3
 22083 00c0 0B44     		add	r3, r3, r1
 22084 00c2 0633     		adds	r3, r3, #6
 22085 00c4 B3F90030 		ldrsh	r3, [r3]
 22086 00c8 07F10800 		add	r0, r7, #8
 22087 00cc 0093     		str	r3, [sp]
 22088 00ce 2B46     		mov	r3, r5
 22089 00d0 2246     		mov	r2, r4
 22090 00d2 A149     		ldr	r1, .L831+20
 22091 00d4 FFF7FEFF 		bl	sprintf
2924:..\src/command_processing.c ****             strcat(info_string, str);
 22092              		.loc 1 2924 0
 22093 00d8 07F10802 		add	r2, r7, #8
 22094 00dc 3B1D     		adds	r3, r7, #4
 22095 00de 1146     		mov	r1, r2
 22096 00e0 1868     		ldr	r0, [r3]
 22097 00e2 FFF7FEFF 		bl	strcat
 22098              	.L825:
2925:..\src/command_processing.c ****         }
2926:..\src/command_processing.c **** 
2927:..\src/command_processing.c ****         if ((c_mem.imu.IMU_conf[IMU_connected[i]][1])){
 22099              		.loc 1 2927 0
 22100 00e6 984A     		ldr	r2, .L831+4
 22101 00e8 D7F83431 		ldr	r3, [r7, #308]
 22102 00ec 1344     		add	r3, r3, r2
 22103 00ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 22104 00f0 1946     		mov	r1, r3
 22105 00f2 974A     		ldr	r2, .L831+12
 22106 00f4 0B46     		mov	r3, r1
 22107 00f6 9B00     		lsls	r3, r3, #2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 485


 22108 00f8 0B44     		add	r3, r3, r1
 22109 00fa 1344     		add	r3, r3, r2
 22110 00fc 03F20323 		addw	r3, r3, #515
 22111 0100 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 22112 0102 002B     		cmp	r3, #0
 22113 0104 31D0     		beq	.L826
2928:..\src/command_processing.c ****             sprintf(str, "\tGyro: %d\t%d\t%d\r\n", (int16) g_imu[i].gyro_value[0], (int16) g_imu[i]
 22114              		.loc 1 2928 0
 22115 0106 9349     		ldr	r1, .L831+16
 22116 0108 D7F83421 		ldr	r2, [r7, #308]
 22117 010c 1346     		mov	r3, r2
 22118 010e 9B00     		lsls	r3, r3, #2
 22119 0110 1344     		add	r3, r3, r2
 22120 0112 DB00     		lsls	r3, r3, #3
 22121 0114 0B44     		add	r3, r3, r1
 22122 0116 0833     		adds	r3, r3, #8
 22123 0118 B3F90030 		ldrsh	r3, [r3]
 22124 011c 1C46     		mov	r4, r3
 22125 011e 8D49     		ldr	r1, .L831+16
 22126 0120 D7F83421 		ldr	r2, [r7, #308]
 22127 0124 1346     		mov	r3, r2
 22128 0126 9B00     		lsls	r3, r3, #2
 22129 0128 1344     		add	r3, r3, r2
 22130 012a DB00     		lsls	r3, r3, #3
 22131 012c 0B44     		add	r3, r3, r1
 22132 012e 0A33     		adds	r3, r3, #10
 22133 0130 B3F90030 		ldrsh	r3, [r3]
 22134 0134 1D46     		mov	r5, r3
 22135 0136 8749     		ldr	r1, .L831+16
 22136 0138 D7F83421 		ldr	r2, [r7, #308]
 22137 013c 1346     		mov	r3, r2
 22138 013e 9B00     		lsls	r3, r3, #2
 22139 0140 1344     		add	r3, r3, r2
 22140 0142 DB00     		lsls	r3, r3, #3
 22141 0144 0B44     		add	r3, r3, r1
 22142 0146 0C33     		adds	r3, r3, #12
 22143 0148 B3F90030 		ldrsh	r3, [r3]
 22144 014c 07F10800 		add	r0, r7, #8
 22145 0150 0093     		str	r3, [sp]
 22146 0152 2B46     		mov	r3, r5
 22147 0154 2246     		mov	r2, r4
 22148 0156 8149     		ldr	r1, .L831+24
 22149 0158 FFF7FEFF 		bl	sprintf
2929:..\src/command_processing.c ****             strcat(info_string, str);
 22150              		.loc 1 2929 0
 22151 015c 07F10802 		add	r2, r7, #8
 22152 0160 3B1D     		adds	r3, r7, #4
 22153 0162 1146     		mov	r1, r2
 22154 0164 1868     		ldr	r0, [r3]
 22155 0166 FFF7FEFF 		bl	strcat
 22156              	.L826:
2930:..\src/command_processing.c ****         }
2931:..\src/command_processing.c **** 
2932:..\src/command_processing.c ****         if ((c_mem.imu.IMU_conf[IMU_connected[i]][2])){
 22157              		.loc 1 2932 0
 22158 016a 774A     		ldr	r2, .L831+4
 22159 016c D7F83431 		ldr	r3, [r7, #308]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 486


 22160 0170 1344     		add	r3, r3, r2
 22161 0172 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 22162 0174 1946     		mov	r1, r3
 22163 0176 764A     		ldr	r2, .L831+12
 22164 0178 0B46     		mov	r3, r1
 22165 017a 9B00     		lsls	r3, r3, #2
 22166 017c 0B44     		add	r3, r3, r1
 22167 017e 1344     		add	r3, r3, r2
 22168 0180 03F50173 		add	r3, r3, #516
 22169 0184 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 22170 0186 002B     		cmp	r3, #0
 22171 0188 31D0     		beq	.L827
2933:..\src/command_processing.c ****             sprintf(str, "\tMag: %d\t%d\t%d\r\n", (int16) g_imu[i].mag_value[0], (int16) g_imu[i].m
 22172              		.loc 1 2933 0
 22173 018a 7249     		ldr	r1, .L831+16
 22174 018c D7F83421 		ldr	r2, [r7, #308]
 22175 0190 1346     		mov	r3, r2
 22176 0192 9B00     		lsls	r3, r3, #2
 22177 0194 1344     		add	r3, r3, r2
 22178 0196 DB00     		lsls	r3, r3, #3
 22179 0198 0B44     		add	r3, r3, r1
 22180 019a 0E33     		adds	r3, r3, #14
 22181 019c B3F90030 		ldrsh	r3, [r3]
 22182 01a0 1C46     		mov	r4, r3
 22183 01a2 6C49     		ldr	r1, .L831+16
 22184 01a4 D7F83421 		ldr	r2, [r7, #308]
 22185 01a8 1346     		mov	r3, r2
 22186 01aa 9B00     		lsls	r3, r3, #2
 22187 01ac 1344     		add	r3, r3, r2
 22188 01ae DB00     		lsls	r3, r3, #3
 22189 01b0 0B44     		add	r3, r3, r1
 22190 01b2 1033     		adds	r3, r3, #16
 22191 01b4 B3F90030 		ldrsh	r3, [r3]
 22192 01b8 1D46     		mov	r5, r3
 22193 01ba 6649     		ldr	r1, .L831+16
 22194 01bc D7F83421 		ldr	r2, [r7, #308]
 22195 01c0 1346     		mov	r3, r2
 22196 01c2 9B00     		lsls	r3, r3, #2
 22197 01c4 1344     		add	r3, r3, r2
 22198 01c6 DB00     		lsls	r3, r3, #3
 22199 01c8 0B44     		add	r3, r3, r1
 22200 01ca 1233     		adds	r3, r3, #18
 22201 01cc B3F90030 		ldrsh	r3, [r3]
 22202 01d0 07F10800 		add	r0, r7, #8
 22203 01d4 0093     		str	r3, [sp]
 22204 01d6 2B46     		mov	r3, r5
 22205 01d8 2246     		mov	r2, r4
 22206 01da 6149     		ldr	r1, .L831+28
 22207 01dc FFF7FEFF 		bl	sprintf
2934:..\src/command_processing.c ****             strcat(info_string, str);
 22208              		.loc 1 2934 0
 22209 01e0 07F10802 		add	r2, r7, #8
 22210 01e4 3B1D     		adds	r3, r7, #4
 22211 01e6 1146     		mov	r1, r2
 22212 01e8 1868     		ldr	r0, [r3]
 22213 01ea FFF7FEFF 		bl	strcat
 22214              	.L827:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 487


2935:..\src/command_processing.c ****         }
2936:..\src/command_processing.c ****         
2937:..\src/command_processing.c ****         if ((c_mem.imu.IMU_conf[IMU_connected[i]][3])){
 22215              		.loc 1 2937 0
 22216 01ee 564A     		ldr	r2, .L831+4
 22217 01f0 D7F83431 		ldr	r3, [r7, #308]
 22218 01f4 1344     		add	r3, r3, r2
 22219 01f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 22220 01f8 1946     		mov	r1, r3
 22221 01fa 554A     		ldr	r2, .L831+12
 22222 01fc 0B46     		mov	r3, r1
 22223 01fe 9B00     		lsls	r3, r3, #2
 22224 0200 0B44     		add	r3, r3, r1
 22225 0202 1344     		add	r3, r3, r2
 22226 0204 03F20523 		addw	r3, r3, #517
 22227 0208 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 22228 020a 002B     		cmp	r3, #0
 22229 020c 4FD0     		beq	.L828
2938:..\src/command_processing.c ****             sprintf(str, "\tQuat: %.3f\t%.3f\t%.3f\t%.3f\r\n", (float) g_imu[i].quat_value[0], (flo
 22230              		.loc 1 2938 0
 22231 020e 5149     		ldr	r1, .L831+16
 22232 0210 D7F83421 		ldr	r2, [r7, #308]
 22233 0214 1346     		mov	r3, r2
 22234 0216 9B00     		lsls	r3, r3, #2
 22235 0218 1344     		add	r3, r3, r2
 22236 021a DB00     		lsls	r3, r3, #3
 22237 021c 0B44     		add	r3, r3, r1
 22238 021e 1433     		adds	r3, r3, #20
 22239 0220 1B68     		ldr	r3, [r3]	@ float
 22240 0222 1846     		mov	r0, r3
 22241 0224 FFF7FEFF 		bl	__aeabi_f2d
 22242 0228 8246     		mov	r10, r0
 22243 022a 8B46     		mov	fp, r1
 22244 022c 4949     		ldr	r1, .L831+16
 22245 022e D7F83421 		ldr	r2, [r7, #308]
 22246 0232 1346     		mov	r3, r2
 22247 0234 9B00     		lsls	r3, r3, #2
 22248 0236 1344     		add	r3, r3, r2
 22249 0238 DB00     		lsls	r3, r3, #3
 22250 023a 0B44     		add	r3, r3, r1
 22251 023c 1833     		adds	r3, r3, #24
 22252 023e 1B68     		ldr	r3, [r3]	@ float
 22253 0240 1846     		mov	r0, r3
 22254 0242 FFF7FEFF 		bl	__aeabi_f2d
 22255 0246 0446     		mov	r4, r0
 22256 0248 0D46     		mov	r5, r1
 22257 024a 4249     		ldr	r1, .L831+16
 22258 024c D7F83421 		ldr	r2, [r7, #308]
 22259 0250 1346     		mov	r3, r2
 22260 0252 9B00     		lsls	r3, r3, #2
 22261 0254 1344     		add	r3, r3, r2
 22262 0256 DB00     		lsls	r3, r3, #3
 22263 0258 0B44     		add	r3, r3, r1
 22264 025a 1C33     		adds	r3, r3, #28
 22265 025c 1B68     		ldr	r3, [r3]	@ float
 22266 025e 1846     		mov	r0, r3
 22267 0260 FFF7FEFF 		bl	__aeabi_f2d
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 488


 22268 0264 8046     		mov	r8, r0
 22269 0266 8946     		mov	r9, r1
 22270 0268 3A49     		ldr	r1, .L831+16
 22271 026a D7F83421 		ldr	r2, [r7, #308]
 22272 026e 1346     		mov	r3, r2
 22273 0270 9B00     		lsls	r3, r3, #2
 22274 0272 1344     		add	r3, r3, r2
 22275 0274 DB00     		lsls	r3, r3, #3
 22276 0276 0B44     		add	r3, r3, r1
 22277 0278 2033     		adds	r3, r3, #32
 22278 027a 1B68     		ldr	r3, [r3]	@ float
 22279 027c 1846     		mov	r0, r3
 22280 027e FFF7FEFF 		bl	__aeabi_f2d
 22281 0282 0246     		mov	r2, r0
 22282 0284 0B46     		mov	r3, r1
 22283 0286 07F10800 		add	r0, r7, #8
 22284 028a CDE90423 		strd	r2, [sp, #16]
 22285 028e CDE90289 		strd	r8, [sp, #8]
 22286 0292 CDE90045 		strd	r4, [sp]
 22287 0296 5246     		mov	r2, r10
 22288 0298 5B46     		mov	r3, fp
 22289 029a 3249     		ldr	r1, .L831+32
 22290 029c FFF7FEFF 		bl	sprintf
2939:..\src/command_processing.c ****             strcat(info_string, str);
 22291              		.loc 1 2939 0
 22292 02a0 07F10802 		add	r2, r7, #8
 22293 02a4 3B1D     		adds	r3, r7, #4
 22294 02a6 1146     		mov	r1, r2
 22295 02a8 1868     		ldr	r0, [r3]
 22296 02aa FFF7FEFF 		bl	strcat
 22297              	.L828:
2940:..\src/command_processing.c ****         }
2941:..\src/command_processing.c ****         
2942:..\src/command_processing.c ****         if ((c_mem.imu.IMU_conf[IMU_connected[i]][4])){
 22298              		.loc 1 2942 0
 22299 02ae 264A     		ldr	r2, .L831+4
 22300 02b0 D7F83431 		ldr	r3, [r7, #308]
 22301 02b4 1344     		add	r3, r3, r2
 22302 02b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 22303 02b8 1946     		mov	r1, r3
 22304 02ba 254A     		ldr	r2, .L831+12
 22305 02bc 0B46     		mov	r3, r1
 22306 02be 9B00     		lsls	r3, r3, #2
 22307 02c0 0B44     		add	r3, r3, r1
 22308 02c2 1344     		add	r3, r3, r2
 22309 02c4 03F20623 		addw	r3, r3, #518
 22310 02c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 22311 02ca 002B     		cmp	r3, #0
 22312 02cc 18D0     		beq	.L829
2943:..\src/command_processing.c ****             sprintf(str, "\tTemperature: %d\r\n", (int16) g_imu[i].temp_value);
 22313              		.loc 1 2943 0
 22314 02ce 2149     		ldr	r1, .L831+16
 22315 02d0 D7F83421 		ldr	r2, [r7, #308]
 22316 02d4 1346     		mov	r3, r2
 22317 02d6 9B00     		lsls	r3, r3, #2
 22318 02d8 1344     		add	r3, r3, r2
 22319 02da DB00     		lsls	r3, r3, #3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 489


 22320 02dc 0B44     		add	r3, r3, r1
 22321 02de 2433     		adds	r3, r3, #36
 22322 02e0 B3F90030 		ldrsh	r3, [r3]
 22323 02e4 1A46     		mov	r2, r3
 22324 02e6 07F10803 		add	r3, r7, #8
 22325 02ea 1F49     		ldr	r1, .L831+36
 22326 02ec 1846     		mov	r0, r3
 22327 02ee FFF7FEFF 		bl	sprintf
2944:..\src/command_processing.c ****             strcat(info_string, str);
 22328              		.loc 1 2944 0
 22329 02f2 07F10802 		add	r2, r7, #8
 22330 02f6 3B1D     		adds	r3, r7, #4
 22331 02f8 1146     		mov	r1, r2
 22332 02fa 1868     		ldr	r0, [r3]
 22333 02fc FFF7FEFF 		bl	strcat
 22334              	.L829:
2918:..\src/command_processing.c ****         sprintf(str, "Imu %d \r\n\tID: %d\r\n", i, (int) IMU_connected[i]);
 22335              		.loc 1 2918 0 discriminator 2
 22336 0300 D7F83431 		ldr	r3, [r7, #308]
 22337 0304 0133     		adds	r3, r3, #1
 22338 0306 C7F83431 		str	r3, [r7, #308]
 22339              	.L824:
2918:..\src/command_processing.c ****         sprintf(str, "Imu %d \r\n\tID: %d\r\n", i, (int) IMU_connected[i]);
 22340              		.loc 1 2918 0 is_stmt 0 discriminator 1
 22341 030a 184B     		ldr	r3, .L831+40
 22342 030c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 22343 030e 1A46     		mov	r2, r3
 22344 0310 D7F83431 		ldr	r3, [r7, #308]
 22345 0314 9A42     		cmp	r2, r3
 22346 0316 3FF791AE 		bgt	.L830
2945:..\src/command_processing.c ****         }
2946:..\src/command_processing.c ****         
2947:..\src/command_processing.c ****     }
2948:..\src/command_processing.c ****     strcat(info_string, "\r\n");
 22347              		.loc 1 2948 0 is_stmt 1
 22348 031a 3B1D     		adds	r3, r7, #4
 22349 031c 1868     		ldr	r0, [r3]
 22350 031e FFF7FEFF 		bl	strlen
 22351 0322 0346     		mov	r3, r0
 22352 0324 1A46     		mov	r2, r3
 22353 0326 3B1D     		adds	r3, r7, #4
 22354 0328 1B68     		ldr	r3, [r3]
 22355 032a 1344     		add	r3, r3, r2
 22356 032c 104A     		ldr	r2, .L831+44
 22357 032e 1188     		ldrh	r1, [r2]	@ unaligned
 22358 0330 9278     		ldrb	r2, [r2, #2]
 22359 0332 1980     		strh	r1, [r3]	@ unaligned
 22360 0334 9A70     		strb	r2, [r3, #2]
2949:..\src/command_processing.c **** }
 22361              		.loc 1 2949 0
 22362 0336 00BF     		nop
 22363 0338 07F59C77 		add	r7, r7, #312
 22364              		.cfi_def_cfa_offset 32
 22365 033c BD46     		mov	sp, r7
 22366              		.cfi_def_cfa_register 13
 22367              		@ sp needed
 22368 033e BDE8B08F 		pop	{r4, r5, r7, r8, r9, r10, fp, pc}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 490


 22369              	.L832:
 22370 0342 00BF     		.align	2
 22371              	.L831:
 22372 0344 C4220000 		.word	.LC318
 22373 0348 00000000 		.word	IMU_connected
 22374 034c D81B0000 		.word	.LC254
 22375 0350 00000000 		.word	c_mem
 22376 0354 00000000 		.word	g_imu
 22377 0358 D4220000 		.word	.LC319
 22378 035c E8220000 		.word	.LC320
 22379 0360 FC220000 		.word	.LC321
 22380 0364 10230000 		.word	.LC322
 22381 0368 30230000 		.word	.LC323
 22382 036c 00000000 		.word	N_IMU_Connected
 22383 0370 58110000 		.word	.LC152
 22384              		.cfi_endproc
 22385              	.LFE80:
 22386              		.size	IMU_reading_info, .-IMU_reading_info
 22387              		.section	.text.commWrite_old_id,"ax",%progbits
 22388              		.align	2
 22389              		.global	commWrite_old_id
 22390              		.thumb
 22391              		.thumb_func
 22392              		.type	commWrite_old_id, %function
 22393              	commWrite_old_id:
 22394              	.LFB81:
2950:..\src/command_processing.c **** 
2951:..\src/command_processing.c **** //==============================================================================
2952:..\src/command_processing.c **** //                                                     WRITE FUNCTIONS FOR RS485
2953:..\src/command_processing.c **** //==============================================================================
2954:..\src/command_processing.c **** 
2955:..\src/command_processing.c **** void commWrite_old_id(uint8 *packet_data, uint16 packet_lenght, uint8 old_id)
2956:..\src/command_processing.c **** {
 22395              		.loc 1 2956 0
 22396              		.cfi_startproc
 22397              		@ args = 0, pretend = 0, frame = 16
 22398              		@ frame_needed = 1, uses_anonymous_args = 0
 22399 0000 80B5     		push	{r7, lr}
 22400              		.cfi_def_cfa_offset 8
 22401              		.cfi_offset 7, -8
 22402              		.cfi_offset 14, -4
 22403 0002 84B0     		sub	sp, sp, #16
 22404              		.cfi_def_cfa_offset 24
 22405 0004 00AF     		add	r7, sp, #0
 22406              		.cfi_def_cfa_register 7
 22407 0006 7860     		str	r0, [r7, #4]
 22408 0008 0B46     		mov	r3, r1
 22409 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 22410 000c 1346     		mov	r3, r2
 22411 000e 7B70     		strb	r3, [r7, #1]
2957:..\src/command_processing.c ****     uint16 CYDATA index;    // iterator
2958:..\src/command_processing.c **** 
2959:..\src/command_processing.c ****     // frame - start
2960:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 22412              		.loc 1 2960 0
 22413 0010 3A20     		movs	r0, #58
 22414 0012 FFF7FEFF 		bl	UART_RS485_PutChar
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 491


2961:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 22415              		.loc 1 2961 0
 22416 0016 3A20     		movs	r0, #58
 22417 0018 FFF7FEFF 		bl	UART_RS485_PutChar
2962:..\src/command_processing.c ****     // frame - ID
2963:..\src/command_processing.c ****     //if(old_id)
2964:..\src/command_processing.c ****         UART_RS485_PutChar(old_id);
 22418              		.loc 1 2964 0
 22419 001c 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 22420 001e 1846     		mov	r0, r3
 22421 0020 FFF7FEFF 		bl	UART_RS485_PutChar
2965:..\src/command_processing.c ****     //else
2966:..\src/command_processing.c ****         //UART_RS485_PutChar(g_mem.id);
2967:..\src/command_processing.c ****         
2968:..\src/command_processing.c ****     // frame - length
2969:..\src/command_processing.c ****     UART_RS485_PutChar((uint8)packet_lenght);
 22422              		.loc 1 2969 0
 22423 0024 7B88     		ldrh	r3, [r7, #2]	@ movhi
 22424 0026 DBB2     		uxtb	r3, r3
 22425 0028 1846     		mov	r0, r3
 22426 002a FFF7FEFF 		bl	UART_RS485_PutChar
2970:..\src/command_processing.c ****     // frame - packet data
2971:..\src/command_processing.c ****     for(index = 0; index < packet_lenght; ++index) {
 22427              		.loc 1 2971 0
 22428 002e 0023     		movs	r3, #0
 22429 0030 FB81     		strh	r3, [r7, #14]	@ movhi
 22430 0032 09E0     		b	.L834
 22431              	.L835:
2972:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 22432              		.loc 1 2972 0 discriminator 3
 22433 0034 FB89     		ldrh	r3, [r7, #14]
 22434 0036 7A68     		ldr	r2, [r7, #4]
 22435 0038 1344     		add	r3, r3, r2
 22436 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 22437 003c 1846     		mov	r0, r3
 22438 003e FFF7FEFF 		bl	UART_RS485_PutChar
2971:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 22439              		.loc 1 2971 0 discriminator 3
 22440 0042 FB89     		ldrh	r3, [r7, #14]	@ movhi
 22441 0044 0133     		adds	r3, r3, #1
 22442 0046 FB81     		strh	r3, [r7, #14]	@ movhi
 22443              	.L834:
2971:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 22444              		.loc 1 2971 0 is_stmt 0 discriminator 1
 22445 0048 FA89     		ldrh	r2, [r7, #14]
 22446 004a 7B88     		ldrh	r3, [r7, #2]
 22447 004c 9A42     		cmp	r2, r3
 22448 004e F1D3     		bcc	.L835
2973:..\src/command_processing.c ****     }
2974:..\src/command_processing.c **** 
2975:..\src/command_processing.c ****     index = 0;
 22449              		.loc 1 2975 0 is_stmt 1
 22450 0050 0023     		movs	r3, #0
 22451 0052 FB81     		strh	r3, [r7, #14]	@ movhi
2976:..\src/command_processing.c **** 
2977:..\src/command_processing.c ****     while(!(UART_RS485_ReadTxStatus() & UART_RS485_TX_STS_COMPLETE) && index++ <= 1000){}
 22452              		.loc 1 2977 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 492


 22453 0054 00BF     		nop
 22454              	.L837:
 22455              		.loc 1 2977 0 is_stmt 0 discriminator 2
 22456 0056 FFF7FEFF 		bl	UART_RS485_ReadTxStatus
 22457 005a 0346     		mov	r3, r0
 22458 005c 03F00103 		and	r3, r3, #1
 22459 0060 002B     		cmp	r3, #0
 22460 0062 05D1     		bne	.L836
 22461              		.loc 1 2977 0 discriminator 1
 22462 0064 FB89     		ldrh	r3, [r7, #14]
 22463 0066 5A1C     		adds	r2, r3, #1
 22464 0068 FA81     		strh	r2, [r7, #14]	@ movhi
 22465 006a B3F57A7F 		cmp	r3, #1000
 22466 006e F2D9     		bls	.L837
 22467              	.L836:
2978:..\src/command_processing.c **** 
2979:..\src/command_processing.c ****     RS485_CTS_Write(1);
 22468              		.loc 1 2979 0 is_stmt 1
 22469 0070 0120     		movs	r0, #1
 22470 0072 FFF7FEFF 		bl	RS485_CTS_Write
2980:..\src/command_processing.c ****     RS485_CTS_Write(0);
 22471              		.loc 1 2980 0
 22472 0076 0020     		movs	r0, #0
 22473 0078 FFF7FEFF 		bl	RS485_CTS_Write
2981:..\src/command_processing.c **** }
 22474              		.loc 1 2981 0
 22475 007c 00BF     		nop
 22476 007e 1037     		adds	r7, r7, #16
 22477              		.cfi_def_cfa_offset 8
 22478 0080 BD46     		mov	sp, r7
 22479              		.cfi_def_cfa_register 13
 22480              		@ sp needed
 22481 0082 80BD     		pop	{r7, pc}
 22482              		.cfi_endproc
 22483              	.LFE81:
 22484              		.size	commWrite_old_id, .-commWrite_old_id
 22485              		.section	.text.commWrite,"ax",%progbits
 22486              		.align	2
 22487              		.global	commWrite
 22488              		.thumb
 22489              		.thumb_func
 22490              		.type	commWrite, %function
 22491              	commWrite:
 22492              	.LFB82:
2982:..\src/command_processing.c **** 
2983:..\src/command_processing.c **** void commWrite(uint8 *packet_data, uint16 packet_lenght)
2984:..\src/command_processing.c **** {
 22493              		.loc 1 2984 0
 22494              		.cfi_startproc
 22495              		@ args = 0, pretend = 0, frame = 16
 22496              		@ frame_needed = 1, uses_anonymous_args = 0
 22497 0000 80B5     		push	{r7, lr}
 22498              		.cfi_def_cfa_offset 8
 22499              		.cfi_offset 7, -8
 22500              		.cfi_offset 14, -4
 22501 0002 84B0     		sub	sp, sp, #16
 22502              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 493


 22503 0004 00AF     		add	r7, sp, #0
 22504              		.cfi_def_cfa_register 7
 22505 0006 7860     		str	r0, [r7, #4]
 22506 0008 0B46     		mov	r3, r1
 22507 000a 7B80     		strh	r3, [r7, #2]	@ movhi
2985:..\src/command_processing.c ****     uint16 CYDATA index;    // iterator
2986:..\src/command_processing.c **** 
2987:..\src/command_processing.c ****     // frame - start
2988:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 22508              		.loc 1 2988 0
 22509 000c 3A20     		movs	r0, #58
 22510 000e FFF7FEFF 		bl	UART_RS485_PutChar
2989:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 22511              		.loc 1 2989 0
 22512 0012 3A20     		movs	r0, #58
 22513 0014 FFF7FEFF 		bl	UART_RS485_PutChar
2990:..\src/command_processing.c ****     // frame - ID
2991:..\src/command_processing.c ****     UART_RS485_PutChar(g_mem.dev.id);
 22514              		.loc 1 2991 0
 22515 0018 1A4B     		ldr	r3, .L843
 22516 001a 93F8A030 		ldrb	r3, [r3, #160]	@ zero_extendqisi2
 22517 001e 1846     		mov	r0, r3
 22518 0020 FFF7FEFF 		bl	UART_RS485_PutChar
2992:..\src/command_processing.c ****     // frame - length
2993:..\src/command_processing.c ****     UART_RS485_PutChar((uint8)packet_lenght);
 22519              		.loc 1 2993 0
 22520 0024 7B88     		ldrh	r3, [r7, #2]	@ movhi
 22521 0026 DBB2     		uxtb	r3, r3
 22522 0028 1846     		mov	r0, r3
 22523 002a FFF7FEFF 		bl	UART_RS485_PutChar
2994:..\src/command_processing.c ****     // frame - packet data
2995:..\src/command_processing.c ****     for(index = 0; index < packet_lenght; ++index) {
 22524              		.loc 1 2995 0
 22525 002e 0023     		movs	r3, #0
 22526 0030 FB81     		strh	r3, [r7, #14]	@ movhi
 22527 0032 09E0     		b	.L839
 22528              	.L840:
2996:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 22529              		.loc 1 2996 0 discriminator 3
 22530 0034 FB89     		ldrh	r3, [r7, #14]
 22531 0036 7A68     		ldr	r2, [r7, #4]
 22532 0038 1344     		add	r3, r3, r2
 22533 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 22534 003c 1846     		mov	r0, r3
 22535 003e FFF7FEFF 		bl	UART_RS485_PutChar
2995:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 22536              		.loc 1 2995 0 discriminator 3
 22537 0042 FB89     		ldrh	r3, [r7, #14]	@ movhi
 22538 0044 0133     		adds	r3, r3, #1
 22539 0046 FB81     		strh	r3, [r7, #14]	@ movhi
 22540              	.L839:
2995:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[index]);
 22541              		.loc 1 2995 0 is_stmt 0 discriminator 1
 22542 0048 FA89     		ldrh	r2, [r7, #14]
 22543 004a 7B88     		ldrh	r3, [r7, #2]
 22544 004c 9A42     		cmp	r2, r3
 22545 004e F1D3     		bcc	.L840
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 494


2997:..\src/command_processing.c ****     }
2998:..\src/command_processing.c **** 
2999:..\src/command_processing.c ****     index = 0;
 22546              		.loc 1 2999 0 is_stmt 1
 22547 0050 0023     		movs	r3, #0
 22548 0052 FB81     		strh	r3, [r7, #14]	@ movhi
3000:..\src/command_processing.c **** 
3001:..\src/command_processing.c ****     while(!(UART_RS485_ReadTxStatus() & UART_RS485_TX_STS_COMPLETE) && index++ <= 1000){}
 22549              		.loc 1 3001 0
 22550 0054 00BF     		nop
 22551              	.L842:
 22552              		.loc 1 3001 0 is_stmt 0 discriminator 2
 22553 0056 FFF7FEFF 		bl	UART_RS485_ReadTxStatus
 22554 005a 0346     		mov	r3, r0
 22555 005c 03F00103 		and	r3, r3, #1
 22556 0060 002B     		cmp	r3, #0
 22557 0062 05D1     		bne	.L841
 22558              		.loc 1 3001 0 discriminator 1
 22559 0064 FB89     		ldrh	r3, [r7, #14]
 22560 0066 5A1C     		adds	r2, r3, #1
 22561 0068 FA81     		strh	r2, [r7, #14]	@ movhi
 22562 006a B3F57A7F 		cmp	r3, #1000
 22563 006e F2D9     		bls	.L842
 22564              	.L841:
3002:..\src/command_processing.c **** 
3003:..\src/command_processing.c ****     RS485_CTS_Write(1);
 22565              		.loc 1 3003 0 is_stmt 1
 22566 0070 0120     		movs	r0, #1
 22567 0072 FFF7FEFF 		bl	RS485_CTS_Write
3004:..\src/command_processing.c ****     RS485_CTS_Write(0);
 22568              		.loc 1 3004 0
 22569 0076 0020     		movs	r0, #0
 22570 0078 FFF7FEFF 		bl	RS485_CTS_Write
3005:..\src/command_processing.c **** }
 22571              		.loc 1 3005 0
 22572 007c 00BF     		nop
 22573 007e 1037     		adds	r7, r7, #16
 22574              		.cfi_def_cfa_offset 8
 22575 0080 BD46     		mov	sp, r7
 22576              		.cfi_def_cfa_register 13
 22577              		@ sp needed
 22578 0082 80BD     		pop	{r7, pc}
 22579              	.L844:
 22580              		.align	2
 22581              	.L843:
 22582 0084 00000000 		.word	g_mem
 22583              		.cfi_endproc
 22584              	.LFE82:
 22585              		.size	commWrite, .-commWrite
 22586              		.section	.text.commWriteID,"ax",%progbits
 22587              		.align	2
 22588              		.global	commWriteID
 22589              		.thumb
 22590              		.thumb_func
 22591              		.type	commWriteID, %function
 22592              	commWriteID:
 22593              	.LFB83:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 495


3006:..\src/command_processing.c **** 
3007:..\src/command_processing.c **** //==============================================================================
3008:..\src/command_processing.c **** //                                             WRITE FUNCTION FOR ANOTHER DEVICE
3009:..\src/command_processing.c **** //==============================================================================
3010:..\src/command_processing.c **** 
3011:..\src/command_processing.c **** void commWriteID(uint8 *packet_data, uint16 packet_lenght, uint8 id)
3012:..\src/command_processing.c **** {
 22594              		.loc 1 3012 0
 22595              		.cfi_startproc
 22596              		@ args = 0, pretend = 0, frame = 8
 22597              		@ frame_needed = 1, uses_anonymous_args = 0
 22598 0000 80B5     		push	{r7, lr}
 22599              		.cfi_def_cfa_offset 8
 22600              		.cfi_offset 7, -8
 22601              		.cfi_offset 14, -4
 22602 0002 82B0     		sub	sp, sp, #8
 22603              		.cfi_def_cfa_offset 16
 22604 0004 00AF     		add	r7, sp, #0
 22605              		.cfi_def_cfa_register 7
 22606 0006 7860     		str	r0, [r7, #4]
 22607 0008 0B46     		mov	r3, r1
 22608 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 22609 000c 1346     		mov	r3, r2
 22610 000e 7B70     		strb	r3, [r7, #1]
3013:..\src/command_processing.c ****     static uint16 CYDATA i;    // iterator
3014:..\src/command_processing.c **** 
3015:..\src/command_processing.c ****     // frame - start
3016:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 22611              		.loc 1 3016 0
 22612 0010 3A20     		movs	r0, #58
 22613 0012 FFF7FEFF 		bl	UART_RS485_PutChar
3017:..\src/command_processing.c ****     UART_RS485_PutChar(':');
 22614              		.loc 1 3017 0
 22615 0016 3A20     		movs	r0, #58
 22616 0018 FFF7FEFF 		bl	UART_RS485_PutChar
3018:..\src/command_processing.c ****     // frame - ID
3019:..\src/command_processing.c ****     UART_RS485_PutChar(id);
 22617              		.loc 1 3019 0
 22618 001c 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 22619 001e 1846     		mov	r0, r3
 22620 0020 FFF7FEFF 		bl	UART_RS485_PutChar
3020:..\src/command_processing.c ****     // frame - length
3021:..\src/command_processing.c ****     UART_RS485_PutChar((uint8)packet_lenght);
 22621              		.loc 1 3021 0
 22622 0024 7B88     		ldrh	r3, [r7, #2]	@ movhi
 22623 0026 DBB2     		uxtb	r3, r3
 22624 0028 1846     		mov	r0, r3
 22625 002a FFF7FEFF 		bl	UART_RS485_PutChar
3022:..\src/command_processing.c ****     // frame - packet data
3023:..\src/command_processing.c ****     for(i = 0; i < packet_lenght; ++i) {
 22626              		.loc 1 3023 0
 22627 002e 1B4B     		ldr	r3, .L850
 22628 0030 0022     		movs	r2, #0
 22629 0032 1A80     		strh	r2, [r3]	@ movhi
 22630 0034 0EE0     		b	.L846
 22631              	.L847:
3024:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[i]);
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 496


 22632              		.loc 1 3024 0 discriminator 3
 22633 0036 194B     		ldr	r3, .L850
 22634 0038 1B88     		ldrh	r3, [r3]
 22635 003a 1A46     		mov	r2, r3
 22636 003c 7B68     		ldr	r3, [r7, #4]
 22637 003e 1344     		add	r3, r3, r2
 22638 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 22639 0042 1846     		mov	r0, r3
 22640 0044 FFF7FEFF 		bl	UART_RS485_PutChar
3023:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[i]);
 22641              		.loc 1 3023 0 discriminator 3
 22642 0048 144B     		ldr	r3, .L850
 22643 004a 1B88     		ldrh	r3, [r3]
 22644 004c 0133     		adds	r3, r3, #1
 22645 004e 9AB2     		uxth	r2, r3
 22646 0050 124B     		ldr	r3, .L850
 22647 0052 1A80     		strh	r2, [r3]	@ movhi
 22648              	.L846:
3023:..\src/command_processing.c ****         UART_RS485_PutChar(packet_data[i]);
 22649              		.loc 1 3023 0 is_stmt 0 discriminator 1
 22650 0054 114B     		ldr	r3, .L850
 22651 0056 1B88     		ldrh	r3, [r3]
 22652 0058 7A88     		ldrh	r2, [r7, #2]
 22653 005a 9A42     		cmp	r2, r3
 22654 005c EBD8     		bhi	.L847
3025:..\src/command_processing.c ****     }
3026:..\src/command_processing.c **** 
3027:..\src/command_processing.c ****     i = 0;
 22655              		.loc 1 3027 0 is_stmt 1
 22656 005e 0F4B     		ldr	r3, .L850
 22657 0060 0022     		movs	r2, #0
 22658 0062 1A80     		strh	r2, [r3]	@ movhi
3028:..\src/command_processing.c **** 
3029:..\src/command_processing.c ****     while(!(UART_RS485_ReadTxStatus() & UART_RS485_TX_STS_COMPLETE) && i++ <= 1000){}
 22659              		.loc 1 3029 0
 22660 0064 00BF     		nop
 22661              	.L849:
 22662              		.loc 1 3029 0 is_stmt 0 discriminator 2
 22663 0066 FFF7FEFF 		bl	UART_RS485_ReadTxStatus
 22664 006a 0346     		mov	r3, r0
 22665 006c 03F00103 		and	r3, r3, #1
 22666 0070 002B     		cmp	r3, #0
 22667 0072 08D1     		bne	.L848
 22668              		.loc 1 3029 0 discriminator 1
 22669 0074 094B     		ldr	r3, .L850
 22670 0076 1B88     		ldrh	r3, [r3]
 22671 0078 5A1C     		adds	r2, r3, #1
 22672 007a 91B2     		uxth	r1, r2
 22673 007c 074A     		ldr	r2, .L850
 22674 007e 1180     		strh	r1, [r2]	@ movhi
 22675 0080 B3F57A7F 		cmp	r3, #1000
 22676 0084 EFD9     		bls	.L849
 22677              	.L848:
3030:..\src/command_processing.c ****     
3031:..\src/command_processing.c ****     RS485_CTS_Write(1);
 22678              		.loc 1 3031 0 is_stmt 1
 22679 0086 0120     		movs	r0, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 497


 22680 0088 FFF7FEFF 		bl	RS485_CTS_Write
3032:..\src/command_processing.c ****     RS485_CTS_Write(0);
 22681              		.loc 1 3032 0
 22682 008c 0020     		movs	r0, #0
 22683 008e FFF7FEFF 		bl	RS485_CTS_Write
3033:..\src/command_processing.c **** }
 22684              		.loc 1 3033 0
 22685 0092 00BF     		nop
 22686 0094 0837     		adds	r7, r7, #8
 22687              		.cfi_def_cfa_offset 8
 22688 0096 BD46     		mov	sp, r7
 22689              		.cfi_def_cfa_register 13
 22690              		@ sp needed
 22691 0098 80BD     		pop	{r7, pc}
 22692              	.L851:
 22693 009a 00BF     		.align	2
 22694              	.L850:
 22695 009c 04000000 		.word	i.11273
 22696              		.cfi_endproc
 22697              	.LFE83:
 22698              		.size	commWriteID, .-commWriteID
 22699              		.section	.text.LCRChecksum,"ax",%progbits
 22700              		.align	2
 22701              		.global	LCRChecksum
 22702              		.thumb
 22703              		.thumb_func
 22704              		.type	LCRChecksum, %function
 22705              	LCRChecksum:
 22706              	.LFB84:
3034:..\src/command_processing.c **** 
3035:..\src/command_processing.c **** //==============================================================================
3036:..\src/command_processing.c **** //                                                             CHECKSUM FUNCTION
3037:..\src/command_processing.c **** //==============================================================================
3038:..\src/command_processing.c **** 
3039:..\src/command_processing.c **** // Performs a XOR byte by byte on the entire vector
3040:..\src/command_processing.c **** 
3041:..\src/command_processing.c **** uint8 LCRChecksum(uint8 *data_array, uint8 data_length) {
 22707              		.loc 1 3041 0
 22708              		.cfi_startproc
 22709              		@ args = 0, pretend = 0, frame = 16
 22710              		@ frame_needed = 1, uses_anonymous_args = 0
 22711              		@ link register save eliminated.
 22712 0000 80B4     		push	{r7}
 22713              		.cfi_def_cfa_offset 4
 22714              		.cfi_offset 7, -4
 22715 0002 85B0     		sub	sp, sp, #20
 22716              		.cfi_def_cfa_offset 24
 22717 0004 00AF     		add	r7, sp, #0
 22718              		.cfi_def_cfa_register 7
 22719 0006 7860     		str	r0, [r7, #4]
 22720 0008 0B46     		mov	r3, r1
 22721 000a FB70     		strb	r3, [r7, #3]
3042:..\src/command_processing.c ****     
3043:..\src/command_processing.c ****     uint8 CYDATA i;
3044:..\src/command_processing.c ****     uint8 CYDATA checksum = 0x00;
 22722              		.loc 1 3044 0
 22723 000c 0023     		movs	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 498


 22724 000e BB73     		strb	r3, [r7, #14]
3045:..\src/command_processing.c ****     
3046:..\src/command_processing.c ****     for(i = 0; i < data_length; ++i)
 22725              		.loc 1 3046 0
 22726 0010 0023     		movs	r3, #0
 22727 0012 FB73     		strb	r3, [r7, #15]
 22728 0014 09E0     		b	.L853
 22729              	.L854:
3047:..\src/command_processing.c ****        checksum ^= data_array[i];
 22730              		.loc 1 3047 0 discriminator 3
 22731 0016 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 22732 0018 7A68     		ldr	r2, [r7, #4]
 22733 001a 1344     		add	r3, r3, r2
 22734 001c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 22735 001e BB7B     		ldrb	r3, [r7, #14]
 22736 0020 5340     		eors	r3, r3, r2
 22737 0022 BB73     		strb	r3, [r7, #14]
3046:..\src/command_processing.c ****        checksum ^= data_array[i];
 22738              		.loc 1 3046 0 discriminator 3
 22739 0024 FB7B     		ldrb	r3, [r7, #15]
 22740 0026 0133     		adds	r3, r3, #1
 22741 0028 FB73     		strb	r3, [r7, #15]
 22742              	.L853:
3046:..\src/command_processing.c ****        checksum ^= data_array[i];
 22743              		.loc 1 3046 0 is_stmt 0 discriminator 1
 22744 002a FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 22745 002c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 22746 002e 9A42     		cmp	r2, r3
 22747 0030 F1D3     		bcc	.L854
3048:..\src/command_processing.c ****   
3049:..\src/command_processing.c ****     return checksum;
 22748              		.loc 1 3049 0 is_stmt 1
 22749 0032 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
3050:..\src/command_processing.c **** }
 22750              		.loc 1 3050 0
 22751 0034 1846     		mov	r0, r3
 22752 0036 1437     		adds	r7, r7, #20
 22753              		.cfi_def_cfa_offset 4
 22754 0038 BD46     		mov	sp, r7
 22755              		.cfi_def_cfa_register 13
 22756              		@ sp needed
 22757 003a 80BC     		pop	{r7}
 22758              		.cfi_restore 7
 22759              		.cfi_def_cfa_offset 0
 22760 003c 7047     		bx	lr
 22761              		.cfi_endproc
 22762              	.LFE84:
 22763              		.size	LCRChecksum, .-LCRChecksum
 22764 003e 00BF     		.section	.text.sendAcknowledgment,"ax",%progbits
 22765              		.align	2
 22766              		.global	sendAcknowledgment
 22767              		.thumb
 22768              		.thumb_func
 22769              		.type	sendAcknowledgment, %function
 22770              	sendAcknowledgment:
 22771              	.LFB85:
3051:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 499


3052:..\src/command_processing.c **** 
3053:..\src/command_processing.c **** //==============================================================================
3054:..\src/command_processing.c **** //                                                       ACKNOWLEDGMENT FUNCTION
3055:..\src/command_processing.c **** //==============================================================================
3056:..\src/command_processing.c **** 
3057:..\src/command_processing.c **** void sendAcknowledgment(uint8 value) {
 22772              		.loc 1 3057 0
 22773              		.cfi_startproc
 22774              		@ args = 0, pretend = 0, frame = 16
 22775              		@ frame_needed = 1, uses_anonymous_args = 0
 22776 0000 80B5     		push	{r7, lr}
 22777              		.cfi_def_cfa_offset 8
 22778              		.cfi_offset 7, -8
 22779              		.cfi_offset 14, -4
 22780 0002 84B0     		sub	sp, sp, #16
 22781              		.cfi_def_cfa_offset 24
 22782 0004 00AF     		add	r7, sp, #0
 22783              		.cfi_def_cfa_register 7
 22784 0006 0346     		mov	r3, r0
 22785 0008 FB71     		strb	r3, [r7, #7]
3058:..\src/command_processing.c ****     int packet_lenght = 2;
 22786              		.loc 1 3058 0
 22787 000a 0223     		movs	r3, #2
 22788 000c FB60     		str	r3, [r7, #12]
3059:..\src/command_processing.c ****     uint8 packet_data[2];
3060:..\src/command_processing.c **** 
3061:..\src/command_processing.c ****     packet_data[0] = value;
 22789              		.loc 1 3061 0
 22790 000e FB79     		ldrb	r3, [r7, #7]
 22791 0010 3B72     		strb	r3, [r7, #8]
3062:..\src/command_processing.c ****     packet_data[1] = value;
 22792              		.loc 1 3062 0
 22793 0012 FB79     		ldrb	r3, [r7, #7]
 22794 0014 7B72     		strb	r3, [r7, #9]
3063:..\src/command_processing.c **** 
3064:..\src/command_processing.c ****     commWrite(packet_data, packet_lenght);
 22795              		.loc 1 3064 0
 22796 0016 FB68     		ldr	r3, [r7, #12]
 22797 0018 9AB2     		uxth	r2, r3
 22798 001a 07F10803 		add	r3, r7, #8
 22799 001e 1146     		mov	r1, r2
 22800 0020 1846     		mov	r0, r3
 22801 0022 FFF7FEFF 		bl	commWrite
3065:..\src/command_processing.c **** }
 22802              		.loc 1 3065 0
 22803 0026 00BF     		nop
 22804 0028 1037     		adds	r7, r7, #16
 22805              		.cfi_def_cfa_offset 8
 22806 002a BD46     		mov	sp, r7
 22807              		.cfi_def_cfa_register 13
 22808              		@ sp needed
 22809 002c 80BD     		pop	{r7, pc}
 22810              		.cfi_endproc
 22811              	.LFE85:
 22812              		.size	sendAcknowledgment, .-sendAcknowledgment
 22813 002e 00BF     		.section	.text.memStore,"ax",%progbits
 22814              		.align	2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 500


 22815              		.global	memStore
 22816              		.thumb
 22817              		.thumb_func
 22818              		.type	memStore, %function
 22819              	memStore:
 22820              	.LFB86:
3066:..\src/command_processing.c **** 
3067:..\src/command_processing.c **** //==============================================================================
3068:..\src/command_processing.c **** //                                                                  STORE MEMORY
3069:..\src/command_processing.c **** //==============================================================================
3070:..\src/command_processing.c **** 
3071:..\src/command_processing.c **** 
3072:..\src/command_processing.c **** uint8 memStore(int displacement)
3073:..\src/command_processing.c **** {
 22821              		.loc 1 3073 0
 22822              		.cfi_startproc
 22823              		@ args = 0, pretend = 0, frame = 24
 22824              		@ frame_needed = 1, uses_anonymous_args = 0
 22825 0000 80B5     		push	{r7, lr}
 22826              		.cfi_def_cfa_offset 8
 22827              		.cfi_offset 7, -8
 22828              		.cfi_offset 14, -4
 22829 0002 86B0     		sub	sp, sp, #24
 22830              		.cfi_def_cfa_offset 32
 22831 0004 00AF     		add	r7, sp, #0
 22832              		.cfi_def_cfa_register 7
 22833 0006 7860     		str	r0, [r7, #4]
3074:..\src/command_processing.c ****     int i;  // iterator
3075:..\src/command_processing.c ****     uint8 writeStatus;
3076:..\src/command_processing.c ****     int pages;
3077:..\src/command_processing.c ****     uint8 ret_val = 1;
 22834              		.loc 1 3077 0
 22835 0008 0123     		movs	r3, #1
 22836 000a FB74     		strb	r3, [r7, #19]
3078:..\src/command_processing.c **** 
3079:..\src/command_processing.c ****     // Disable Interrupt
3080:..\src/command_processing.c ****     ISR_RS485_RX_Disable();
 22837              		.loc 1 3080 0
 22838 000c FFF7FEFF 		bl	ISR_RS485_RX_Disable
3081:..\src/command_processing.c **** 
3082:..\src/command_processing.c ****     // Stop motor
3083:..\src/command_processing.c ****     PWM_MOTORS_WriteCompare1(0);
 22839              		.loc 1 3083 0
 22840 0010 0020     		movs	r0, #0
 22841 0012 FFF7FEFF 		bl	PWM_MOTORS_WriteCompare1
3084:..\src/command_processing.c **** 
3085:..\src/command_processing.c ****     // Update temperature information for better writing performance
3086:..\src/command_processing.c ****     EEPROM_UpdateTemperature();
 22842              		.loc 1 3086 0
 22843 0016 FFF7FEFF 		bl	EEPROM_UpdateTemperature
3087:..\src/command_processing.c **** 
3088:..\src/command_processing.c ****     memcpy( &c_mem, &g_mem, sizeof(g_mem) );
 22844              		.loc 1 3088 0
 22845 001a 1D4A     		ldr	r2, .L863
 22846 001c 1D4B     		ldr	r3, .L863+4
 22847 001e 1046     		mov	r0, r2
 22848 0020 1946     		mov	r1, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 501


 22849 0022 4FF43D73 		mov	r3, #756
 22850 0026 1A46     		mov	r2, r3
 22851 0028 FFF7FEFF 		bl	memcpy
3089:..\src/command_processing.c **** 
3090:..\src/command_processing.c ****     pages = sizeof(g_mem) / 16 + (sizeof(g_mem) % 16 > 0);
 22852              		.loc 1 3090 0
 22853 002c 3023     		movs	r3, #48
 22854 002e FB60     		str	r3, [r7, #12]
3091:..\src/command_processing.c **** 
3092:..\src/command_processing.c ****     for(i = 0; i < pages; ++i) {
 22855              		.loc 1 3092 0
 22856 0030 0023     		movs	r3, #0
 22857 0032 7B61     		str	r3, [r7, #20]
 22858 0034 18E0     		b	.L858
 22859              	.L861:
3093:..\src/command_processing.c ****         writeStatus = EEPROM_Write((uint8*)&g_mem.flag + 16 * i, i + displacement);
 22860              		.loc 1 3093 0
 22861 0036 7B69     		ldr	r3, [r7, #20]
 22862 0038 1B01     		lsls	r3, r3, #4
 22863 003a 1A46     		mov	r2, r3
 22864 003c 154B     		ldr	r3, .L863+4
 22865 003e D018     		adds	r0, r2, r3
 22866 0040 7B69     		ldr	r3, [r7, #20]
 22867 0042 DAB2     		uxtb	r2, r3
 22868 0044 7B68     		ldr	r3, [r7, #4]
 22869 0046 DBB2     		uxtb	r3, r3
 22870 0048 1344     		add	r3, r3, r2
 22871 004a DBB2     		uxtb	r3, r3
 22872 004c 1946     		mov	r1, r3
 22873 004e FFF7FEFF 		bl	EEPROM_Write
 22874 0052 0346     		mov	r3, r0
 22875 0054 FB72     		strb	r3, [r7, #11]
3094:..\src/command_processing.c ****         if(writeStatus != CYRET_SUCCESS) {
 22876              		.loc 1 3094 0
 22877 0056 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 22878 0058 002B     		cmp	r3, #0
 22879 005a 02D0     		beq	.L859
3095:..\src/command_processing.c ****             ret_val = 0;
 22880              		.loc 1 3095 0
 22881 005c 0023     		movs	r3, #0
 22882 005e FB74     		strb	r3, [r7, #19]
3096:..\src/command_processing.c ****             break;
 22883              		.loc 1 3096 0
 22884 0060 06E0     		b	.L860
 22885              	.L859:
3092:..\src/command_processing.c ****         writeStatus = EEPROM_Write((uint8*)&g_mem.flag + 16 * i, i + displacement);
 22886              		.loc 1 3092 0 discriminator 2
 22887 0062 7B69     		ldr	r3, [r7, #20]
 22888 0064 0133     		adds	r3, r3, #1
 22889 0066 7B61     		str	r3, [r7, #20]
 22890              	.L858:
3092:..\src/command_processing.c ****         writeStatus = EEPROM_Write((uint8*)&g_mem.flag + 16 * i, i + displacement);
 22891              		.loc 1 3092 0 is_stmt 0 discriminator 1
 22892 0068 7A69     		ldr	r2, [r7, #20]
 22893 006a FB68     		ldr	r3, [r7, #12]
 22894 006c 9A42     		cmp	r2, r3
 22895 006e E2DB     		blt	.L861
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 502


 22896              	.L860:
3097:..\src/command_processing.c ****         }
3098:..\src/command_processing.c ****     }
3099:..\src/command_processing.c **** 
3100:..\src/command_processing.c ****     memcpy( &g_mem, &c_mem, sizeof(g_mem) );
 22897              		.loc 1 3100 0 is_stmt 1
 22898 0070 084A     		ldr	r2, .L863+4
 22899 0072 074B     		ldr	r3, .L863
 22900 0074 1046     		mov	r0, r2
 22901 0076 1946     		mov	r1, r3
 22902 0078 4FF43D73 		mov	r3, #756
 22903 007c 1A46     		mov	r2, r3
 22904 007e FFF7FEFF 		bl	memcpy
3101:..\src/command_processing.c **** 
3102:..\src/command_processing.c ****     // Re-Enable Interrupt
3103:..\src/command_processing.c ****     ISR_RS485_RX_Enable();
 22905              		.loc 1 3103 0
 22906 0082 FFF7FEFF 		bl	ISR_RS485_RX_Enable
3104:..\src/command_processing.c **** 
3105:..\src/command_processing.c ****     return ret_val;
 22907              		.loc 1 3105 0
 22908 0086 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
3106:..\src/command_processing.c **** }
 22909              		.loc 1 3106 0
 22910 0088 1846     		mov	r0, r3
 22911 008a 1837     		adds	r7, r7, #24
 22912              		.cfi_def_cfa_offset 8
 22913 008c BD46     		mov	sp, r7
 22914              		.cfi_def_cfa_register 13
 22915              		@ sp needed
 22916 008e 80BD     		pop	{r7, pc}
 22917              	.L864:
 22918              		.align	2
 22919              	.L863:
 22920 0090 00000000 		.word	c_mem
 22921 0094 00000000 		.word	g_mem
 22922              		.cfi_endproc
 22923              	.LFE86:
 22924              		.size	memStore, .-memStore
 22925              		.section	.text.memRecall,"ax",%progbits
 22926              		.align	2
 22927              		.global	memRecall
 22928              		.thumb
 22929              		.thumb_func
 22930              		.type	memRecall, %function
 22931              	memRecall:
 22932              	.LFB87:
3107:..\src/command_processing.c **** 
3108:..\src/command_processing.c **** 
3109:..\src/command_processing.c **** //==============================================================================
3110:..\src/command_processing.c **** //                                                                 RECALL MEMORY
3111:..\src/command_processing.c **** //==============================================================================
3112:..\src/command_processing.c **** 
3113:..\src/command_processing.c **** 
3114:..\src/command_processing.c **** void memRecall(void)
3115:..\src/command_processing.c **** {
 22933              		.loc 1 3115 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 503


 22934              		.cfi_startproc
 22935              		@ args = 0, pretend = 0, frame = 8
 22936              		@ frame_needed = 1, uses_anonymous_args = 0
 22937 0000 80B5     		push	{r7, lr}
 22938              		.cfi_def_cfa_offset 8
 22939              		.cfi_offset 7, -8
 22940              		.cfi_offset 14, -4
 22941 0002 82B0     		sub	sp, sp, #8
 22942              		.cfi_def_cfa_offset 16
 22943 0004 00AF     		add	r7, sp, #0
 22944              		.cfi_def_cfa_register 7
3116:..\src/command_processing.c ****     uint16 i;
3117:..\src/command_processing.c **** 
3118:..\src/command_processing.c ****     for (i = 0; i < sizeof(g_mem); i++) {
 22945              		.loc 1 3118 0
 22946 0006 0023     		movs	r3, #0
 22947 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 22948 000a 0CE0     		b	.L866
 22949              	.L867:
3119:..\src/command_processing.c ****         ((reg8 *) &g_mem.flag)[i] = EEPROM_ADDR[i];
 22950              		.loc 1 3119 0 discriminator 3
 22951 000c FB88     		ldrh	r3, [r7, #6]
 22952 000e 184A     		ldr	r2, .L871
 22953 0010 1344     		add	r3, r3, r2
 22954 0012 184A     		ldr	r2, .L871+4
 22955 0014 1168     		ldr	r1, [r2]
 22956 0016 FA88     		ldrh	r2, [r7, #6]
 22957 0018 0A44     		add	r2, r2, r1
 22958 001a 1278     		ldrb	r2, [r2]
 22959 001c D2B2     		uxtb	r2, r2
 22960 001e 1A70     		strb	r2, [r3]
3118:..\src/command_processing.c ****         ((reg8 *) &g_mem.flag)[i] = EEPROM_ADDR[i];
 22961              		.loc 1 3118 0 discriminator 3
 22962 0020 FB88     		ldrh	r3, [r7, #6]
 22963 0022 0133     		adds	r3, r3, #1
 22964 0024 FB80     		strh	r3, [r7, #6]	@ movhi
 22965              	.L866:
3118:..\src/command_processing.c ****         ((reg8 *) &g_mem.flag)[i] = EEPROM_ADDR[i];
 22966              		.loc 1 3118 0 is_stmt 0 discriminator 1
 22967 0026 FB88     		ldrh	r3, [r7, #6]
 22968 0028 B3F53D7F 		cmp	r3, #756
 22969 002c EED3     		bcc	.L867
3120:..\src/command_processing.c ****     }
3121:..\src/command_processing.c ****     
3122:..\src/command_processing.c ****     // Recall saved user_emg structure
3123:..\src/command_processing.c ****     memcpy( &(g_mem.emg), &(g_mem.user[g_mem.dev.user_id].user_emg), sizeof(g_mem.emg) );
 22970              		.loc 1 3123 0 is_stmt 1
 22971 002e 104B     		ldr	r3, .L871
 22972 0030 93F8AB30 		ldrb	r3, [r3, #171]	@ zero_extendqisi2
 22973 0034 5B01     		lsls	r3, r3, #5
 22974 0036 03F51273 		add	r3, r3, #584
 22975 003a 0D4A     		ldr	r2, .L871
 22976 003c 1344     		add	r3, r3, r2
 22977 003e 1022     		movs	r2, #16
 22978 0040 1946     		mov	r1, r3
 22979 0042 0D48     		ldr	r0, .L871+8
 22980 0044 FFF7FEFF 		bl	memcpy
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 504


3124:..\src/command_processing.c **** 
3125:..\src/command_processing.c ****     //check for initialization
3126:..\src/command_processing.c ****     if (g_mem.flag == FALSE) {
 22981              		.loc 1 3126 0
 22982 0048 094B     		ldr	r3, .L871
 22983 004a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 22984 004c 002B     		cmp	r3, #0
 22985 004e 02D1     		bne	.L868
3127:..\src/command_processing.c ****         memRestore();
 22986              		.loc 1 3127 0
 22987 0050 FFF7FEFF 		bl	memRestore
3128:..\src/command_processing.c ****     } else {
3129:..\src/command_processing.c ****         memcpy( &c_mem, &g_mem, sizeof(g_mem) );
3130:..\src/command_processing.c ****     }        
3131:..\src/command_processing.c **** }
 22988              		.loc 1 3131 0
 22989 0054 08E0     		b	.L870
 22990              	.L868:
3129:..\src/command_processing.c ****     }        
 22991              		.loc 1 3129 0
 22992 0056 094A     		ldr	r2, .L871+12
 22993 0058 054B     		ldr	r3, .L871
 22994 005a 1046     		mov	r0, r2
 22995 005c 1946     		mov	r1, r3
 22996 005e 4FF43D73 		mov	r3, #756
 22997 0062 1A46     		mov	r2, r3
 22998 0064 FFF7FEFF 		bl	memcpy
 22999              	.L870:
 23000              		.loc 1 3131 0
 23001 0068 00BF     		nop
 23002 006a 0837     		adds	r7, r7, #8
 23003              		.cfi_def_cfa_offset 8
 23004 006c BD46     		mov	sp, r7
 23005              		.cfi_def_cfa_register 13
 23006              		@ sp needed
 23007 006e 80BD     		pop	{r7, pc}
 23008              	.L872:
 23009              		.align	2
 23010              	.L871:
 23011 0070 00000000 		.word	g_mem
 23012 0074 00000000 		.word	EEPROM_ADDR
 23013 0078 F0010000 		.word	g_mem+496
 23014 007c 00000000 		.word	c_mem
 23015              		.cfi_endproc
 23016              	.LFE87:
 23017              		.size	memRecall, .-memRecall
 23018              		.section	.text.memRestore,"ax",%progbits
 23019              		.align	2
 23020              		.global	memRestore
 23021              		.thumb
 23022              		.thumb_func
 23023              		.type	memRestore, %function
 23024              	memRestore:
 23025              	.LFB88:
3132:..\src/command_processing.c **** 
3133:..\src/command_processing.c **** 
3134:..\src/command_processing.c **** //==============================================================================
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 505


3135:..\src/command_processing.c **** //                                                                RESTORE MEMORY
3136:..\src/command_processing.c **** //==============================================================================
3137:..\src/command_processing.c **** 
3138:..\src/command_processing.c **** 
3139:..\src/command_processing.c **** uint8 memRestore(void) {
 23026              		.loc 1 3139 0
 23027              		.cfi_startproc
 23028              		@ args = 0, pretend = 0, frame = 8
 23029              		@ frame_needed = 1, uses_anonymous_args = 0
 23030 0000 80B5     		push	{r7, lr}
 23031              		.cfi_def_cfa_offset 8
 23032              		.cfi_offset 7, -8
 23033              		.cfi_offset 14, -4
 23034 0002 82B0     		sub	sp, sp, #8
 23035              		.cfi_def_cfa_offset 16
 23036 0004 00AF     		add	r7, sp, #0
 23037              		.cfi_def_cfa_register 7
3140:..\src/command_processing.c ****     uint16 i;
3141:..\src/command_processing.c **** 
3142:..\src/command_processing.c ****     for (i = 0; i < sizeof(g_mem); i++) {
 23038              		.loc 1 3142 0
 23039 0006 0023     		movs	r3, #0
 23040 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 23041 000a 0EE0     		b	.L874
 23042              	.L875:
3143:..\src/command_processing.c ****         ((reg8 *) (uint8*)&g_mem.flag)[i] = EEPROM_ADDR[i + (DEFAULT_EEPROM_DISPLACEMENT * 16)];
 23043              		.loc 1 3143 0 discriminator 3
 23044 000c FB88     		ldrh	r3, [r7, #6]
 23045 000e 114A     		ldr	r2, .L878
 23046 0010 1344     		add	r3, r3, r2
 23047 0012 114A     		ldr	r2, .L878+4
 23048 0014 1168     		ldr	r1, [r2]
 23049 0016 FA88     		ldrh	r2, [r7, #6]
 23050 0018 02F54872 		add	r2, r2, #800
 23051 001c 0A44     		add	r2, r2, r1
 23052 001e 1278     		ldrb	r2, [r2]
 23053 0020 D2B2     		uxtb	r2, r2
 23054 0022 1A70     		strb	r2, [r3]
3142:..\src/command_processing.c ****         ((reg8 *) (uint8*)&g_mem.flag)[i] = EEPROM_ADDR[i + (DEFAULT_EEPROM_DISPLACEMENT * 16)];
 23055              		.loc 1 3142 0 discriminator 3
 23056 0024 FB88     		ldrh	r3, [r7, #6]
 23057 0026 0133     		adds	r3, r3, #1
 23058 0028 FB80     		strh	r3, [r7, #6]	@ movhi
 23059              	.L874:
3142:..\src/command_processing.c ****         ((reg8 *) (uint8*)&g_mem.flag)[i] = EEPROM_ADDR[i + (DEFAULT_EEPROM_DISPLACEMENT * 16)];
 23060              		.loc 1 3142 0 is_stmt 0 discriminator 1
 23061 002a FB88     		ldrh	r3, [r7, #6]
 23062 002c B3F53D7F 		cmp	r3, #756
 23063 0030 ECD3     		bcc	.L875
3144:..\src/command_processing.c ****     }
3145:..\src/command_processing.c **** 
3146:..\src/command_processing.c ****     //check for initialization
3147:..\src/command_processing.c ****     if (g_mem.flag == FALSE) {
 23064              		.loc 1 3147 0 is_stmt 1
 23065 0032 084B     		ldr	r3, .L878
 23066 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 23067 0036 002B     		cmp	r3, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 506


 23068 0038 03D1     		bne	.L876
3148:..\src/command_processing.c ****         return memInit();
 23069              		.loc 1 3148 0
 23070 003a FFF7FEFF 		bl	memInit
 23071 003e 0346     		mov	r3, r0
 23072 0040 03E0     		b	.L877
 23073              	.L876:
3149:..\src/command_processing.c ****     } else {
3150:..\src/command_processing.c ****         return memStore(0);
 23074              		.loc 1 3150 0
 23075 0042 0020     		movs	r0, #0
 23076 0044 FFF7FEFF 		bl	memStore
 23077 0048 0346     		mov	r3, r0
 23078              	.L877:
3151:..\src/command_processing.c ****     }  
3152:..\src/command_processing.c **** }
 23079              		.loc 1 3152 0
 23080 004a 1846     		mov	r0, r3
 23081 004c 0837     		adds	r7, r7, #8
 23082              		.cfi_def_cfa_offset 8
 23083 004e BD46     		mov	sp, r7
 23084              		.cfi_def_cfa_register 13
 23085              		@ sp needed
 23086 0050 80BD     		pop	{r7, pc}
 23087              	.L879:
 23088 0052 00BF     		.align	2
 23089              	.L878:
 23090 0054 00000000 		.word	g_mem
 23091 0058 00000000 		.word	EEPROM_ADDR
 23092              		.cfi_endproc
 23093              	.LFE88:
 23094              		.size	memRestore, .-memRestore
 23095              		.section	.rodata
 23096 2343 00       		.align	2
 23097              	.LC324:
 23098 2344 47454E30 		.ascii	"GEN001\000"
 23098      303100
 23099              		.section	.text.memInit,"ax",%progbits
 23100              		.align	2
 23101              		.global	memInit
 23102              		.thumb
 23103              		.thumb_func
 23104              		.type	memInit, %function
 23105              	memInit:
 23106              	.LFB89:
3153:..\src/command_processing.c **** 
3154:..\src/command_processing.c **** //==============================================================================
3155:..\src/command_processing.c **** //                                                                   MEMORY INIT
3156:..\src/command_processing.c **** //==============================================================================
3157:..\src/command_processing.c **** 
3158:..\src/command_processing.c **** uint8 memInit(void)
3159:..\src/command_processing.c **** {
 23107              		.loc 1 3159 0
 23108              		.cfi_startproc
 23109              		@ args = 0, pretend = 0, frame = 8
 23110              		@ frame_needed = 1, uses_anonymous_args = 0
 23111 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 507


 23112              		.cfi_def_cfa_offset 8
 23113              		.cfi_offset 7, -8
 23114              		.cfi_offset 14, -4
 23115 0002 82B0     		sub	sp, sp, #8
 23116              		.cfi_def_cfa_offset 16
 23117 0004 00AF     		add	r7, sp, #0
 23118              		.cfi_def_cfa_register 7
3160:..\src/command_processing.c ****     uint8 i, j;
3161:..\src/command_processing.c **** 
3162:..\src/command_processing.c ****     //initialize memory settings
3163:..\src/command_processing.c ****     for (i=0; i<15; i++){
 23119              		.loc 1 3163 0
 23120 0006 0023     		movs	r3, #0
 23121 0008 FB71     		strb	r3, [r7, #7]
 23122 000a 07E0     		b	.L881
 23123              	.L882:
3164:..\src/command_processing.c ****         g_mem.unused_bytes[i] = 0;
 23124              		.loc 1 3164 0 discriminator 3
 23125 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 23126 000e B44A     		ldr	r2, .L907
 23127 0010 1344     		add	r3, r3, r2
 23128 0012 0022     		movs	r2, #0
 23129 0014 5A70     		strb	r2, [r3, #1]
3163:..\src/command_processing.c ****         g_mem.unused_bytes[i] = 0;
 23130              		.loc 1 3163 0 discriminator 3
 23131 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 23132 0018 0133     		adds	r3, r3, #1
 23133 001a FB71     		strb	r3, [r7, #7]
 23134              	.L881:
3163:..\src/command_processing.c ****         g_mem.unused_bytes[i] = 0;
 23135              		.loc 1 3163 0 is_stmt 0 discriminator 1
 23136 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 23137 001e 0E2B     		cmp	r3, #14
 23138 0020 F4D9     		bls	.L882
3165:..\src/command_processing.c ****     }
3166:..\src/command_processing.c ****         
3167:..\src/command_processing.c ****     // DEV STRUCT
3168:..\src/command_processing.c ****     g_mem.dev.id                = 1;
 23139              		.loc 1 3168 0 is_stmt 1
 23140 0022 AF4B     		ldr	r3, .L907
 23141 0024 0122     		movs	r2, #1
 23142 0026 83F8A020 		strb	r2, [r3, #160]
3169:..\src/command_processing.c ****     g_mem.dev.right_left        = RIGHT_HAND;
 23143              		.loc 1 3169 0
 23144 002a AD4B     		ldr	r3, .L907
 23145 002c 0022     		movs	r2, #0
 23146 002e 83F8A720 		strb	r2, [r3, #167]
3170:..\src/command_processing.c ****     g_mem.dev.dev_type          = GENERIC_2_MOTORS;
 23147              		.loc 1 3170 0
 23148 0032 AB4B     		ldr	r3, .L907
 23149 0034 0122     		movs	r2, #1
 23150 0036 83F8AC20 		strb	r2, [r3, #172]
3171:..\src/command_processing.c ****     g_mem.dev.reset_counters    = FALSE;   
 23151              		.loc 1 3171 0
 23152 003a A94B     		ldr	r3, .L907
 23153 003c 0022     		movs	r2, #0
 23154 003e 83F8A820 		strb	r2, [r3, #168]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 508


3172:..\src/command_processing.c ****     reset_counters();                       //Initialize counters
 23155              		.loc 1 3172 0
 23156 0042 FFF7FEFF 		bl	reset_counters
3173:..\src/command_processing.c ****     for (i=0; i<EEPROM_BYTES_ROW*EEPROM_AFTER_CNT_FREE_ROWS; i++){
 23157              		.loc 1 3173 0
 23158 0046 0023     		movs	r3, #0
 23159 0048 FB71     		strb	r3, [r7, #7]
 23160 004a 08E0     		b	.L883
 23161              	.L884:
3174:..\src/command_processing.c ****         g_mem.unused_bytes1[i] = 0;
 23162              		.loc 1 3174 0 discriminator 3
 23163 004c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 23164 004e A44A     		ldr	r2, .L907
 23165 0050 1344     		add	r3, r3, r2
 23166 0052 0022     		movs	r2, #0
 23167 0054 83F88020 		strb	r2, [r3, #128]
3173:..\src/command_processing.c ****     for (i=0; i<EEPROM_BYTES_ROW*EEPROM_AFTER_CNT_FREE_ROWS; i++){
 23168              		.loc 1 3173 0 discriminator 3
 23169 0058 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 23170 005a 0133     		adds	r3, r3, #1
 23171 005c FB71     		strb	r3, [r7, #7]
 23172              	.L883:
3173:..\src/command_processing.c ****     for (i=0; i<EEPROM_BYTES_ROW*EEPROM_AFTER_CNT_FREE_ROWS; i++){
 23173              		.loc 1 3173 0 is_stmt 0 discriminator 1
 23174 005e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 23175 0060 1F2B     		cmp	r3, #31
 23176 0062 F3D9     		bls	.L884
3175:..\src/command_processing.c ****     }
3176:..\src/command_processing.c ****     g_mem.dev.use_2nd_motor_flag = FALSE;
 23177              		.loc 1 3176 0 is_stmt 1
 23178 0064 9E4B     		ldr	r3, .L907
 23179 0066 0022     		movs	r2, #0
 23180 0068 83F8A920 		strb	r2, [r3, #169]
3177:..\src/command_processing.c **** 
3178:..\src/command_processing.c ****     // MOTOR STRUCT
3179:..\src/command_processing.c ****     for (i=0; i< NUM_OF_MOTORS; i++) {
 23181              		.loc 1 3179 0
 23182 006c 0023     		movs	r3, #0
 23183 006e FB71     		strb	r3, [r7, #7]
 23184 0070 15E1     		b	.L885
 23185              	.L888:
3180:..\src/command_processing.c ****         g_mem.motor[i].k_p           =0.0165 * 65536;
 23186              		.loc 1 3180 0
 23187 0072 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23188 0074 9A49     		ldr	r1, .L907
 23189 0076 1346     		mov	r3, r2
 23190 0078 DB00     		lsls	r3, r3, #3
 23191 007a 9B1A     		subs	r3, r3, r2
 23192 007c 1B01     		lsls	r3, r3, #4
 23193 007e 0B44     		add	r3, r3, r1
 23194 0080 B033     		adds	r3, r3, #176
 23195 0082 40F23942 		movw	r2, #1081
 23196 0086 1A60     		str	r2, [r3]
3181:..\src/command_processing.c ****         g_mem.motor[i].k_i           =     0 * 65536;
 23197              		.loc 1 3181 0
 23198 0088 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23199 008a 9549     		ldr	r1, .L907
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 509


 23200 008c 1346     		mov	r3, r2
 23201 008e DB00     		lsls	r3, r3, #3
 23202 0090 9B1A     		subs	r3, r3, r2
 23203 0092 1B01     		lsls	r3, r3, #4
 23204 0094 0B44     		add	r3, r3, r1
 23205 0096 B433     		adds	r3, r3, #180
 23206 0098 0022     		movs	r2, #0
 23207 009a 1A60     		str	r2, [r3]
3182:..\src/command_processing.c ****         g_mem.motor[i].k_d           = 0.007 * 65536;  // changed in order to avoid metallic clatte
 23208              		.loc 1 3182 0
 23209 009c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23210 009e 9049     		ldr	r1, .L907
 23211 00a0 1346     		mov	r3, r2
 23212 00a2 DB00     		lsls	r3, r3, #3
 23213 00a4 9B1A     		subs	r3, r3, r2
 23214 00a6 1B01     		lsls	r3, r3, #4
 23215 00a8 0B44     		add	r3, r3, r1
 23216 00aa B833     		adds	r3, r3, #184
 23217 00ac 4FF4E572 		mov	r2, #458
 23218 00b0 1A60     		str	r2, [r3]
3183:..\src/command_processing.c ****         g_mem.motor[i].k_p_c         =     1 * 65536;
 23219              		.loc 1 3183 0
 23220 00b2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23221 00b4 8A49     		ldr	r1, .L907
 23222 00b6 1346     		mov	r3, r2
 23223 00b8 DB00     		lsls	r3, r3, #3
 23224 00ba 9B1A     		subs	r3, r3, r2
 23225 00bc 1B01     		lsls	r3, r3, #4
 23226 00be 0B44     		add	r3, r3, r1
 23227 00c0 BC33     		adds	r3, r3, #188
 23228 00c2 4FF48032 		mov	r2, #65536
 23229 00c6 1A60     		str	r2, [r3]
3184:..\src/command_processing.c ****         g_mem.motor[i].k_i_c         = 0.001 * 65536;
 23230              		.loc 1 3184 0
 23231 00c8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23232 00ca 8549     		ldr	r1, .L907
 23233 00cc 1346     		mov	r3, r2
 23234 00ce DB00     		lsls	r3, r3, #3
 23235 00d0 9B1A     		subs	r3, r3, r2
 23236 00d2 1B01     		lsls	r3, r3, #4
 23237 00d4 0B44     		add	r3, r3, r1
 23238 00d6 C033     		adds	r3, r3, #192
 23239 00d8 4122     		movs	r2, #65
 23240 00da 1A60     		str	r2, [r3]
3185:..\src/command_processing.c ****         g_mem.motor[i].k_d_c         =     0 * 65536;
 23241              		.loc 1 3185 0
 23242 00dc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23243 00de 8049     		ldr	r1, .L907
 23244 00e0 1346     		mov	r3, r2
 23245 00e2 DB00     		lsls	r3, r3, #3
 23246 00e4 9B1A     		subs	r3, r3, r2
 23247 00e6 1B01     		lsls	r3, r3, #4
 23248 00e8 0B44     		add	r3, r3, r1
 23249 00ea C433     		adds	r3, r3, #196
 23250 00ec 0022     		movs	r2, #0
 23251 00ee 1A60     		str	r2, [r3]
3186:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 510


3187:..\src/command_processing.c ****         g_mem.motor[i].k_p_dl        =   0.1 * 65536;
 23252              		.loc 1 3187 0
 23253 00f0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23254 00f2 7B49     		ldr	r1, .L907
 23255 00f4 1346     		mov	r3, r2
 23256 00f6 DB00     		lsls	r3, r3, #3
 23257 00f8 9B1A     		subs	r3, r3, r2
 23258 00fa 1B01     		lsls	r3, r3, #4
 23259 00fc 0B44     		add	r3, r3, r1
 23260 00fe C833     		adds	r3, r3, #200
 23261 0100 41F69912 		movw	r2, #6553
 23262 0104 1A60     		str	r2, [r3]
3188:..\src/command_processing.c ****         g_mem.motor[i].k_i_dl        =     0 * 65536;
 23263              		.loc 1 3188 0
 23264 0106 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23265 0108 7549     		ldr	r1, .L907
 23266 010a 1346     		mov	r3, r2
 23267 010c DB00     		lsls	r3, r3, #3
 23268 010e 9B1A     		subs	r3, r3, r2
 23269 0110 1B01     		lsls	r3, r3, #4
 23270 0112 0B44     		add	r3, r3, r1
 23271 0114 CC33     		adds	r3, r3, #204
 23272 0116 0022     		movs	r2, #0
 23273 0118 1A60     		str	r2, [r3]
3189:..\src/command_processing.c ****         g_mem.motor[i].k_d_dl        =     0 * 65536;
 23274              		.loc 1 3189 0
 23275 011a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23276 011c 7049     		ldr	r1, .L907
 23277 011e 1346     		mov	r3, r2
 23278 0120 DB00     		lsls	r3, r3, #3
 23279 0122 9B1A     		subs	r3, r3, r2
 23280 0124 1B01     		lsls	r3, r3, #4
 23281 0126 0B44     		add	r3, r3, r1
 23282 0128 D033     		adds	r3, r3, #208
 23283 012a 0022     		movs	r2, #0
 23284 012c 1A60     		str	r2, [r3]
3190:..\src/command_processing.c ****         g_mem.motor[i].k_p_c_dl      =   0.3 * 65536;
 23285              		.loc 1 3190 0
 23286 012e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23287 0130 6B49     		ldr	r1, .L907
 23288 0132 1346     		mov	r3, r2
 23289 0134 DB00     		lsls	r3, r3, #3
 23290 0136 9B1A     		subs	r3, r3, r2
 23291 0138 1B01     		lsls	r3, r3, #4
 23292 013a 0B44     		add	r3, r3, r1
 23293 013c D433     		adds	r3, r3, #212
 23294 013e 44F6CC42 		movw	r2, #19660
 23295 0142 1A60     		str	r2, [r3]
3191:..\src/command_processing.c ****         g_mem.motor[i].k_i_c_dl      =0.0002 * 65536;
 23296              		.loc 1 3191 0
 23297 0144 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23298 0146 6649     		ldr	r1, .L907
 23299 0148 1346     		mov	r3, r2
 23300 014a DB00     		lsls	r3, r3, #3
 23301 014c 9B1A     		subs	r3, r3, r2
 23302 014e 1B01     		lsls	r3, r3, #4
 23303 0150 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 511


 23304 0152 D833     		adds	r3, r3, #216
 23305 0154 0D22     		movs	r2, #13
 23306 0156 1A60     		str	r2, [r3]
3192:..\src/command_processing.c ****         g_mem.motor[i].k_d_c_dl      =     0 * 65536;
 23307              		.loc 1 3192 0
 23308 0158 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23309 015a 6149     		ldr	r1, .L907
 23310 015c 1346     		mov	r3, r2
 23311 015e DB00     		lsls	r3, r3, #3
 23312 0160 9B1A     		subs	r3, r3, r2
 23313 0162 1B01     		lsls	r3, r3, #4
 23314 0164 0B44     		add	r3, r3, r1
 23315 0166 DC33     		adds	r3, r3, #220
 23316 0168 0022     		movs	r2, #0
 23317 016a 1A60     		str	r2, [r3]
3193:..\src/command_processing.c **** 
3194:..\src/command_processing.c ****         g_mem.motor[i].activ         = 1;
 23318              		.loc 1 3194 0
 23319 016c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23320 016e 5C49     		ldr	r1, .L907
 23321 0170 1346     		mov	r3, r2
 23322 0172 DB00     		lsls	r3, r3, #3
 23323 0174 9B1A     		subs	r3, r3, r2
 23324 0176 1B01     		lsls	r3, r3, #4
 23325 0178 0B44     		add	r3, r3, r1
 23326 017a E033     		adds	r3, r3, #224
 23327 017c 0122     		movs	r2, #1
 23328 017e 1A70     		strb	r2, [r3]
3195:..\src/command_processing.c ****         g_mem.motor[i].activate_pwm_rescaling = MAXON_24V;      //rescaling active for 12V motor
 23329              		.loc 1 3195 0
 23330 0180 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23331 0182 5749     		ldr	r1, .L907
 23332 0184 1346     		mov	r3, r2
 23333 0186 DB00     		lsls	r3, r3, #3
 23334 0188 9B1A     		subs	r3, r3, r2
 23335 018a 1B01     		lsls	r3, r3, #4
 23336 018c 0B44     		add	r3, r3, r1
 23337 018e E133     		adds	r3, r3, #225
 23338 0190 0022     		movs	r2, #0
 23339 0192 1A70     		strb	r2, [r3]
3196:..\src/command_processing.c ****         g_mem.motor[i].motor_driver_type = DRIVER_MC33887;      //SoftHand standard driver
 23340              		.loc 1 3196 0
 23341 0194 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23342 0196 5249     		ldr	r1, .L907
 23343 0198 1346     		mov	r3, r2
 23344 019a DB00     		lsls	r3, r3, #3
 23345 019c 9B1A     		subs	r3, r3, r2
 23346 019e 1B01     		lsls	r3, r3, #4
 23347 01a0 0B44     		add	r3, r3, r1
 23348 01a2 E233     		adds	r3, r3, #226
 23349 01a4 0022     		movs	r2, #0
 23350 01a6 1A70     		strb	r2, [r3]
3197:..\src/command_processing.c ****         g_mem.motor[i].input_mode    = INPUT_MODE_EXTERNAL;
 23351              		.loc 1 3197 0
 23352 01a8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23353 01aa 4D49     		ldr	r1, .L907
 23354 01ac 1346     		mov	r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 512


 23355 01ae DB00     		lsls	r3, r3, #3
 23356 01b0 9B1A     		subs	r3, r3, r2
 23357 01b2 1B01     		lsls	r3, r3, #4
 23358 01b4 0B44     		add	r3, r3, r1
 23359 01b6 03F58773 		add	r3, r3, #270
 23360 01ba 0022     		movs	r2, #0
 23361 01bc 1A70     		strb	r2, [r3]
3198:..\src/command_processing.c ****         g_mem.motor[i].control_mode  = CONTROL_ANGLE;
 23362              		.loc 1 3198 0
 23363 01be FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23364 01c0 4749     		ldr	r1, .L907
 23365 01c2 1346     		mov	r3, r2
 23366 01c4 DB00     		lsls	r3, r3, #3
 23367 01c6 9B1A     		subs	r3, r3, r2
 23368 01c8 1B01     		lsls	r3, r3, #4
 23369 01ca 0B44     		add	r3, r3, r1
 23370 01cc 03F20F13 		addw	r3, r3, #271
 23371 01d0 0022     		movs	r2, #0
 23372 01d2 1A70     		strb	r2, [r3]
3199:..\src/command_processing.c ****         g_mem.motor[i].max_step_pos = 0;
 23373              		.loc 1 3199 0
 23374 01d4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23375 01d6 4249     		ldr	r1, .L907
 23376 01d8 1346     		mov	r3, r2
 23377 01da DB00     		lsls	r3, r3, #3
 23378 01dc 9B1A     		subs	r3, r3, r2
 23379 01de 1B01     		lsls	r3, r3, #4
 23380 01e0 0B44     		add	r3, r3, r1
 23381 01e2 F033     		adds	r3, r3, #240
 23382 01e4 0022     		movs	r2, #0
 23383 01e6 1A60     		str	r2, [r3]
3200:..\src/command_processing.c ****         g_mem.motor[i].max_step_neg = 0;
 23384              		.loc 1 3200 0
 23385 01e8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23386 01ea 3D49     		ldr	r1, .L907
 23387 01ec 1346     		mov	r3, r2
 23388 01ee DB00     		lsls	r3, r3, #3
 23389 01f0 9B1A     		subs	r3, r3, r2
 23390 01f2 1B01     		lsls	r3, r3, #4
 23391 01f4 0B44     		add	r3, r3, r1
 23392 01f6 EC33     		adds	r3, r3, #236
 23393 01f8 0022     		movs	r2, #0
 23394 01fa 1A60     		str	r2, [r3]
3201:..\src/command_processing.c ****         for(j = 0; j < LOOKUP_DIM; j++) {
 23395              		.loc 1 3201 0
 23396 01fc 0023     		movs	r3, #0
 23397 01fe BB71     		strb	r3, [r7, #6]
 23398 0200 10E0     		b	.L886
 23399              	.L887:
3202:..\src/command_processing.c ****             g_mem.motor[i].curr_lookup[j] = 0;
 23400              		.loc 1 3202 0 discriminator 3
 23401 0202 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23402 0204 B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 23403 0206 3648     		ldr	r0, .L907
 23404 0208 1346     		mov	r3, r2
 23405 020a DB00     		lsls	r3, r3, #3
 23406 020c 9B1A     		subs	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 513


 23407 020e 9B00     		lsls	r3, r3, #2
 23408 0210 0B44     		add	r3, r3, r1
 23409 0212 3C33     		adds	r3, r3, #60
 23410 0214 9B00     		lsls	r3, r3, #2
 23411 0216 0344     		add	r3, r3, r0
 23412 0218 4FF00002 		mov	r2, #0
 23413 021c 5A60     		str	r2, [r3, #4]	@ float
3201:..\src/command_processing.c ****         for(j = 0; j < LOOKUP_DIM; j++) {
 23414              		.loc 1 3201 0 discriminator 3
 23415 021e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 23416 0220 0133     		adds	r3, r3, #1
 23417 0222 BB71     		strb	r3, [r7, #6]
 23418              	.L886:
3201:..\src/command_processing.c ****         for(j = 0; j < LOOKUP_DIM; j++) {
 23419              		.loc 1 3201 0 is_stmt 0 discriminator 1
 23420 0224 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 23421 0226 052B     		cmp	r3, #5
 23422 0228 EBD9     		bls	.L887
3203:..\src/command_processing.c ****         }
3204:..\src/command_processing.c ****         g_mem.motor[i].current_limit = DEFAULT_CURRENT_LIMIT;
 23423              		.loc 1 3204 0 is_stmt 1 discriminator 2
 23424 022a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23425 022c 2C49     		ldr	r1, .L907
 23426 022e 1346     		mov	r3, r2
 23427 0230 DB00     		lsls	r3, r3, #3
 23428 0232 9B1A     		subs	r3, r3, r2
 23429 0234 1B01     		lsls	r3, r3, #4
 23430 0236 0B44     		add	r3, r3, r1
 23431 0238 03F58673 		add	r3, r3, #268
 23432 023c 40F2DC52 		movw	r2, #1500
 23433 0240 1A80     		strh	r2, [r3]	@ movhi
3205:..\src/command_processing.c ****         g_mem.motor[i].encoder_line = i;    
 23434              		.loc 1 3205 0 discriminator 2
 23435 0242 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23436 0244 2649     		ldr	r1, .L907
 23437 0246 1346     		mov	r3, r2
 23438 0248 DB00     		lsls	r3, r3, #3
 23439 024a 9B1A     		subs	r3, r3, r2
 23440 024c 1B01     		lsls	r3, r3, #4
 23441 024e 0B44     		add	r3, r3, r1
 23442 0250 03F58873 		add	r3, r3, #272
 23443 0254 FA79     		ldrb	r2, [r7, #7]
 23444 0256 1A70     		strb	r2, [r3]
3206:..\src/command_processing.c ****         g_mem.motor[i].pos_lim_flag = 1;
 23445              		.loc 1 3206 0 discriminator 2
 23446 0258 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23447 025a 2149     		ldr	r1, .L907
 23448 025c 1346     		mov	r3, r2
 23449 025e DB00     		lsls	r3, r3, #3
 23450 0260 9B1A     		subs	r3, r3, r2
 23451 0262 1B01     		lsls	r3, r3, #4
 23452 0264 0B44     		add	r3, r3, r1
 23453 0266 E333     		adds	r3, r3, #227
 23454 0268 0122     		movs	r2, #1
 23455 026a 1A70     		strb	r2, [r3]
3207:..\src/command_processing.c ****         
3208:..\src/command_processing.c ****         g_mem.motor[i].pwm_rate_limiter = PWM_RATE_LIMITER_MAX;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 514


 23456              		.loc 1 3208 0 discriminator 2
 23457 026c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23458 026e 1C49     		ldr	r1, .L907
 23459 0270 1346     		mov	r3, r2
 23460 0272 DB00     		lsls	r3, r3, #3
 23461 0274 9B1A     		subs	r3, r3, r2
 23462 0276 1B01     		lsls	r3, r3, #4
 23463 0278 0B44     		add	r3, r3, r1
 23464 027a 03F21113 		addw	r3, r3, #273
 23465 027e 0122     		movs	r2, #1
 23466 0280 1A70     		strb	r2, [r3]
3209:..\src/command_processing.c ****         g_mem.motor[i].not_revers_motor_flag = FALSE;       // Generic reversible motor  
 23467              		.loc 1 3209 0 discriminator 2
 23468 0282 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23469 0284 1649     		ldr	r1, .L907
 23470 0286 1346     		mov	r3, r2
 23471 0288 DB00     		lsls	r3, r3, #3
 23472 028a 9B1A     		subs	r3, r3, r2
 23473 028c 1B01     		lsls	r3, r3, #4
 23474 028e 0B44     		add	r3, r3, r1
 23475 0290 03F58973 		add	r3, r3, #274
 23476 0294 0022     		movs	r2, #0
 23477 0296 1A70     		strb	r2, [r3]
3179:..\src/command_processing.c ****         g_mem.motor[i].k_p           =0.0165 * 65536;
 23478              		.loc 1 3179 0 discriminator 2
 23479 0298 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 23480 029a 0133     		adds	r3, r3, #1
 23481 029c FB71     		strb	r3, [r7, #7]
 23482              	.L885:
3179:..\src/command_processing.c ****         g_mem.motor[i].k_p           =0.0165 * 65536;
 23483              		.loc 1 3179 0 is_stmt 0 discriminator 1
 23484 029e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 23485 02a0 012B     		cmp	r3, #1
 23486 02a2 7FF6E6AE 		bls	.L888
3210:..\src/command_processing.c ****     }
3211:..\src/command_processing.c ****     
3212:..\src/command_processing.c ****     // ENC STRUCT
3213:..\src/command_processing.c ****     for (i = 0; i< N_ENCODER_LINE_MAX; i++){
 23487              		.loc 1 3213 0 is_stmt 1
 23488 02a6 0023     		movs	r3, #0
 23489 02a8 FB71     		strb	r3, [r7, #7]
 23490 02aa 98E0     		b	.L889
 23491              	.L896:
3214:..\src/command_processing.c ****         for (j = 0; j<N_ENCODERS_PER_LINE_MAX; j++) {
 23492              		.loc 1 3214 0
 23493 02ac 0023     		movs	r3, #0
 23494 02ae BB71     		strb	r3, [r7, #6]
 23495 02b0 0FE0     		b	.L890
 23496              	.L891:
3215:..\src/command_processing.c ****             g_mem.enc[i].Enc_raw_read_conf[j] = 0;
 23497              		.loc 1 3215 0 discriminator 3
 23498 02b2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23499 02b4 B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 23500 02b6 0A48     		ldr	r0, .L907
 23501 02b8 1346     		mov	r3, r2
 23502 02ba 5B00     		lsls	r3, r3, #1
 23503 02bc 1344     		add	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 515


 23504 02be 1B01     		lsls	r3, r3, #4
 23505 02c0 0344     		add	r3, r3, r0
 23506 02c2 0B44     		add	r3, r3, r1
 23507 02c4 03F5C873 		add	r3, r3, #400
 23508 02c8 0022     		movs	r2, #0
 23509 02ca 1A70     		strb	r2, [r3]
3214:..\src/command_processing.c ****         for (j = 0; j<N_ENCODERS_PER_LINE_MAX; j++) {
 23510              		.loc 1 3214 0 discriminator 3
 23511 02cc BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 23512 02ce 0133     		adds	r3, r3, #1
 23513 02d0 BB71     		strb	r3, [r7, #6]
 23514              	.L890:
3214:..\src/command_processing.c ****         for (j = 0; j<N_ENCODERS_PER_LINE_MAX; j++) {
 23515              		.loc 1 3214 0 is_stmt 0 discriminator 1
 23516 02d2 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 23517 02d4 042B     		cmp	r3, #4
 23518 02d6 ECD9     		bls	.L891
3216:..\src/command_processing.c ****         }
3217:..\src/command_processing.c ****         for(j = 0; j < NUM_OF_SENSORS; j++){
 23519              		.loc 1 3217 0 is_stmt 1
 23520 02d8 0023     		movs	r3, #0
 23521 02da BB71     		strb	r3, [r7, #6]
 23522 02dc 2CE0     		b	.L892
 23523              	.L908:
 23524 02de 00BF     		.align	2
 23525              	.L907:
 23526 02e0 00000000 		.word	g_mem
 23527              	.L893:
3218:..\src/command_processing.c ****             g_mem.enc[i].res[j] = 3;
 23528              		.loc 1 3218 0 discriminator 3
 23529 02e4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23530 02e6 B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 23531 02e8 C948     		ldr	r0, .L909
 23532 02ea 1346     		mov	r3, r2
 23533 02ec 5B00     		lsls	r3, r3, #1
 23534 02ee 1344     		add	r3, r3, r2
 23535 02f0 1B01     		lsls	r3, r3, #4
 23536 02f2 0344     		add	r3, r3, r0
 23537 02f4 0B44     		add	r3, r3, r1
 23538 02f6 03F29513 		addw	r3, r3, #405
 23539 02fa 0322     		movs	r2, #3
 23540 02fc 1A70     		strb	r2, [r3]
3219:..\src/command_processing.c ****             g_mem.enc[i].m_mult[j] = 1;
 23541              		.loc 1 3219 0 discriminator 3
 23542 02fe FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23543 0300 B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 23544 0302 C348     		ldr	r0, .L909
 23545 0304 1346     		mov	r3, r2
 23546 0306 5B00     		lsls	r3, r3, #1
 23547 0308 1344     		add	r3, r3, r2
 23548 030a 9B00     		lsls	r3, r3, #2
 23549 030c 0B44     		add	r3, r3, r1
 23550 030e 6833     		adds	r3, r3, #104
 23551 0310 9B00     		lsls	r3, r3, #2
 23552 0312 0344     		add	r3, r3, r0
 23553 0314 4FF07E52 		mov	r2, #1065353216
 23554 0318 5A60     		str	r2, [r3, #4]	@ float
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 516


3220:..\src/command_processing.c ****             g_mem.enc[i].m_off[j] = (int32)0 << g_mem.enc[i].res[j];
 23555              		.loc 1 3220 0 discriminator 3
 23556 031a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23557 031c B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 23558 031e BC48     		ldr	r0, .L909
 23559 0320 1346     		mov	r3, r2
 23560 0322 5B00     		lsls	r3, r3, #1
 23561 0324 1344     		add	r3, r3, r2
 23562 0326 9B00     		lsls	r3, r3, #2
 23563 0328 0B44     		add	r3, r3, r1
 23564 032a 6633     		adds	r3, r3, #102
 23565 032c 0022     		movs	r2, #0
 23566 032e 40F82320 		str	r2, [r0, r3, lsl #2]
3217:..\src/command_processing.c ****             g_mem.enc[i].res[j] = 3;
 23567              		.loc 1 3217 0 discriminator 3
 23568 0332 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 23569 0334 0133     		adds	r3, r3, #1
 23570 0336 BB71     		strb	r3, [r7, #6]
 23571              	.L892:
3217:..\src/command_processing.c ****             g_mem.enc[i].res[j] = 3;
 23572              		.loc 1 3217 0 is_stmt 0 discriminator 1
 23573 0338 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 23574 033a 022B     		cmp	r3, #2
 23575 033c D2D9     		bls	.L893
3221:..\src/command_processing.c ****         }
3222:..\src/command_processing.c ****         g_mem.enc[i].double_encoder_on_off = FALSE;
 23576              		.loc 1 3222 0 is_stmt 1
 23577 033e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23578 0340 B349     		ldr	r1, .L909
 23579 0342 1346     		mov	r3, r2
 23580 0344 5B00     		lsls	r3, r3, #1
 23581 0346 1344     		add	r3, r3, r2
 23582 0348 1B01     		lsls	r3, r3, #4
 23583 034a 0B44     		add	r3, r3, r1
 23584 034c 03F5D873 		add	r3, r3, #432
 23585 0350 0022     		movs	r2, #0
 23586 0352 1A70     		strb	r2, [r3]
3223:..\src/command_processing.c ****         g_mem.enc[i].motor_handle_ratio = 22;     
 23587              		.loc 1 3223 0
 23588 0354 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23589 0356 AE49     		ldr	r1, .L909
 23590 0358 1346     		mov	r3, r2
 23591 035a 5B00     		lsls	r3, r3, #1
 23592 035c 1344     		add	r3, r3, r2
 23593 035e 1B01     		lsls	r3, r3, #4
 23594 0360 0B44     		add	r3, r3, r1
 23595 0362 03F5DA73 		add	r3, r3, #436
 23596 0366 1622     		movs	r2, #22
 23597 0368 1A70     		strb	r2, [r3]
3224:..\src/command_processing.c ****         for(j = 0; j < NUM_OF_SENSORS; j++){
 23598              		.loc 1 3224 0
 23599 036a 0023     		movs	r3, #0
 23600 036c BB71     		strb	r3, [r7, #6]
 23601 036e 0FE0     		b	.L894
 23602              	.L895:
3225:..\src/command_processing.c ****             g_mem.enc[i].Enc_idx_use_for_control[j] = j;    // First encoder is that with index 0 a
 23603              		.loc 1 3225 0 discriminator 3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 517


 23604 0370 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23605 0372 B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 23606 0374 A648     		ldr	r0, .L909
 23607 0376 1346     		mov	r3, r2
 23608 0378 5B00     		lsls	r3, r3, #1
 23609 037a 1344     		add	r3, r3, r2
 23610 037c 1B01     		lsls	r3, r3, #4
 23611 037e 0344     		add	r3, r3, r0
 23612 0380 0B44     		add	r3, r3, r1
 23613 0382 03F2B113 		addw	r3, r3, #433
 23614 0386 BA79     		ldrb	r2, [r7, #6]
 23615 0388 1A70     		strb	r2, [r3]
3224:..\src/command_processing.c ****         for(j = 0; j < NUM_OF_SENSORS; j++){
 23616              		.loc 1 3224 0 discriminator 3
 23617 038a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 23618 038c 0133     		adds	r3, r3, #1
 23619 038e BB71     		strb	r3, [r7, #6]
 23620              	.L894:
3224:..\src/command_processing.c ****         for(j = 0; j < NUM_OF_SENSORS; j++){
 23621              		.loc 1 3224 0 is_stmt 0 discriminator 1
 23622 0390 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 23623 0392 022B     		cmp	r3, #2
 23624 0394 ECD9     		bls	.L895
3226:..\src/command_processing.c ****         }
3227:..\src/command_processing.c ****         g_mem.enc[i].gears_params[0] = 15;     
 23625              		.loc 1 3227 0 is_stmt 1 discriminator 2
 23626 0396 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23627 0398 9D49     		ldr	r1, .L909
 23628 039a 1346     		mov	r3, r2
 23629 039c 5B00     		lsls	r3, r3, #1
 23630 039e 1344     		add	r3, r3, r2
 23631 03a0 1B01     		lsls	r3, r3, #4
 23632 03a2 0B44     		add	r3, r3, r1
 23633 03a4 03F2B513 		addw	r3, r3, #437
 23634 03a8 0F22     		movs	r2, #15
 23635 03aa 1A70     		strb	r2, [r3]
3228:..\src/command_processing.c ****         g_mem.enc[i].gears_params[1] = 14;     
 23636              		.loc 1 3228 0 discriminator 2
 23637 03ac FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23638 03ae 9849     		ldr	r1, .L909
 23639 03b0 1346     		mov	r3, r2
 23640 03b2 5B00     		lsls	r3, r3, #1
 23641 03b4 1344     		add	r3, r3, r2
 23642 03b6 1B01     		lsls	r3, r3, #4
 23643 03b8 0B44     		add	r3, r3, r1
 23644 03ba 03F5DB73 		add	r3, r3, #438
 23645 03be 0E22     		movs	r2, #14
 23646 03c0 1A70     		strb	r2, [r3]
3229:..\src/command_processing.c ****         g_mem.enc[i].gears_params[2] = 1;  
 23647              		.loc 1 3229 0 discriminator 2
 23648 03c2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23649 03c4 9249     		ldr	r1, .L909
 23650 03c6 1346     		mov	r3, r2
 23651 03c8 5B00     		lsls	r3, r3, #1
 23652 03ca 1344     		add	r3, r3, r2
 23653 03cc 1B01     		lsls	r3, r3, #4
 23654 03ce 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 518


 23655 03d0 03F2B713 		addw	r3, r3, #439
 23656 03d4 0122     		movs	r2, #1
 23657 03d6 1A70     		strb	r2, [r3]
3213:..\src/command_processing.c ****         for (j = 0; j<N_ENCODERS_PER_LINE_MAX; j++) {
 23658              		.loc 1 3213 0 discriminator 2
 23659 03d8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 23660 03da 0133     		adds	r3, r3, #1
 23661 03dc FB71     		strb	r3, [r7, #7]
 23662              	.L889:
3213:..\src/command_processing.c ****         for (j = 0; j<N_ENCODERS_PER_LINE_MAX; j++) {
 23663              		.loc 1 3213 0 is_stmt 0 discriminator 1
 23664 03de FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 23665 03e0 012B     		cmp	r3, #1
 23666 03e2 7FF663AF 		bls	.L896
3230:..\src/command_processing.c ****     }
3231:..\src/command_processing.c ****     
3232:..\src/command_processing.c ****     for (i=0; i< NUM_OF_MOTORS; i++) {
 23667              		.loc 1 3232 0 is_stmt 1
 23668 03e6 0023     		movs	r3, #0
 23669 03e8 FB71     		strb	r3, [r7, #7]
 23670 03ea 2EE0     		b	.L897
 23671              	.L898:
3233:..\src/command_processing.c ****         g_mem.motor[i].pos_lim_inf = 0;
 23672              		.loc 1 3233 0 discriminator 3
 23673 03ec FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23674 03ee 8849     		ldr	r1, .L909
 23675 03f0 1346     		mov	r3, r2
 23676 03f2 DB00     		lsls	r3, r3, #3
 23677 03f4 9B1A     		subs	r3, r3, r2
 23678 03f6 1B01     		lsls	r3, r3, #4
 23679 03f8 0B44     		add	r3, r3, r1
 23680 03fa E433     		adds	r3, r3, #228
 23681 03fc 0022     		movs	r2, #0
 23682 03fe 1A60     		str	r2, [r3]
3234:..\src/command_processing.c ****         g_mem.motor[i].pos_lim_sup = (int32)19000 << g_mem.enc[g_mem.motor[i].encoder_line].res[0];
 23683              		.loc 1 3234 0 discriminator 3
 23684 0400 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23685 0402 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 23686 0404 8248     		ldr	r0, .L909
 23687 0406 0B46     		mov	r3, r1
 23688 0408 DB00     		lsls	r3, r3, #3
 23689 040a 5B1A     		subs	r3, r3, r1
 23690 040c 1B01     		lsls	r3, r3, #4
 23691 040e 0344     		add	r3, r3, r0
 23692 0410 03F58873 		add	r3, r3, #272
 23693 0414 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 23694 0416 1846     		mov	r0, r3
 23695 0418 7D49     		ldr	r1, .L909
 23696 041a 0346     		mov	r3, r0
 23697 041c 5B00     		lsls	r3, r3, #1
 23698 041e 0344     		add	r3, r3, r0
 23699 0420 1B01     		lsls	r3, r3, #4
 23700 0422 0B44     		add	r3, r3, r1
 23701 0424 03F29513 		addw	r3, r3, #405
 23702 0428 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 23703 042a 1946     		mov	r1, r3
 23704 042c 44F63823 		movw	r3, #19000
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 519


 23705 0430 03FA01F1 		lsl	r1, r3, r1
 23706 0434 7648     		ldr	r0, .L909
 23707 0436 1346     		mov	r3, r2
 23708 0438 DB00     		lsls	r3, r3, #3
 23709 043a 9B1A     		subs	r3, r3, r2
 23710 043c 1B01     		lsls	r3, r3, #4
 23711 043e 0344     		add	r3, r3, r0
 23712 0440 E833     		adds	r3, r3, #232
 23713 0442 1960     		str	r1, [r3]
3232:..\src/command_processing.c ****         g_mem.motor[i].pos_lim_inf = 0;
 23714              		.loc 1 3232 0 discriminator 3
 23715 0444 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 23716 0446 0133     		adds	r3, r3, #1
 23717 0448 FB71     		strb	r3, [r7, #7]
 23718              	.L897:
3232:..\src/command_processing.c ****         g_mem.motor[i].pos_lim_inf = 0;
 23719              		.loc 1 3232 0 is_stmt 0 discriminator 1
 23720 044a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 23721 044c 012B     		cmp	r3, #1
 23722 044e CDD9     		bls	.L898
3235:..\src/command_processing.c ****     }
3236:..\src/command_processing.c ****     
3237:..\src/command_processing.c ****     // EMG STRUCT     
3238:..\src/command_processing.c ****     g_mem.emg.emg_threshold[0] = 200;
 23723              		.loc 1 3238 0 is_stmt 1
 23724 0450 6F4B     		ldr	r3, .L909
 23725 0452 C822     		movs	r2, #200
 23726 0454 A3F8F021 		strh	r2, [r3, #496]	@ movhi
3239:..\src/command_processing.c ****     g_mem.emg.emg_threshold[1] = 200;
 23727              		.loc 1 3239 0
 23728 0458 6D4B     		ldr	r3, .L909
 23729 045a C822     		movs	r2, #200
 23730 045c A3F8F221 		strh	r2, [r3, #498]	@ movhi
3240:..\src/command_processing.c ****     g_mem.emg.emg_max_value[0] = 1024;
 23731              		.loc 1 3240 0
 23732 0460 6B4B     		ldr	r3, .L909
 23733 0462 4FF48062 		mov	r2, #1024
 23734 0466 C3F8F421 		str	r2, [r3, #500]
3241:..\src/command_processing.c ****     g_mem.emg.emg_max_value[1] = 1024;   
 23735              		.loc 1 3241 0
 23736 046a 694B     		ldr	r3, .L909
 23737 046c 4FF48062 		mov	r2, #1024
 23738 0470 C3F8F821 		str	r2, [r3, #504]
3242:..\src/command_processing.c ****     g_mem.emg.emg_speed[0] = 100; 
 23739              		.loc 1 3242 0
 23740 0474 664B     		ldr	r3, .L909
 23741 0476 6422     		movs	r2, #100
 23742 0478 83F8FC21 		strb	r2, [r3, #508]
3243:..\src/command_processing.c ****     g_mem.emg.emg_speed[1] = 100; 
 23743              		.loc 1 3243 0
 23744 047c 644B     		ldr	r3, .L909
 23745 047e 6422     		movs	r2, #100
 23746 0480 83F8FD21 		strb	r2, [r3, #509]
3244:..\src/command_processing.c ****     g_mem.emg.emg_calibration_flag = 0;      // EMG calibration disabled by default
 23747              		.loc 1 3244 0
 23748 0484 624B     		ldr	r3, .L909
 23749 0486 0022     		movs	r2, #0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 520


 23750 0488 83F8FE21 		strb	r2, [r3, #510]
3245:..\src/command_processing.c ****     g_mem.emg.switch_emg = 0;    
 23751              		.loc 1 3245 0
 23752 048c 604B     		ldr	r3, .L909
 23753 048e 0022     		movs	r2, #0
 23754 0490 83F8FF21 		strb	r2, [r3, #511]
3246:..\src/command_processing.c **** 
3247:..\src/command_processing.c ****     // IMU STRUCT
3248:..\src/command_processing.c ****     g_mem.imu.read_imu_flag = FALSE;
 23755              		.loc 1 3248 0
 23756 0494 5E4B     		ldr	r3, .L909
 23757 0496 0022     		movs	r2, #0
 23758 0498 83F80022 		strb	r2, [r3, #512]
3249:..\src/command_processing.c ****     g_mem.imu.SPI_read_delay = 0;       // 0 - No delay
 23759              		.loc 1 3249 0
 23760 049c 5C4B     		ldr	r3, .L909
 23761 049e 0022     		movs	r2, #0
 23762 04a0 83F80122 		strb	r2, [r3, #513]
3250:..\src/command_processing.c ****     for (i = 0; i< N_IMU_MAX; i++){
 23763              		.loc 1 3250 0
 23764 04a4 0023     		movs	r3, #0
 23765 04a6 FB71     		strb	r3, [r7, #7]
 23766 04a8 34E0     		b	.L899
 23767              	.L900:
3251:..\src/command_processing.c ****         g_mem.imu.IMU_conf[i][0] = 1;   // Accelerometers
 23768              		.loc 1 3251 0 discriminator 3
 23769 04aa FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23770 04ac 5849     		ldr	r1, .L909
 23771 04ae 1346     		mov	r3, r2
 23772 04b0 9B00     		lsls	r3, r3, #2
 23773 04b2 1344     		add	r3, r3, r2
 23774 04b4 0B44     		add	r3, r3, r1
 23775 04b6 03F20223 		addw	r3, r3, #514
 23776 04ba 0122     		movs	r2, #1
 23777 04bc 1A70     		strb	r2, [r3]
3252:..\src/command_processing.c ****         g_mem.imu.IMU_conf[i][1] = 1;   // Gyroscopes
 23778              		.loc 1 3252 0 discriminator 3
 23779 04be FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23780 04c0 5349     		ldr	r1, .L909
 23781 04c2 1346     		mov	r3, r2
 23782 04c4 9B00     		lsls	r3, r3, #2
 23783 04c6 1344     		add	r3, r3, r2
 23784 04c8 0B44     		add	r3, r3, r1
 23785 04ca 03F20323 		addw	r3, r3, #515
 23786 04ce 0122     		movs	r2, #1
 23787 04d0 1A70     		strb	r2, [r3]
3253:..\src/command_processing.c ****         g_mem.imu.IMU_conf[i][2] = 0;   // Magnetometers
 23788              		.loc 1 3253 0 discriminator 3
 23789 04d2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23790 04d4 4E49     		ldr	r1, .L909
 23791 04d6 1346     		mov	r3, r2
 23792 04d8 9B00     		lsls	r3, r3, #2
 23793 04da 1344     		add	r3, r3, r2
 23794 04dc 0B44     		add	r3, r3, r1
 23795 04de 03F50173 		add	r3, r3, #516
 23796 04e2 0022     		movs	r2, #0
 23797 04e4 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 521


3254:..\src/command_processing.c ****         g_mem.imu.IMU_conf[i][3] = 0;   // Quaternions
 23798              		.loc 1 3254 0 discriminator 3
 23799 04e6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23800 04e8 4949     		ldr	r1, .L909
 23801 04ea 1346     		mov	r3, r2
 23802 04ec 9B00     		lsls	r3, r3, #2
 23803 04ee 1344     		add	r3, r3, r2
 23804 04f0 0B44     		add	r3, r3, r1
 23805 04f2 03F20523 		addw	r3, r3, #517
 23806 04f6 0022     		movs	r2, #0
 23807 04f8 1A70     		strb	r2, [r3]
3255:..\src/command_processing.c ****         g_mem.imu.IMU_conf[i][4] = 0;   // Temperatures
 23808              		.loc 1 3255 0 discriminator 3
 23809 04fa FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 23810 04fc 4449     		ldr	r1, .L909
 23811 04fe 1346     		mov	r3, r2
 23812 0500 9B00     		lsls	r3, r3, #2
 23813 0502 1344     		add	r3, r3, r2
 23814 0504 0B44     		add	r3, r3, r1
 23815 0506 03F20623 		addw	r3, r3, #518
 23816 050a 0022     		movs	r2, #0
 23817 050c 1A70     		strb	r2, [r3]
3250:..\src/command_processing.c ****         g_mem.imu.IMU_conf[i][0] = 1;   // Accelerometers
 23818              		.loc 1 3250 0 discriminator 3
 23819 050e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 23820 0510 0133     		adds	r3, r3, #1
 23821 0512 FB71     		strb	r3, [r7, #7]
 23822              	.L899:
3250:..\src/command_processing.c ****         g_mem.imu.IMU_conf[i][0] = 1;   // Accelerometers
 23823              		.loc 1 3250 0 is_stmt 0 discriminator 1
 23824 0514 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 23825 0516 042B     		cmp	r3, #4
 23826 0518 C7D9     		bls	.L900
3256:..\src/command_processing.c ****     }
3257:..\src/command_processing.c ****      
3258:..\src/command_processing.c ****     // EXP STRUCT
3259:..\src/command_processing.c ****     g_mem.exp.read_exp_port_flag = EXP_NONE;       // 0 - None
 23827              		.loc 1 3259 0 is_stmt 1
 23828 051a 3D4B     		ldr	r3, .L909
 23829 051c 0022     		movs	r2, #0
 23830 051e 83F82622 		strb	r2, [r3, #550]
3260:..\src/command_processing.c ****     strcpy(g_mem.user[g_mem.dev.user_id].user_code_string, "GEN001");
 23831              		.loc 1 3260 0
 23832 0522 3B4B     		ldr	r3, .L909
 23833 0524 93F8AB30 		ldrb	r3, [r3, #171]	@ zero_extendqisi2
 23834 0528 1233     		adds	r3, r3, #18
 23835 052a 5B01     		lsls	r3, r3, #5
 23836 052c 384A     		ldr	r2, .L909
 23837 052e 1344     		add	r3, r3, r2
 23838 0530 384A     		ldr	r2, .L909+4
 23839 0532 1068     		ldr	r0, [r2]	@ unaligned
 23840 0534 1860     		str	r0, [r3]	@ unaligned
 23841 0536 9188     		ldrh	r1, [r2, #4]	@ unaligned
 23842 0538 9279     		ldrb	r2, [r2, #6]
 23843 053a 9980     		strh	r1, [r3, #4]	@ unaligned
 23844 053c 9A71     		strb	r2, [r3, #6]
3261:..\src/command_processing.c ****     if (g_mem.exp.read_exp_port_flag == EXP_SD_RTC) {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 522


 23845              		.loc 1 3261 0
 23846 053e 344B     		ldr	r3, .L909
 23847 0540 93F82632 		ldrb	r3, [r3, #550]	@ zero_extendqisi2
 23848 0544 012B     		cmp	r3, #1
 23849 0546 13D1     		bne	.L901
3262:..\src/command_processing.c ****         // Set date of maintenance from RTC
3263:..\src/command_processing.c ****         store_RTC_current_time();
 23850              		.loc 1 3263 0
 23851 0548 FFF7FEFF 		bl	store_RTC_current_time
3264:..\src/command_processing.c ****         
3265:..\src/command_processing.c ****         g_mem.dev.stats_period_begin_date[0] = g_mem.exp.curr_time[0];
 23852              		.loc 1 3265 0
 23853 054c 304B     		ldr	r3, .L909
 23854 054e 93F82022 		ldrb	r2, [r3, #544]	@ zero_extendqisi2
 23855 0552 2F4B     		ldr	r3, .L909
 23856 0554 83F8A420 		strb	r2, [r3, #164]
3266:..\src/command_processing.c ****         g_mem.dev.stats_period_begin_date[1] = g_mem.exp.curr_time[1];
 23857              		.loc 1 3266 0
 23858 0558 2D4B     		ldr	r3, .L909
 23859 055a 93F82122 		ldrb	r2, [r3, #545]	@ zero_extendqisi2
 23860 055e 2C4B     		ldr	r3, .L909
 23861 0560 83F8A520 		strb	r2, [r3, #165]
3267:..\src/command_processing.c ****         g_mem.dev.stats_period_begin_date[2] = g_mem.exp.curr_time[2];
 23862              		.loc 1 3267 0
 23863 0564 2A4B     		ldr	r3, .L909
 23864 0566 93F82222 		ldrb	r2, [r3, #546]	@ zero_extendqisi2
 23865 056a 294B     		ldr	r3, .L909
 23866 056c 83F8A620 		strb	r2, [r3, #166]
 23867              	.L901:
3268:..\src/command_processing.c ****     }
3269:..\src/command_processing.c ****     g_mem.exp.read_ADC_sensors_port_flag = FALSE;
 23868              		.loc 1 3269 0
 23869 0570 274B     		ldr	r3, .L909
 23870 0572 0022     		movs	r2, #0
 23871 0574 83F82722 		strb	r2, [r3, #551]
3270:..\src/command_processing.c ****     for (i = 0; i < NUM_OF_ADC_CHANNELS_MAX; i++) {
 23872              		.loc 1 3270 0
 23873 0578 0023     		movs	r3, #0
 23874 057a FB71     		strb	r3, [r7, #7]
 23875 057c 08E0     		b	.L902
 23876              	.L903:
3271:..\src/command_processing.c ****         g_mem.exp.ADC_conf[i] = 0;
 23877              		.loc 1 3271 0 discriminator 3
 23878 057e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 23879 0580 234A     		ldr	r2, .L909
 23880 0582 1344     		add	r3, r3, r2
 23881 0584 0022     		movs	r2, #0
 23882 0586 83F82822 		strb	r2, [r3, #552]
3270:..\src/command_processing.c ****     for (i = 0; i < NUM_OF_ADC_CHANNELS_MAX; i++) {
 23883              		.loc 1 3270 0 discriminator 3
 23884 058a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 23885 058c 0133     		adds	r3, r3, #1
 23886 058e FB71     		strb	r3, [r7, #7]
 23887              	.L902:
3270:..\src/command_processing.c ****     for (i = 0; i < NUM_OF_ADC_CHANNELS_MAX; i++) {
 23888              		.loc 1 3270 0 is_stmt 0 discriminator 1
 23889 0590 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 523


 23890 0592 0B2B     		cmp	r3, #11
 23891 0594 F3D9     		bls	.L903
3272:..\src/command_processing.c ****     }
3273:..\src/command_processing.c ****     //Activate only the two EMG channels by default for every firmware configuration
3274:..\src/command_processing.c ****     g_mem.exp.ADC_conf[2] = 1;
 23892              		.loc 1 3274 0 is_stmt 1
 23893 0596 1E4B     		ldr	r3, .L909
 23894 0598 0122     		movs	r2, #1
 23895 059a 83F82A22 		strb	r2, [r3, #554]
3275:..\src/command_processing.c ****     g_mem.exp.ADC_conf[3] = 1;
 23896              		.loc 1 3275 0
 23897 059e 1C4B     		ldr	r3, .L909
 23898 05a0 0122     		movs	r2, #1
 23899 05a2 83F82B22 		strb	r2, [r3, #555]
3276:..\src/command_processing.c ****     g_mem.exp.record_EMG_history_on_SD = FALSE;
 23900              		.loc 1 3276 0
 23901 05a6 1A4B     		ldr	r3, .L909
 23902 05a8 0022     		movs	r2, #0
 23903 05aa 83F83422 		strb	r2, [r3, #564]
3277:..\src/command_processing.c **** 
3278:..\src/command_processing.c ****     // WR STRUCT (default in generic fw)
3279:..\src/command_processing.c ****     g_mem.WR.activation_mode = 0;                // Default Fast:wrist/syn2, Slow:hand/syn1
 23904              		.loc 1 3279 0
 23905 05ae 184B     		ldr	r3, .L909
 23906 05b0 0022     		movs	r2, #0
 23907 05b2 83F8E022 		strb	r2, [r3, #736]
3280:..\src/command_processing.c ****     g_mem.WR.fast_act_threshold[0] = 800;
 23908              		.loc 1 3280 0
 23909 05b6 164B     		ldr	r3, .L909
 23910 05b8 4FF44872 		mov	r2, #800
 23911 05bc A3F8E222 		strh	r2, [r3, #738]	@ movhi
3281:..\src/command_processing.c **** 
3282:..\src/command_processing.c **** #ifdef SOFTHAND_FW
3283:..\src/command_processing.c ****     // Override memory values with specific ones for SoftHand Pro device
3284:..\src/command_processing.c ****     memInit_SoftHandPro();
3285:..\src/command_processing.c **** #endif 
3286:..\src/command_processing.c **** 
3287:..\src/command_processing.c **** #ifdef MASTER_FW
3288:..\src/command_processing.c ****     // Override memory values with specific ones for Master device
3289:..\src/command_processing.c ****     memInit_Master();
3290:..\src/command_processing.c **** #endif 
3291:..\src/command_processing.c **** 
3292:..\src/command_processing.c **** #ifdef AIR_CHAMBERS_FB_FW
3293:..\src/command_processing.c ****     // Override memory values with specific ones for Air Chambers device
3294:..\src/command_processing.c ****     memInit_AirChambersFb();
3295:..\src/command_processing.c **** #endif 
3296:..\src/command_processing.c **** 
3297:..\src/command_processing.c **** #ifdef OTBK_ACT_WRIST_MS_FW
3298:..\src/command_processing.c ****     // Override memory values with specific ones for Ottobock Wrist device
3299:..\src/command_processing.c ****     memInit_OtbkActWristMs();
3300:..\src/command_processing.c **** #endif
3301:..\src/command_processing.c **** 
3302:..\src/command_processing.c ****     // JOYSTICK STRUCT
3303:..\src/command_processing.c ****     g_mem.JOY_spec.joystick_closure_speed = 150;
 23912              		.loc 1 3303 0
 23913 05c0 134B     		ldr	r3, .L909
 23914 05c2 9622     		movs	r2, #150
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 524


 23915 05c4 A3F8B022 		strh	r2, [r3, #688]	@ movhi
3304:..\src/command_processing.c ****     g_mem.JOY_spec.joystick_threshold = 100;
 23916              		.loc 1 3304 0
 23917 05c8 114B     		ldr	r3, .L909
 23918 05ca 6422     		movs	r2, #100
 23919 05cc A3F8B222 		strh	r2, [r3, #690]	@ movhi
3305:..\src/command_processing.c ****     g_mem.JOY_spec.joystick_gains[0] = 1024;
 23920              		.loc 1 3305 0
 23921 05d0 0F4B     		ldr	r3, .L909
 23922 05d2 4FF48062 		mov	r2, #1024
 23923 05d6 A3F8B422 		strh	r2, [r3, #692]	@ movhi
3306:..\src/command_processing.c ****     g_mem.JOY_spec.joystick_gains[1] = 1024;
 23924              		.loc 1 3306 0
 23925 05da 0D4B     		ldr	r3, .L909
 23926 05dc 4FF48062 		mov	r2, #1024
 23927 05e0 A3F8B622 		strh	r2, [r3, #694]	@ movhi
3307:..\src/command_processing.c **** 
3308:..\src/command_processing.c ****     // Default generic user_id
3309:..\src/command_processing.c ****     g_mem.dev.user_id = GENERIC_USER;    
 23928              		.loc 1 3309 0
 23929 05e4 0A4B     		ldr	r3, .L909
 23930 05e6 0022     		movs	r2, #0
 23931 05e8 83F8AB20 		strb	r2, [r3, #171]
3310:..\src/command_processing.c **** 
3311:..\src/command_processing.c ****     // set the initialized flag to show EEPROM has been populated
3312:..\src/command_processing.c ****     g_mem.flag = TRUE;
 23932              		.loc 1 3312 0
 23933 05ec 084B     		ldr	r3, .L909
 23934 05ee 0122     		movs	r2, #1
 23935 05f0 1A70     		strb	r2, [r3]
3313:..\src/command_processing.c ****     
3314:..\src/command_processing.c ****     //write that configuration to EEPROM
3315:..\src/command_processing.c ****     return ( memStore(0) && memStore(DEFAULT_EEPROM_DISPLACEMENT) );
 23936              		.loc 1 3315 0
 23937 05f2 0020     		movs	r0, #0
 23938 05f4 FFF7FEFF 		bl	memStore
 23939 05f8 0346     		mov	r3, r0
 23940 05fa 002B     		cmp	r3, #0
 23941 05fc 0CD0     		beq	.L904
 23942              		.loc 1 3315 0 is_stmt 0 discriminator 1
 23943 05fe 3220     		movs	r0, #50
 23944 0600 FFF7FEFF 		bl	memStore
 23945 0604 0346     		mov	r3, r0
 23946 0606 002B     		cmp	r3, #0
 23947 0608 06D0     		beq	.L904
 23948              		.loc 1 3315 0 discriminator 3
 23949 060a 0123     		movs	r3, #1
 23950 060c 05E0     		b	.L905
 23951              	.L910:
 23952 060e 00BF     		.align	2
 23953              	.L909:
 23954 0610 00000000 		.word	g_mem
 23955 0614 44230000 		.word	.LC324
 23956              	.L904:
 23957              		.loc 1 3315 0 discriminator 4
 23958 0618 0023     		movs	r3, #0
 23959              	.L905:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 525


 23960              		.loc 1 3315 0 discriminator 6
 23961 061a DBB2     		uxtb	r3, r3
3316:..\src/command_processing.c **** }
 23962              		.loc 1 3316 0 is_stmt 1 discriminator 6
 23963 061c 1846     		mov	r0, r3
 23964 061e 0837     		adds	r7, r7, #8
 23965              		.cfi_def_cfa_offset 8
 23966 0620 BD46     		mov	sp, r7
 23967              		.cfi_def_cfa_register 13
 23968              		@ sp needed
 23969 0622 80BD     		pop	{r7, pc}
 23970              		.cfi_endproc
 23971              	.LFE89:
 23972              		.size	memInit, .-memInit
 23973              		.section	.rodata
 23974 234b 00       		.align	2
 23975              	.LC325:
 23976 234c 55535230 		.ascii	"USR001\000"
 23976      303100
 23977              		.section	.text.memInit_SoftHandPro,"ax",%progbits
 23978              		.align	2
 23979              		.global	memInit_SoftHandPro
 23980              		.thumb
 23981              		.thumb_func
 23982              		.type	memInit_SoftHandPro, %function
 23983              	memInit_SoftHandPro:
 23984              	.LFB90:
3317:..\src/command_processing.c **** 
3318:..\src/command_processing.c **** //==============================================================================
3319:..\src/command_processing.c **** //                                                          MEMORY INIT SOFTHAND
3320:..\src/command_processing.c **** //==============================================================================
3321:..\src/command_processing.c **** void memInit_SoftHandPro(void)
3322:..\src/command_processing.c **** {
 23985              		.loc 1 3322 0
 23986              		.cfi_startproc
 23987              		@ args = 0, pretend = 0, frame = 8
 23988              		@ frame_needed = 1, uses_anonymous_args = 0
 23989              		@ link register save eliminated.
 23990 0000 80B4     		push	{r7}
 23991              		.cfi_def_cfa_offset 4
 23992              		.cfi_offset 7, -4
 23993 0002 83B0     		sub	sp, sp, #12
 23994              		.cfi_def_cfa_offset 16
 23995 0004 00AF     		add	r7, sp, #0
 23996              		.cfi_def_cfa_register 7
3323:..\src/command_processing.c ****     uint8 MOTOR_IDX = 0;
 23997              		.loc 1 3323 0
 23998 0006 0023     		movs	r3, #0
 23999 0008 FB70     		strb	r3, [r7, #3]
3324:..\src/command_processing.c ****     
3325:..\src/command_processing.c ****     //initialize memory settings ( Specific for SoftHand Pro device )    
3326:..\src/command_processing.c ****     g_mem.dev.right_left = LEFT_HAND;
 24000              		.loc 1 3326 0
 24001 000a 8B4B     		ldr	r3, .L914
 24002 000c 0122     		movs	r2, #1
 24003 000e 83F8A720 		strb	r2, [r3, #167]
3327:..\src/command_processing.c ****     g_mem.dev.dev_type = SOFTHAND_PRO;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 526


 24004              		.loc 1 3327 0
 24005 0012 894B     		ldr	r3, .L914
 24006 0014 0022     		movs	r2, #0
 24007 0016 83F8AC20 		strb	r2, [r3, #172]
3328:..\src/command_processing.c ****     
3329:..\src/command_processing.c ****     g_mem.motor[MOTOR_IDX].activ         = 1;
 24008              		.loc 1 3329 0
 24009 001a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 24010 001c 8649     		ldr	r1, .L914
 24011 001e 1346     		mov	r3, r2
 24012 0020 DB00     		lsls	r3, r3, #3
 24013 0022 9B1A     		subs	r3, r3, r2
 24014 0024 1B01     		lsls	r3, r3, #4
 24015 0026 0B44     		add	r3, r3, r1
 24016 0028 E033     		adds	r3, r3, #224
 24017 002a 0122     		movs	r2, #1
 24018 002c 1A70     		strb	r2, [r3]
3330:..\src/command_processing.c ****     g_mem.motor[MOTOR_IDX].input_mode    = INPUT_MODE_EXTERNAL;
 24019              		.loc 1 3330 0
 24020 002e FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 24021 0030 8149     		ldr	r1, .L914
 24022 0032 1346     		mov	r3, r2
 24023 0034 DB00     		lsls	r3, r3, #3
 24024 0036 9B1A     		subs	r3, r3, r2
 24025 0038 1B01     		lsls	r3, r3, #4
 24026 003a 0B44     		add	r3, r3, r1
 24027 003c 03F58773 		add	r3, r3, #270
 24028 0040 0022     		movs	r2, #0
 24029 0042 1A70     		strb	r2, [r3]
3331:..\src/command_processing.c ****     g_mem.motor[MOTOR_IDX].control_mode  = CONTROL_ANGLE;
 24030              		.loc 1 3331 0
 24031 0044 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 24032 0046 7C49     		ldr	r1, .L914
 24033 0048 1346     		mov	r3, r2
 24034 004a DB00     		lsls	r3, r3, #3
 24035 004c 9B1A     		subs	r3, r3, r2
 24036 004e 1B01     		lsls	r3, r3, #4
 24037 0050 0B44     		add	r3, r3, r1
 24038 0052 03F20F13 		addw	r3, r3, #271
 24039 0056 0022     		movs	r2, #0
 24040 0058 1A70     		strb	r2, [r3]
3332:..\src/command_processing.c ****     
3333:..\src/command_processing.c ****     // Get CS0 encoder line for RIGHT HAND and CS1 line for LEFT HAND as default
3334:..\src/command_processing.c ****     g_mem.motor[MOTOR_IDX].encoder_line  = g_mem.dev.right_left;
 24041              		.loc 1 3334 0
 24042 005a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 24043 005c 764B     		ldr	r3, .L914
 24044 005e 93F8A700 		ldrb	r0, [r3, #167]	@ zero_extendqisi2
 24045 0062 7549     		ldr	r1, .L914
 24046 0064 1346     		mov	r3, r2
 24047 0066 DB00     		lsls	r3, r3, #3
 24048 0068 9B1A     		subs	r3, r3, r2
 24049 006a 1B01     		lsls	r3, r3, #4
 24050 006c 0B44     		add	r3, r3, r1
 24051 006e 03F58873 		add	r3, r3, #272
 24052 0072 0246     		mov	r2, r0
 24053 0074 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 527


3335:..\src/command_processing.c ****     g_mem.motor[MOTOR_IDX].pwm_rate_limiter = PWM_RATE_LIMITER_MAX;
 24054              		.loc 1 3335 0
 24055 0076 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 24056 0078 6F49     		ldr	r1, .L914
 24057 007a 1346     		mov	r3, r2
 24058 007c DB00     		lsls	r3, r3, #3
 24059 007e 9B1A     		subs	r3, r3, r2
 24060 0080 1B01     		lsls	r3, r3, #4
 24061 0082 0B44     		add	r3, r3, r1
 24062 0084 03F21113 		addw	r3, r3, #273
 24063 0088 0122     		movs	r2, #1
 24064 008a 1A70     		strb	r2, [r3]
3336:..\src/command_processing.c ****     g_mem.motor[MOTOR_IDX].not_revers_motor_flag = TRUE;       // SoftHand not reversible motor
 24065              		.loc 1 3336 0
 24066 008c FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 24067 008e 6A49     		ldr	r1, .L914
 24068 0090 1346     		mov	r3, r2
 24069 0092 DB00     		lsls	r3, r3, #3
 24070 0094 9B1A     		subs	r3, r3, r2
 24071 0096 1B01     		lsls	r3, r3, #4
 24072 0098 0B44     		add	r3, r3, r1
 24073 009a 03F58973 		add	r3, r3, #274
 24074 009e 0122     		movs	r2, #1
 24075 00a0 1A70     		strb	r2, [r3]
3337:..\src/command_processing.c ****     g_mem.motor[MOTOR_IDX].pos_lim_inf = 0;
 24076              		.loc 1 3337 0
 24077 00a2 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 24078 00a4 6449     		ldr	r1, .L914
 24079 00a6 1346     		mov	r3, r2
 24080 00a8 DB00     		lsls	r3, r3, #3
 24081 00aa 9B1A     		subs	r3, r3, r2
 24082 00ac 1B01     		lsls	r3, r3, #4
 24083 00ae 0B44     		add	r3, r3, r1
 24084 00b0 E433     		adds	r3, r3, #228
 24085 00b2 0022     		movs	r2, #0
 24086 00b4 1A60     		str	r2, [r3]
3338:..\src/command_processing.c ****     g_mem.motor[MOTOR_IDX].pos_lim_sup = (int32)16000 << g_mem.enc[g_mem.motor[MOTOR_IDX].encoder_l
 24087              		.loc 1 3338 0
 24088 00b6 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 24089 00b8 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 24090 00ba 5F48     		ldr	r0, .L914
 24091 00bc 0B46     		mov	r3, r1
 24092 00be DB00     		lsls	r3, r3, #3
 24093 00c0 5B1A     		subs	r3, r3, r1
 24094 00c2 1B01     		lsls	r3, r3, #4
 24095 00c4 0344     		add	r3, r3, r0
 24096 00c6 03F58873 		add	r3, r3, #272
 24097 00ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 24098 00cc 1846     		mov	r0, r3
 24099 00ce 5A49     		ldr	r1, .L914
 24100 00d0 0346     		mov	r3, r0
 24101 00d2 5B00     		lsls	r3, r3, #1
 24102 00d4 0344     		add	r3, r3, r0
 24103 00d6 1B01     		lsls	r3, r3, #4
 24104 00d8 0B44     		add	r3, r3, r1
 24105 00da 03F29513 		addw	r3, r3, #405
 24106 00de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 528


 24107 00e0 1946     		mov	r1, r3
 24108 00e2 4FF47A53 		mov	r3, #16000
 24109 00e6 03FA01F1 		lsl	r1, r3, r1
 24110 00ea 5348     		ldr	r0, .L914
 24111 00ec 1346     		mov	r3, r2
 24112 00ee DB00     		lsls	r3, r3, #3
 24113 00f0 9B1A     		subs	r3, r3, r2
 24114 00f2 1B01     		lsls	r3, r3, #4
 24115 00f4 0344     		add	r3, r3, r0
 24116 00f6 E833     		adds	r3, r3, #232
 24117 00f8 1960     		str	r1, [r3]
 24118              	.LBB30:
3339:..\src/command_processing.c ****     
3340:..\src/command_processing.c ****     for (int i=0; i < N_ENCODER_LINE_MAX; i++) {
 24119              		.loc 1 3340 0
 24120 00fa 0023     		movs	r3, #0
 24121 00fc 7B60     		str	r3, [r7, #4]
 24122 00fe 2EE0     		b	.L912
 24123              	.L913:
3341:..\src/command_processing.c ****         // Initialize parameters for each encoder line (either for RIGHT and for LEFT hand)
3342:..\src/command_processing.c ****         g_mem.enc[i].double_encoder_on_off = TRUE;
 24124              		.loc 1 3342 0 discriminator 3
 24125 0100 4D49     		ldr	r1, .L914
 24126 0102 7A68     		ldr	r2, [r7, #4]
 24127 0104 1346     		mov	r3, r2
 24128 0106 5B00     		lsls	r3, r3, #1
 24129 0108 1344     		add	r3, r3, r2
 24130 010a 1B01     		lsls	r3, r3, #4
 24131 010c 0B44     		add	r3, r3, r1
 24132 010e 03F5D873 		add	r3, r3, #432
 24133 0112 0122     		movs	r2, #1
 24134 0114 1A70     		strb	r2, [r3]
3343:..\src/command_processing.c ****         g_mem.enc[i].gears_params[0] = SH_N1;     
 24135              		.loc 1 3343 0 discriminator 3
 24136 0116 4849     		ldr	r1, .L914
 24137 0118 7A68     		ldr	r2, [r7, #4]
 24138 011a 1346     		mov	r3, r2
 24139 011c 5B00     		lsls	r3, r3, #1
 24140 011e 1344     		add	r3, r3, r2
 24141 0120 1B01     		lsls	r3, r3, #4
 24142 0122 0B44     		add	r3, r3, r1
 24143 0124 03F2B513 		addw	r3, r3, #437
 24144 0128 2322     		movs	r2, #35
 24145 012a 1A70     		strb	r2, [r3]
3344:..\src/command_processing.c ****         g_mem.enc[i].gears_params[1] = SH_N2;     
 24146              		.loc 1 3344 0 discriminator 3
 24147 012c 4249     		ldr	r1, .L914
 24148 012e 7A68     		ldr	r2, [r7, #4]
 24149 0130 1346     		mov	r3, r2
 24150 0132 5B00     		lsls	r3, r3, #1
 24151 0134 1344     		add	r3, r3, r2
 24152 0136 1B01     		lsls	r3, r3, #4
 24153 0138 0B44     		add	r3, r3, r1
 24154 013a 03F5DB73 		add	r3, r3, #438
 24155 013e 0322     		movs	r2, #3
 24156 0140 1A70     		strb	r2, [r3]
3345:..\src/command_processing.c ****         g_mem.enc[i].gears_params[2] = SH_I1;  
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 529


 24157              		.loc 1 3345 0 discriminator 3
 24158 0142 3D49     		ldr	r1, .L914
 24159 0144 7A68     		ldr	r2, [r7, #4]
 24160 0146 1346     		mov	r3, r2
 24161 0148 5B00     		lsls	r3, r3, #1
 24162 014a 1344     		add	r3, r3, r2
 24163 014c 1B01     		lsls	r3, r3, #4
 24164 014e 0B44     		add	r3, r3, r1
 24165 0150 03F2B713 		addw	r3, r3, #439
 24166 0154 FF22     		movs	r2, #255
 24167 0156 1A70     		strb	r2, [r3]
3340:..\src/command_processing.c ****         // Initialize parameters for each encoder line (either for RIGHT and for LEFT hand)
 24168              		.loc 1 3340 0 discriminator 3
 24169 0158 7B68     		ldr	r3, [r7, #4]
 24170 015a 0133     		adds	r3, r3, #1
 24171 015c 7B60     		str	r3, [r7, #4]
 24172              	.L912:
3340:..\src/command_processing.c ****         // Initialize parameters for each encoder line (either for RIGHT and for LEFT hand)
 24173              		.loc 1 3340 0 is_stmt 0 discriminator 1
 24174 015e 7B68     		ldr	r3, [r7, #4]
 24175 0160 012B     		cmp	r3, #1
 24176 0162 CDDD     		ble	.L913
 24177              	.LBE30:
3346:..\src/command_processing.c ****     }
3347:..\src/command_processing.c ****     
3348:..\src/command_processing.c ****     g_mem.emg.emg_max_value[0] = 1024;
 24178              		.loc 1 3348 0 is_stmt 1
 24179 0164 344B     		ldr	r3, .L914
 24180 0166 4FF48062 		mov	r2, #1024
 24181 016a C3F8F421 		str	r2, [r3, #500]
3349:..\src/command_processing.c ****     g_mem.emg.emg_max_value[1] = 1024;
 24182              		.loc 1 3349 0
 24183 016e 324B     		ldr	r3, .L914
 24184 0170 4FF48062 		mov	r2, #1024
 24185 0174 C3F8F821 		str	r2, [r3, #504]
3350:..\src/command_processing.c ****     g_mem.emg.emg_threshold[0] = 200;
 24186              		.loc 1 3350 0
 24187 0178 2F4B     		ldr	r3, .L914
 24188 017a C822     		movs	r2, #200
 24189 017c A3F8F021 		strh	r2, [r3, #496]	@ movhi
3351:..\src/command_processing.c ****     g_mem.emg.emg_threshold[1] = 200;
 24190              		.loc 1 3351 0
 24191 0180 2D4B     		ldr	r3, .L914
 24192 0182 C822     		movs	r2, #200
 24193 0184 A3F8F221 		strh	r2, [r3, #498]	@ movhi
3352:..\src/command_processing.c ****     g_mem.emg.emg_speed[0] = 100;
 24194              		.loc 1 3352 0
 24195 0188 2B4B     		ldr	r3, .L914
 24196 018a 6422     		movs	r2, #100
 24197 018c 83F8FC21 		strb	r2, [r3, #508]
3353:..\src/command_processing.c ****     g_mem.emg.emg_speed[1] = 100;
 24198              		.loc 1 3353 0
 24199 0190 294B     		ldr	r3, .L914
 24200 0192 6422     		movs	r2, #100
 24201 0194 83F8FD21 		strb	r2, [r3, #509]
3354:..\src/command_processing.c ****     g_mem.emg.emg_calibration_flag = 0;      // EMG calibration disabled by default
 24202              		.loc 1 3354 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 530


 24203 0198 274B     		ldr	r3, .L914
 24204 019a 0022     		movs	r2, #0
 24205 019c 83F8FE21 		strb	r2, [r3, #510]
3355:..\src/command_processing.c ****     g_mem.emg.switch_emg = 0;
 24206              		.loc 1 3355 0
 24207 01a0 254B     		ldr	r3, .L914
 24208 01a2 0022     		movs	r2, #0
 24209 01a4 83F8FF21 		strb	r2, [r3, #511]
3356:..\src/command_processing.c ****     
3357:..\src/command_processing.c ****     //Initialize rest position parameters  
3358:..\src/command_processing.c ****     g_mem.SH.rest_position_flag = FALSE;
 24210              		.loc 1 3358 0
 24211 01a8 234B     		ldr	r3, .L914
 24212 01aa 0022     		movs	r2, #0
 24213 01ac 83F8AC22 		strb	r2, [r3, #684]
3359:..\src/command_processing.c ****     g_mem.SH.rest_pos = (int32)7000 << g_mem.enc[g_mem.motor[MOTOR_IDX].encoder_line].res[0]; // 56
 24214              		.loc 1 3359 0
 24215 01b0 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 24216 01b2 2149     		ldr	r1, .L914
 24217 01b4 1346     		mov	r3, r2
 24218 01b6 DB00     		lsls	r3, r3, #3
 24219 01b8 9B1A     		subs	r3, r3, r2
 24220 01ba 1B01     		lsls	r3, r3, #4
 24221 01bc 0B44     		add	r3, r3, r1
 24222 01be 03F58873 		add	r3, r3, #272
 24223 01c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 24224 01c4 1946     		mov	r1, r3
 24225 01c6 1C4A     		ldr	r2, .L914
 24226 01c8 0B46     		mov	r3, r1
 24227 01ca 5B00     		lsls	r3, r3, #1
 24228 01cc 0B44     		add	r3, r3, r1
 24229 01ce 1B01     		lsls	r3, r3, #4
 24230 01d0 1344     		add	r3, r3, r2
 24231 01d2 03F29513 		addw	r3, r3, #405
 24232 01d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 24233 01d8 1A46     		mov	r2, r3
 24234 01da 41F65833 		movw	r3, #7000
 24235 01de 9340     		lsls	r3, r3, r2
 24236 01e0 154A     		ldr	r2, .L914
 24237 01e2 C2F8A032 		str	r3, [r2, #672]
3360:..\src/command_processing.c **** 	g_mem.SH.rest_delay = 10;
 24238              		.loc 1 3360 0
 24239 01e6 144B     		ldr	r3, .L914
 24240 01e8 0A22     		movs	r2, #10
 24241 01ea C3F8A422 		str	r2, [r3, #676]
3361:..\src/command_processing.c ****     g_mem.SH.rest_vel = 10000;
 24242              		.loc 1 3361 0
 24243 01ee 124B     		ldr	r3, .L914
 24244 01f0 42F21072 		movw	r2, #10000
 24245 01f4 C3F8A822 		str	r2, [r3, #680]
3362:..\src/command_processing.c **** 	
3363:..\src/command_processing.c ****     g_mem.imu.read_imu_flag = FALSE;
 24246              		.loc 1 3363 0
 24247 01f8 0F4B     		ldr	r3, .L914
 24248 01fa 0022     		movs	r2, #0
 24249 01fc 83F80022 		strb	r2, [r3, #512]
3364:..\src/command_processing.c ****     g_mem.exp.read_exp_port_flag = EXP_NONE;       // 0 - None
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 531


 24250              		.loc 1 3364 0
 24251 0200 0D4B     		ldr	r3, .L914
 24252 0202 0022     		movs	r2, #0
 24253 0204 83F82622 		strb	r2, [r3, #550]
3365:..\src/command_processing.c ****     g_mem.exp.record_EMG_history_on_SD = FALSE;
 24254              		.loc 1 3365 0
 24255 0208 0B4B     		ldr	r3, .L914
 24256 020a 0022     		movs	r2, #0
 24257 020c 83F83422 		strb	r2, [r3, #564]
3366:..\src/command_processing.c ****     strcpy(g_mem.user[g_mem.dev.user_id].user_code_string, "USR001");
 24258              		.loc 1 3366 0
 24259 0210 094B     		ldr	r3, .L914
 24260 0212 93F8AB30 		ldrb	r3, [r3, #171]	@ zero_extendqisi2
 24261 0216 1233     		adds	r3, r3, #18
 24262 0218 5B01     		lsls	r3, r3, #5
 24263 021a 074A     		ldr	r2, .L914
 24264 021c 1344     		add	r3, r3, r2
 24265 021e 074A     		ldr	r2, .L914+4
 24266 0220 1068     		ldr	r0, [r2]	@ unaligned
 24267 0222 1860     		str	r0, [r3]	@ unaligned
 24268 0224 9188     		ldrh	r1, [r2, #4]	@ unaligned
 24269 0226 9279     		ldrb	r2, [r2, #6]
 24270 0228 9980     		strh	r1, [r3, #4]	@ unaligned
 24271 022a 9A71     		strb	r2, [r3, #6]
3367:..\src/command_processing.c **** }
 24272              		.loc 1 3367 0
 24273 022c 00BF     		nop
 24274 022e 0C37     		adds	r7, r7, #12
 24275              		.cfi_def_cfa_offset 4
 24276 0230 BD46     		mov	sp, r7
 24277              		.cfi_def_cfa_register 13
 24278              		@ sp needed
 24279 0232 80BC     		pop	{r7}
 24280              		.cfi_restore 7
 24281              		.cfi_def_cfa_offset 0
 24282 0234 7047     		bx	lr
 24283              	.L915:
 24284 0236 00BF     		.align	2
 24285              	.L914:
 24286 0238 00000000 		.word	g_mem
 24287 023c 4C230000 		.word	.LC325
 24288              		.cfi_endproc
 24289              	.LFE90:
 24290              		.size	memInit_SoftHandPro, .-memInit_SoftHandPro
 24291              		.section	.text.memInit_Master,"ax",%progbits
 24292              		.align	2
 24293              		.global	memInit_Master
 24294              		.thumb
 24295              		.thumb_func
 24296              		.type	memInit_Master, %function
 24297              	memInit_Master:
 24298              	.LFB91:
3368:..\src/command_processing.c **** 
3369:..\src/command_processing.c **** //==============================================================================
3370:..\src/command_processing.c **** //                                                            MEMORY INIT MASTER
3371:..\src/command_processing.c **** //==============================================================================
3372:..\src/command_processing.c **** void memInit_Master(void)
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 532


3373:..\src/command_processing.c **** {
 24299              		.loc 1 3373 0
 24300              		.cfi_startproc
 24301              		@ args = 0, pretend = 0, frame = 0
 24302              		@ frame_needed = 1, uses_anonymous_args = 0
 24303              		@ link register save eliminated.
 24304 0000 80B4     		push	{r7}
 24305              		.cfi_def_cfa_offset 4
 24306              		.cfi_offset 7, -4
 24307 0002 00AF     		add	r7, sp, #0
 24308              		.cfi_def_cfa_register 7
3374:..\src/command_processing.c ****     g_mem.dev.id                = 2;
 24309              		.loc 1 3374 0
 24310 0004 074B     		ldr	r3, .L917
 24311 0006 0222     		movs	r2, #2
 24312 0008 83F8A020 		strb	r2, [r3, #160]
3375:..\src/command_processing.c ****     
3376:..\src/command_processing.c ****     // MS STRUCT
3377:..\src/command_processing.c ****     g_mem.MS.slave_ID = 1;
 24313              		.loc 1 3377 0
 24314 000c 054B     		ldr	r3, .L917
 24315 000e 0122     		movs	r2, #1
 24316 0010 83F8C122 		strb	r2, [r3, #705]
3378:..\src/command_processing.c ****     g_mem.MS.slave_comm_active = FALSE;
 24317              		.loc 1 3378 0
 24318 0014 034B     		ldr	r3, .L917
 24319 0016 0022     		movs	r2, #0
 24320 0018 83F8C022 		strb	r2, [r3, #704]
3379:..\src/command_processing.c **** }
 24321              		.loc 1 3379 0
 24322 001c 00BF     		nop
 24323 001e BD46     		mov	sp, r7
 24324              		.cfi_def_cfa_register 13
 24325              		@ sp needed
 24326 0020 80BC     		pop	{r7}
 24327              		.cfi_restore 7
 24328              		.cfi_def_cfa_offset 0
 24329 0022 7047     		bx	lr
 24330              	.L918:
 24331              		.align	2
 24332              	.L917:
 24333 0024 00000000 		.word	g_mem
 24334              		.cfi_endproc
 24335              	.LFE91:
 24336              		.size	memInit_Master, .-memInit_Master
 24337              		.section	.text.memInit_AirChambersFb,"ax",%progbits
 24338              		.align	2
 24339              		.global	memInit_AirChambersFb
 24340              		.thumb
 24341              		.thumb_func
 24342              		.type	memInit_AirChambersFb, %function
 24343              	memInit_AirChambersFb:
 24344              	.LFB92:
3380:..\src/command_processing.c **** 
3381:..\src/command_processing.c **** //==============================================================================
3382:..\src/command_processing.c **** //                                                   MEMORY INIT AIR CHAMBERS FB
3383:..\src/command_processing.c **** //==============================================================================
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 533


3384:..\src/command_processing.c **** void memInit_AirChambersFb(void)
3385:..\src/command_processing.c **** {
 24345              		.loc 1 3385 0
 24346              		.cfi_startproc
 24347              		@ args = 0, pretend = 0, frame = 0
 24348              		@ frame_needed = 1, uses_anonymous_args = 0
 24349              		@ link register save eliminated.
 24350 0000 80B4     		push	{r7}
 24351              		.cfi_def_cfa_offset 4
 24352              		.cfi_offset 7, -4
 24353 0002 00AF     		add	r7, sp, #0
 24354              		.cfi_def_cfa_register 7
3386:..\src/command_processing.c ****     // Default configuration with Air Chambers Haptic feedback
3387:..\src/command_processing.c ****     g_mem.dev.dev_type          = AIR_CHAMBERS_FB;
 24355              		.loc 1 3387 0
 24356 0004 1A4B     		ldr	r3, .L920
 24357 0006 0222     		movs	r2, #2
 24358 0008 83F8AC20 		strb	r2, [r3, #172]
3388:..\src/command_processing.c ****     
3389:..\src/command_processing.c ****     g_mem.motor[0].control_mode  = CONTROL_PWM;
 24359              		.loc 1 3389 0
 24360 000c 184B     		ldr	r3, .L920
 24361 000e 0122     		movs	r2, #1
 24362 0010 83F80F21 		strb	r2, [r3, #271]
3390:..\src/command_processing.c ****     
3391:..\src/command_processing.c ****     // Drive slave with reference generated on second motor index
3392:..\src/command_processing.c ****     // Default slave configuration for haptic feedback with SoftHand 2.0.3            
3393:..\src/command_processing.c ****     g_mem.motor[1].input_mode = INPUT_MODE_EMG_FCFS;
 24363              		.loc 1 3393 0
 24364 0014 164B     		ldr	r3, .L920
 24365 0016 0422     		movs	r2, #4
 24366 0018 83F87E21 		strb	r2, [r3, #382]
3394:..\src/command_processing.c ****     g_mem.motor[1].pos_lim_inf = 0;
 24367              		.loc 1 3394 0
 24368 001c 144B     		ldr	r3, .L920
 24369 001e 0022     		movs	r2, #0
 24370 0020 C3F85421 		str	r2, [r3, #340]
3395:..\src/command_processing.c ****     g_mem.motor[1].pos_lim_sup = (int32)22000 << g_mem.enc[g_mem.motor[1].encoder_line].res[0];
 24371              		.loc 1 3395 0
 24372 0024 124B     		ldr	r3, .L920
 24373 0026 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 24374 002a 1946     		mov	r1, r3
 24375 002c 104A     		ldr	r2, .L920
 24376 002e 0B46     		mov	r3, r1
 24377 0030 5B00     		lsls	r3, r3, #1
 24378 0032 0B44     		add	r3, r3, r1
 24379 0034 1B01     		lsls	r3, r3, #4
 24380 0036 1344     		add	r3, r3, r2
 24381 0038 03F29513 		addw	r3, r3, #405
 24382 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 24383 003e 1A46     		mov	r2, r3
 24384 0040 45F2F053 		movw	r3, #22000
 24385 0044 9340     		lsls	r3, r3, r2
 24386 0046 0A4A     		ldr	r2, .L920
 24387 0048 C2F85831 		str	r3, [r2, #344]
3396:..\src/command_processing.c ****     
3397:..\src/command_processing.c ****     // FB STRUCT
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 534


3398:..\src/command_processing.c ****     g_mem.FB.max_residual_current = 450;
 24388              		.loc 1 3398 0
 24389 004c 084B     		ldr	r3, .L920
 24390 004e 4FF4E172 		mov	r2, #450
 24391 0052 C3F8D022 		str	r2, [r3, #720]
3399:..\src/command_processing.c ****     g_mem.FB.maximum_pressure_kPa = 25.0;
 24392              		.loc 1 3399 0
 24393 0056 064B     		ldr	r3, .L920
 24394 0058 064A     		ldr	r2, .L920+4
 24395 005a C3F8D422 		str	r2, [r3, #724]	@ float
3400:..\src/command_processing.c ****     g_mem.FB.prop_err_fb_gain = 1.0;
 24396              		.loc 1 3400 0
 24397 005e 044B     		ldr	r3, .L920
 24398 0060 4FF07E52 		mov	r2, #1065353216
 24399 0064 C3F8D822 		str	r2, [r3, #728]	@ float
3401:..\src/command_processing.c **** }
 24400              		.loc 1 3401 0
 24401 0068 00BF     		nop
 24402 006a BD46     		mov	sp, r7
 24403              		.cfi_def_cfa_register 13
 24404              		@ sp needed
 24405 006c 80BC     		pop	{r7}
 24406              		.cfi_restore 7
 24407              		.cfi_def_cfa_offset 0
 24408 006e 7047     		bx	lr
 24409              	.L921:
 24410              		.align	2
 24411              	.L920:
 24412 0070 00000000 		.word	g_mem
 24413 0074 0000C841 		.word	1103626240
 24414              		.cfi_endproc
 24415              	.LFE92:
 24416              		.size	memInit_AirChambersFb, .-memInit_AirChambersFb
 24417              		.section	.text.memInit_OtbkActWristMs,"ax",%progbits
 24418              		.align	2
 24419              		.global	memInit_OtbkActWristMs
 24420              		.thumb
 24421              		.thumb_func
 24422              		.type	memInit_OtbkActWristMs, %function
 24423              	memInit_OtbkActWristMs:
 24424              	.LFB93:
3402:..\src/command_processing.c **** 
3403:..\src/command_processing.c **** //==============================================================================
3404:..\src/command_processing.c **** //                                   MEMORY INIT OTTOBOCK ACTIVE WRIST MASTER FB
3405:..\src/command_processing.c **** //==============================================================================
3406:..\src/command_processing.c **** void memInit_OtbkActWristMs(void)
3407:..\src/command_processing.c **** {
 24425              		.loc 1 3407 0
 24426              		.cfi_startproc
 24427              		@ args = 0, pretend = 0, frame = 0
 24428              		@ frame_needed = 1, uses_anonymous_args = 0
 24429              		@ link register save eliminated.
 24430 0000 80B4     		push	{r7}
 24431              		.cfi_def_cfa_offset 4
 24432              		.cfi_offset 7, -4
 24433 0002 00AF     		add	r7, sp, #0
 24434              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 535


3408:..\src/command_processing.c ****     // Default configuration with Ottobock Active Wrist feedback
3409:..\src/command_processing.c ****     g_mem.dev.dev_type  = OTBK_ACT_WRIST_MS;
 24435              		.loc 1 3409 0
 24436 0004 294B     		ldr	r3, .L923
 24437 0006 0322     		movs	r2, #3
 24438 0008 83F8AC20 		strb	r2, [r3, #172]
3410:..\src/command_processing.c ****     g_mem.dev.right_left = LEFT_HAND;
 24439              		.loc 1 3410 0
 24440 000c 274B     		ldr	r3, .L923
 24441 000e 0122     		movs	r2, #1
 24442 0010 83F8A720 		strb	r2, [r3, #167]
3411:..\src/command_processing.c ****     
3412:..\src/command_processing.c ****     g_mem.motor[0].control_mode = CONTROL_PWM;
 24443              		.loc 1 3412 0
 24444 0014 254B     		ldr	r3, .L923
 24445 0016 0122     		movs	r2, #1
 24446 0018 83F80F21 		strb	r2, [r3, #271]
3413:..\src/command_processing.c ****     g_mem.motor[0].pwm_rate_limiter = 100;
 24447              		.loc 1 3413 0
 24448 001c 234B     		ldr	r3, .L923
 24449 001e 6422     		movs	r2, #100
 24450 0020 83F81121 		strb	r2, [r3, #273]
3414:..\src/command_processing.c ****     g_mem.motor[0].not_revers_motor_flag = FALSE;
 24451              		.loc 1 3414 0
 24452 0024 214B     		ldr	r3, .L923
 24453 0026 0022     		movs	r2, #0
 24454 0028 83F81221 		strb	r2, [r3, #274]
3415:..\src/command_processing.c ****     
3416:..\src/command_processing.c ****     // Drive slave with reference generated on second motor index
3417:..\src/command_processing.c ****     // Default slave configuration for SoftHand 3.0            
3418:..\src/command_processing.c ****     g_mem.motor[1].input_mode = INPUT_MODE_EMG_FCFS;
 24455              		.loc 1 3418 0
 24456 002c 1F4B     		ldr	r3, .L923
 24457 002e 0422     		movs	r2, #4
 24458 0030 83F87E21 		strb	r2, [r3, #382]
3419:..\src/command_processing.c ****     g_mem.motor[1].encoder_line  = g_mem.dev.right_left;
 24459              		.loc 1 3419 0
 24460 0034 1D4B     		ldr	r3, .L923
 24461 0036 93F8A720 		ldrb	r2, [r3, #167]	@ zero_extendqisi2
 24462 003a 1C4B     		ldr	r3, .L923
 24463 003c 83F88021 		strb	r2, [r3, #384]
3420:..\src/command_processing.c ****     g_mem.motor[1].pwm_rate_limiter = PWM_RATE_LIMITER_MAX;
 24464              		.loc 1 3420 0
 24465 0040 1A4B     		ldr	r3, .L923
 24466 0042 0122     		movs	r2, #1
 24467 0044 83F88121 		strb	r2, [r3, #385]
3421:..\src/command_processing.c ****     g_mem.motor[1].not_revers_motor_flag = FALSE;       // False, because it is important only to c
 24468              		.loc 1 3421 0
 24469 0048 184B     		ldr	r3, .L923
 24470 004a 0022     		movs	r2, #0
 24471 004c 83F88221 		strb	r2, [r3, #386]
3422:..\src/command_processing.c ****     g_mem.motor[1].pos_lim_inf = 0;
 24472              		.loc 1 3422 0
 24473 0050 164B     		ldr	r3, .L923
 24474 0052 0022     		movs	r2, #0
 24475 0054 C3F85421 		str	r2, [r3, #340]
3423:..\src/command_processing.c ****     g_mem.motor[1].pos_lim_sup = (int32)16000 << g_mem.enc[g_mem.motor[1].encoder_line].res[0];
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 536


 24476              		.loc 1 3423 0
 24477 0058 144B     		ldr	r3, .L923
 24478 005a 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 24479 005e 1946     		mov	r1, r3
 24480 0060 124A     		ldr	r2, .L923
 24481 0062 0B46     		mov	r3, r1
 24482 0064 5B00     		lsls	r3, r3, #1
 24483 0066 0B44     		add	r3, r3, r1
 24484 0068 1B01     		lsls	r3, r3, #4
 24485 006a 1344     		add	r3, r3, r2
 24486 006c 03F29513 		addw	r3, r3, #405
 24487 0070 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 24488 0072 1A46     		mov	r2, r3
 24489 0074 4FF47A53 		mov	r3, #16000
 24490 0078 9340     		lsls	r3, r3, r2
 24491 007a 0C4A     		ldr	r2, .L923
 24492 007c C2F85831 		str	r3, [r2, #344]
3424:..\src/command_processing.c ****     
3425:..\src/command_processing.c ****     // WR STRUCT
3426:..\src/command_processing.c ****     g_mem.WR.activation_mode = 0;                // Default Fast:wrist/syn2, Slow:hand/syn1
 24493              		.loc 1 3426 0
 24494 0080 0A4B     		ldr	r3, .L923
 24495 0082 0022     		movs	r2, #0
 24496 0084 83F8E022 		strb	r2, [r3, #736]
3427:..\src/command_processing.c ****     g_mem.WR.fast_act_threshold[0] = 800;
 24497              		.loc 1 3427 0
 24498 0088 084B     		ldr	r3, .L923
 24499 008a 4FF44872 		mov	r2, #800
 24500 008e A3F8E222 		strh	r2, [r3, #738]	@ movhi
3428:..\src/command_processing.c ****     g_mem.WR.fast_act_threshold[1] = 800;
 24501              		.loc 1 3428 0
 24502 0092 064B     		ldr	r3, .L923
 24503 0094 4FF44872 		mov	r2, #800
 24504 0098 A3F8E422 		strh	r2, [r3, #740]	@ movhi
3429:..\src/command_processing.c ****     g_mem.WR.wrist_direction_association = 0;   // Default Close:CW, Open:CCW
 24505              		.loc 1 3429 0
 24506 009c 034B     		ldr	r3, .L923
 24507 009e 0022     		movs	r2, #0
 24508 00a0 83F8E622 		strb	r2, [r3, #742]
3430:..\src/command_processing.c **** }
 24509              		.loc 1 3430 0
 24510 00a4 00BF     		nop
 24511 00a6 BD46     		mov	sp, r7
 24512              		.cfi_def_cfa_register 13
 24513              		@ sp needed
 24514 00a8 80BC     		pop	{r7}
 24515              		.cfi_restore 7
 24516              		.cfi_def_cfa_offset 0
 24517 00aa 7047     		bx	lr
 24518              	.L924:
 24519              		.align	2
 24520              	.L923:
 24521 00ac 00000000 		.word	g_mem
 24522              		.cfi_endproc
 24523              	.LFE93:
 24524              		.size	memInit_OtbkActWristMs, .-memInit_OtbkActWristMs
 24525              		.section	.text.cmd_get_measurements,"ax",%progbits
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 537


 24526              		.align	2
 24527              		.global	cmd_get_measurements
 24528              		.thumb
 24529              		.thumb_func
 24530              		.type	cmd_get_measurements, %function
 24531              	cmd_get_measurements:
 24532              	.LFB94:
3431:..\src/command_processing.c **** 
3432:..\src/command_processing.c **** //==============================================================================
3433:..\src/command_processing.c **** //                                                    ROUTINE INTERRUPT FUNCTION
3434:..\src/command_processing.c **** //==============================================================================
3435:..\src/command_processing.c **** /**
3436:..\src/command_processing.c **** * Bunch of functions used on request from UART communication
3437:..\src/command_processing.c **** **/
3438:..\src/command_processing.c **** 
3439:..\src/command_processing.c **** void cmd_get_measurements(){
 24533              		.loc 1 3439 0
 24534              		.cfi_startproc
 24535              		@ args = 0, pretend = 0, frame = 16
 24536              		@ frame_needed = 1, uses_anonymous_args = 0
 24537 0000 90B5     		push	{r4, r7, lr}
 24538              		.cfi_def_cfa_offset 12
 24539              		.cfi_offset 4, -12
 24540              		.cfi_offset 7, -8
 24541              		.cfi_offset 14, -4
 24542 0002 85B0     		sub	sp, sp, #20
 24543              		.cfi_def_cfa_offset 32
 24544 0004 00AF     		add	r7, sp, #0
 24545              		.cfi_def_cfa_register 7
3440:..\src/command_processing.c ****  
3441:..\src/command_processing.c ****     uint8 CYDATA index;
3442:..\src/command_processing.c ****     int16 aux_int16;
3443:..\src/command_processing.c ****     // Packet: header + measure(int16) + crc
3444:..\src/command_processing.c ****     
3445:..\src/command_processing.c ****     uint8 packet_data[8]; 
3446:..\src/command_processing.c ****     
3447:..\src/command_processing.c ****     //Header package
3448:..\src/command_processing.c ****     packet_data[0] = CMD_GET_MEASUREMENTS;   
 24546              		.loc 1 3448 0
 24547 0006 8423     		movs	r3, #132
 24548 0008 3B71     		strb	r3, [r7, #4]
3449:..\src/command_processing.c ****     
3450:..\src/command_processing.c ****     for (index = NUM_OF_SENSORS; index--;) {
 24549              		.loc 1 3450 0
 24550 000a 0323     		movs	r3, #3
 24551 000c FB73     		strb	r3, [r7, #15]
 24552 000e 38E0     		b	.L926
 24553              	.L927:
3451:..\src/command_processing.c ****         aux_int16 = (int16)(g_measOld[g_mem.motor[0].encoder_line].pos[index] >> g_mem.enc[g_mem.mo
 24554              		.loc 1 3451 0
 24555 0010 434B     		ldr	r3, .L929
 24556 0012 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 24557 0016 1A46     		mov	r2, r3
 24558 0018 F97B     		ldrb	r1, [r7, #15]	@ zero_extendqisi2
 24559 001a 4248     		ldr	r0, .L929+4
 24560 001c 1346     		mov	r3, r2
 24561 001e 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 538


 24562 0020 1344     		add	r3, r3, r2
 24563 0022 9B00     		lsls	r3, r3, #2
 24564 0024 1344     		add	r3, r3, r2
 24565 0026 0B44     		add	r3, r3, r1
 24566 0028 50F82320 		ldr	r2, [r0, r3, lsl #2]
 24567 002c 3C4B     		ldr	r3, .L929
 24568 002e 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 24569 0032 1C46     		mov	r4, r3
 24570 0034 F97B     		ldrb	r1, [r7, #15]	@ zero_extendqisi2
 24571 0036 3A48     		ldr	r0, .L929
 24572 0038 2346     		mov	r3, r4
 24573 003a 5B00     		lsls	r3, r3, #1
 24574 003c 2344     		add	r3, r3, r4
 24575 003e 1B01     		lsls	r3, r3, #4
 24576 0040 0344     		add	r3, r3, r0
 24577 0042 0B44     		add	r3, r3, r1
 24578 0044 03F29513 		addw	r3, r3, #405
 24579 0048 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 24580 004a 42FA03F3 		asr	r3, r2, r3
 24581 004e 1BB2     		sxth	r3, r3
 24582 0050 BB81     		strh	r3, [r7, #12]	@ movhi
3452:..\src/command_processing.c ****         packet_data[(index << 1) + 2] = ((char*)(&aux_int16))[0];
 24583              		.loc 1 3452 0
 24584 0052 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 24585 0054 5B00     		lsls	r3, r3, #1
 24586 0056 0233     		adds	r3, r3, #2
 24587 0058 07F10C02 		add	r2, r7, #12
 24588 005c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 24589 005e 07F11001 		add	r1, r7, #16
 24590 0062 0B44     		add	r3, r3, r1
 24591 0064 03F80C2C 		strb	r2, [r3, #-12]
3453:..\src/command_processing.c ****         packet_data[(index << 1) + 1] = ((char*)(&aux_int16))[1];
 24592              		.loc 1 3453 0
 24593 0068 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 24594 006a 5B00     		lsls	r3, r3, #1
 24595 006c 5A1C     		adds	r2, r3, #1
 24596 006e 07F10C03 		add	r3, r7, #12
 24597 0072 0133     		adds	r3, r3, #1
 24598 0074 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 24599 0076 07F11003 		add	r3, r7, #16
 24600 007a 1344     		add	r3, r3, r2
 24601 007c 0A46     		mov	r2, r1
 24602 007e 03F80C2C 		strb	r2, [r3, #-12]
 24603              	.L926:
3450:..\src/command_processing.c ****         aux_int16 = (int16)(g_measOld[g_mem.motor[0].encoder_line].pos[index] >> g_mem.enc[g_mem.mo
 24604              		.loc 1 3450 0 discriminator 1
 24605 0082 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 24606 0084 5A1E     		subs	r2, r3, #1
 24607 0086 FA73     		strb	r2, [r7, #15]
 24608 0088 002B     		cmp	r3, #0
 24609 008a C1D1     		bne	.L927
3454:..\src/command_processing.c ****     }
3455:..\src/command_processing.c **** 
3456:..\src/command_processing.c ****     if (g_mem.dev.use_2nd_motor_flag == TRUE){
 24610              		.loc 1 3456 0
 24611 008c 244B     		ldr	r3, .L929
 24612 008e 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 539


 24613 0092 012B     		cmp	r3, #1
 24614 0094 34D1     		bne	.L928
3457:..\src/command_processing.c ****         //Overwrite only second measure with first encoder on second motor line (just to have a mea
3458:..\src/command_processing.c ****         index = 1;
 24615              		.loc 1 3458 0
 24616 0096 0123     		movs	r3, #1
 24617 0098 FB73     		strb	r3, [r7, #15]
3459:..\src/command_processing.c ****         aux_int16 = (int16)(g_measOld[g_mem.motor[1].encoder_line].pos[0] >> g_mem.enc[g_mem.motor[
 24618              		.loc 1 3459 0
 24619 009a 214B     		ldr	r3, .L929
 24620 009c 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 24621 00a0 1946     		mov	r1, r3
 24622 00a2 204A     		ldr	r2, .L929+4
 24623 00a4 3423     		movs	r3, #52
 24624 00a6 03FB01F3 		mul	r3, r3, r1
 24625 00aa 1344     		add	r3, r3, r2
 24626 00ac 1A68     		ldr	r2, [r3]
 24627 00ae 1C4B     		ldr	r3, .L929
 24628 00b0 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 24629 00b4 1846     		mov	r0, r3
 24630 00b6 1A49     		ldr	r1, .L929
 24631 00b8 0346     		mov	r3, r0
 24632 00ba 5B00     		lsls	r3, r3, #1
 24633 00bc 0344     		add	r3, r3, r0
 24634 00be 1B01     		lsls	r3, r3, #4
 24635 00c0 0B44     		add	r3, r3, r1
 24636 00c2 03F29513 		addw	r3, r3, #405
 24637 00c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 24638 00c8 42FA03F3 		asr	r3, r2, r3
 24639 00cc 1BB2     		sxth	r3, r3
 24640 00ce BB81     		strh	r3, [r7, #12]	@ movhi
3460:..\src/command_processing.c ****         packet_data[(index << 1) + 2] = ((char*)(&aux_int16))[0];
 24641              		.loc 1 3460 0
 24642 00d0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 24643 00d2 5B00     		lsls	r3, r3, #1
 24644 00d4 0233     		adds	r3, r3, #2
 24645 00d6 07F10C02 		add	r2, r7, #12
 24646 00da 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 24647 00dc 07F11001 		add	r1, r7, #16
 24648 00e0 0B44     		add	r3, r3, r1
 24649 00e2 03F80C2C 		strb	r2, [r3, #-12]
3461:..\src/command_processing.c ****         packet_data[(index << 1) + 1] = ((char*)(&aux_int16))[1];
 24650              		.loc 1 3461 0
 24651 00e6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 24652 00e8 5B00     		lsls	r3, r3, #1
 24653 00ea 5A1C     		adds	r2, r3, #1
 24654 00ec 07F10C03 		add	r3, r7, #12
 24655 00f0 0133     		adds	r3, r3, #1
 24656 00f2 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 24657 00f4 07F11003 		add	r3, r7, #16
 24658 00f8 1344     		add	r3, r3, r2
 24659 00fa 0A46     		mov	r2, r1
 24660 00fc 03F80C2C 		strb	r2, [r3, #-12]
 24661              	.L928:
3462:..\src/command_processing.c ****     }
3463:..\src/command_processing.c ****     
3464:..\src/command_processing.c ****     // Calculate Checksum and send message to UART 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 540


3465:..\src/command_processing.c **** 
3466:..\src/command_processing.c ****     packet_data[7] = LCRChecksum (packet_data, 7);
 24662              		.loc 1 3466 0
 24663 0100 3B1D     		adds	r3, r7, #4
 24664 0102 0721     		movs	r1, #7
 24665 0104 1846     		mov	r0, r3
 24666 0106 FFF7FEFF 		bl	LCRChecksum
 24667 010a 0346     		mov	r3, r0
 24668 010c FB72     		strb	r3, [r7, #11]
3467:..\src/command_processing.c **** 
3468:..\src/command_processing.c ****     commWrite(packet_data, 8);
 24669              		.loc 1 3468 0
 24670 010e 3B1D     		adds	r3, r7, #4
 24671 0110 0821     		movs	r1, #8
 24672 0112 1846     		mov	r0, r3
 24673 0114 FFF7FEFF 		bl	commWrite
3469:..\src/command_processing.c ****    
3470:..\src/command_processing.c **** }
 24674              		.loc 1 3470 0
 24675 0118 00BF     		nop
 24676 011a 1437     		adds	r7, r7, #20
 24677              		.cfi_def_cfa_offset 12
 24678 011c BD46     		mov	sp, r7
 24679              		.cfi_def_cfa_register 13
 24680              		@ sp needed
 24681 011e 90BD     		pop	{r4, r7, pc}
 24682              	.L930:
 24683              		.align	2
 24684              	.L929:
 24685 0120 00000000 		.word	g_mem
 24686 0124 00000000 		.word	g_measOld
 24687              		.cfi_endproc
 24688              	.LFE94:
 24689              		.size	cmd_get_measurements, .-cmd_get_measurements
 24690              		.section	.text.cmd_get_velocities,"ax",%progbits
 24691              		.align	2
 24692              		.global	cmd_get_velocities
 24693              		.thumb
 24694              		.thumb_func
 24695              		.type	cmd_get_velocities, %function
 24696              	cmd_get_velocities:
 24697              	.LFB95:
3471:..\src/command_processing.c **** 
3472:..\src/command_processing.c **** void cmd_get_velocities(){
 24698              		.loc 1 3472 0
 24699              		.cfi_startproc
 24700              		@ args = 0, pretend = 0, frame = 16
 24701              		@ frame_needed = 1, uses_anonymous_args = 0
 24702 0000 90B5     		push	{r4, r7, lr}
 24703              		.cfi_def_cfa_offset 12
 24704              		.cfi_offset 4, -12
 24705              		.cfi_offset 7, -8
 24706              		.cfi_offset 14, -4
 24707 0002 85B0     		sub	sp, sp, #20
 24708              		.cfi_def_cfa_offset 32
 24709 0004 00AF     		add	r7, sp, #0
 24710              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 541


3473:..\src/command_processing.c ****  
3474:..\src/command_processing.c ****     uint8 CYDATA index;
3475:..\src/command_processing.c ****     int16 aux_int16;
3476:..\src/command_processing.c ****    
3477:..\src/command_processing.c ****     // Packet: header + measure(int16) + crc
3478:..\src/command_processing.c ****     
3479:..\src/command_processing.c ****     uint8 packet_data[8]; 
3480:..\src/command_processing.c ****     
3481:..\src/command_processing.c ****     //Header package
3482:..\src/command_processing.c ****     packet_data[0] = CMD_GET_VELOCITIES;
 24711              		.loc 1 3482 0
 24712 0006 8923     		movs	r3, #137
 24713 0008 3B71     		strb	r3, [r7, #4]
3483:..\src/command_processing.c ****     
3484:..\src/command_processing.c ****     for (index = NUM_OF_SENSORS; index--;) {
 24714              		.loc 1 3484 0
 24715 000a 0323     		movs	r3, #3
 24716 000c FB73     		strb	r3, [r7, #15]
 24717 000e 3AE0     		b	.L932
 24718              	.L933:
3485:..\src/command_processing.c ****         aux_int16 = (int16)(g_measOld[g_mem.motor[0].encoder_line].vel[index] >> g_mem.enc[g_mem.mo
 24719              		.loc 1 3485 0
 24720 0010 274B     		ldr	r3, .L934
 24721 0012 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 24722 0016 1A46     		mov	r2, r3
 24723 0018 F97B     		ldrb	r1, [r7, #15]	@ zero_extendqisi2
 24724 001a 2648     		ldr	r0, .L934+4
 24725 001c 1346     		mov	r3, r2
 24726 001e 5B00     		lsls	r3, r3, #1
 24727 0020 1344     		add	r3, r3, r2
 24728 0022 9B00     		lsls	r3, r3, #2
 24729 0024 1344     		add	r3, r3, r2
 24730 0026 0B44     		add	r3, r3, r1
 24731 0028 0633     		adds	r3, r3, #6
 24732 002a 9B00     		lsls	r3, r3, #2
 24733 002c 0344     		add	r3, r3, r0
 24734 002e 5A68     		ldr	r2, [r3, #4]
 24735 0030 1F4B     		ldr	r3, .L934
 24736 0032 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 24737 0036 1C46     		mov	r4, r3
 24738 0038 F97B     		ldrb	r1, [r7, #15]	@ zero_extendqisi2
 24739 003a 1D48     		ldr	r0, .L934
 24740 003c 2346     		mov	r3, r4
 24741 003e 5B00     		lsls	r3, r3, #1
 24742 0040 2344     		add	r3, r3, r4
 24743 0042 1B01     		lsls	r3, r3, #4
 24744 0044 0344     		add	r3, r3, r0
 24745 0046 0B44     		add	r3, r3, r1
 24746 0048 03F29513 		addw	r3, r3, #405
 24747 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 24748 004e 42FA03F3 		asr	r3, r2, r3
 24749 0052 1BB2     		sxth	r3, r3
 24750 0054 BB81     		strh	r3, [r7, #12]	@ movhi
3486:..\src/command_processing.c ****         packet_data[(index << 1) + 2] = ((char*)(&aux_int16))[0];
 24751              		.loc 1 3486 0
 24752 0056 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 24753 0058 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 542


 24754 005a 0233     		adds	r3, r3, #2
 24755 005c 07F10C02 		add	r2, r7, #12
 24756 0060 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 24757 0062 07F11001 		add	r1, r7, #16
 24758 0066 0B44     		add	r3, r3, r1
 24759 0068 03F80C2C 		strb	r2, [r3, #-12]
3487:..\src/command_processing.c ****         packet_data[(index << 1) + 1] = ((char*)(&aux_int16))[1];
 24760              		.loc 1 3487 0
 24761 006c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 24762 006e 5B00     		lsls	r3, r3, #1
 24763 0070 5A1C     		adds	r2, r3, #1
 24764 0072 07F10C03 		add	r3, r7, #12
 24765 0076 0133     		adds	r3, r3, #1
 24766 0078 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 24767 007a 07F11003 		add	r3, r7, #16
 24768 007e 1344     		add	r3, r3, r2
 24769 0080 0A46     		mov	r2, r1
 24770 0082 03F80C2C 		strb	r2, [r3, #-12]
 24771              	.L932:
3484:..\src/command_processing.c ****         aux_int16 = (int16)(g_measOld[g_mem.motor[0].encoder_line].vel[index] >> g_mem.enc[g_mem.mo
 24772              		.loc 1 3484 0 discriminator 1
 24773 0086 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 24774 0088 5A1E     		subs	r2, r3, #1
 24775 008a FA73     		strb	r2, [r7, #15]
 24776 008c 002B     		cmp	r3, #0
 24777 008e BFD1     		bne	.L933
3488:..\src/command_processing.c ****     }
3489:..\src/command_processing.c ****             
3490:..\src/command_processing.c ****     // Calculate Checksum and send message to UART 
3491:..\src/command_processing.c **** 
3492:..\src/command_processing.c ****     packet_data[7] = LCRChecksum (packet_data, 7);
 24778              		.loc 1 3492 0
 24779 0090 3B1D     		adds	r3, r7, #4
 24780 0092 0721     		movs	r1, #7
 24781 0094 1846     		mov	r0, r3
 24782 0096 FFF7FEFF 		bl	LCRChecksum
 24783 009a 0346     		mov	r3, r0
 24784 009c FB72     		strb	r3, [r7, #11]
3493:..\src/command_processing.c **** 
3494:..\src/command_processing.c ****     commWrite(packet_data, 8); 
 24785              		.loc 1 3494 0
 24786 009e 3B1D     		adds	r3, r7, #4
 24787 00a0 0821     		movs	r1, #8
 24788 00a2 1846     		mov	r0, r3
 24789 00a4 FFF7FEFF 		bl	commWrite
3495:..\src/command_processing.c **** }
 24790              		.loc 1 3495 0
 24791 00a8 00BF     		nop
 24792 00aa 1437     		adds	r7, r7, #20
 24793              		.cfi_def_cfa_offset 12
 24794 00ac BD46     		mov	sp, r7
 24795              		.cfi_def_cfa_register 13
 24796              		@ sp needed
 24797 00ae 90BD     		pop	{r4, r7, pc}
 24798              	.L935:
 24799              		.align	2
 24800              	.L934:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 543


 24801 00b0 00000000 		.word	g_mem
 24802 00b4 00000000 		.word	g_measOld
 24803              		.cfi_endproc
 24804              	.LFE95:
 24805              		.size	cmd_get_velocities, .-cmd_get_velocities
 24806              		.section	.text.cmd_get_accelerations,"ax",%progbits
 24807              		.align	2
 24808              		.global	cmd_get_accelerations
 24809              		.thumb
 24810              		.thumb_func
 24811              		.type	cmd_get_accelerations, %function
 24812              	cmd_get_accelerations:
 24813              	.LFB96:
3496:..\src/command_processing.c **** 
3497:..\src/command_processing.c **** void cmd_get_accelerations(){
 24814              		.loc 1 3497 0
 24815              		.cfi_startproc
 24816              		@ args = 0, pretend = 0, frame = 16
 24817              		@ frame_needed = 1, uses_anonymous_args = 0
 24818 0000 90B5     		push	{r4, r7, lr}
 24819              		.cfi_def_cfa_offset 12
 24820              		.cfi_offset 4, -12
 24821              		.cfi_offset 7, -8
 24822              		.cfi_offset 14, -4
 24823 0002 85B0     		sub	sp, sp, #20
 24824              		.cfi_def_cfa_offset 32
 24825 0004 00AF     		add	r7, sp, #0
 24826              		.cfi_def_cfa_register 7
3498:..\src/command_processing.c ****  
3499:..\src/command_processing.c ****     uint8 CYDATA index;
3500:..\src/command_processing.c ****     int16 aux_int16;
3501:..\src/command_processing.c ****     
3502:..\src/command_processing.c ****     // Packet: header + measure(int16) + crc
3503:..\src/command_processing.c ****     
3504:..\src/command_processing.c ****     uint8 packet_data[8]; 
3505:..\src/command_processing.c ****     
3506:..\src/command_processing.c ****     //Header package
3507:..\src/command_processing.c ****     packet_data[0] = CMD_GET_ACCEL;   
 24827              		.loc 1 3507 0
 24828 0006 8B23     		movs	r3, #139
 24829 0008 3B71     		strb	r3, [r7, #4]
3508:..\src/command_processing.c ****     
3509:..\src/command_processing.c ****     for (index = NUM_OF_SENSORS; index--;) {
 24830              		.loc 1 3509 0
 24831 000a 0323     		movs	r3, #3
 24832 000c FB73     		strb	r3, [r7, #15]
 24833 000e 39E0     		b	.L937
 24834              	.L938:
3510:..\src/command_processing.c ****         aux_int16 = (int16)(g_measOld[g_mem.motor[0].encoder_line].acc[index] >> g_mem.enc[g_mem.mo
 24835              		.loc 1 3510 0
 24836 0010 274B     		ldr	r3, .L939
 24837 0012 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 24838 0016 1A46     		mov	r2, r3
 24839 0018 F97B     		ldrb	r1, [r7, #15]	@ zero_extendqisi2
 24840 001a 2648     		ldr	r0, .L939+4
 24841 001c 1346     		mov	r3, r2
 24842 001e 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 544


 24843 0020 1344     		add	r3, r3, r2
 24844 0022 9B00     		lsls	r3, r3, #2
 24845 0024 1344     		add	r3, r3, r2
 24846 0026 0B44     		add	r3, r3, r1
 24847 0028 0A33     		adds	r3, r3, #10
 24848 002a 50F82320 		ldr	r2, [r0, r3, lsl #2]
 24849 002e 204B     		ldr	r3, .L939
 24850 0030 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 24851 0034 1C46     		mov	r4, r3
 24852 0036 F97B     		ldrb	r1, [r7, #15]	@ zero_extendqisi2
 24853 0038 1D48     		ldr	r0, .L939
 24854 003a 2346     		mov	r3, r4
 24855 003c 5B00     		lsls	r3, r3, #1
 24856 003e 2344     		add	r3, r3, r4
 24857 0040 1B01     		lsls	r3, r3, #4
 24858 0042 0344     		add	r3, r3, r0
 24859 0044 0B44     		add	r3, r3, r1
 24860 0046 03F29513 		addw	r3, r3, #405
 24861 004a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 24862 004c 42FA03F3 		asr	r3, r2, r3
 24863 0050 1BB2     		sxth	r3, r3
 24864 0052 BB81     		strh	r3, [r7, #12]	@ movhi
3511:..\src/command_processing.c ****         packet_data[(index << 1) + 2] = ((char*)(&aux_int16))[0];
 24865              		.loc 1 3511 0
 24866 0054 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 24867 0056 5B00     		lsls	r3, r3, #1
 24868 0058 0233     		adds	r3, r3, #2
 24869 005a 07F10C02 		add	r2, r7, #12
 24870 005e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 24871 0060 07F11001 		add	r1, r7, #16
 24872 0064 0B44     		add	r3, r3, r1
 24873 0066 03F80C2C 		strb	r2, [r3, #-12]
3512:..\src/command_processing.c ****         packet_data[(index << 1) + 1] = ((char*)(&aux_int16))[1];
 24874              		.loc 1 3512 0
 24875 006a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 24876 006c 5B00     		lsls	r3, r3, #1
 24877 006e 5A1C     		adds	r2, r3, #1
 24878 0070 07F10C03 		add	r3, r7, #12
 24879 0074 0133     		adds	r3, r3, #1
 24880 0076 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 24881 0078 07F11003 		add	r3, r7, #16
 24882 007c 1344     		add	r3, r3, r2
 24883 007e 0A46     		mov	r2, r1
 24884 0080 03F80C2C 		strb	r2, [r3, #-12]
 24885              	.L937:
3509:..\src/command_processing.c ****         aux_int16 = (int16)(g_measOld[g_mem.motor[0].encoder_line].acc[index] >> g_mem.enc[g_mem.mo
 24886              		.loc 1 3509 0 discriminator 1
 24887 0084 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 24888 0086 5A1E     		subs	r2, r3, #1
 24889 0088 FA73     		strb	r2, [r7, #15]
 24890 008a 002B     		cmp	r3, #0
 24891 008c C0D1     		bne	.L938
3513:..\src/command_processing.c ****     }
3514:..\src/command_processing.c ****     
3515:..\src/command_processing.c ****     // Calculate Checksum and send message to UART 
3516:..\src/command_processing.c **** 
3517:..\src/command_processing.c ****     packet_data[7] = LCRChecksum (packet_data, 7);
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 545


 24892              		.loc 1 3517 0
 24893 008e 3B1D     		adds	r3, r7, #4
 24894 0090 0721     		movs	r1, #7
 24895 0092 1846     		mov	r0, r3
 24896 0094 FFF7FEFF 		bl	LCRChecksum
 24897 0098 0346     		mov	r3, r0
 24898 009a FB72     		strb	r3, [r7, #11]
3518:..\src/command_processing.c **** 
3519:..\src/command_processing.c ****     commWrite(packet_data, 8); 
 24899              		.loc 1 3519 0
 24900 009c 3B1D     		adds	r3, r7, #4
 24901 009e 0821     		movs	r1, #8
 24902 00a0 1846     		mov	r0, r3
 24903 00a2 FFF7FEFF 		bl	commWrite
3520:..\src/command_processing.c **** }
 24904              		.loc 1 3520 0
 24905 00a6 00BF     		nop
 24906 00a8 1437     		adds	r7, r7, #20
 24907              		.cfi_def_cfa_offset 12
 24908 00aa BD46     		mov	sp, r7
 24909              		.cfi_def_cfa_register 13
 24910              		@ sp needed
 24911 00ac 90BD     		pop	{r4, r7, pc}
 24912              	.L940:
 24913 00ae 00BF     		.align	2
 24914              	.L939:
 24915 00b0 00000000 		.word	g_mem
 24916 00b4 00000000 		.word	g_measOld
 24917              		.cfi_endproc
 24918              	.LFE96:
 24919              		.size	cmd_get_accelerations, .-cmd_get_accelerations
 24920              		.section	.text.cmd_get_joystick,"ax",%progbits
 24921              		.align	2
 24922              		.global	cmd_get_joystick
 24923              		.thumb
 24924              		.thumb_func
 24925              		.type	cmd_get_joystick, %function
 24926              	cmd_get_joystick:
 24927              	.LFB97:
3521:..\src/command_processing.c **** 
3522:..\src/command_processing.c **** void cmd_get_joystick() {
 24928              		.loc 1 3522 0
 24929              		.cfi_startproc
 24930              		@ args = 0, pretend = 0, frame = 8
 24931              		@ frame_needed = 1, uses_anonymous_args = 0
 24932 0000 80B5     		push	{r7, lr}
 24933              		.cfi_def_cfa_offset 8
 24934              		.cfi_offset 7, -8
 24935              		.cfi_offset 14, -4
 24936 0002 82B0     		sub	sp, sp, #8
 24937              		.cfi_def_cfa_offset 16
 24938 0004 00AF     		add	r7, sp, #0
 24939              		.cfi_def_cfa_register 7
3523:..\src/command_processing.c ****  
3524:..\src/command_processing.c ****     int16 aux_int16;
3525:..\src/command_processing.c ****     
3526:..\src/command_processing.c ****     // Packet: header + measure(int16) + crc
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 546


3527:..\src/command_processing.c ****     
3528:..\src/command_processing.c ****     uint8 packet_data[6];
3529:..\src/command_processing.c ****     
3530:..\src/command_processing.c ****     // Header        
3531:..\src/command_processing.c ****     packet_data[0] = CMD_GET_JOYSTICK;
 24940              		.loc 1 3531 0
 24941 0006 9223     		movs	r3, #146
 24942 0008 3B70     		strb	r3, [r7]
3532:..\src/command_processing.c ****     
3533:..\src/command_processing.c ****     aux_int16 = (int16) g_adc_measOld.joystick[0];
 24943              		.loc 1 3533 0
 24944 000a 134B     		ldr	r3, .L942
 24945 000c 1B6A     		ldr	r3, [r3, #32]
 24946 000e 1BB2     		sxth	r3, r3
 24947 0010 FB80     		strh	r3, [r7, #6]	@ movhi
3534:..\src/command_processing.c ****     packet_data[2] = ((char*)(&aux_int16))[0];
 24948              		.loc 1 3534 0
 24949 0012 BB1D     		adds	r3, r7, #6
 24950 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 24951 0016 BB70     		strb	r3, [r7, #2]
3535:..\src/command_processing.c ****     packet_data[1] = ((char*)(&aux_int16))[1];
 24952              		.loc 1 3535 0
 24953 0018 BB1D     		adds	r3, r7, #6
 24954 001a 0133     		adds	r3, r3, #1
 24955 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 24956 001e 7B70     		strb	r3, [r7, #1]
3536:..\src/command_processing.c ****     
3537:..\src/command_processing.c ****     aux_int16 = (int16) g_adc_measOld.joystick[1];
 24957              		.loc 1 3537 0
 24958 0020 0D4B     		ldr	r3, .L942
 24959 0022 5B6A     		ldr	r3, [r3, #36]
 24960 0024 1BB2     		sxth	r3, r3
 24961 0026 FB80     		strh	r3, [r7, #6]	@ movhi
3538:..\src/command_processing.c ****     packet_data[4] = ((char*)(&aux_int16))[0];
 24962              		.loc 1 3538 0
 24963 0028 BB1D     		adds	r3, r7, #6
 24964 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 24965 002c 3B71     		strb	r3, [r7, #4]
3539:..\src/command_processing.c ****     packet_data[3] = ((char*)(&aux_int16))[1];
 24966              		.loc 1 3539 0
 24967 002e BB1D     		adds	r3, r7, #6
 24968 0030 0133     		adds	r3, r3, #1
 24969 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 24970 0034 FB70     		strb	r3, [r7, #3]
3540:..\src/command_processing.c **** 
3541:..\src/command_processing.c ****     packet_data[5] = LCRChecksum (packet_data, 5);
 24971              		.loc 1 3541 0
 24972 0036 3B46     		mov	r3, r7
 24973 0038 0521     		movs	r1, #5
 24974 003a 1846     		mov	r0, r3
 24975 003c FFF7FEFF 		bl	LCRChecksum
 24976 0040 0346     		mov	r3, r0
 24977 0042 7B71     		strb	r3, [r7, #5]
3542:..\src/command_processing.c **** 
3543:..\src/command_processing.c ****     commWrite(packet_data, 6);
 24978              		.loc 1 3543 0
 24979 0044 3B46     		mov	r3, r7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 547


 24980 0046 0621     		movs	r1, #6
 24981 0048 1846     		mov	r0, r3
 24982 004a FFF7FEFF 		bl	commWrite
3544:..\src/command_processing.c **** }
 24983              		.loc 1 3544 0
 24984 004e 00BF     		nop
 24985 0050 0837     		adds	r7, r7, #8
 24986              		.cfi_def_cfa_offset 8
 24987 0052 BD46     		mov	sp, r7
 24988              		.cfi_def_cfa_register 13
 24989              		@ sp needed
 24990 0054 80BD     		pop	{r7, pc}
 24991              	.L943:
 24992 0056 00BF     		.align	2
 24993              	.L942:
 24994 0058 00000000 		.word	g_adc_measOld
 24995              		.cfi_endproc
 24996              	.LFE97:
 24997              		.size	cmd_get_joystick, .-cmd_get_joystick
 24998              		.section	.text.cmd_set_inputs,"ax",%progbits
 24999              		.align	2
 25000              		.global	cmd_set_inputs
 25001              		.thumb
 25002              		.thumb_func
 25003              		.type	cmd_set_inputs, %function
 25004              	cmd_set_inputs:
 25005              	.LFB98:
3545:..\src/command_processing.c **** 
3546:..\src/command_processing.c **** void cmd_set_inputs(){
 25006              		.loc 1 3546 0
 25007              		.cfi_startproc
 25008              		@ args = 0, pretend = 0, frame = 8
 25009              		@ frame_needed = 1, uses_anonymous_args = 0
 25010              		@ link register save eliminated.
 25011 0000 90B4     		push	{r4, r7}
 25012              		.cfi_def_cfa_offset 8
 25013              		.cfi_offset 4, -8
 25014              		.cfi_offset 7, -4
 25015 0002 82B0     		sub	sp, sp, #8
 25016              		.cfi_def_cfa_offset 16
 25017 0004 00AF     		add	r7, sp, #0
 25018              		.cfi_def_cfa_register 7
3547:..\src/command_processing.c ****     
3548:..\src/command_processing.c ****     // Store position setted in right variables
3549:..\src/command_processing.c ****     int16 aux_int16[NUM_OF_MOTORS];
3550:..\src/command_processing.c ****     static int16 last_aux_int16[NUM_OF_MOTORS];
3551:..\src/command_processing.c ****     
3552:..\src/command_processing.c ****     aux_int16[0] = (int16)(g_rx.buffer[1]<<8 | g_rx.buffer[2]);
 25019              		.loc 1 3552 0
 25020 0006 894B     		ldr	r3, .L958
 25021 0008 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 25022 000a 1B02     		lsls	r3, r3, #8
 25023 000c 1AB2     		sxth	r2, r3
 25024 000e 874B     		ldr	r3, .L958
 25025 0010 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 25026 0012 1BB2     		sxth	r3, r3
 25027 0014 1343     		orrs	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 548


 25028 0016 1BB2     		sxth	r3, r3
 25029 0018 3B80     		strh	r3, [r7]	@ movhi
3553:..\src/command_processing.c ****     aux_int16[1] = (int16)(g_rx.buffer[3]<<8 | g_rx.buffer[4]);
 25030              		.loc 1 3553 0
 25031 001a 844B     		ldr	r3, .L958
 25032 001c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 25033 001e 1B02     		lsls	r3, r3, #8
 25034 0020 1AB2     		sxth	r2, r3
 25035 0022 824B     		ldr	r3, .L958
 25036 0024 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 25037 0026 1BB2     		sxth	r3, r3
 25038 0028 1343     		orrs	r3, r3, r2
 25039 002a 1BB2     		sxth	r3, r3
 25040 002c 7B80     		strh	r3, [r7, #2]	@ movhi
 25041              	.LBB31:
3554:..\src/command_processing.c ****     
3555:..\src/command_processing.c ****     // Check if last command received was the same as this 
3556:..\src/command_processing.c ****     //(Note: last command not last motor reference in g_ref)
3557:..\src/command_processing.c ****     for (uint8 i = 0; i < (1 + c_mem.dev.use_2nd_motor_flag); i++) {
 25042              		.loc 1 3557 0
 25043 002e 0023     		movs	r3, #0
 25044 0030 FB71     		strb	r3, [r7, #7]
 25045 0032 1DE0     		b	.L945
 25046              	.L947:
3558:..\src/command_processing.c ****        if(last_aux_int16[i] != aux_int16[i]){
 25047              		.loc 1 3558 0
 25048 0034 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 25049 0036 7E4A     		ldr	r2, .L958+4
 25050 0038 32F91320 		ldrsh	r2, [r2, r3, lsl #1]
 25051 003c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 25052 003e 5B00     		lsls	r3, r3, #1
 25053 0040 07F10801 		add	r1, r7, #8
 25054 0044 0B44     		add	r3, r3, r1
 25055 0046 33F9083C 		ldrsh	r3, [r3, #-8]
 25056 004a 9A42     		cmp	r2, r3
 25057 004c 02D0     		beq	.L946
3559:..\src/command_processing.c ****             change_ext_ref_flag = TRUE;
 25058              		.loc 1 3559 0
 25059 004e 794B     		ldr	r3, .L958+8
 25060 0050 0122     		movs	r2, #1
 25061 0052 1A70     		strb	r2, [r3]
 25062              	.L946:
3560:..\src/command_processing.c ****        }
3561:..\src/command_processing.c ****         // Update last command
3562:..\src/command_processing.c ****        last_aux_int16[i] = aux_int16[i];
 25063              		.loc 1 3562 0 discriminator 2
 25064 0054 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 25065 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 25066 0058 5B00     		lsls	r3, r3, #1
 25067 005a 07F10801 		add	r1, r7, #8
 25068 005e 0B44     		add	r3, r3, r1
 25069 0060 33F9081C 		ldrsh	r1, [r3, #-8]
 25070 0064 724B     		ldr	r3, .L958+4
 25071 0066 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
3557:..\src/command_processing.c ****        if(last_aux_int16[i] != aux_int16[i]){
 25072              		.loc 1 3557 0 discriminator 2
 25073 006a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 549


 25074 006c 0133     		adds	r3, r3, #1
 25075 006e FB71     		strb	r3, [r7, #7]
 25076              	.L945:
3557:..\src/command_processing.c ****        if(last_aux_int16[i] != aux_int16[i]){
 25077              		.loc 1 3557 0 is_stmt 0 discriminator 1
 25078 0070 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 25079 0072 714B     		ldr	r3, .L958+12
 25080 0074 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 25081 0078 0133     		adds	r3, r3, #1
 25082 007a 9A42     		cmp	r2, r3
 25083 007c DADB     		blt	.L947
 25084              	.LBE31:
3563:..\src/command_processing.c ****     }
3564:..\src/command_processing.c ****     
3565:..\src/command_processing.c ****     // Update g_refNew in case a new command has been received
3566:..\src/command_processing.c ****     if (change_ext_ref_flag) {
 25085              		.loc 1 3566 0 is_stmt 1
 25086 007e 6D4B     		ldr	r3, .L958+8
 25087 0080 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 25088 0082 002B     		cmp	r3, #0
 25089 0084 00F0CC80 		beq	.L957
 25090              	.LBB32:
3567:..\src/command_processing.c ****         for (uint8 i = 0; i< NUM_OF_MOTORS; i++) {
 25091              		.loc 1 3567 0
 25092 0088 0023     		movs	r3, #0
 25093 008a BB71     		strb	r3, [r7, #6]
 25094 008c C4E0     		b	.L949
 25095              	.L956:
3568:..\src/command_processing.c ****             if(g_mem.motor[i].control_mode == CONTROL_CURRENT) {
 25096              		.loc 1 3568 0
 25097 008e BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 25098 0090 6A49     		ldr	r1, .L958+16
 25099 0092 1346     		mov	r3, r2
 25100 0094 DB00     		lsls	r3, r3, #3
 25101 0096 9B1A     		subs	r3, r3, r2
 25102 0098 1B01     		lsls	r3, r3, #4
 25103 009a 0B44     		add	r3, r3, r1
 25104 009c 03F20F13 		addw	r3, r3, #271
 25105 00a0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 25106 00a2 022B     		cmp	r3, #2
 25107 00a4 0ED1     		bne	.L950
3569:..\src/command_processing.c ****                 g_refNew[i].curr = aux_int16[i];
 25108              		.loc 1 3569 0
 25109 00a6 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 25110 00a8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 25111 00aa 5B00     		lsls	r3, r3, #1
 25112 00ac 07F10801 		add	r1, r7, #8
 25113 00b0 0B44     		add	r3, r3, r1
 25114 00b2 33F9083C 		ldrsh	r3, [r3, #-8]
 25115 00b6 1846     		mov	r0, r3
 25116 00b8 6149     		ldr	r1, .L958+20
 25117 00ba 1301     		lsls	r3, r2, #4
 25118 00bc 0B44     		add	r3, r3, r1
 25119 00be 0433     		adds	r3, r3, #4
 25120 00c0 1860     		str	r0, [r3]
 25121 00c2 47E0     		b	.L951
 25122              	.L950:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 550


3570:..\src/command_processing.c ****             }
3571:..\src/command_processing.c ****             else {
3572:..\src/command_processing.c ****                 if(g_mem.motor[i].control_mode == CONTROL_PWM) {
 25123              		.loc 1 3572 0
 25124 00c4 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 25125 00c6 5D49     		ldr	r1, .L958+16
 25126 00c8 1346     		mov	r3, r2
 25127 00ca DB00     		lsls	r3, r3, #3
 25128 00cc 9B1A     		subs	r3, r3, r2
 25129 00ce 1B01     		lsls	r3, r3, #4
 25130 00d0 0B44     		add	r3, r3, r1
 25131 00d2 03F20F13 		addw	r3, r3, #271
 25132 00d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 25133 00d8 012B     		cmp	r3, #1
 25134 00da 0ED1     		bne	.L952
3573:..\src/command_processing.c ****                     g_refNew[i].pwm = aux_int16[i];
 25135              		.loc 1 3573 0
 25136 00dc BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 25137 00de BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 25138 00e0 5B00     		lsls	r3, r3, #1
 25139 00e2 07F10801 		add	r1, r7, #8
 25140 00e6 0B44     		add	r3, r3, r1
 25141 00e8 33F9083C 		ldrsh	r3, [r3, #-8]
 25142 00ec 1846     		mov	r0, r3
 25143 00ee 5449     		ldr	r1, .L958+20
 25144 00f0 1301     		lsls	r3, r2, #4
 25145 00f2 0B44     		add	r3, r3, r1
 25146 00f4 0833     		adds	r3, r3, #8
 25147 00f6 1860     		str	r0, [r3]
 25148 00f8 2CE0     		b	.L951
 25149              	.L952:
3574:..\src/command_processing.c ****                 }
3575:..\src/command_processing.c ****                 else {
3576:..\src/command_processing.c ****                     g_refNew[i].pos = aux_int16[i];   // motor ref
 25150              		.loc 1 3576 0
 25151 00fa BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 25152 00fc BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 25153 00fe 5B00     		lsls	r3, r3, #1
 25154 0100 07F10801 		add	r1, r7, #8
 25155 0104 0B44     		add	r3, r3, r1
 25156 0106 33F9083C 		ldrsh	r3, [r3, #-8]
 25157 010a 1846     		mov	r0, r3
 25158 010c 4C49     		ldr	r1, .L958+20
 25159 010e 1301     		lsls	r3, r2, #4
 25160 0110 0B44     		add	r3, r3, r1
 25161 0112 1860     		str	r0, [r3]
3577:..\src/command_processing.c ****                     g_refNew[i].pos = g_refNew[i].pos << g_mem.enc[c_mem.motor[i].encoder_line].res
 25162              		.loc 1 3577 0
 25163 0114 B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 25164 0116 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 25165 0118 494A     		ldr	r2, .L958+20
 25166 011a 1B01     		lsls	r3, r3, #4
 25167 011c 1344     		add	r3, r3, r2
 25168 011e 1868     		ldr	r0, [r3]
 25169 0120 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 25170 0122 454C     		ldr	r4, .L958+12
 25171 0124 1346     		mov	r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 551


 25172 0126 DB00     		lsls	r3, r3, #3
 25173 0128 9B1A     		subs	r3, r3, r2
 25174 012a 1B01     		lsls	r3, r3, #4
 25175 012c 2344     		add	r3, r3, r4
 25176 012e 03F58873 		add	r3, r3, #272
 25177 0132 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 25178 0134 1C46     		mov	r4, r3
 25179 0136 414A     		ldr	r2, .L958+16
 25180 0138 2346     		mov	r3, r4
 25181 013a 5B00     		lsls	r3, r3, #1
 25182 013c 2344     		add	r3, r3, r4
 25183 013e 1B01     		lsls	r3, r3, #4
 25184 0140 1344     		add	r3, r3, r2
 25185 0142 03F29513 		addw	r3, r3, #405
 25186 0146 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 25187 0148 00FA03F2 		lsl	r2, r0, r3
 25188 014c 3C48     		ldr	r0, .L958+20
 25189 014e 0B01     		lsls	r3, r1, #4
 25190 0150 0344     		add	r3, r3, r0
 25191 0152 1A60     		str	r2, [r3]
 25192              	.L951:
3578:..\src/command_processing.c ****                 }
3579:..\src/command_processing.c ****             }  
3580:..\src/command_processing.c ****                
3581:..\src/command_processing.c ****             // Check if the reference is nor higher or lower than the position limits
3582:..\src/command_processing.c ****             if (c_mem.motor[i].pos_lim_flag && (g_mem.motor[i].control_mode == CURR_AND_POS_CONTROL
 25193              		.loc 1 3582 0
 25194 0154 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 25195 0156 3849     		ldr	r1, .L958+12
 25196 0158 1346     		mov	r3, r2
 25197 015a DB00     		lsls	r3, r3, #3
 25198 015c 9B1A     		subs	r3, r3, r2
 25199 015e 1B01     		lsls	r3, r3, #4
 25200 0160 0B44     		add	r3, r3, r1
 25201 0162 E333     		adds	r3, r3, #227
 25202 0164 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 25203 0166 002B     		cmp	r3, #0
 25204 0168 53D0     		beq	.L953
 25205              		.loc 1 3582 0 is_stmt 0 discriminator 1
 25206 016a BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 25207 016c 3349     		ldr	r1, .L958+16
 25208 016e 1346     		mov	r3, r2
 25209 0170 DB00     		lsls	r3, r3, #3
 25210 0172 9B1A     		subs	r3, r3, r2
 25211 0174 1B01     		lsls	r3, r3, #4
 25212 0176 0B44     		add	r3, r3, r1
 25213 0178 03F20F13 		addw	r3, r3, #271
 25214 017c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 25215 017e 032B     		cmp	r3, #3
 25216 0180 0BD0     		beq	.L954
 25217              		.loc 1 3582 0 discriminator 2
 25218 0182 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 25219 0184 2D49     		ldr	r1, .L958+16
 25220 0186 1346     		mov	r3, r2
 25221 0188 DB00     		lsls	r3, r3, #3
 25222 018a 9B1A     		subs	r3, r3, r2
 25223 018c 1B01     		lsls	r3, r3, #4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 552


 25224 018e 0B44     		add	r3, r3, r1
 25225 0190 03F20F13 		addw	r3, r3, #271
 25226 0194 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 25227 0196 002B     		cmp	r3, #0
 25228 0198 3BD1     		bne	.L953
 25229              	.L954:
3583:..\src/command_processing.c ****                 
3584:..\src/command_processing.c ****                 if (g_refNew[i].pos < c_mem.motor[i].pos_lim_inf) 
 25230              		.loc 1 3584 0 is_stmt 1
 25231 019a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 25232 019c 284A     		ldr	r2, .L958+20
 25233 019e 1B01     		lsls	r3, r3, #4
 25234 01a0 1344     		add	r3, r3, r2
 25235 01a2 1968     		ldr	r1, [r3]
 25236 01a4 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 25237 01a6 2448     		ldr	r0, .L958+12
 25238 01a8 1346     		mov	r3, r2
 25239 01aa DB00     		lsls	r3, r3, #3
 25240 01ac 9B1A     		subs	r3, r3, r2
 25241 01ae 1B01     		lsls	r3, r3, #4
 25242 01b0 0344     		add	r3, r3, r0
 25243 01b2 E433     		adds	r3, r3, #228
 25244 01b4 1B68     		ldr	r3, [r3]
 25245 01b6 9942     		cmp	r1, r3
 25246 01b8 0DDA     		bge	.L955
3585:..\src/command_processing.c ****                     g_refNew[i].pos = c_mem.motor[i].pos_lim_inf;
 25247              		.loc 1 3585 0
 25248 01ba B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 25249 01bc BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 25250 01be 1E48     		ldr	r0, .L958+12
 25251 01c0 1346     		mov	r3, r2
 25252 01c2 DB00     		lsls	r3, r3, #3
 25253 01c4 9B1A     		subs	r3, r3, r2
 25254 01c6 1B01     		lsls	r3, r3, #4
 25255 01c8 0344     		add	r3, r3, r0
 25256 01ca E433     		adds	r3, r3, #228
 25257 01cc 1A68     		ldr	r2, [r3]
 25258 01ce 1C48     		ldr	r0, .L958+20
 25259 01d0 0B01     		lsls	r3, r1, #4
 25260 01d2 0344     		add	r3, r3, r0
 25261 01d4 1A60     		str	r2, [r3]
 25262              	.L955:
3586:..\src/command_processing.c **** 
3587:..\src/command_processing.c ****                 if (g_refNew[i].pos > c_mem.motor[i].pos_lim_sup) 
 25263              		.loc 1 3587 0
 25264 01d6 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 25265 01d8 194A     		ldr	r2, .L958+20
 25266 01da 1B01     		lsls	r3, r3, #4
 25267 01dc 1344     		add	r3, r3, r2
 25268 01de 1968     		ldr	r1, [r3]
 25269 01e0 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 25270 01e2 1548     		ldr	r0, .L958+12
 25271 01e4 1346     		mov	r3, r2
 25272 01e6 DB00     		lsls	r3, r3, #3
 25273 01e8 9B1A     		subs	r3, r3, r2
 25274 01ea 1B01     		lsls	r3, r3, #4
 25275 01ec 0344     		add	r3, r3, r0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 553


 25276 01ee E833     		adds	r3, r3, #232
 25277 01f0 1B68     		ldr	r3, [r3]
 25278 01f2 9942     		cmp	r1, r3
 25279 01f4 0DDD     		ble	.L953
3588:..\src/command_processing.c ****                     g_refNew[i].pos = c_mem.motor[i].pos_lim_sup;
 25280              		.loc 1 3588 0
 25281 01f6 B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 25282 01f8 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 25283 01fa 0F48     		ldr	r0, .L958+12
 25284 01fc 1346     		mov	r3, r2
 25285 01fe DB00     		lsls	r3, r3, #3
 25286 0200 9B1A     		subs	r3, r3, r2
 25287 0202 1B01     		lsls	r3, r3, #4
 25288 0204 0344     		add	r3, r3, r0
 25289 0206 E833     		adds	r3, r3, #232
 25290 0208 1A68     		ldr	r2, [r3]
 25291 020a 0D48     		ldr	r0, .L958+20
 25292 020c 0B01     		lsls	r3, r1, #4
 25293 020e 0344     		add	r3, r3, r0
 25294 0210 1A60     		str	r2, [r3]
 25295              	.L953:
3567:..\src/command_processing.c ****             if(g_mem.motor[i].control_mode == CONTROL_CURRENT) {
 25296              		.loc 1 3567 0 discriminator 2
 25297 0212 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 25298 0214 0133     		adds	r3, r3, #1
 25299 0216 BB71     		strb	r3, [r7, #6]
 25300              	.L949:
3567:..\src/command_processing.c ****             if(g_mem.motor[i].control_mode == CONTROL_CURRENT) {
 25301              		.loc 1 3567 0 is_stmt 0 discriminator 1
 25302 0218 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 25303 021a 012B     		cmp	r3, #1
 25304 021c 7FF637AF 		bls	.L956
 25305              	.L957:
 25306              	.LBE32:
3589:..\src/command_processing.c ****             }
3590:..\src/command_processing.c ****         }  
3591:..\src/command_processing.c ****     }
3592:..\src/command_processing.c **** }
 25307              		.loc 1 3592 0 is_stmt 1
 25308 0220 00BF     		nop
 25309 0222 0837     		adds	r7, r7, #8
 25310              		.cfi_def_cfa_offset 8
 25311 0224 BD46     		mov	sp, r7
 25312              		.cfi_def_cfa_register 13
 25313              		@ sp needed
 25314 0226 90BC     		pop	{r4, r7}
 25315              		.cfi_restore 7
 25316              		.cfi_restore 4
 25317              		.cfi_def_cfa_offset 0
 25318 0228 7047     		bx	lr
 25319              	.L959:
 25320 022a 00BF     		.align	2
 25321              	.L958:
 25322 022c 00000000 		.word	g_rx
 25323 0230 08000000 		.word	last_aux_int16.11404
 25324 0234 00000000 		.word	change_ext_ref_flag
 25325 0238 00000000 		.word	c_mem
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 554


 25326 023c 00000000 		.word	g_mem
 25327 0240 00000000 		.word	g_refNew
 25328              		.cfi_endproc
 25329              	.LFE98:
 25330              		.size	cmd_set_inputs, .-cmd_set_inputs
 25331              		.section	.text.cmd_activate,"ax",%progbits
 25332              		.align	2
 25333              		.global	cmd_activate
 25334              		.thumb
 25335              		.thumb_func
 25336              		.type	cmd_activate, %function
 25337              	cmd_activate:
 25338              	.LFB99:
3593:..\src/command_processing.c **** 
3594:..\src/command_processing.c **** void cmd_activate(){
 25339              		.loc 1 3594 0
 25340              		.cfi_startproc
 25341              		@ args = 0, pretend = 0, frame = 8
 25342              		@ frame_needed = 1, uses_anonymous_args = 0
 25343 0000 80B5     		push	{r7, lr}
 25344              		.cfi_def_cfa_offset 8
 25345              		.cfi_offset 7, -8
 25346              		.cfi_offset 14, -4
 25347 0002 82B0     		sub	sp, sp, #8
 25348              		.cfi_def_cfa_offset 16
 25349 0004 00AF     		add	r7, sp, #0
 25350              		.cfi_def_cfa_register 7
3595:..\src/command_processing.c ****     
3596:..\src/command_processing.c ****     // Store new value reads
3597:..\src/command_processing.c ****     uint8 aux = g_rx.buffer[1];
 25351              		.loc 1 3597 0
 25352 0006 294B     		ldr	r3, .L967
 25353 0008 5B78     		ldrb	r3, [r3, #1]
 25354 000a FB71     		strb	r3, [r7, #7]
3598:..\src/command_processing.c ****     
3599:..\src/command_processing.c ****     // Check type of control mode enabled
3600:..\src/command_processing.c ****     if ((g_mem.motor[0].control_mode == CONTROL_ANGLE) || (g_mem.motor[0].control_mode == CURR_AND_
 25355              		.loc 1 3600 0
 25356 000c 284B     		ldr	r3, .L967+4
 25357 000e 93F80F31 		ldrb	r3, [r3, #271]	@ zero_extendqisi2
 25358 0012 002B     		cmp	r3, #0
 25359 0014 04D0     		beq	.L961
 25360              		.loc 1 3600 0 is_stmt 0 discriminator 1
 25361 0016 264B     		ldr	r3, .L967+4
 25362 0018 93F80F31 		ldrb	r3, [r3, #271]	@ zero_extendqisi2
 25363 001c 032B     		cmp	r3, #3
 25364 001e 0BD1     		bne	.L962
 25365              	.L961:
3601:..\src/command_processing.c ****         g_refNew[0].pos = g_meas[g_mem.motor[0].encoder_line].pos[0];
 25366              		.loc 1 3601 0 is_stmt 1
 25367 0020 234B     		ldr	r3, .L967+4
 25368 0022 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 25369 0026 1946     		mov	r1, r3
 25370 0028 224A     		ldr	r2, .L967+8
 25371 002a 3423     		movs	r3, #52
 25372 002c 03FB01F3 		mul	r3, r3, r1
 25373 0030 1344     		add	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 555


 25374 0032 1B68     		ldr	r3, [r3]
 25375 0034 204A     		ldr	r2, .L967+12
 25376 0036 1360     		str	r3, [r2]
 25377              	.L962:
3602:..\src/command_processing.c ****     }
3603:..\src/command_processing.c ****     g_refNew[0].onoff = (aux & 0x01);
 25378              		.loc 1 3603 0
 25379 0038 FB79     		ldrb	r3, [r7, #7]
 25380 003a 03F00103 		and	r3, r3, #1
 25381 003e DAB2     		uxtb	r2, r3
 25382 0040 1D4B     		ldr	r3, .L967+12
 25383 0042 1A73     		strb	r2, [r3, #12]
3604:..\src/command_processing.c ****     
3605:..\src/command_processing.c **** #ifdef AIR_CHAMBERS_FB_FW
3606:..\src/command_processing.c ****     if (g_mem.dev.dev_type == AIR_CHAMBERS_FB){
3607:..\src/command_processing.c ****         // Send PWM 0 to the PUMP in case a deactivation command arrives
3608:..\src/command_processing.c ****         // [There is no driver activation, so g_refNew[i].onoff is useless]
3609:..\src/command_processing.c ****         if (!(g_refNew[0].onoff)) {
3610:..\src/command_processing.c ****             g_refNew[0].pwm = 0;
3611:..\src/command_processing.c ****         }
3612:..\src/command_processing.c ****         
3613:..\src/command_processing.c ****         // Activate or deactivate the valve
3614:..\src/command_processing.c ****         VALVE_Write((aux >> 1) & 0x01);
3615:..\src/command_processing.c ****     }
3616:..\src/command_processing.c **** #endif
3617:..\src/command_processing.c ****     
3618:..\src/command_processing.c ****     // Activate/Deactivate motor
3619:..\src/command_processing.c ****     enable_motor(0, g_refNew[0].onoff); 
 25384              		.loc 1 3619 0
 25385 0044 1C4B     		ldr	r3, .L967+12
 25386 0046 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 25387 0048 1946     		mov	r1, r3
 25388 004a 0020     		movs	r0, #0
 25389 004c FFF7FEFF 		bl	enable_motor
3620:..\src/command_processing.c ****     
3621:..\src/command_processing.c ****     if (g_mem.dev.use_2nd_motor_flag == TRUE) {
 25390              		.loc 1 3621 0
 25391 0050 174B     		ldr	r3, .L967+4
 25392 0052 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 25393 0056 012B     		cmp	r3, #1
 25394 0058 23D1     		bne	.L966
3622:..\src/command_processing.c ****         if ((g_mem.motor[1].control_mode == CONTROL_ANGLE) || (g_mem.motor[1].control_mode == CURR_
 25395              		.loc 1 3622 0
 25396 005a 154B     		ldr	r3, .L967+4
 25397 005c 93F87F31 		ldrb	r3, [r3, #383]	@ zero_extendqisi2
 25398 0060 002B     		cmp	r3, #0
 25399 0062 04D0     		beq	.L964
 25400              		.loc 1 3622 0 is_stmt 0 discriminator 1
 25401 0064 124B     		ldr	r3, .L967+4
 25402 0066 93F87F31 		ldrb	r3, [r3, #383]	@ zero_extendqisi2
 25403 006a 032B     		cmp	r3, #3
 25404 006c 0BD1     		bne	.L965
 25405              	.L964:
3623:..\src/command_processing.c ****             g_refNew[1].pos = g_meas[g_mem.motor[1].encoder_line].pos[0];
 25406              		.loc 1 3623 0 is_stmt 1
 25407 006e 104B     		ldr	r3, .L967+4
 25408 0070 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 556


 25409 0074 1946     		mov	r1, r3
 25410 0076 0F4A     		ldr	r2, .L967+8
 25411 0078 3423     		movs	r3, #52
 25412 007a 03FB01F3 		mul	r3, r3, r1
 25413 007e 1344     		add	r3, r3, r2
 25414 0080 1B68     		ldr	r3, [r3]
 25415 0082 0D4A     		ldr	r2, .L967+12
 25416 0084 1361     		str	r3, [r2, #16]
 25417              	.L965:
3624:..\src/command_processing.c ****         }
3625:..\src/command_processing.c ****         g_refNew[1].onoff = ((aux >> 1) & 0x01);
 25418              		.loc 1 3625 0
 25419 0086 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 25420 0088 5B08     		lsrs	r3, r3, #1
 25421 008a DBB2     		uxtb	r3, r3
 25422 008c 03F00103 		and	r3, r3, #1
 25423 0090 DAB2     		uxtb	r2, r3
 25424 0092 094B     		ldr	r3, .L967+12
 25425 0094 1A77     		strb	r2, [r3, #28]
3626:..\src/command_processing.c ****         enable_motor(1, g_refNew[1].onoff); 
 25426              		.loc 1 3626 0
 25427 0096 084B     		ldr	r3, .L967+12
 25428 0098 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 25429 009a 1946     		mov	r1, r3
 25430 009c 0120     		movs	r0, #1
 25431 009e FFF7FEFF 		bl	enable_motor
 25432              	.L966:
3627:..\src/command_processing.c ****     }
3628:..\src/command_processing.c ****     
3629:..\src/command_processing.c **** }
 25433              		.loc 1 3629 0
 25434 00a2 00BF     		nop
 25435 00a4 0837     		adds	r7, r7, #8
 25436              		.cfi_def_cfa_offset 8
 25437 00a6 BD46     		mov	sp, r7
 25438              		.cfi_def_cfa_register 13
 25439              		@ sp needed
 25440 00a8 80BD     		pop	{r7, pc}
 25441              	.L968:
 25442 00aa 00BF     		.align	2
 25443              	.L967:
 25444 00ac 00000000 		.word	g_rx
 25445 00b0 00000000 		.word	g_mem
 25446 00b4 00000000 		.word	g_meas
 25447 00b8 00000000 		.word	g_refNew
 25448              		.cfi_endproc
 25449              	.LFE99:
 25450              		.size	cmd_activate, .-cmd_activate
 25451              		.section	.text.cmd_get_activate,"ax",%progbits
 25452              		.align	2
 25453              		.global	cmd_get_activate
 25454              		.thumb
 25455              		.thumb_func
 25456              		.type	cmd_get_activate, %function
 25457              	cmd_get_activate:
 25458              	.LFB100:
3630:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 557


3631:..\src/command_processing.c **** void cmd_get_activate(){
 25459              		.loc 1 3631 0
 25460              		.cfi_startproc
 25461              		@ args = 0, pretend = 0, frame = 8
 25462              		@ frame_needed = 1, uses_anonymous_args = 0
 25463 0000 80B5     		push	{r7, lr}
 25464              		.cfi_def_cfa_offset 8
 25465              		.cfi_offset 7, -8
 25466              		.cfi_offset 14, -4
 25467 0002 82B0     		sub	sp, sp, #8
 25468              		.cfi_def_cfa_offset 16
 25469 0004 00AF     		add	r7, sp, #0
 25470              		.cfi_def_cfa_register 7
3632:..\src/command_processing.c ****     
3633:..\src/command_processing.c ****     uint8 packet_data[3];
3634:..\src/command_processing.c **** 
3635:..\src/command_processing.c ****     // Header        
3636:..\src/command_processing.c ****     packet_data[0] = CMD_GET_ACTIVATE;
 25471              		.loc 1 3636 0
 25472 0006 8123     		movs	r3, #129
 25473 0008 3B71     		strb	r3, [r7, #4]
3637:..\src/command_processing.c ****     
3638:..\src/command_processing.c ****     // Fill payload
3639:..\src/command_processing.c ****     if (g_mem.dev.use_2nd_motor_flag == TRUE) {
 25474              		.loc 1 3639 0
 25475 000a 124B     		ldr	r3, .L972
 25476 000c 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 25477 0010 012B     		cmp	r3, #1
 25478 0012 0BD1     		bne	.L970
3640:..\src/command_processing.c ****         packet_data[1] = ((g_ref[1].onoff << 1) | g_ref[0].onoff);
 25479              		.loc 1 3640 0
 25480 0014 104B     		ldr	r3, .L972+4
 25481 0016 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 25482 0018 5B00     		lsls	r3, r3, #1
 25483 001a 5AB2     		sxtb	r2, r3
 25484 001c 0E4B     		ldr	r3, .L972+4
 25485 001e 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 25486 0020 5BB2     		sxtb	r3, r3
 25487 0022 1343     		orrs	r3, r3, r2
 25488 0024 5BB2     		sxtb	r3, r3
 25489 0026 DBB2     		uxtb	r3, r3
 25490 0028 7B71     		strb	r3, [r7, #5]
 25491 002a 02E0     		b	.L971
 25492              	.L970:
3641:..\src/command_processing.c ****     } 
3642:..\src/command_processing.c ****     else {
3643:..\src/command_processing.c ****         packet_data[1] = g_ref[0].onoff;
 25493              		.loc 1 3643 0
 25494 002c 0A4B     		ldr	r3, .L972+4
 25495 002e 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 25496 0030 7B71     		strb	r3, [r7, #5]
 25497              	.L971:
3644:..\src/command_processing.c ****     }
3645:..\src/command_processing.c ****     
3646:..\src/command_processing.c ****     // Calculate checksum
3647:..\src/command_processing.c ****     packet_data[2] = LCRChecksum(packet_data, 2);
 25498              		.loc 1 3647 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 558


 25499 0032 3B1D     		adds	r3, r7, #4
 25500 0034 0221     		movs	r1, #2
 25501 0036 1846     		mov	r0, r3
 25502 0038 FFF7FEFF 		bl	LCRChecksum
 25503 003c 0346     		mov	r3, r0
 25504 003e BB71     		strb	r3, [r7, #6]
3648:..\src/command_processing.c ****     
3649:..\src/command_processing.c ****     // Send package to UART
3650:..\src/command_processing.c ****     commWrite(packet_data, 3);
 25505              		.loc 1 3650 0
 25506 0040 3B1D     		adds	r3, r7, #4
 25507 0042 0321     		movs	r1, #3
 25508 0044 1846     		mov	r0, r3
 25509 0046 FFF7FEFF 		bl	commWrite
3651:..\src/command_processing.c **** 
3652:..\src/command_processing.c **** }
 25510              		.loc 1 3652 0
 25511 004a 00BF     		nop
 25512 004c 0837     		adds	r7, r7, #8
 25513              		.cfi_def_cfa_offset 8
 25514 004e BD46     		mov	sp, r7
 25515              		.cfi_def_cfa_register 13
 25516              		@ sp needed
 25517 0050 80BD     		pop	{r7, pc}
 25518              	.L973:
 25519 0052 00BF     		.align	2
 25520              	.L972:
 25521 0054 00000000 		.word	g_mem
 25522 0058 00000000 		.word	g_ref
 25523              		.cfi_endproc
 25524              	.LFE100:
 25525              		.size	cmd_get_activate, .-cmd_get_activate
 25526              		.section	.text.cmd_get_curr_and_meas,"ax",%progbits
 25527              		.align	2
 25528              		.global	cmd_get_curr_and_meas
 25529              		.thumb
 25530              		.thumb_func
 25531              		.type	cmd_get_curr_and_meas, %function
 25532              	cmd_get_curr_and_meas:
 25533              	.LFB101:
3653:..\src/command_processing.c **** 
3654:..\src/command_processing.c **** void cmd_get_curr_and_meas(){
 25534              		.loc 1 3654 0
 25535              		.cfi_startproc
 25536              		@ args = 0, pretend = 0, frame = 16
 25537              		@ frame_needed = 1, uses_anonymous_args = 0
 25538 0000 90B5     		push	{r4, r7, lr}
 25539              		.cfi_def_cfa_offset 12
 25540              		.cfi_offset 4, -12
 25541              		.cfi_offset 7, -8
 25542              		.cfi_offset 14, -4
 25543 0002 85B0     		sub	sp, sp, #20
 25544              		.cfi_def_cfa_offset 32
 25545 0004 00AF     		add	r7, sp, #0
 25546              		.cfi_def_cfa_register 7
3655:..\src/command_processing.c ****     
3656:..\src/command_processing.c ****     uint8 CYDATA index;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 559


3657:..\src/command_processing.c ****     int16 aux_int16;
3658:..\src/command_processing.c ****    
3659:..\src/command_processing.c ****     //Packet: header + curr_meas(int16) + pos_meas(int16) + CRC
3660:..\src/command_processing.c ****     
3661:..\src/command_processing.c ****     uint8 packet_data[12]; 
3662:..\src/command_processing.c **** 
3663:..\src/command_processing.c ****     //Header package
3664:..\src/command_processing.c ****     packet_data[0] = CMD_GET_CURR_AND_MEAS;
 25547              		.loc 1 3664 0
 25548 0006 8623     		movs	r3, #134
 25549 0008 3B70     		strb	r3, [r7]
3665:..\src/command_processing.c **** 
3666:..\src/command_processing.c ****     // Currents
3667:..\src/command_processing.c ****     aux_int16 = (int16) g_measOld[g_mem.motor[0].encoder_line].curr; //Real current motor1
 25550              		.loc 1 3667 0
 25551 000a 484B     		ldr	r3, .L979
 25552 000c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 25553 0010 1946     		mov	r1, r3
 25554 0012 474A     		ldr	r2, .L979+4
 25555 0014 3423     		movs	r3, #52
 25556 0016 03FB01F3 		mul	r3, r3, r1
 25557 001a 1344     		add	r3, r3, r2
 25558 001c 0C33     		adds	r3, r3, #12
 25559 001e 1B68     		ldr	r3, [r3]
 25560 0020 1BB2     		sxth	r3, r3
 25561 0022 BB81     		strh	r3, [r7, #12]	@ movhi
3668:..\src/command_processing.c ****     packet_data[2] = ((char*)(&aux_int16))[0];
 25562              		.loc 1 3668 0
 25563 0024 07F10C03 		add	r3, r7, #12
 25564 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 25565 002a BB70     		strb	r3, [r7, #2]
3669:..\src/command_processing.c ****     packet_data[1] = ((char*)(&aux_int16))[1];
 25566              		.loc 1 3669 0
 25567 002c 07F10C03 		add	r3, r7, #12
 25568 0030 0133     		adds	r3, r3, #1
 25569 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 25570 0034 7B70     		strb	r3, [r7, #1]
3670:..\src/command_processing.c ****     
3671:..\src/command_processing.c ****     if (c_mem.dev.use_2nd_motor_flag == TRUE) {
 25571              		.loc 1 3671 0
 25572 0036 3F4B     		ldr	r3, .L979+8
 25573 0038 93F8A930 		ldrb	r3, [r3, #169]	@ zero_extendqisi2
 25574 003c 012B     		cmp	r3, #1
 25575 003e 0DD1     		bne	.L975
3672:..\src/command_processing.c ****         aux_int16 = (int16) g_measOld[g_mem.motor[1].encoder_line].curr; //Real current motor 2
 25576              		.loc 1 3672 0
 25577 0040 3A4B     		ldr	r3, .L979
 25578 0042 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 25579 0046 1946     		mov	r1, r3
 25580 0048 394A     		ldr	r2, .L979+4
 25581 004a 3423     		movs	r3, #52
 25582 004c 03FB01F3 		mul	r3, r3, r1
 25583 0050 1344     		add	r3, r3, r2
 25584 0052 0C33     		adds	r3, r3, #12
 25585 0054 1B68     		ldr	r3, [r3]
 25586 0056 1BB2     		sxth	r3, r3
 25587 0058 BB81     		strh	r3, [r7, #12]	@ movhi
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 560


 25588 005a 0CE0     		b	.L976
 25589              	.L975:
3673:..\src/command_processing.c ****     }
3674:..\src/command_processing.c ****     else {
3675:..\src/command_processing.c ****         aux_int16 = (int16) g_measOld[g_mem.motor[0].encoder_line].estim_curr; //Estimated current
 25590              		.loc 1 3675 0
 25591 005c 334B     		ldr	r3, .L979
 25592 005e 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 25593 0062 1946     		mov	r1, r3
 25594 0064 324A     		ldr	r2, .L979+4
 25595 0066 3423     		movs	r3, #52
 25596 0068 03FB01F3 		mul	r3, r3, r1
 25597 006c 1344     		add	r3, r3, r2
 25598 006e 1033     		adds	r3, r3, #16
 25599 0070 1B68     		ldr	r3, [r3]
 25600 0072 1BB2     		sxth	r3, r3
 25601 0074 BB81     		strh	r3, [r7, #12]	@ movhi
 25602              	.L976:
3676:..\src/command_processing.c ****     }
3677:..\src/command_processing.c ****     packet_data[4] = ((char*)(&aux_int16))[0];
 25603              		.loc 1 3677 0
 25604 0076 07F10C03 		add	r3, r7, #12
 25605 007a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 25606 007c 3B71     		strb	r3, [r7, #4]
3678:..\src/command_processing.c ****     packet_data[3] = ((char*)(&aux_int16))[1];
 25607              		.loc 1 3678 0
 25608 007e 07F10C03 		add	r3, r7, #12
 25609 0082 0133     		adds	r3, r3, #1
 25610 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 25611 0086 FB70     		strb	r3, [r7, #3]
3679:..\src/command_processing.c **** 
3680:..\src/command_processing.c ****     // Positions
3681:..\src/command_processing.c ****     for (index = NUM_OF_SENSORS; index--;) {
 25612              		.loc 1 3681 0
 25613 0088 0323     		movs	r3, #3
 25614 008a FB73     		strb	r3, [r7, #15]
 25615 008c 38E0     		b	.L977
 25616              	.L978:
3682:..\src/command_processing.c ****         aux_int16 = (int16)(g_measOld[g_mem.motor[0].encoder_line].pos[index] >> g_mem.enc[g_mem.mo
 25617              		.loc 1 3682 0
 25618 008e 274B     		ldr	r3, .L979
 25619 0090 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 25620 0094 1A46     		mov	r2, r3
 25621 0096 F97B     		ldrb	r1, [r7, #15]	@ zero_extendqisi2
 25622 0098 2548     		ldr	r0, .L979+4
 25623 009a 1346     		mov	r3, r2
 25624 009c 5B00     		lsls	r3, r3, #1
 25625 009e 1344     		add	r3, r3, r2
 25626 00a0 9B00     		lsls	r3, r3, #2
 25627 00a2 1344     		add	r3, r3, r2
 25628 00a4 0B44     		add	r3, r3, r1
 25629 00a6 50F82320 		ldr	r2, [r0, r3, lsl #2]
 25630 00aa 204B     		ldr	r3, .L979
 25631 00ac 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 25632 00b0 1C46     		mov	r4, r3
 25633 00b2 F97B     		ldrb	r1, [r7, #15]	@ zero_extendqisi2
 25634 00b4 1D48     		ldr	r0, .L979
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 561


 25635 00b6 2346     		mov	r3, r4
 25636 00b8 5B00     		lsls	r3, r3, #1
 25637 00ba 2344     		add	r3, r3, r4
 25638 00bc 1B01     		lsls	r3, r3, #4
 25639 00be 0344     		add	r3, r3, r0
 25640 00c0 0B44     		add	r3, r3, r1
 25641 00c2 03F29513 		addw	r3, r3, #405
 25642 00c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 25643 00c8 42FA03F3 		asr	r3, r2, r3
 25644 00cc 1BB2     		sxth	r3, r3
 25645 00ce BB81     		strh	r3, [r7, #12]	@ movhi
3683:..\src/command_processing.c ****         packet_data[(index << 1) + 6] = ((char*)(&aux_int16))[0];
 25646              		.loc 1 3683 0
 25647 00d0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 25648 00d2 5B00     		lsls	r3, r3, #1
 25649 00d4 0633     		adds	r3, r3, #6
 25650 00d6 07F10C02 		add	r2, r7, #12
 25651 00da 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 25652 00dc 07F11001 		add	r1, r7, #16
 25653 00e0 0B44     		add	r3, r3, r1
 25654 00e2 03F8102C 		strb	r2, [r3, #-16]
3684:..\src/command_processing.c ****         packet_data[(index << 1) + 5] = ((char*)(&aux_int16))[1];
 25655              		.loc 1 3684 0
 25656 00e6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 25657 00e8 5B00     		lsls	r3, r3, #1
 25658 00ea 5A1D     		adds	r2, r3, #5
 25659 00ec 07F10C03 		add	r3, r7, #12
 25660 00f0 0133     		adds	r3, r3, #1
 25661 00f2 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 25662 00f4 07F11003 		add	r3, r7, #16
 25663 00f8 1344     		add	r3, r3, r2
 25664 00fa 0A46     		mov	r2, r1
 25665 00fc 03F8102C 		strb	r2, [r3, #-16]
 25666              	.L977:
3681:..\src/command_processing.c ****         aux_int16 = (int16)(g_measOld[g_mem.motor[0].encoder_line].pos[index] >> g_mem.enc[g_mem.mo
 25667              		.loc 1 3681 0 discriminator 1
 25668 0100 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 25669 0102 5A1E     		subs	r2, r3, #1
 25670 0104 FA73     		strb	r2, [r7, #15]
 25671 0106 002B     		cmp	r3, #0
 25672 0108 C1D1     		bne	.L978
3685:..\src/command_processing.c ****     }
3686:..\src/command_processing.c ****     // Calculate Checksum and send message to UART 
3687:..\src/command_processing.c ****         
3688:..\src/command_processing.c ****     packet_data[11] = LCRChecksum (packet_data, 11);
 25673              		.loc 1 3688 0
 25674 010a 3B46     		mov	r3, r7
 25675 010c 0B21     		movs	r1, #11
 25676 010e 1846     		mov	r0, r3
 25677 0110 FFF7FEFF 		bl	LCRChecksum
 25678 0114 0346     		mov	r3, r0
 25679 0116 FB72     		strb	r3, [r7, #11]
3689:..\src/command_processing.c ****     commWrite(packet_data, 12);
 25680              		.loc 1 3689 0
 25681 0118 3B46     		mov	r3, r7
 25682 011a 0C21     		movs	r1, #12
 25683 011c 1846     		mov	r0, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 562


 25684 011e FFF7FEFF 		bl	commWrite
3690:..\src/command_processing.c ****    
3691:..\src/command_processing.c **** }
 25685              		.loc 1 3691 0
 25686 0122 00BF     		nop
 25687 0124 1437     		adds	r7, r7, #20
 25688              		.cfi_def_cfa_offset 12
 25689 0126 BD46     		mov	sp, r7
 25690              		.cfi_def_cfa_register 13
 25691              		@ sp needed
 25692 0128 90BD     		pop	{r4, r7, pc}
 25693              	.L980:
 25694 012a 00BF     		.align	2
 25695              	.L979:
 25696 012c 00000000 		.word	g_mem
 25697 0130 00000000 		.word	g_measOld
 25698 0134 00000000 		.word	c_mem
 25699              		.cfi_endproc
 25700              	.LFE101:
 25701              		.size	cmd_get_curr_and_meas, .-cmd_get_curr_and_meas
 25702              		.section	.text.cmd_get_currents,"ax",%progbits
 25703              		.align	2
 25704              		.global	cmd_get_currents
 25705              		.thumb
 25706              		.thumb_func
 25707              		.type	cmd_get_currents, %function
 25708              	cmd_get_currents:
 25709              	.LFB102:
3692:..\src/command_processing.c **** 
3693:..\src/command_processing.c **** void cmd_get_currents(){
 25710              		.loc 1 3693 0
 25711              		.cfi_startproc
 25712              		@ args = 0, pretend = 0, frame = 16
 25713              		@ frame_needed = 1, uses_anonymous_args = 0
 25714 0000 80B5     		push	{r7, lr}
 25715              		.cfi_def_cfa_offset 8
 25716              		.cfi_offset 7, -8
 25717              		.cfi_offset 14, -4
 25718 0002 84B0     		sub	sp, sp, #16
 25719              		.cfi_def_cfa_offset 24
 25720 0004 00AF     		add	r7, sp, #0
 25721              		.cfi_def_cfa_register 7
3694:..\src/command_processing.c ****     
3695:..\src/command_processing.c ****     // Packet: header + motor_measure(int16) + crc
3696:..\src/command_processing.c ****     
3697:..\src/command_processing.c ****     uint8 packet_data[6]; 
3698:..\src/command_processing.c ****     int16 aux_int16;
3699:..\src/command_processing.c ****     
3700:..\src/command_processing.c ****     //Header package
3701:..\src/command_processing.c **** 
3702:..\src/command_processing.c ****     packet_data[0] = CMD_GET_CURRENTS;
 25722              		.loc 1 3702 0
 25723 0006 8523     		movs	r3, #133
 25724 0008 3B72     		strb	r3, [r7, #8]
3703:..\src/command_processing.c **** 
3704:..\src/command_processing.c ****     if (c_mem.dev.dev_type != AIR_CHAMBERS_FB){
 25725              		.loc 1 3704 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 563


 25726 000a 164B     		ldr	r3, .L983
 25727 000c 93F8AC30 		ldrb	r3, [r3, #172]	@ zero_extendqisi2
 25728 0010 022B     		cmp	r3, #2
 25729 0012 03D0     		beq	.L982
3705:..\src/command_processing.c ****         // Currents
3706:..\src/command_processing.c ****         aux_int16 = (int16) time_to_send_data_to_PC; //Real current
 25730              		.loc 1 3706 0
 25731 0014 144B     		ldr	r3, .L983+4
 25732 0016 1B88     		ldrh	r3, [r3]
 25733 0018 1BB2     		sxth	r3, r3
 25734 001a FB80     		strh	r3, [r7, #6]	@ movhi
 25735              	.L982:
3707:..\src/command_processing.c ****     }
3708:..\src/command_processing.c ****    
3709:..\src/command_processing.c ****     packet_data[2] = ((char*)(&aux_int16))[0];
 25736              		.loc 1 3709 0
 25737 001c BB1D     		adds	r3, r7, #6
 25738 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 25739 0020 BB72     		strb	r3, [r7, #10]
3710:..\src/command_processing.c ****     packet_data[1] = ((char*)(&aux_int16))[1];
 25740              		.loc 1 3710 0
 25741 0022 BB1D     		adds	r3, r7, #6
 25742 0024 0133     		adds	r3, r3, #1
 25743 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 25744 0028 7B72     		strb	r3, [r7, #9]
3711:..\src/command_processing.c ****       
3712:..\src/command_processing.c ****     aux_int16 = (int16) time_to_send_data_to_PC;//Estimated current
 25745              		.loc 1 3712 0
 25746 002a 0F4B     		ldr	r3, .L983+4
 25747 002c 1B88     		ldrh	r3, [r3]
 25748 002e 1BB2     		sxth	r3, r3
 25749 0030 FB80     		strh	r3, [r7, #6]	@ movhi
3713:..\src/command_processing.c ****     packet_data[4] = ((char*)(&aux_int16))[0];
 25750              		.loc 1 3713 0
 25751 0032 BB1D     		adds	r3, r7, #6
 25752 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 25753 0036 3B73     		strb	r3, [r7, #12]
3714:..\src/command_processing.c ****     packet_data[3] = ((char*)(&aux_int16))[1];
 25754              		.loc 1 3714 0
 25755 0038 BB1D     		adds	r3, r7, #6
 25756 003a 0133     		adds	r3, r3, #1
 25757 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 25758 003e FB72     		strb	r3, [r7, #11]
3715:..\src/command_processing.c **** 
3716:..\src/command_processing.c ****     // Calculate Checksum and send message to UART 
3717:..\src/command_processing.c **** 
3718:..\src/command_processing.c ****     packet_data[5] = LCRChecksum (packet_data, 5);
 25759              		.loc 1 3718 0
 25760 0040 07F10803 		add	r3, r7, #8
 25761 0044 0521     		movs	r1, #5
 25762 0046 1846     		mov	r0, r3
 25763 0048 FFF7FEFF 		bl	LCRChecksum
 25764 004c 0346     		mov	r3, r0
 25765 004e 7B73     		strb	r3, [r7, #13]
3719:..\src/command_processing.c ****     
3720:..\src/command_processing.c ****     commWrite(packet_data, 6);
 25766              		.loc 1 3720 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 564


 25767 0050 07F10803 		add	r3, r7, #8
 25768 0054 0621     		movs	r1, #6
 25769 0056 1846     		mov	r0, r3
 25770 0058 FFF7FEFF 		bl	commWrite
3721:..\src/command_processing.c ****     
3722:..\src/command_processing.c ****     
3723:..\src/command_processing.c **** }
 25771              		.loc 1 3723 0
 25772 005c 00BF     		nop
 25773 005e 1037     		adds	r7, r7, #16
 25774              		.cfi_def_cfa_offset 8
 25775 0060 BD46     		mov	sp, r7
 25776              		.cfi_def_cfa_register 13
 25777              		@ sp needed
 25778 0062 80BD     		pop	{r7, pc}
 25779              	.L984:
 25780              		.align	2
 25781              	.L983:
 25782 0064 00000000 		.word	c_mem
 25783 0068 00000000 		.word	time_to_send_data_to_PC
 25784              		.cfi_endproc
 25785              	.LFE102:
 25786              		.size	cmd_get_currents, .-cmd_get_currents
 25787              		.section	.text.cmd_get_currents_for_cuff,"ax",%progbits
 25788              		.align	2
 25789              		.global	cmd_get_currents_for_cuff
 25790              		.thumb
 25791              		.thumb_func
 25792              		.type	cmd_get_currents_for_cuff, %function
 25793              	cmd_get_currents_for_cuff:
 25794              	.LFB103:
3724:..\src/command_processing.c ****     
3725:..\src/command_processing.c ****     
3726:..\src/command_processing.c ****     
3727:..\src/command_processing.c ****     
3728:..\src/command_processing.c ****     
3729:..\src/command_processing.c ****     /*
3730:..\src/command_processing.c ****     
3731:..\src/command_processing.c ****     uint8 packet_data[6]; 
3732:..\src/command_processing.c ****     int16 aux_int16;
3733:..\src/command_processing.c ****     
3734:..\src/command_processing.c ****     //Header package
3735:..\src/command_processing.c **** 
3736:..\src/command_processing.c ****     packet_data[0] = CMD_GET_CURRENTS;
3737:..\src/command_processing.c **** 
3738:..\src/command_processing.c ****     if (c_mem.dev.dev_type != AIR_CHAMBERS_FB){
3739:..\src/command_processing.c ****         // Currents
3740:..\src/command_processing.c ****         aux_int16 =  0; //Real current
3741:..\src/command_processing.c ****     }
3742:..\src/command_processing.c ****     else {
3743:..\src/command_processing.c ****         // Send pressure times 100 here instead of current (Simulink use)
3744:..\src/command_processing.c ****         aux_int16 = (int16)(g_fb_meas.pressure*100.0); //Pressure
3745:..\src/command_processing.c ****     }
3746:..\src/command_processing.c ****     packet_data[2] = ((char*)(&aux_int16))[0];
3747:..\src/command_processing.c ****     packet_data[1] = ((char*)(&aux_int16))[1];
3748:..\src/command_processing.c ****     
3749:..\src/command_processing.c ****     if (c_mem.dev.use_2nd_motor_flag == TRUE) {
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 565


3750:..\src/command_processing.c ****         aux_int16 = (int16) g_measOld[g_mem.motor[1].encoder_line].curr; //Real current motor 2
3751:..\src/command_processing.c ****     }
3752:..\src/command_processing.c ****     else {
3753:..\src/command_processing.c ****         aux_int16 =  0; //Estimated current
3754:..\src/command_processing.c ****     }
3755:..\src/command_processing.c ****     packet_data[4] = ((char*)(&aux_int16))[0];
3756:..\src/command_processing.c ****     packet_data[3] = ((char*)(&aux_int16))[1];
3757:..\src/command_processing.c **** 
3758:..\src/command_processing.c ****     // Calculate Checksum and send message to UART 
3759:..\src/command_processing.c **** 
3760:..\src/command_processing.c ****     packet_data[5] = LCRChecksum (packet_data, 5);
3761:..\src/command_processing.c ****     
3762:..\src/command_processing.c ****     commWrite(packet_data, 6);
3763:..\src/command_processing.c **** }
3764:..\src/command_processing.c **** */
3765:..\src/command_processing.c **** 
3766:..\src/command_processing.c **** void cmd_get_currents_for_cuff(){
 25795              		.loc 1 3766 0
 25796              		.cfi_startproc
 25797              		@ args = 0, pretend = 0, frame = 8
 25798              		@ frame_needed = 1, uses_anonymous_args = 0
 25799 0000 80B5     		push	{r7, lr}
 25800              		.cfi_def_cfa_offset 8
 25801              		.cfi_offset 7, -8
 25802              		.cfi_offset 14, -4
 25803 0002 82B0     		sub	sp, sp, #8
 25804              		.cfi_def_cfa_offset 16
 25805 0004 00AF     		add	r7, sp, #0
 25806              		.cfi_def_cfa_register 7
3767:..\src/command_processing.c ****     
3768:..\src/command_processing.c ****     // Packet: header + motor_measure(int16) + crc
3769:..\src/command_processing.c ****     
3770:..\src/command_processing.c ****     uint8 packet_data[4]; 
3771:..\src/command_processing.c ****     int16 aux_int16;
3772:..\src/command_processing.c ****     
3773:..\src/command_processing.c ****     //Header package
3774:..\src/command_processing.c **** 
3775:..\src/command_processing.c ****     packet_data[0] = CMD_SET_CUFF_INPUTS;
 25807              		.loc 1 3775 0
 25808 0006 8E23     		movs	r3, #142
 25809 0008 3B71     		strb	r3, [r7, #4]
3776:..\src/command_processing.c **** 
3777:..\src/command_processing.c ****     aux_int16 = (int16) g_measOld[g_mem.motor[0].encoder_line].estim_curr; //Estimated Current
 25810              		.loc 1 3777 0
 25811 000a 144B     		ldr	r3, .L986
 25812 000c 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 25813 0010 1946     		mov	r1, r3
 25814 0012 134A     		ldr	r2, .L986+4
 25815 0014 3423     		movs	r3, #52
 25816 0016 03FB01F3 		mul	r3, r3, r1
 25817 001a 1344     		add	r3, r3, r2
 25818 001c 1033     		adds	r3, r3, #16
 25819 001e 1B68     		ldr	r3, [r3]
 25820 0020 1BB2     		sxth	r3, r3
 25821 0022 7B80     		strh	r3, [r7, #2]	@ movhi
3778:..\src/command_processing.c ****     packet_data[2] = ((char*)(&aux_int16))[0];
 25822              		.loc 1 3778 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 566


 25823 0024 BB1C     		adds	r3, r7, #2
 25824 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 25825 0028 BB71     		strb	r3, [r7, #6]
3779:..\src/command_processing.c ****     packet_data[1] = ((char*)(&aux_int16))[1];
 25826              		.loc 1 3779 0
 25827 002a BB1C     		adds	r3, r7, #2
 25828 002c 0133     		adds	r3, r3, #1
 25829 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 25830 0030 7B71     		strb	r3, [r7, #5]
3780:..\src/command_processing.c **** 
3781:..\src/command_processing.c ****     // Calculate Checksum and send message to UART 
3782:..\src/command_processing.c **** 
3783:..\src/command_processing.c ****     packet_data[3] = LCRChecksum (packet_data, 3);
 25831              		.loc 1 3783 0
 25832 0032 3B1D     		adds	r3, r7, #4
 25833 0034 0321     		movs	r1, #3
 25834 0036 1846     		mov	r0, r3
 25835 0038 FFF7FEFF 		bl	LCRChecksum
 25836 003c 0346     		mov	r3, r0
 25837 003e FB71     		strb	r3, [r7, #7]
3784:..\src/command_processing.c ****     
3785:..\src/command_processing.c ****     commWriteID(packet_data, 4, g_mem.dev.id -1);
 25838              		.loc 1 3785 0
 25839 0040 064B     		ldr	r3, .L986
 25840 0042 93F8A030 		ldrb	r3, [r3, #160]	@ zero_extendqisi2
 25841 0046 013B     		subs	r3, r3, #1
 25842 0048 DAB2     		uxtb	r2, r3
 25843 004a 3B1D     		adds	r3, r7, #4
 25844 004c 0421     		movs	r1, #4
 25845 004e 1846     		mov	r0, r3
 25846 0050 FFF7FEFF 		bl	commWriteID
3786:..\src/command_processing.c **** }
 25847              		.loc 1 3786 0
 25848 0054 00BF     		nop
 25849 0056 0837     		adds	r7, r7, #8
 25850              		.cfi_def_cfa_offset 8
 25851 0058 BD46     		mov	sp, r7
 25852              		.cfi_def_cfa_register 13
 25853              		@ sp needed
 25854 005a 80BD     		pop	{r7, pc}
 25855              	.L987:
 25856              		.align	2
 25857              	.L986:
 25858 005c 00000000 		.word	g_mem
 25859 0060 00000000 		.word	g_measOld
 25860              		.cfi_endproc
 25861              	.LFE103:
 25862              		.size	cmd_get_currents_for_cuff, .-cmd_get_currents_for_cuff
 25863              		.section	.text.commReadResCurrFromSH,"ax",%progbits
 25864              		.align	2
 25865              		.global	commReadResCurrFromSH
 25866              		.thumb
 25867              		.thumb_func
 25868              		.type	commReadResCurrFromSH, %function
 25869              	commReadResCurrFromSH:
 25870              	.LFB104:
3787:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 567


3788:..\src/command_processing.c **** //==============================================================================
3789:..\src/command_processing.c **** //                                  READ RESIDUAL CURRENT FUNCTION FROM SOFTHAND
3790:..\src/command_processing.c **** //==============================================================================
3791:..\src/command_processing.c **** 
3792:..\src/command_processing.c **** int16 commReadResCurrFromSH()
3793:..\src/command_processing.c **** {
 25871              		.loc 1 3793 0
 25872              		.cfi_startproc
 25873              		@ args = 0, pretend = 0, frame = 32
 25874              		@ frame_needed = 1, uses_anonymous_args = 0
 25875 0000 80B5     		push	{r7, lr}
 25876              		.cfi_def_cfa_offset 8
 25877              		.cfi_offset 7, -8
 25878              		.cfi_offset 14, -4
 25879 0002 88B0     		sub	sp, sp, #32
 25880              		.cfi_def_cfa_offset 40
 25881 0004 00AF     		add	r7, sp, #0
 25882              		.cfi_def_cfa_register 7
3794:..\src/command_processing.c ****     uint8 packet_data[16];
3795:..\src/command_processing.c ****     uint8 packet_lenght;
3796:..\src/command_processing.c ****     int16 curr_diff = 0;
 25883              		.loc 1 3796 0
 25884 0006 0023     		movs	r3, #0
 25885 0008 FB83     		strh	r3, [r7, #30]	@ movhi
3797:..\src/command_processing.c ****     uint32 t_start, t_end;
3798:..\src/command_processing.c ****     uint8 read_flag = TRUE;
 25886              		.loc 1 3798 0
 25887 000a 0123     		movs	r3, #1
 25888 000c 7B77     		strb	r3, [r7, #29]
3799:..\src/command_processing.c **** 
3800:..\src/command_processing.c ****     packet_lenght = 2;
 25889              		.loc 1 3800 0
 25890 000e 0223     		movs	r3, #2
 25891 0010 3B77     		strb	r3, [r7, #28]
3801:..\src/command_processing.c ****     packet_data[0] = CMD_GET_CURR_DIFF;
 25892              		.loc 1 3801 0
 25893 0012 8C23     		movs	r3, #140
 25894 0014 3B71     		strb	r3, [r7, #4]
3802:..\src/command_processing.c ****     packet_data[1] = CMD_GET_CURR_DIFF;
 25895              		.loc 1 3802 0
 25896 0016 8C23     		movs	r3, #140
 25897 0018 7B71     		strb	r3, [r7, #5]
3803:..\src/command_processing.c ****     commWriteID(packet_data, packet_lenght, c_mem.MS.slave_ID);
 25898              		.loc 1 3803 0
 25899 001a 3B7F     		ldrb	r3, [r7, #28]	@ zero_extendqisi2
 25900 001c 99B2     		uxth	r1, r3
 25901 001e 1D4B     		ldr	r3, .L995
 25902 0020 93F8C122 		ldrb	r2, [r3, #705]	@ zero_extendqisi2
 25903 0024 3B1D     		adds	r3, r7, #4
 25904 0026 1846     		mov	r0, r3
 25905 0028 FFF7FEFF 		bl	commWriteID
3804:..\src/command_processing.c **** 
3805:..\src/command_processing.c ****     t_start = (uint32) MY_TIMER_ReadCounter();
 25906              		.loc 1 3805 0
 25907 002c FFF7FEFF 		bl	MY_TIMER_ReadCounter
 25908 0030 0346     		mov	r3, r0
 25909 0032 BB61     		str	r3, [r7, #24]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 568


3806:..\src/command_processing.c ****     while(g_rx.buffer[0] != CMD_SET_CUFF_INPUTS) {
 25910              		.loc 1 3806 0
 25911 0034 18E0     		b	.L989
 25912              	.L992:
3807:..\src/command_processing.c ****         if (interrupt_flag){
 25913              		.loc 1 3807 0
 25914 0036 184B     		ldr	r3, .L995+4
 25915 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 25916 003a 002B     		cmp	r3, #0
 25917 003c 04D0     		beq	.L990
3808:..\src/command_processing.c ****             interrupt_flag = FALSE;
 25918              		.loc 1 3808 0
 25919 003e 164B     		ldr	r3, .L995+4
 25920 0040 0022     		movs	r2, #0
 25921 0042 1A70     		strb	r2, [r3]
3809:..\src/command_processing.c ****             interrupt_manager();
 25922              		.loc 1 3809 0
 25923 0044 FFF7FEFF 		bl	interrupt_manager
 25924              	.L990:
3810:..\src/command_processing.c ****         }
3811:..\src/command_processing.c **** 
3812:..\src/command_processing.c ****         t_end = (uint32) MY_TIMER_ReadCounter();
 25925              		.loc 1 3812 0
 25926 0048 FFF7FEFF 		bl	MY_TIMER_ReadCounter
 25927 004c 0346     		mov	r3, r0
 25928 004e 7B61     		str	r3, [r7, #20]
3813:..\src/command_processing.c ****         if((t_start - t_end) > 4500000){            // 4.5 s timeout
 25929              		.loc 1 3813 0
 25930 0050 BA69     		ldr	r2, [r7, #24]
 25931 0052 7B69     		ldr	r3, [r7, #20]
 25932 0054 D31A     		subs	r3, r2, r3
 25933 0056 114A     		ldr	r2, .L995+8
 25934 0058 9342     		cmp	r3, r2
 25935 005a 05D9     		bls	.L989
3814:..\src/command_processing.c ****             read_flag = FALSE;
 25936              		.loc 1 3814 0
 25937 005c 0023     		movs	r3, #0
 25938 005e 7B77     		strb	r3, [r7, #29]
3815:..\src/command_processing.c ****             master_mode = 0;                // Exit from master mode
 25939              		.loc 1 3815 0
 25940 0060 0F4B     		ldr	r3, .L995+12
 25941 0062 0022     		movs	r2, #0
 25942 0064 1A70     		strb	r2, [r3]
3816:..\src/command_processing.c ****             break;
 25943              		.loc 1 3816 0
 25944 0066 03E0     		b	.L991
 25945              	.L989:
3806:..\src/command_processing.c ****         if (interrupt_flag){
 25946              		.loc 1 3806 0
 25947 0068 0E4B     		ldr	r3, .L995+16
 25948 006a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 25949 006c 8E2B     		cmp	r3, #142
 25950 006e E2D1     		bne	.L992
 25951              	.L991:
3817:..\src/command_processing.c ****         }
3818:..\src/command_processing.c ****     }
3819:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 569


3820:..\src/command_processing.c ****     if (read_flag) {
 25952              		.loc 1 3820 0
 25953 0070 7B7F     		ldrb	r3, [r7, #29]	@ zero_extendqisi2
 25954 0072 002B     		cmp	r3, #0
 25955 0074 08D0     		beq	.L993
3821:..\src/command_processing.c ****         curr_diff = (int16)(g_rx.buffer[1]<<8 | g_rx.buffer[2]);                        
 25956              		.loc 1 3821 0
 25957 0076 0B4B     		ldr	r3, .L995+16
 25958 0078 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 25959 007a 1B02     		lsls	r3, r3, #8
 25960 007c 1AB2     		sxth	r2, r3
 25961 007e 094B     		ldr	r3, .L995+16
 25962 0080 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 25963 0082 1BB2     		sxth	r3, r3
 25964 0084 1343     		orrs	r3, r3, r2
 25965 0086 FB83     		strh	r3, [r7, #30]	@ movhi
 25966              	.L993:
3822:..\src/command_processing.c ****     }
3823:..\src/command_processing.c ****     
3824:..\src/command_processing.c ****     return curr_diff;
 25967              		.loc 1 3824 0
 25968 0088 B7F91E30 		ldrsh	r3, [r7, #30]
3825:..\src/command_processing.c **** }
 25969              		.loc 1 3825 0
 25970 008c 1846     		mov	r0, r3
 25971 008e 2037     		adds	r7, r7, #32
 25972              		.cfi_def_cfa_offset 8
 25973 0090 BD46     		mov	sp, r7
 25974              		.cfi_def_cfa_register 13
 25975              		@ sp needed
 25976 0092 80BD     		pop	{r7, pc}
 25977              	.L996:
 25978              		.align	2
 25979              	.L995:
 25980 0094 00000000 		.word	c_mem
 25981 0098 00000000 		.word	interrupt_flag
 25982 009c 20AA4400 		.word	4500000
 25983 00a0 00000000 		.word	master_mode
 25984 00a4 00000000 		.word	g_rx
 25985              		.cfi_endproc
 25986              	.LFE104:
 25987              		.size	commReadResCurrFromSH, .-commReadResCurrFromSH
 25988              		.section	.text.cmd_set_baudrate,"ax",%progbits
 25989              		.align	2
 25990              		.global	cmd_set_baudrate
 25991              		.thumb
 25992              		.thumb_func
 25993              		.type	cmd_set_baudrate, %function
 25994              	cmd_set_baudrate:
 25995              	.LFB105:
3826:..\src/command_processing.c **** 
3827:..\src/command_processing.c **** void cmd_set_baudrate(){
 25996              		.loc 1 3827 0
 25997              		.cfi_startproc
 25998              		@ args = 0, pretend = 0, frame = 0
 25999              		@ frame_needed = 1, uses_anonymous_args = 0
 26000 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 570


 26001              		.cfi_def_cfa_offset 8
 26002              		.cfi_offset 7, -8
 26003              		.cfi_offset 14, -4
 26004 0002 00AF     		add	r7, sp, #0
 26005              		.cfi_def_cfa_register 7
3828:..\src/command_processing.c ****     
3829:..\src/command_processing.c ****     // Set BaudRate
3830:..\src/command_processing.c ****     c_mem.dev.baud_rate = g_rx.buffer[1];
 26006              		.loc 1 3830 0
 26007 0004 094B     		ldr	r3, .L1002
 26008 0006 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 26009 0008 094B     		ldr	r3, .L1002+4
 26010 000a 83F8AA20 		strb	r2, [r3, #170]
3831:..\src/command_processing.c ****     
3832:..\src/command_processing.c ****     switch(g_rx.buffer[1]){
 26011              		.loc 1 3832 0
 26012 000e 074B     		ldr	r3, .L1002
 26013 0010 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 26014 0012 0D2B     		cmp	r3, #13
 26015 0014 04D1     		bne	.L1001
3833:..\src/command_processing.c ****         case 13:
3834:..\src/command_processing.c ****             CLOCK_UART_SetDividerValue(13);
 26016              		.loc 1 3834 0
 26017 0016 0121     		movs	r1, #1
 26018 0018 0C20     		movs	r0, #12
 26019 001a FFF7FEFF 		bl	CLOCK_UART_SetDividerRegister
3835:..\src/command_processing.c ****             break;
 26020              		.loc 1 3835 0
 26021 001e 03E0     		b	.L1000
 26022              	.L1001:
3836:..\src/command_processing.c ****         default:
3837:..\src/command_processing.c ****             CLOCK_UART_SetDividerValue(3);
 26023              		.loc 1 3837 0
 26024 0020 0121     		movs	r1, #1
 26025 0022 0220     		movs	r0, #2
 26026 0024 FFF7FEFF 		bl	CLOCK_UART_SetDividerRegister
 26027              	.L1000:
3838:..\src/command_processing.c ****     }
3839:..\src/command_processing.c **** }
 26028              		.loc 1 3839 0
 26029 0028 00BF     		nop
 26030 002a 80BD     		pop	{r7, pc}
 26031              	.L1003:
 26032              		.align	2
 26033              	.L1002:
 26034 002c 00000000 		.word	g_rx
 26035 0030 00000000 		.word	c_mem
 26036              		.cfi_endproc
 26037              	.LFE105:
 26038              		.size	cmd_set_baudrate, .-cmd_set_baudrate
 26039              		.section	.text.cmd_ping,"ax",%progbits
 26040              		.align	2
 26041              		.global	cmd_ping
 26042              		.thumb
 26043              		.thumb_func
 26044              		.type	cmd_ping, %function
 26045              	cmd_ping:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 571


 26046              	.LFB106:
3840:..\src/command_processing.c **** 
3841:..\src/command_processing.c **** void cmd_ping(){
 26047              		.loc 1 3841 0
 26048              		.cfi_startproc
 26049              		@ args = 0, pretend = 0, frame = 8
 26050              		@ frame_needed = 1, uses_anonymous_args = 0
 26051 0000 80B5     		push	{r7, lr}
 26052              		.cfi_def_cfa_offset 8
 26053              		.cfi_offset 7, -8
 26054              		.cfi_offset 14, -4
 26055 0002 82B0     		sub	sp, sp, #8
 26056              		.cfi_def_cfa_offset 16
 26057 0004 00AF     		add	r7, sp, #0
 26058              		.cfi_def_cfa_register 7
3842:..\src/command_processing.c **** 
3843:..\src/command_processing.c ****     uint8 packet_data[2];
3844:..\src/command_processing.c **** 
3845:..\src/command_processing.c ****     // Header
3846:..\src/command_processing.c ****     packet_data[0] = CMD_PING;
 26059              		.loc 1 3846 0
 26060 0006 0023     		movs	r3, #0
 26061 0008 3B71     		strb	r3, [r7, #4]
3847:..\src/command_processing.c ****     
3848:..\src/command_processing.c ****     // Load Payload
3849:..\src/command_processing.c ****     packet_data[1] = CMD_PING;
 26062              		.loc 1 3849 0
 26063 000a 0023     		movs	r3, #0
 26064 000c 7B71     		strb	r3, [r7, #5]
3850:..\src/command_processing.c **** 
3851:..\src/command_processing.c ****     // Send Package to uart
3852:..\src/command_processing.c ****     commWrite(packet_data, 2);
 26065              		.loc 1 3852 0
 26066 000e 3B1D     		adds	r3, r7, #4
 26067 0010 0221     		movs	r1, #2
 26068 0012 1846     		mov	r0, r3
 26069 0014 FFF7FEFF 		bl	commWrite
3853:..\src/command_processing.c **** }
 26070              		.loc 1 3853 0
 26071 0018 00BF     		nop
 26072 001a 0837     		adds	r7, r7, #8
 26073              		.cfi_def_cfa_offset 8
 26074 001c BD46     		mov	sp, r7
 26075              		.cfi_def_cfa_register 13
 26076              		@ sp needed
 26077 001e 80BD     		pop	{r7, pc}
 26078              		.cfi_endproc
 26079              	.LFE106:
 26080              		.size	cmd_ping, .-cmd_ping
 26081              		.section	.text.cmd_get_inputs,"ax",%progbits
 26082              		.align	2
 26083              		.global	cmd_get_inputs
 26084              		.thumb
 26085              		.thumb_func
 26086              		.type	cmd_get_inputs, %function
 26087              	cmd_get_inputs:
 26088              	.LFB107:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 572


3854:..\src/command_processing.c **** 
3855:..\src/command_processing.c **** void cmd_get_inputs(){
 26089              		.loc 1 3855 0
 26090              		.cfi_startproc
 26091              		@ args = 0, pretend = 0, frame = 16
 26092              		@ frame_needed = 1, uses_anonymous_args = 0
 26093 0000 80B5     		push	{r7, lr}
 26094              		.cfi_def_cfa_offset 8
 26095              		.cfi_offset 7, -8
 26096              		.cfi_offset 14, -4
 26097 0002 84B0     		sub	sp, sp, #16
 26098              		.cfi_def_cfa_offset 24
 26099 0004 00AF     		add	r7, sp, #0
 26100              		.cfi_def_cfa_register 7
3856:..\src/command_processing.c **** 
3857:..\src/command_processing.c ****     // Packet: header + motor_measure(int16) + crc
3858:..\src/command_processing.c **** 
3859:..\src/command_processing.c ****     uint8 packet_data[6]; 
3860:..\src/command_processing.c ****     int16 aux_int16;
3861:..\src/command_processing.c ****     
3862:..\src/command_processing.c ****     //Header package
3863:..\src/command_processing.c **** 
3864:..\src/command_processing.c ****     packet_data[0] = CMD_GET_INPUTS;
 26101              		.loc 1 3864 0
 26102 0006 8323     		movs	r3, #131
 26103 0008 3B72     		strb	r3, [r7, #8]
3865:..\src/command_processing.c ****         
3866:..\src/command_processing.c ****     aux_int16 = (int16)(g_refOld[0].pos >> g_mem.enc[g_mem.motor[0].encoder_line].res[0]);
 26104              		.loc 1 3866 0
 26105 000a 234B     		ldr	r3, .L1006
 26106 000c 1A68     		ldr	r2, [r3]
 26107 000e 234B     		ldr	r3, .L1006+4
 26108 0010 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 26109 0014 1846     		mov	r0, r3
 26110 0016 2149     		ldr	r1, .L1006+4
 26111 0018 0346     		mov	r3, r0
 26112 001a 5B00     		lsls	r3, r3, #1
 26113 001c 0344     		add	r3, r3, r0
 26114 001e 1B01     		lsls	r3, r3, #4
 26115 0020 0B44     		add	r3, r3, r1
 26116 0022 03F29513 		addw	r3, r3, #405
 26117 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 26118 0028 42FA03F3 		asr	r3, r2, r3
 26119 002c 1BB2     		sxth	r3, r3
 26120 002e FB80     		strh	r3, [r7, #6]	@ movhi
3867:..\src/command_processing.c ****     packet_data[2] = ((char*)(&aux_int16))[0];
 26121              		.loc 1 3867 0
 26122 0030 BB1D     		adds	r3, r7, #6
 26123 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 26124 0034 BB72     		strb	r3, [r7, #10]
3868:..\src/command_processing.c ****     packet_data[1] = ((char*)(&aux_int16))[1];
 26125              		.loc 1 3868 0
 26126 0036 BB1D     		adds	r3, r7, #6
 26127 0038 0133     		adds	r3, r3, #1
 26128 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 26129 003c 7B72     		strb	r3, [r7, #9]
3869:..\src/command_processing.c ****     aux_int16 = (int16)(g_refOld[1].pos >> g_mem.enc[g_mem.motor[1].encoder_line].res[0]);
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 573


 26130              		.loc 1 3869 0
 26131 003e 164B     		ldr	r3, .L1006
 26132 0040 1A69     		ldr	r2, [r3, #16]
 26133 0042 164B     		ldr	r3, .L1006+4
 26134 0044 93F88031 		ldrb	r3, [r3, #384]	@ zero_extendqisi2
 26135 0048 1846     		mov	r0, r3
 26136 004a 1449     		ldr	r1, .L1006+4
 26137 004c 0346     		mov	r3, r0
 26138 004e 5B00     		lsls	r3, r3, #1
 26139 0050 0344     		add	r3, r3, r0
 26140 0052 1B01     		lsls	r3, r3, #4
 26141 0054 0B44     		add	r3, r3, r1
 26142 0056 03F29513 		addw	r3, r3, #405
 26143 005a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 26144 005c 42FA03F3 		asr	r3, r2, r3
 26145 0060 1BB2     		sxth	r3, r3
 26146 0062 FB80     		strh	r3, [r7, #6]	@ movhi
3870:..\src/command_processing.c ****     packet_data[4] = ((char*)(&aux_int16))[0];
 26147              		.loc 1 3870 0
 26148 0064 BB1D     		adds	r3, r7, #6
 26149 0066 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 26150 0068 3B73     		strb	r3, [r7, #12]
3871:..\src/command_processing.c ****     packet_data[3] = ((char*)(&aux_int16))[1];
 26151              		.loc 1 3871 0
 26152 006a BB1D     		adds	r3, r7, #6
 26153 006c 0133     		adds	r3, r3, #1
 26154 006e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 26155 0070 FB72     		strb	r3, [r7, #11]
3872:..\src/command_processing.c ****     
3873:..\src/command_processing.c ****     // Calculate Checksum and send message to UART 
3874:..\src/command_processing.c **** 
3875:..\src/command_processing.c ****     packet_data[5] = LCRChecksum(packet_data, 5);
 26156              		.loc 1 3875 0
 26157 0072 07F10803 		add	r3, r7, #8
 26158 0076 0521     		movs	r1, #5
 26159 0078 1846     		mov	r0, r3
 26160 007a FFF7FEFF 		bl	LCRChecksum
 26161 007e 0346     		mov	r3, r0
 26162 0080 7B73     		strb	r3, [r7, #13]
3876:..\src/command_processing.c **** 
3877:..\src/command_processing.c ****     commWrite(packet_data, 6);
 26163              		.loc 1 3877 0
 26164 0082 07F10803 		add	r3, r7, #8
 26165 0086 0621     		movs	r1, #6
 26166 0088 1846     		mov	r0, r3
 26167 008a FFF7FEFF 		bl	commWrite
3878:..\src/command_processing.c **** }
 26168              		.loc 1 3878 0
 26169 008e 00BF     		nop
 26170 0090 1037     		adds	r7, r7, #16
 26171              		.cfi_def_cfa_offset 8
 26172 0092 BD46     		mov	sp, r7
 26173              		.cfi_def_cfa_register 13
 26174              		@ sp needed
 26175 0094 80BD     		pop	{r7, pc}
 26176              	.L1007:
 26177 0096 00BF     		.align	2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 574


 26178              	.L1006:
 26179 0098 00000000 		.word	g_refOld
 26180 009c 00000000 		.word	g_mem
 26181              		.cfi_endproc
 26182              	.LFE107:
 26183              		.size	cmd_get_inputs, .-cmd_get_inputs
 26184              		.section	.text.cmd_store_params,"ax",%progbits
 26185              		.align	2
 26186              		.global	cmd_store_params
 26187              		.thumb
 26188              		.thumb_func
 26189              		.type	cmd_store_params, %function
 26190              	cmd_store_params:
 26191              	.LFB108:
3879:..\src/command_processing.c **** 
3880:..\src/command_processing.c **** void cmd_store_params(){
 26192              		.loc 1 3880 0
 26193              		.cfi_startproc
 26194              		@ args = 0, pretend = 0, frame = 16
 26195              		@ frame_needed = 1, uses_anonymous_args = 0
 26196 0000 80B5     		push	{r7, lr}
 26197              		.cfi_def_cfa_offset 8
 26198              		.cfi_offset 7, -8
 26199              		.cfi_offset 14, -4
 26200 0002 84B0     		sub	sp, sp, #16
 26201              		.cfi_def_cfa_offset 24
 26202 0004 00AF     		add	r7, sp, #0
 26203              		.cfi_def_cfa_register 7
3881:..\src/command_processing.c ****     
3882:..\src/command_processing.c ****     // Check input mode enabled
3883:..\src/command_processing.c ****     uint32 off_1;
3884:..\src/command_processing.c ****     float mult_1;
3885:..\src/command_processing.c ****     uint8 CYDATA packet_lenght = 2;
 26204              		.loc 1 3885 0
 26205 0006 0223     		movs	r3, #2
 26206 0008 FB73     		strb	r3, [r7, #15]
3886:..\src/command_processing.c ****     uint8 CYDATA packet_data[2];
3887:..\src/command_processing.c ****     uint8 CYDATA old_id;
3888:..\src/command_processing.c ****     
3889:..\src/command_processing.c ****     if( c_mem.motor[0].input_mode == INPUT_MODE_EXTERNAL ) {
 26207              		.loc 1 3889 0
 26208 000a 674B     		ldr	r3, .L1019
 26209 000c 93F80E31 		ldrb	r3, [r3, #270]	@ zero_extendqisi2
 26210 0010 002B     		cmp	r3, #0
 26211 0012 7CD1     		bne	.L1009
3890:..\src/command_processing.c ****         off_1 = c_mem.enc[c_mem.motor[0].encoder_line].m_off[0];
 26212              		.loc 1 3890 0
 26213 0014 644B     		ldr	r3, .L1019
 26214 0016 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 26215 001a 1946     		mov	r1, r3
 26216 001c 624A     		ldr	r2, .L1019
 26217 001e 0B46     		mov	r3, r1
 26218 0020 5B00     		lsls	r3, r3, #1
 26219 0022 0B44     		add	r3, r3, r1
 26220 0024 1B01     		lsls	r3, r3, #4
 26221 0026 1344     		add	r3, r3, r2
 26222 0028 03F5CC73 		add	r3, r3, #408
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 575


 26223 002c 1B68     		ldr	r3, [r3]
 26224 002e BB60     		str	r3, [r7, #8]
3891:..\src/command_processing.c ****         mult_1 = c_mem.enc[c_mem.motor[0].encoder_line].m_mult[0];
 26225              		.loc 1 3891 0
 26226 0030 5D4B     		ldr	r3, .L1019
 26227 0032 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 26228 0036 1946     		mov	r1, r3
 26229 0038 5B4A     		ldr	r2, .L1019
 26230 003a 0B46     		mov	r3, r1
 26231 003c 5B00     		lsls	r3, r3, #1
 26232 003e 0B44     		add	r3, r3, r1
 26233 0040 1B01     		lsls	r3, r3, #4
 26234 0042 1344     		add	r3, r3, r2
 26235 0044 03F5D273 		add	r3, r3, #420
 26236 0048 1B68     		ldr	r3, [r3]	@ float
 26237 004a 7B60     		str	r3, [r7, #4]	@ float
3892:..\src/command_processing.c **** 
3893:..\src/command_processing.c ****         g_refNew[0].pos = (int32)((float)g_refNew[0].pos / mult_1);
 26238              		.loc 1 3893 0
 26239 004c 574B     		ldr	r3, .L1019+4
 26240 004e 1B68     		ldr	r3, [r3]
 26241 0050 1846     		mov	r0, r3
 26242 0052 FFF7FEFF 		bl	__aeabi_i2f
 26243 0056 0346     		mov	r3, r0
 26244 0058 7968     		ldr	r1, [r7, #4]	@ float
 26245 005a 1846     		mov	r0, r3
 26246 005c FFF7FEFF 		bl	__aeabi_fdiv
 26247 0060 0346     		mov	r3, r0
 26248 0062 1846     		mov	r0, r3
 26249 0064 FFF7FEFF 		bl	__aeabi_f2iz
 26250 0068 0246     		mov	r2, r0
 26251 006a 504B     		ldr	r3, .L1019+4
 26252 006c 1A60     		str	r2, [r3]
3894:..\src/command_processing.c **** 
3895:..\src/command_processing.c ****         g_refNew[0].pos = (int32)((float)g_refNew[0].pos * g_mem.enc[c_mem.motor[0].encoder_line].m
 26253              		.loc 1 3895 0
 26254 006e 4F4B     		ldr	r3, .L1019+4
 26255 0070 1B68     		ldr	r3, [r3]
 26256 0072 1846     		mov	r0, r3
 26257 0074 FFF7FEFF 		bl	__aeabi_i2f
 26258 0078 4B4B     		ldr	r3, .L1019
 26259 007a 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 26260 007e 1946     		mov	r1, r3
 26261 0080 4B4A     		ldr	r2, .L1019+8
 26262 0082 0B46     		mov	r3, r1
 26263 0084 5B00     		lsls	r3, r3, #1
 26264 0086 0B44     		add	r3, r3, r1
 26265 0088 1B01     		lsls	r3, r3, #4
 26266 008a 1344     		add	r3, r3, r2
 26267 008c 03F5D273 		add	r3, r3, #420
 26268 0090 1B68     		ldr	r3, [r3]	@ float
 26269 0092 1946     		mov	r1, r3
 26270 0094 FFF7FEFF 		bl	__aeabi_fmul
 26271 0098 0346     		mov	r3, r0
 26272 009a 1846     		mov	r0, r3
 26273 009c FFF7FEFF 		bl	__aeabi_f2iz
 26274 00a0 0246     		mov	r2, r0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 576


 26275 00a2 424B     		ldr	r3, .L1019+4
 26276 00a4 1A60     		str	r2, [r3]
3896:..\src/command_processing.c **** 
3897:..\src/command_processing.c ****         g_refNew[0].pos += (g_mem.enc[c_mem.motor[0].encoder_line].m_off[0] - off_1);
 26277              		.loc 1 3897 0
 26278 00a6 414B     		ldr	r3, .L1019+4
 26279 00a8 1B68     		ldr	r3, [r3]
 26280 00aa 1846     		mov	r0, r3
 26281 00ac 3E4B     		ldr	r3, .L1019
 26282 00ae 93F81031 		ldrb	r3, [r3, #272]	@ zero_extendqisi2
 26283 00b2 1946     		mov	r1, r3
 26284 00b4 3E4A     		ldr	r2, .L1019+8
 26285 00b6 0B46     		mov	r3, r1
 26286 00b8 5B00     		lsls	r3, r3, #1
 26287 00ba 0B44     		add	r3, r3, r1
 26288 00bc 1B01     		lsls	r3, r3, #4
 26289 00be 1344     		add	r3, r3, r2
 26290 00c0 03F5CC73 		add	r3, r3, #408
 26291 00c4 1B68     		ldr	r3, [r3]
 26292 00c6 1A46     		mov	r2, r3
 26293 00c8 BB68     		ldr	r3, [r7, #8]
 26294 00ca D31A     		subs	r3, r2, r3
 26295 00cc 0344     		add	r3, r3, r0
 26296 00ce 1A46     		mov	r2, r3
 26297 00d0 364B     		ldr	r3, .L1019+4
 26298 00d2 1A60     		str	r2, [r3]
3898:..\src/command_processing.c ****         
3899:..\src/command_processing.c ****         // Check position Limits
3900:..\src/command_processing.c **** 
3901:..\src/command_processing.c ****         if (c_mem.motor[0].pos_lim_flag) {                   // position limiting
 26299              		.loc 1 3901 0
 26300 00d4 344B     		ldr	r3, .L1019
 26301 00d6 93F8E330 		ldrb	r3, [r3, #227]	@ zero_extendqisi2
 26302 00da 002B     		cmp	r3, #0
 26303 00dc 17D0     		beq	.L1009
3902:..\src/command_processing.c ****             if (g_refNew[0].pos < c_mem.motor[0].pos_lim_inf) 
 26304              		.loc 1 3902 0
 26305 00de 334B     		ldr	r3, .L1019+4
 26306 00e0 1A68     		ldr	r2, [r3]
 26307 00e2 314B     		ldr	r3, .L1019
 26308 00e4 D3F8E430 		ldr	r3, [r3, #228]
 26309 00e8 9A42     		cmp	r2, r3
 26310 00ea 04DA     		bge	.L1010
3903:..\src/command_processing.c ****                 g_refNew[0].pos = c_mem.motor[0].pos_lim_inf;
 26311              		.loc 1 3903 0
 26312 00ec 2E4B     		ldr	r3, .L1019
 26313 00ee D3F8E430 		ldr	r3, [r3, #228]
 26314 00f2 2E4A     		ldr	r2, .L1019+4
 26315 00f4 1360     		str	r3, [r2]
 26316              	.L1010:
3904:..\src/command_processing.c **** 
3905:..\src/command_processing.c ****             if (g_refNew[0].pos > c_mem.motor[0].pos_lim_sup) 
 26317              		.loc 1 3905 0
 26318 00f6 2D4B     		ldr	r3, .L1019+4
 26319 00f8 1A68     		ldr	r2, [r3]
 26320 00fa 2B4B     		ldr	r3, .L1019
 26321 00fc D3F8E830 		ldr	r3, [r3, #232]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 577


 26322 0100 9A42     		cmp	r2, r3
 26323 0102 04DD     		ble	.L1009
3906:..\src/command_processing.c ****                 g_refNew[0].pos = c_mem.motor[0].pos_lim_sup;
 26324              		.loc 1 3906 0
 26325 0104 284B     		ldr	r3, .L1019
 26326 0106 D3F8E830 		ldr	r3, [r3, #232]
 26327 010a 284A     		ldr	r2, .L1019+4
 26328 010c 1360     		str	r3, [r2]
 26329              	.L1009:
3907:..\src/command_processing.c ****         }
3908:..\src/command_processing.c ****     }
3909:..\src/command_processing.c ****     
3910:..\src/command_processing.c ****     // If SD is used, create new param and data file
3911:..\src/command_processing.c ****     if (c_mem.exp.read_exp_port_flag == EXP_SD_RTC) {
 26330              		.loc 1 3911 0
 26331 010e 264B     		ldr	r3, .L1019
 26332 0110 93F82632 		ldrb	r3, [r3, #550]	@ zero_extendqisi2
 26333 0114 012B     		cmp	r3, #1
 26334 0116 06D1     		bne	.L1011
3912:..\src/command_processing.c ****         FS_FClose(pFile);
 26335              		.loc 1 3912 0
 26336 0118 264B     		ldr	r3, .L1019+12
 26337 011a 1B68     		ldr	r3, [r3]
 26338 011c 1846     		mov	r0, r3
 26339 011e FFF7FEFF 		bl	FS_FClose
3913:..\src/command_processing.c ****         
3914:..\src/command_processing.c ****         InitSD_FS();
 26340              		.loc 1 3914 0
 26341 0122 FFF7FEFF 		bl	InitSD_FS
 26342              	.L1011:
3915:..\src/command_processing.c ****     }
3916:..\src/command_processing.c ****    
3917:..\src/command_processing.c ****     // Store params 
3918:..\src/command_processing.c **** 
3919:..\src/command_processing.c ****     if (c_mem.dev.id != g_mem.dev.id) {     //If a new id is going to be set we will lose communica
 26343              		.loc 1 3919 0
 26344 0126 204B     		ldr	r3, .L1019
 26345 0128 93F8A020 		ldrb	r2, [r3, #160]	@ zero_extendqisi2
 26346 012c 204B     		ldr	r3, .L1019+8
 26347 012e 93F8A030 		ldrb	r3, [r3, #160]	@ zero_extendqisi2
 26348 0132 9A42     		cmp	r2, r3
 26349 0134 21D0     		beq	.L1012
3920:..\src/command_processing.c ****         old_id = c_mem.dev.id;          //after the memstore(0) and the ACK won't be recognised
 26350              		.loc 1 3920 0
 26351 0136 1C4B     		ldr	r3, .L1019
 26352 0138 93F8A030 		ldrb	r3, [r3, #160]
 26353 013c FB70     		strb	r3, [r7, #3]
3921:..\src/command_processing.c ****         if(memStore(0)) {
 26354              		.loc 1 3921 0
 26355 013e 0020     		movs	r0, #0
 26356 0140 FFF7FEFF 		bl	memStore
 26357 0144 0346     		mov	r3, r0
 26358 0146 002B     		cmp	r3, #0
 26359 0148 0BD0     		beq	.L1013
3922:..\src/command_processing.c ****             packet_data[0] = ACK_OK;
 26360              		.loc 1 3922 0
 26361 014a 0123     		movs	r3, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 578


 26362 014c 3B70     		strb	r3, [r7]
3923:..\src/command_processing.c ****             packet_data[1] = ACK_OK;
 26363              		.loc 1 3923 0
 26364 014e 0123     		movs	r3, #1
 26365 0150 7B70     		strb	r3, [r7, #1]
3924:..\src/command_processing.c ****             commWrite_old_id(packet_data, packet_lenght, old_id);
 26366              		.loc 1 3924 0
 26367 0152 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 26368 0154 99B2     		uxth	r1, r3
 26369 0156 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 26370 0158 3B46     		mov	r3, r7
 26371 015a 1846     		mov	r0, r3
 26372 015c FFF7FEFF 		bl	commWrite_old_id
 26373 0160 18E0     		b	.L1015
 26374              	.L1013:
3925:..\src/command_processing.c ****         }    
3926:..\src/command_processing.c ****         else{
3927:..\src/command_processing.c ****             packet_data[0] = ACK_ERROR;
 26375              		.loc 1 3927 0
 26376 0162 0023     		movs	r3, #0
 26377 0164 3B70     		strb	r3, [r7]
3928:..\src/command_processing.c ****             packet_data[1] = ACK_ERROR;
 26378              		.loc 1 3928 0
 26379 0166 0023     		movs	r3, #0
 26380 0168 7B70     		strb	r3, [r7, #1]
3929:..\src/command_processing.c ****             commWrite_old_id(packet_data, packet_lenght, old_id);
 26381              		.loc 1 3929 0
 26382 016a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 26383 016c 99B2     		uxth	r1, r3
 26384 016e FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 26385 0170 3B46     		mov	r3, r7
 26386 0172 1846     		mov	r0, r3
 26387 0174 FFF7FEFF 		bl	commWrite_old_id
 26388 0178 0CE0     		b	.L1015
 26389              	.L1012:
3930:..\src/command_processing.c ****         }
3931:..\src/command_processing.c ****     }    
3932:..\src/command_processing.c ****     else {
3933:..\src/command_processing.c ****         if(memStore(0))
 26390              		.loc 1 3933 0
 26391 017a 0020     		movs	r0, #0
 26392 017c FFF7FEFF 		bl	memStore
 26393 0180 0346     		mov	r3, r0
 26394 0182 002B     		cmp	r3, #0
 26395 0184 03D0     		beq	.L1016
3934:..\src/command_processing.c ****             sendAcknowledgment(ACK_OK);
 26396              		.loc 1 3934 0
 26397 0186 0120     		movs	r0, #1
 26398 0188 FFF7FEFF 		bl	sendAcknowledgment
 26399 018c 02E0     		b	.L1015
 26400              	.L1016:
3935:..\src/command_processing.c ****         else
3936:..\src/command_processing.c ****             sendAcknowledgment(ACK_ERROR);
 26401              		.loc 1 3936 0
 26402 018e 0020     		movs	r0, #0
 26403 0190 FFF7FEFF 		bl	sendAcknowledgment
 26404              	.L1015:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 579


3937:..\src/command_processing.c ****     }
3938:..\src/command_processing.c ****     
3939:..\src/command_processing.c ****     // FW reset (if necessary)
3940:..\src/command_processing.c ****     if (reset_PSoC_flag == TRUE) {
 26405              		.loc 1 3940 0
 26406 0194 084B     		ldr	r3, .L1019+16
 26407 0196 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 26408 0198 012B     		cmp	r3, #1
 26409 019a 01D1     		bne	.L1018
3941:..\src/command_processing.c ****         CySoftwareReset();
 26410              		.loc 1 3941 0
 26411 019c FFF7FEFF 		bl	CySoftwareReset
 26412              	.L1018:
3942:..\src/command_processing.c ****     }
3943:..\src/command_processing.c **** }
 26413              		.loc 1 3943 0
 26414 01a0 00BF     		nop
 26415 01a2 1037     		adds	r7, r7, #16
 26416              		.cfi_def_cfa_offset 8
 26417 01a4 BD46     		mov	sp, r7
 26418              		.cfi_def_cfa_register 13
 26419              		@ sp needed
 26420 01a6 80BD     		pop	{r7, pc}
 26421              	.L1020:
 26422              		.align	2
 26423              	.L1019:
 26424 01a8 00000000 		.word	c_mem
 26425 01ac 00000000 		.word	g_refNew
 26426 01b0 00000000 		.word	g_mem
 26427 01b4 00000000 		.word	pFile
 26428 01b8 00000000 		.word	reset_PSoC_flag
 26429              		.cfi_endproc
 26430              	.LFE108:
 26431              		.size	cmd_store_params, .-cmd_store_params
 26432              		.section	.text.cmd_get_emg,"ax",%progbits
 26433              		.align	2
 26434              		.global	cmd_get_emg
 26435              		.thumb
 26436              		.thumb_func
 26437              		.type	cmd_get_emg, %function
 26438              	cmd_get_emg:
 26439              	.LFB109:
3944:..\src/command_processing.c **** 
3945:..\src/command_processing.c **** void cmd_get_emg(){
 26440              		.loc 1 3945 0
 26441              		.cfi_startproc
 26442              		@ args = 0, pretend = 0, frame = 16
 26443              		@ frame_needed = 1, uses_anonymous_args = 0
 26444 0000 80B5     		push	{r7, lr}
 26445              		.cfi_def_cfa_offset 8
 26446              		.cfi_offset 7, -8
 26447              		.cfi_offset 14, -4
 26448 0002 84B0     		sub	sp, sp, #16
 26449              		.cfi_def_cfa_offset 24
 26450 0004 00AF     		add	r7, sp, #0
 26451              		.cfi_def_cfa_register 7
3946:..\src/command_processing.c ****     
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 580


3947:..\src/command_processing.c ****     uint8 packet_data[6];
3948:..\src/command_processing.c ****     int16 aux_int16;
3949:..\src/command_processing.c ****     
3950:..\src/command_processing.c ****     // Header        
3951:..\src/command_processing.c ****     packet_data[0] = CMD_GET_EMG;
 26452              		.loc 1 3951 0
 26453 0006 8823     		movs	r3, #136
 26454 0008 3B72     		strb	r3, [r7, #8]
3952:..\src/command_processing.c ****     
3953:..\src/command_processing.c ****     aux_int16 = (int16) g_adc_measOld.emg[0];
 26455              		.loc 1 3953 0
 26456 000a 144B     		ldr	r3, .L1022
 26457 000c 1B68     		ldr	r3, [r3]
 26458 000e 1BB2     		sxth	r3, r3
 26459 0010 FB80     		strh	r3, [r7, #6]	@ movhi
3954:..\src/command_processing.c ****     packet_data[2] = ((char*)(&aux_int16))[0];
 26460              		.loc 1 3954 0
 26461 0012 BB1D     		adds	r3, r7, #6
 26462 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 26463 0016 BB72     		strb	r3, [r7, #10]
3955:..\src/command_processing.c ****     packet_data[1] = ((char*)(&aux_int16))[1];
 26464              		.loc 1 3955 0
 26465 0018 BB1D     		adds	r3, r7, #6
 26466 001a 0133     		adds	r3, r3, #1
 26467 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 26468 001e 7B72     		strb	r3, [r7, #9]
3956:..\src/command_processing.c ****     
3957:..\src/command_processing.c ****     aux_int16 = (int16) g_adc_measOld.emg[1];
 26469              		.loc 1 3957 0
 26470 0020 0E4B     		ldr	r3, .L1022
 26471 0022 5B68     		ldr	r3, [r3, #4]
 26472 0024 1BB2     		sxth	r3, r3
 26473 0026 FB80     		strh	r3, [r7, #6]	@ movhi
3958:..\src/command_processing.c ****     packet_data[4] = ((char*)(&aux_int16))[0];
 26474              		.loc 1 3958 0
 26475 0028 BB1D     		adds	r3, r7, #6
 26476 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 26477 002c 3B73     		strb	r3, [r7, #12]
3959:..\src/command_processing.c ****     packet_data[3] = ((char*)(&aux_int16))[1];
 26478              		.loc 1 3959 0
 26479 002e BB1D     		adds	r3, r7, #6
 26480 0030 0133     		adds	r3, r3, #1
 26481 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 26482 0034 FB72     		strb	r3, [r7, #11]
3960:..\src/command_processing.c **** 
3961:..\src/command_processing.c ****     packet_data[5] = LCRChecksum (packet_data, 5);
 26483              		.loc 1 3961 0
 26484 0036 07F10803 		add	r3, r7, #8
 26485 003a 0521     		movs	r1, #5
 26486 003c 1846     		mov	r0, r3
 26487 003e FFF7FEFF 		bl	LCRChecksum
 26488 0042 0346     		mov	r3, r0
 26489 0044 7B73     		strb	r3, [r7, #13]
3962:..\src/command_processing.c **** 
3963:..\src/command_processing.c ****     commWrite(packet_data, 6);
 26490              		.loc 1 3963 0
 26491 0046 07F10803 		add	r3, r7, #8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 581


 26492 004a 0621     		movs	r1, #6
 26493 004c 1846     		mov	r0, r3
 26494 004e FFF7FEFF 		bl	commWrite
3964:..\src/command_processing.c **** 
3965:..\src/command_processing.c **** }
 26495              		.loc 1 3965 0
 26496 0052 00BF     		nop
 26497 0054 1037     		adds	r7, r7, #16
 26498              		.cfi_def_cfa_offset 8
 26499 0056 BD46     		mov	sp, r7
 26500              		.cfi_def_cfa_register 13
 26501              		@ sp needed
 26502 0058 80BD     		pop	{r7, pc}
 26503              	.L1023:
 26504 005a 00BF     		.align	2
 26505              	.L1022:
 26506 005c 00000000 		.word	g_adc_measOld
 26507              		.cfi_endproc
 26508              	.LFE109:
 26509              		.size	cmd_get_emg, .-cmd_get_emg
 26510              		.section	.text.cmd_get_imu_readings,"ax",%progbits
 26511              		.align	2
 26512              		.global	cmd_get_imu_readings
 26513              		.thumb
 26514              		.thumb_func
 26515              		.type	cmd_get_imu_readings, %function
 26516              	cmd_get_imu_readings:
 26517              	.LFB110:
3966:..\src/command_processing.c **** 
3967:..\src/command_processing.c **** void cmd_get_imu_readings(){
 26518              		.loc 1 3967 0
 26519              		.cfi_startproc
 26520              		@ args = 0, pretend = 0, frame = 400
 26521              		@ frame_needed = 1, uses_anonymous_args = 0
 26522 0000 90B5     		push	{r4, r7, lr}
 26523              		.cfi_def_cfa_offset 12
 26524              		.cfi_offset 4, -12
 26525              		.cfi_offset 7, -8
 26526              		.cfi_offset 14, -4
 26527 0002 E5B0     		sub	sp, sp, #404
 26528              		.cfi_def_cfa_offset 416
 26529 0004 00AF     		add	r7, sp, #0
 26530              		.cfi_def_cfa_register 7
3968:..\src/command_processing.c ****     //Retrieve accelerometers, gyroscopes, magnetometers, quaternions and temperatures readings
3969:..\src/command_processing.c ****     uint8 k_imu;
3970:..\src/command_processing.c ****     uint16 c = 1;
 26531              		.loc 1 3970 0
 26532 0006 0123     		movs	r3, #1
 26533 0008 A7F88C31 		strh	r3, [r7, #396]	@ movhi
3971:..\src/command_processing.c ****     uint8 k = 0;
 26534              		.loc 1 3971 0
 26535 000c 0023     		movs	r3, #0
 26536 000e 87F88B31 		strb	r3, [r7, #395]
3972:..\src/command_processing.c ****     uint16 gl_c = 1;
 26537              		.loc 1 3972 0
 26538 0012 0123     		movs	r3, #1
 26539 0014 A7F88831 		strh	r3, [r7, #392]	@ movhi
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 582


3973:..\src/command_processing.c ****     int16 aux_int16;
3974:..\src/command_processing.c ****     float aux_float;
3975:..\src/command_processing.c ****     
3976:..\src/command_processing.c ****     // Packet: header + imu id(uint8) + imu flags(uint8) + crc  
3977:..\src/command_processing.c ****     uint8 packet_data[350];
3978:..\src/command_processing.c ****     uint8 single_packet[32];
3979:..\src/command_processing.c ****     
3980:..\src/command_processing.c ****     //Header package 
3981:..\src/command_processing.c ****     packet_data[0] = CMD_GET_IMU_READINGS;
 26540              		.loc 1 3981 0
 26541 0018 07F12003 		add	r3, r7, #32
 26542 001c A122     		movs	r2, #161
 26543 001e 1A70     		strb	r2, [r3]
3982:..\src/command_processing.c ****  
3983:..\src/command_processing.c ****     for (k_imu = 0; k_imu < N_IMU_Connected; k_imu++) 
 26544              		.loc 1 3983 0
 26545 0020 0023     		movs	r3, #0
 26546 0022 87F88F31 		strb	r3, [r7, #399]
 26547 0026 82E2     		b	.L1025
 26548              	.L1041:
3984:..\src/command_processing.c ****     {	
3985:..\src/command_processing.c ****             
3986:..\src/command_processing.c ****         single_packet[0] = (uint8) 0x3A; //':';
 26549              		.loc 1 3986 0
 26550 0028 3B46     		mov	r3, r7
 26551 002a 3A22     		movs	r2, #58
 26552 002c 1A70     		strb	r2, [r3]
3987:..\src/command_processing.c ****         if (c_mem.imu.IMU_conf[IMU_connected[k_imu]][0]){
 26553              		.loc 1 3987 0
 26554 002e 97F88F31 		ldrb	r3, [r7, #399]	@ zero_extendqisi2
 26555 0032 DB4A     		ldr	r2, .L1042
 26556 0034 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 26557 0036 1946     		mov	r1, r3
 26558 0038 DA4A     		ldr	r2, .L1042+4
 26559 003a 0B46     		mov	r3, r1
 26560 003c 9B00     		lsls	r3, r3, #2
 26561 003e 0B44     		add	r3, r3, r1
 26562 0040 1344     		add	r3, r3, r2
 26563 0042 03F20223 		addw	r3, r3, #514
 26564 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 26565 0048 002B     		cmp	r3, #0
 26566 004a 5DD0     		beq	.L1026
3988:..\src/command_processing.c ****             aux_int16 = (int16) g_imu[k_imu].accel_value[0];
 26567              		.loc 1 3988 0
 26568 004c 97F88F21 		ldrb	r2, [r7, #399]	@ zero_extendqisi2
 26569 0050 D549     		ldr	r1, .L1042+8
 26570 0052 1346     		mov	r3, r2
 26571 0054 9B00     		lsls	r3, r3, #2
 26572 0056 1344     		add	r3, r3, r2
 26573 0058 DB00     		lsls	r3, r3, #3
 26574 005a 0B44     		add	r3, r3, r1
 26575 005c 0233     		adds	r3, r3, #2
 26576 005e B3F90030 		ldrsh	r3, [r3]
 26577 0062 A7F88631 		strh	r3, [r7, #390]	@ movhi
3989:..\src/command_processing.c ****             single_packet[c + 1] = ((char*)(&aux_int16))[0];
 26578              		.loc 1 3989 0
 26579 0066 B7F88C31 		ldrh	r3, [r7, #396]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 583


 26580 006a 0133     		adds	r3, r3, #1
 26581 006c 07F5C372 		add	r2, r7, #390
 26582 0070 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 26583 0072 3A46     		mov	r2, r7
 26584 0074 D154     		strb	r1, [r2, r3]
3990:..\src/command_processing.c ****             single_packet[c] = ((char*)(&aux_int16))[1];
 26585              		.loc 1 3990 0
 26586 0076 B7F88C21 		ldrh	r2, [r7, #396]
 26587 007a 07F5C373 		add	r3, r7, #390
 26588 007e 0133     		adds	r3, r3, #1
 26589 0080 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 26590 0082 3B46     		mov	r3, r7
 26591 0084 9954     		strb	r1, [r3, r2]
3991:..\src/command_processing.c **** 
3992:..\src/command_processing.c ****             aux_int16 = (int16) g_imu[k_imu].accel_value[1];
 26592              		.loc 1 3992 0
 26593 0086 97F88F21 		ldrb	r2, [r7, #399]	@ zero_extendqisi2
 26594 008a C749     		ldr	r1, .L1042+8
 26595 008c 1346     		mov	r3, r2
 26596 008e 9B00     		lsls	r3, r3, #2
 26597 0090 1344     		add	r3, r3, r2
 26598 0092 DB00     		lsls	r3, r3, #3
 26599 0094 0B44     		add	r3, r3, r1
 26600 0096 0433     		adds	r3, r3, #4
 26601 0098 B3F90030 		ldrsh	r3, [r3]
 26602 009c A7F88631 		strh	r3, [r7, #390]	@ movhi
3993:..\src/command_processing.c ****             single_packet[c + 3] = ((char*)(&aux_int16))[0];
 26603              		.loc 1 3993 0
 26604 00a0 B7F88C31 		ldrh	r3, [r7, #396]
 26605 00a4 0333     		adds	r3, r3, #3
 26606 00a6 07F5C372 		add	r2, r7, #390
 26607 00aa 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 26608 00ac 3A46     		mov	r2, r7
 26609 00ae D154     		strb	r1, [r2, r3]
3994:..\src/command_processing.c ****             single_packet[c + 2] = ((char*)(&aux_int16))[1];
 26610              		.loc 1 3994 0
 26611 00b0 B7F88C31 		ldrh	r3, [r7, #396]
 26612 00b4 9A1C     		adds	r2, r3, #2
 26613 00b6 07F5C373 		add	r3, r7, #390
 26614 00ba 0133     		adds	r3, r3, #1
 26615 00bc 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 26616 00be 3B46     		mov	r3, r7
 26617 00c0 9954     		strb	r1, [r3, r2]
3995:..\src/command_processing.c **** 
3996:..\src/command_processing.c ****             aux_int16 = (int16) g_imu[k_imu].accel_value[2];
 26618              		.loc 1 3996 0
 26619 00c2 97F88F21 		ldrb	r2, [r7, #399]	@ zero_extendqisi2
 26620 00c6 B849     		ldr	r1, .L1042+8
 26621 00c8 1346     		mov	r3, r2
 26622 00ca 9B00     		lsls	r3, r3, #2
 26623 00cc 1344     		add	r3, r3, r2
 26624 00ce DB00     		lsls	r3, r3, #3
 26625 00d0 0B44     		add	r3, r3, r1
 26626 00d2 0633     		adds	r3, r3, #6
 26627 00d4 B3F90030 		ldrsh	r3, [r3]
 26628 00d8 A7F88631 		strh	r3, [r7, #390]	@ movhi
3997:..\src/command_processing.c ****             single_packet[c + 5] = ((char*)(&aux_int16))[0];
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 584


 26629              		.loc 1 3997 0
 26630 00dc B7F88C31 		ldrh	r3, [r7, #396]
 26631 00e0 0533     		adds	r3, r3, #5
 26632 00e2 07F5C372 		add	r2, r7, #390
 26633 00e6 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 26634 00e8 3A46     		mov	r2, r7
 26635 00ea D154     		strb	r1, [r2, r3]
3998:..\src/command_processing.c ****             single_packet[c + 4] = ((char*)(&aux_int16))[1];
 26636              		.loc 1 3998 0
 26637 00ec B7F88C31 		ldrh	r3, [r7, #396]
 26638 00f0 1A1D     		adds	r2, r3, #4
 26639 00f2 07F5C373 		add	r3, r7, #390
 26640 00f6 0133     		adds	r3, r3, #1
 26641 00f8 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 26642 00fa 3B46     		mov	r3, r7
 26643 00fc 9954     		strb	r1, [r3, r2]
3999:..\src/command_processing.c **** 
4000:..\src/command_processing.c ****             c = c + 6;
 26644              		.loc 1 4000 0
 26645 00fe B7F88C31 		ldrh	r3, [r7, #396]	@ movhi
 26646 0102 0633     		adds	r3, r3, #6
 26647 0104 A7F88C31 		strh	r3, [r7, #396]	@ movhi
 26648              	.L1026:
4001:..\src/command_processing.c ****         }
4002:..\src/command_processing.c ****         if (c_mem.imu.IMU_conf[IMU_connected[k_imu]][1]){
 26649              		.loc 1 4002 0
 26650 0108 97F88F31 		ldrb	r3, [r7, #399]	@ zero_extendqisi2
 26651 010c A44A     		ldr	r2, .L1042
 26652 010e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 26653 0110 1946     		mov	r1, r3
 26654 0112 A44A     		ldr	r2, .L1042+4
 26655 0114 0B46     		mov	r3, r1
 26656 0116 9B00     		lsls	r3, r3, #2
 26657 0118 0B44     		add	r3, r3, r1
 26658 011a 1344     		add	r3, r3, r2
 26659 011c 03F20323 		addw	r3, r3, #515
 26660 0120 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 26661 0122 002B     		cmp	r3, #0
 26662 0124 5DD0     		beq	.L1027
4003:..\src/command_processing.c ****             aux_int16 = (int16) g_imu[k_imu].gyro_value[0];
 26663              		.loc 1 4003 0
 26664 0126 97F88F21 		ldrb	r2, [r7, #399]	@ zero_extendqisi2
 26665 012a 9F49     		ldr	r1, .L1042+8
 26666 012c 1346     		mov	r3, r2
 26667 012e 9B00     		lsls	r3, r3, #2
 26668 0130 1344     		add	r3, r3, r2
 26669 0132 DB00     		lsls	r3, r3, #3
 26670 0134 0B44     		add	r3, r3, r1
 26671 0136 0833     		adds	r3, r3, #8
 26672 0138 B3F90030 		ldrsh	r3, [r3]
 26673 013c A7F88631 		strh	r3, [r7, #390]	@ movhi
4004:..\src/command_processing.c ****             single_packet[c + 1] = ((char*)(&aux_int16))[0];
 26674              		.loc 1 4004 0
 26675 0140 B7F88C31 		ldrh	r3, [r7, #396]
 26676 0144 0133     		adds	r3, r3, #1
 26677 0146 07F5C372 		add	r2, r7, #390
 26678 014a 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 585


 26679 014c 3A46     		mov	r2, r7
 26680 014e D154     		strb	r1, [r2, r3]
4005:..\src/command_processing.c ****             single_packet[c] = ((char*)(&aux_int16))[1];
 26681              		.loc 1 4005 0
 26682 0150 B7F88C21 		ldrh	r2, [r7, #396]
 26683 0154 07F5C373 		add	r3, r7, #390
 26684 0158 0133     		adds	r3, r3, #1
 26685 015a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 26686 015c 3B46     		mov	r3, r7
 26687 015e 9954     		strb	r1, [r3, r2]
4006:..\src/command_processing.c **** 
4007:..\src/command_processing.c ****             aux_int16 = (int16) g_imu[k_imu].gyro_value[1];
 26688              		.loc 1 4007 0
 26689 0160 97F88F21 		ldrb	r2, [r7, #399]	@ zero_extendqisi2
 26690 0164 9049     		ldr	r1, .L1042+8
 26691 0166 1346     		mov	r3, r2
 26692 0168 9B00     		lsls	r3, r3, #2
 26693 016a 1344     		add	r3, r3, r2
 26694 016c DB00     		lsls	r3, r3, #3
 26695 016e 0B44     		add	r3, r3, r1
 26696 0170 0A33     		adds	r3, r3, #10
 26697 0172 B3F90030 		ldrsh	r3, [r3]
 26698 0176 A7F88631 		strh	r3, [r7, #390]	@ movhi
4008:..\src/command_processing.c ****             single_packet[c + 3] = ((char*)(&aux_int16))[0];
 26699              		.loc 1 4008 0
 26700 017a B7F88C31 		ldrh	r3, [r7, #396]
 26701 017e 0333     		adds	r3, r3, #3
 26702 0180 07F5C372 		add	r2, r7, #390
 26703 0184 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 26704 0186 3A46     		mov	r2, r7
 26705 0188 D154     		strb	r1, [r2, r3]
4009:..\src/command_processing.c ****             single_packet[c + 2] = ((char*)(&aux_int16))[1];
 26706              		.loc 1 4009 0
 26707 018a B7F88C31 		ldrh	r3, [r7, #396]
 26708 018e 9A1C     		adds	r2, r3, #2
 26709 0190 07F5C373 		add	r3, r7, #390
 26710 0194 0133     		adds	r3, r3, #1
 26711 0196 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 26712 0198 3B46     		mov	r3, r7
 26713 019a 9954     		strb	r1, [r3, r2]
4010:..\src/command_processing.c **** 
4011:..\src/command_processing.c ****             aux_int16 = (int16) g_imu[k_imu].gyro_value[2];
 26714              		.loc 1 4011 0
 26715 019c 97F88F21 		ldrb	r2, [r7, #399]	@ zero_extendqisi2
 26716 01a0 8149     		ldr	r1, .L1042+8
 26717 01a2 1346     		mov	r3, r2
 26718 01a4 9B00     		lsls	r3, r3, #2
 26719 01a6 1344     		add	r3, r3, r2
 26720 01a8 DB00     		lsls	r3, r3, #3
 26721 01aa 0B44     		add	r3, r3, r1
 26722 01ac 0C33     		adds	r3, r3, #12
 26723 01ae B3F90030 		ldrsh	r3, [r3]
 26724 01b2 A7F88631 		strh	r3, [r7, #390]	@ movhi
4012:..\src/command_processing.c ****             single_packet[c + 5] = ((char*)(&aux_int16))[0];
 26725              		.loc 1 4012 0
 26726 01b6 B7F88C31 		ldrh	r3, [r7, #396]
 26727 01ba 0533     		adds	r3, r3, #5
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 586


 26728 01bc 07F5C372 		add	r2, r7, #390
 26729 01c0 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 26730 01c2 3A46     		mov	r2, r7
 26731 01c4 D154     		strb	r1, [r2, r3]
4013:..\src/command_processing.c ****             single_packet[c + 4] = ((char*)(&aux_int16))[1];
 26732              		.loc 1 4013 0
 26733 01c6 B7F88C31 		ldrh	r3, [r7, #396]
 26734 01ca 1A1D     		adds	r2, r3, #4
 26735 01cc 07F5C373 		add	r3, r7, #390
 26736 01d0 0133     		adds	r3, r3, #1
 26737 01d2 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 26738 01d4 3B46     		mov	r3, r7
 26739 01d6 9954     		strb	r1, [r3, r2]
4014:..\src/command_processing.c **** 
4015:..\src/command_processing.c ****             c = c + 6;
 26740              		.loc 1 4015 0
 26741 01d8 B7F88C31 		ldrh	r3, [r7, #396]	@ movhi
 26742 01dc 0633     		adds	r3, r3, #6
 26743 01de A7F88C31 		strh	r3, [r7, #396]	@ movhi
 26744              	.L1027:
4016:..\src/command_processing.c ****         }
4017:..\src/command_processing.c ****         if (c_mem.imu.IMU_conf[IMU_connected[k_imu]][2]){
 26745              		.loc 1 4017 0
 26746 01e2 97F88F31 		ldrb	r3, [r7, #399]	@ zero_extendqisi2
 26747 01e6 6E4A     		ldr	r2, .L1042
 26748 01e8 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 26749 01ea 1946     		mov	r1, r3
 26750 01ec 6D4A     		ldr	r2, .L1042+4
 26751 01ee 0B46     		mov	r3, r1
 26752 01f0 9B00     		lsls	r3, r3, #2
 26753 01f2 0B44     		add	r3, r3, r1
 26754 01f4 1344     		add	r3, r3, r2
 26755 01f6 03F50173 		add	r3, r3, #516
 26756 01fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 26757 01fc 002B     		cmp	r3, #0
 26758 01fe 5DD0     		beq	.L1028
4018:..\src/command_processing.c ****             aux_int16 = (int16) g_imu[k_imu].mag_value[0];
 26759              		.loc 1 4018 0
 26760 0200 97F88F21 		ldrb	r2, [r7, #399]	@ zero_extendqisi2
 26761 0204 6849     		ldr	r1, .L1042+8
 26762 0206 1346     		mov	r3, r2
 26763 0208 9B00     		lsls	r3, r3, #2
 26764 020a 1344     		add	r3, r3, r2
 26765 020c DB00     		lsls	r3, r3, #3
 26766 020e 0B44     		add	r3, r3, r1
 26767 0210 0E33     		adds	r3, r3, #14
 26768 0212 B3F90030 		ldrsh	r3, [r3]
 26769 0216 A7F88631 		strh	r3, [r7, #390]	@ movhi
4019:..\src/command_processing.c ****             single_packet[c + 1] = ((char*)(&aux_int16))[0];
 26770              		.loc 1 4019 0
 26771 021a B7F88C31 		ldrh	r3, [r7, #396]
 26772 021e 0133     		adds	r3, r3, #1
 26773 0220 07F5C372 		add	r2, r7, #390
 26774 0224 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 26775 0226 3A46     		mov	r2, r7
 26776 0228 D154     		strb	r1, [r2, r3]
4020:..\src/command_processing.c ****             single_packet[c] = ((char*)(&aux_int16))[1];
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 587


 26777              		.loc 1 4020 0
 26778 022a B7F88C21 		ldrh	r2, [r7, #396]
 26779 022e 07F5C373 		add	r3, r7, #390
 26780 0232 0133     		adds	r3, r3, #1
 26781 0234 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 26782 0236 3B46     		mov	r3, r7
 26783 0238 9954     		strb	r1, [r3, r2]
4021:..\src/command_processing.c **** 
4022:..\src/command_processing.c ****             aux_int16 = (int16) g_imu[k_imu].mag_value[1];
 26784              		.loc 1 4022 0
 26785 023a 97F88F21 		ldrb	r2, [r7, #399]	@ zero_extendqisi2
 26786 023e 5A49     		ldr	r1, .L1042+8
 26787 0240 1346     		mov	r3, r2
 26788 0242 9B00     		lsls	r3, r3, #2
 26789 0244 1344     		add	r3, r3, r2
 26790 0246 DB00     		lsls	r3, r3, #3
 26791 0248 0B44     		add	r3, r3, r1
 26792 024a 1033     		adds	r3, r3, #16
 26793 024c B3F90030 		ldrsh	r3, [r3]
 26794 0250 A7F88631 		strh	r3, [r7, #390]	@ movhi
4023:..\src/command_processing.c ****             single_packet[c + 3] = ((char*)(&aux_int16))[0];
 26795              		.loc 1 4023 0
 26796 0254 B7F88C31 		ldrh	r3, [r7, #396]
 26797 0258 0333     		adds	r3, r3, #3
 26798 025a 07F5C372 		add	r2, r7, #390
 26799 025e 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 26800 0260 3A46     		mov	r2, r7
 26801 0262 D154     		strb	r1, [r2, r3]
4024:..\src/command_processing.c ****             single_packet[c + 2] = ((char*)(&aux_int16))[1];
 26802              		.loc 1 4024 0
 26803 0264 B7F88C31 		ldrh	r3, [r7, #396]
 26804 0268 9A1C     		adds	r2, r3, #2
 26805 026a 07F5C373 		add	r3, r7, #390
 26806 026e 0133     		adds	r3, r3, #1
 26807 0270 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 26808 0272 3B46     		mov	r3, r7
 26809 0274 9954     		strb	r1, [r3, r2]
4025:..\src/command_processing.c **** 
4026:..\src/command_processing.c ****             aux_int16 = (int16) g_imu[k_imu].mag_value[2];
 26810              		.loc 1 4026 0
 26811 0276 97F88F21 		ldrb	r2, [r7, #399]	@ zero_extendqisi2
 26812 027a 4B49     		ldr	r1, .L1042+8
 26813 027c 1346     		mov	r3, r2
 26814 027e 9B00     		lsls	r3, r3, #2
 26815 0280 1344     		add	r3, r3, r2
 26816 0282 DB00     		lsls	r3, r3, #3
 26817 0284 0B44     		add	r3, r3, r1
 26818 0286 1233     		adds	r3, r3, #18
 26819 0288 B3F90030 		ldrsh	r3, [r3]
 26820 028c A7F88631 		strh	r3, [r7, #390]	@ movhi
4027:..\src/command_processing.c ****             single_packet[c + 5] = ((char*)(&aux_int16))[0];
 26821              		.loc 1 4027 0
 26822 0290 B7F88C31 		ldrh	r3, [r7, #396]
 26823 0294 0533     		adds	r3, r3, #5
 26824 0296 07F5C372 		add	r2, r7, #390
 26825 029a 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 26826 029c 3A46     		mov	r2, r7
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 588


 26827 029e D154     		strb	r1, [r2, r3]
4028:..\src/command_processing.c ****             single_packet[c + 4] = ((char*)(&aux_int16))[1];
 26828              		.loc 1 4028 0
 26829 02a0 B7F88C31 		ldrh	r3, [r7, #396]
 26830 02a4 1A1D     		adds	r2, r3, #4
 26831 02a6 07F5C373 		add	r3, r7, #390
 26832 02aa 0133     		adds	r3, r3, #1
 26833 02ac 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 26834 02ae 3B46     		mov	r3, r7
 26835 02b0 9954     		strb	r1, [r3, r2]
4029:..\src/command_processing.c **** 
4030:..\src/command_processing.c ****             c = c + 6;
 26836              		.loc 1 4030 0
 26837 02b2 B7F88C31 		ldrh	r3, [r7, #396]	@ movhi
 26838 02b6 0633     		adds	r3, r3, #6
 26839 02b8 A7F88C31 		strh	r3, [r7, #396]	@ movhi
 26840              	.L1028:
4031:..\src/command_processing.c ****         }
4032:..\src/command_processing.c ****         if (c_mem.imu.IMU_conf[IMU_connected[k_imu]][3]){
 26841              		.loc 1 4032 0
 26842 02bc 97F88F31 		ldrb	r3, [r7, #399]	@ zero_extendqisi2
 26843 02c0 374A     		ldr	r2, .L1042
 26844 02c2 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 26845 02c4 1946     		mov	r1, r3
 26846 02c6 374A     		ldr	r2, .L1042+4
 26847 02c8 0B46     		mov	r3, r1
 26848 02ca 9B00     		lsls	r3, r3, #2
 26849 02cc 0B44     		add	r3, r3, r1
 26850 02ce 1344     		add	r3, r3, r2
 26851 02d0 03F20523 		addw	r3, r3, #517
 26852 02d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 26853 02d6 002B     		cmp	r3, #0
 26854 02d8 00F0AF80 		beq	.L1029
4033:..\src/command_processing.c ****             aux_float = (float) g_imu[k_imu].quat_value[0];
 26855              		.loc 1 4033 0
 26856 02dc 97F88F21 		ldrb	r2, [r7, #399]	@ zero_extendqisi2
 26857 02e0 3149     		ldr	r1, .L1042+8
 26858 02e2 1346     		mov	r3, r2
 26859 02e4 9B00     		lsls	r3, r3, #2
 26860 02e6 1344     		add	r3, r3, r2
 26861 02e8 DB00     		lsls	r3, r3, #3
 26862 02ea 0B44     		add	r3, r3, r1
 26863 02ec 1433     		adds	r3, r3, #20
 26864 02ee 1B68     		ldr	r3, [r3]	@ float
 26865 02f0 C7F88031 		str	r3, [r7, #384]	@ float
4034:..\src/command_processing.c ****             for(k = 0; k < 4; k++) {
 26866              		.loc 1 4034 0
 26867 02f4 0023     		movs	r3, #0
 26868 02f6 87F88B31 		strb	r3, [r7, #395]
 26869 02fa 13E0     		b	.L1030
 26870              	.L1031:
4035:..\src/command_processing.c ****                 single_packet[c + 4 - k -1] = ((char*)(&aux_float))[k];
 26871              		.loc 1 4035 0 discriminator 3
 26872 02fc B7F88C31 		ldrh	r3, [r7, #396]
 26873 0300 1A1D     		adds	r2, r3, #4
 26874 0302 97F88B31 		ldrb	r3, [r7, #395]	@ zero_extendqisi2
 26875 0306 D31A     		subs	r3, r2, r3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 589


 26876 0308 013B     		subs	r3, r3, #1
 26877 030a 97F88B21 		ldrb	r2, [r7, #395]	@ zero_extendqisi2
 26878 030e 07F5C071 		add	r1, r7, #384
 26879 0312 0A44     		add	r2, r2, r1
 26880 0314 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 26881 0316 3A46     		mov	r2, r7
 26882 0318 D154     		strb	r1, [r2, r3]
4034:..\src/command_processing.c ****             for(k = 0; k < 4; k++) {
 26883              		.loc 1 4034 0 discriminator 3
 26884 031a 97F88B31 		ldrb	r3, [r7, #395]	@ zero_extendqisi2
 26885 031e 0133     		adds	r3, r3, #1
 26886 0320 87F88B31 		strb	r3, [r7, #395]
 26887              	.L1030:
4034:..\src/command_processing.c ****             for(k = 0; k < 4; k++) {
 26888              		.loc 1 4034 0 is_stmt 0 discriminator 1
 26889 0324 97F88B31 		ldrb	r3, [r7, #395]	@ zero_extendqisi2
 26890 0328 032B     		cmp	r3, #3
 26891 032a E7D9     		bls	.L1031
4036:..\src/command_processing.c ****             }
4037:..\src/command_processing.c **** 
4038:..\src/command_processing.c ****             aux_float = (float) g_imu[k_imu].quat_value[1];
 26892              		.loc 1 4038 0 is_stmt 1
 26893 032c 97F88F21 		ldrb	r2, [r7, #399]	@ zero_extendqisi2
 26894 0330 1D49     		ldr	r1, .L1042+8
 26895 0332 1346     		mov	r3, r2
 26896 0334 9B00     		lsls	r3, r3, #2
 26897 0336 1344     		add	r3, r3, r2
 26898 0338 DB00     		lsls	r3, r3, #3
 26899 033a 0B44     		add	r3, r3, r1
 26900 033c 1833     		adds	r3, r3, #24
 26901 033e 1B68     		ldr	r3, [r3]	@ float
 26902 0340 C7F88031 		str	r3, [r7, #384]	@ float
4039:..\src/command_processing.c ****             for(k = 0; k < 4; k++) {
 26903              		.loc 1 4039 0
 26904 0344 0023     		movs	r3, #0
 26905 0346 87F88B31 		strb	r3, [r7, #395]
 26906 034a 14E0     		b	.L1032
 26907              	.L1033:
4040:..\src/command_processing.c ****                 single_packet[c + 8 - k -1] = ((char*)(&aux_float))[k];
 26908              		.loc 1 4040 0 discriminator 3
 26909 034c B7F88C31 		ldrh	r3, [r7, #396]
 26910 0350 03F10802 		add	r2, r3, #8
 26911 0354 97F88B31 		ldrb	r3, [r7, #395]	@ zero_extendqisi2
 26912 0358 D31A     		subs	r3, r2, r3
 26913 035a 013B     		subs	r3, r3, #1
 26914 035c 97F88B21 		ldrb	r2, [r7, #395]	@ zero_extendqisi2
 26915 0360 07F5C071 		add	r1, r7, #384
 26916 0364 0A44     		add	r2, r2, r1
 26917 0366 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 26918 0368 3A46     		mov	r2, r7
 26919 036a D154     		strb	r1, [r2, r3]
4039:..\src/command_processing.c ****             for(k = 0; k < 4; k++) {
 26920              		.loc 1 4039 0 discriminator 3
 26921 036c 97F88B31 		ldrb	r3, [r7, #395]	@ zero_extendqisi2
 26922 0370 0133     		adds	r3, r3, #1
 26923 0372 87F88B31 		strb	r3, [r7, #395]
 26924              	.L1032:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 590


4039:..\src/command_processing.c ****             for(k = 0; k < 4; k++) {
 26925              		.loc 1 4039 0 is_stmt 0 discriminator 1
 26926 0376 97F88B31 		ldrb	r3, [r7, #395]	@ zero_extendqisi2
 26927 037a 032B     		cmp	r3, #3
 26928 037c E6D9     		bls	.L1033
4041:..\src/command_processing.c ****             }
4042:..\src/command_processing.c **** 
4043:..\src/command_processing.c ****             aux_float = (float) g_imu[k_imu].quat_value[2];
 26929              		.loc 1 4043 0 is_stmt 1
 26930 037e 97F88F21 		ldrb	r2, [r7, #399]	@ zero_extendqisi2
 26931 0382 0949     		ldr	r1, .L1042+8
 26932 0384 1346     		mov	r3, r2
 26933 0386 9B00     		lsls	r3, r3, #2
 26934 0388 1344     		add	r3, r3, r2
 26935 038a DB00     		lsls	r3, r3, #3
 26936 038c 0B44     		add	r3, r3, r1
 26937 038e 1C33     		adds	r3, r3, #28
 26938 0390 1B68     		ldr	r3, [r3]	@ float
 26939 0392 C7F88031 		str	r3, [r7, #384]	@ float
4044:..\src/command_processing.c ****             for(k = 0; k < 4; k++) {
 26940              		.loc 1 4044 0
 26941 0396 0023     		movs	r3, #0
 26942 0398 87F88B31 		strb	r3, [r7, #395]
 26943 039c 1BE0     		b	.L1034
 26944              	.L1043:
 26945 039e 00BF     		.align	2
 26946              	.L1042:
 26947 03a0 00000000 		.word	IMU_connected
 26948 03a4 00000000 		.word	c_mem
 26949 03a8 00000000 		.word	g_imu
 26950              	.L1035:
4045:..\src/command_processing.c ****                 single_packet[c + 12 - k -1] = ((char*)(&aux_float))[k];
 26951              		.loc 1 4045 0 discriminator 3
 26952 03ac B7F88C31 		ldrh	r3, [r7, #396]
 26953 03b0 03F10C02 		add	r2, r3, #12
 26954 03b4 97F88B31 		ldrb	r3, [r7, #395]	@ zero_extendqisi2
 26955 03b8 D31A     		subs	r3, r2, r3
 26956 03ba 013B     		subs	r3, r3, #1
 26957 03bc 97F88B21 		ldrb	r2, [r7, #395]	@ zero_extendqisi2
 26958 03c0 07F5C071 		add	r1, r7, #384
 26959 03c4 0A44     		add	r2, r2, r1
 26960 03c6 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 26961 03c8 3A46     		mov	r2, r7
 26962 03ca D154     		strb	r1, [r2, r3]
4044:..\src/command_processing.c ****             for(k = 0; k < 4; k++) {
 26963              		.loc 1 4044 0 discriminator 3
 26964 03cc 97F88B31 		ldrb	r3, [r7, #395]	@ zero_extendqisi2
 26965 03d0 0133     		adds	r3, r3, #1
 26966 03d2 87F88B31 		strb	r3, [r7, #395]
 26967              	.L1034:
4044:..\src/command_processing.c ****             for(k = 0; k < 4; k++) {
 26968              		.loc 1 4044 0 is_stmt 0 discriminator 1
 26969 03d6 97F88B31 		ldrb	r3, [r7, #395]	@ zero_extendqisi2
 26970 03da 032B     		cmp	r3, #3
 26971 03dc E6D9     		bls	.L1035
4046:..\src/command_processing.c ****             }
4047:..\src/command_processing.c **** 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 591


4048:..\src/command_processing.c ****             aux_float = (float) g_imu[k_imu].quat_value[3];
 26972              		.loc 1 4048 0 is_stmt 1
 26973 03de 97F88F21 		ldrb	r2, [r7, #399]	@ zero_extendqisi2
 26974 03e2 6749     		ldr	r1, .L1044
 26975 03e4 1346     		mov	r3, r2
 26976 03e6 9B00     		lsls	r3, r3, #2
 26977 03e8 1344     		add	r3, r3, r2
 26978 03ea DB00     		lsls	r3, r3, #3
 26979 03ec 0B44     		add	r3, r3, r1
 26980 03ee 2033     		adds	r3, r3, #32
 26981 03f0 1B68     		ldr	r3, [r3]	@ float
 26982 03f2 C7F88031 		str	r3, [r7, #384]	@ float
4049:..\src/command_processing.c ****             for(k = 0; k < 4; k++) {
 26983              		.loc 1 4049 0
 26984 03f6 0023     		movs	r3, #0
 26985 03f8 87F88B31 		strb	r3, [r7, #395]
 26986 03fc 14E0     		b	.L1036
 26987              	.L1037:
4050:..\src/command_processing.c ****                 single_packet[c + 16 - k -1] = ((char*)(&aux_float))[k];
 26988              		.loc 1 4050 0 discriminator 3
 26989 03fe B7F88C31 		ldrh	r3, [r7, #396]
 26990 0402 03F11002 		add	r2, r3, #16
 26991 0406 97F88B31 		ldrb	r3, [r7, #395]	@ zero_extendqisi2
 26992 040a D31A     		subs	r3, r2, r3
 26993 040c 013B     		subs	r3, r3, #1
 26994 040e 97F88B21 		ldrb	r2, [r7, #395]	@ zero_extendqisi2
 26995 0412 07F5C071 		add	r1, r7, #384
 26996 0416 0A44     		add	r2, r2, r1
 26997 0418 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 26998 041a 3A46     		mov	r2, r7
 26999 041c D154     		strb	r1, [r2, r3]
4049:..\src/command_processing.c ****             for(k = 0; k < 4; k++) {
 27000              		.loc 1 4049 0 discriminator 3
 27001 041e 97F88B31 		ldrb	r3, [r7, #395]	@ zero_extendqisi2
 27002 0422 0133     		adds	r3, r3, #1
 27003 0424 87F88B31 		strb	r3, [r7, #395]
 27004              	.L1036:
4049:..\src/command_processing.c ****             for(k = 0; k < 4; k++) {
 27005              		.loc 1 4049 0 is_stmt 0 discriminator 1
 27006 0428 97F88B31 		ldrb	r3, [r7, #395]	@ zero_extendqisi2
 27007 042c 032B     		cmp	r3, #3
 27008 042e E6D9     		bls	.L1037
4051:..\src/command_processing.c ****             }
4052:..\src/command_processing.c ****             c = c + 16;
 27009              		.loc 1 4052 0 is_stmt 1
 27010 0430 B7F88C31 		ldrh	r3, [r7, #396]	@ movhi
 27011 0434 1033     		adds	r3, r3, #16
 27012 0436 A7F88C31 		strh	r3, [r7, #396]	@ movhi
 27013              	.L1029:
4053:..\src/command_processing.c ****         }
4054:..\src/command_processing.c ****         if (c_mem.imu.IMU_conf[IMU_connected[k_imu]][4]){
 27014              		.loc 1 4054 0
 27015 043a 97F88F31 		ldrb	r3, [r7, #399]	@ zero_extendqisi2
 27016 043e 514A     		ldr	r2, .L1044+4
 27017 0440 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 27018 0442 1946     		mov	r1, r3
 27019 0444 504A     		ldr	r2, .L1044+8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 592


 27020 0446 0B46     		mov	r3, r1
 27021 0448 9B00     		lsls	r3, r3, #2
 27022 044a 0B44     		add	r3, r3, r1
 27023 044c 1344     		add	r3, r3, r2
 27024 044e 03F20623 		addw	r3, r3, #518
 27025 0452 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 27026 0454 002B     		cmp	r3, #0
 27027 0456 21D0     		beq	.L1038
4055:..\src/command_processing.c ****             aux_int16 = (int16) g_imu[k_imu].temp_value;
 27028              		.loc 1 4055 0
 27029 0458 97F88F21 		ldrb	r2, [r7, #399]	@ zero_extendqisi2
 27030 045c 4849     		ldr	r1, .L1044
 27031 045e 1346     		mov	r3, r2
 27032 0460 9B00     		lsls	r3, r3, #2
 27033 0462 1344     		add	r3, r3, r2
 27034 0464 DB00     		lsls	r3, r3, #3
 27035 0466 0B44     		add	r3, r3, r1
 27036 0468 2433     		adds	r3, r3, #36
 27037 046a B3F90030 		ldrsh	r3, [r3]
 27038 046e A7F88631 		strh	r3, [r7, #390]	@ movhi
4056:..\src/command_processing.c ****             single_packet[c + 1] = ((char*)(&aux_int16))[0];
 27039              		.loc 1 4056 0
 27040 0472 B7F88C31 		ldrh	r3, [r7, #396]
 27041 0476 0133     		adds	r3, r3, #1
 27042 0478 07F5C372 		add	r2, r7, #390
 27043 047c 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 27044 047e 3A46     		mov	r2, r7
 27045 0480 D154     		strb	r1, [r2, r3]
4057:..\src/command_processing.c ****             single_packet[c] = ((char*)(&aux_int16))[1];
 27046              		.loc 1 4057 0
 27047 0482 B7F88C21 		ldrh	r2, [r7, #396]
 27048 0486 07F5C373 		add	r3, r7, #390
 27049 048a 0133     		adds	r3, r3, #1
 27050 048c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 27051 048e 3B46     		mov	r3, r7
 27052 0490 9954     		strb	r1, [r3, r2]
4058:..\src/command_processing.c ****             c = c + 2;
 27053              		.loc 1 4058 0
 27054 0492 B7F88C31 		ldrh	r3, [r7, #396]	@ movhi
 27055 0496 0233     		adds	r3, r3, #2
 27056 0498 A7F88C31 		strh	r3, [r7, #396]	@ movhi
 27057              	.L1038:
4059:..\src/command_processing.c ****         }
4060:..\src/command_processing.c ****         single_packet[single_imu_size[IMU_connected[k_imu]] - 1] = (uint8) 0x3A; //':';
 27058              		.loc 1 4060 0
 27059 049c 97F88F31 		ldrb	r3, [r7, #399]	@ zero_extendqisi2
 27060 04a0 384A     		ldr	r2, .L1044+4
 27061 04a2 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 27062 04a4 1A46     		mov	r2, r3
 27063 04a6 394B     		ldr	r3, .L1044+12
 27064 04a8 53F82230 		ldr	r3, [r3, r2, lsl #2]
 27065 04ac 013B     		subs	r3, r3, #1
 27066 04ae 3A46     		mov	r2, r7
 27067 04b0 3A21     		movs	r1, #58
 27068 04b2 D154     		strb	r1, [r2, r3]
4061:..\src/command_processing.c ****         c = 1;
 27069              		.loc 1 4061 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 593


 27070 04b4 0123     		movs	r3, #1
 27071 04b6 A7F88C31 		strh	r3, [r7, #396]	@ movhi
4062:..\src/command_processing.c ****                
4063:..\src/command_processing.c ****         for(k=0; k < single_imu_size[IMU_connected[k_imu]]; k++) {
 27072              		.loc 1 4063 0
 27073 04ba 0023     		movs	r3, #0
 27074 04bc 87F88B31 		strb	r3, [r7, #395]
 27075 04c0 10E0     		b	.L1039
 27076              	.L1040:
4064:..\src/command_processing.c ****             packet_data[gl_c + k] = (uint8) single_packet[k]; 
 27077              		.loc 1 4064 0 discriminator 3
 27078 04c2 B7F88821 		ldrh	r2, [r7, #392]
 27079 04c6 97F88B31 		ldrb	r3, [r7, #395]	@ zero_extendqisi2
 27080 04ca 1344     		add	r3, r3, r2
 27081 04cc 97F88B21 		ldrb	r2, [r7, #395]	@ zero_extendqisi2
 27082 04d0 3946     		mov	r1, r7
 27083 04d2 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 27084 04d4 07F12002 		add	r2, r7, #32
 27085 04d8 D154     		strb	r1, [r2, r3]
4063:..\src/command_processing.c ****             packet_data[gl_c + k] = (uint8) single_packet[k]; 
 27086              		.loc 1 4063 0 discriminator 3
 27087 04da 97F88B31 		ldrb	r3, [r7, #395]	@ zero_extendqisi2
 27088 04de 0133     		adds	r3, r3, #1
 27089 04e0 87F88B31 		strb	r3, [r7, #395]
 27090              	.L1039:
4063:..\src/command_processing.c ****             packet_data[gl_c + k] = (uint8) single_packet[k]; 
 27091              		.loc 1 4063 0 is_stmt 0 discriminator 1
 27092 04e4 97F88B21 		ldrb	r2, [r7, #395]	@ zero_extendqisi2
 27093 04e8 97F88F31 		ldrb	r3, [r7, #399]	@ zero_extendqisi2
 27094 04ec 2549     		ldr	r1, .L1044+4
 27095 04ee CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 27096 04f0 1946     		mov	r1, r3
 27097 04f2 264B     		ldr	r3, .L1044+12
 27098 04f4 53F82130 		ldr	r3, [r3, r1, lsl #2]
 27099 04f8 9A42     		cmp	r2, r3
 27100 04fa E2DB     		blt	.L1040
4065:..\src/command_processing.c ****         }
4066:..\src/command_processing.c ****         gl_c = gl_c + single_imu_size[IMU_connected[k_imu]];  
 27101              		.loc 1 4066 0 is_stmt 1 discriminator 2
 27102 04fc 97F88F31 		ldrb	r3, [r7, #399]	@ zero_extendqisi2
 27103 0500 204A     		ldr	r2, .L1044+4
 27104 0502 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 27105 0504 1A46     		mov	r2, r3
 27106 0506 214B     		ldr	r3, .L1044+12
 27107 0508 53F82230 		ldr	r3, [r3, r2, lsl #2]
 27108 050c 9AB2     		uxth	r2, r3
 27109 050e B7F88831 		ldrh	r3, [r7, #392]	@ movhi
 27110 0512 1344     		add	r3, r3, r2
 27111 0514 A7F88831 		strh	r3, [r7, #392]	@ movhi
4067:..\src/command_processing.c ****         
4068:..\src/command_processing.c ****         memset(&single_packet, 0, sizeof(single_packet));     
 27112              		.loc 1 4068 0 discriminator 2
 27113 0518 3B46     		mov	r3, r7
 27114 051a 2022     		movs	r2, #32
 27115 051c 0021     		movs	r1, #0
 27116 051e 1846     		mov	r0, r3
 27117 0520 FFF7FEFF 		bl	memset
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 594


3983:..\src/command_processing.c ****     {	
 27118              		.loc 1 3983 0 discriminator 2
 27119 0524 97F88F31 		ldrb	r3, [r7, #399]	@ zero_extendqisi2
 27120 0528 0133     		adds	r3, r3, #1
 27121 052a 87F88F31 		strb	r3, [r7, #399]
 27122              	.L1025:
3983:..\src/command_processing.c ****     {	
 27123              		.loc 1 3983 0 is_stmt 0 discriminator 1
 27124 052e 184B     		ldr	r3, .L1044+16
 27125 0530 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 27126 0532 97F88F21 		ldrb	r2, [r7, #399]	@ zero_extendqisi2
 27127 0536 9A42     		cmp	r2, r3
 27128 0538 FFF476AD 		bcc	.L1041
4069:..\src/command_processing.c ****         
4070:..\src/command_processing.c ****     }
4071:..\src/command_processing.c **** 
4072:..\src/command_processing.c ****     // Calculate Checksum and send message to UART 
4073:..\src/command_processing.c ****     packet_data[imus_data_size-1] = LCRChecksum (packet_data, imus_data_size-1);
 27129              		.loc 1 4073 0 is_stmt 1
 27130 053c 154B     		ldr	r3, .L1044+20
 27131 053e 1B68     		ldr	r3, [r3]
 27132 0540 5C1E     		subs	r4, r3, #1
 27133 0542 144B     		ldr	r3, .L1044+20
 27134 0544 1B68     		ldr	r3, [r3]
 27135 0546 DBB2     		uxtb	r3, r3
 27136 0548 013B     		subs	r3, r3, #1
 27137 054a DAB2     		uxtb	r2, r3
 27138 054c 07F12003 		add	r3, r7, #32
 27139 0550 1146     		mov	r1, r2
 27140 0552 1846     		mov	r0, r3
 27141 0554 FFF7FEFF 		bl	LCRChecksum
 27142 0558 0346     		mov	r3, r0
 27143 055a 1A46     		mov	r2, r3
 27144 055c 07F12003 		add	r3, r7, #32
 27145 0560 1A55     		strb	r2, [r3, r4]
4074:..\src/command_processing.c ****     commWrite(packet_data, imus_data_size);
 27146              		.loc 1 4074 0
 27147 0562 0C4B     		ldr	r3, .L1044+20
 27148 0564 1B68     		ldr	r3, [r3]
 27149 0566 9AB2     		uxth	r2, r3
 27150 0568 07F12003 		add	r3, r7, #32
 27151 056c 1146     		mov	r1, r2
 27152 056e 1846     		mov	r0, r3
 27153 0570 FFF7FEFF 		bl	commWrite
4075:..\src/command_processing.c **** }
 27154              		.loc 1 4075 0
 27155 0574 00BF     		nop
 27156 0576 07F5CA77 		add	r7, r7, #404
 27157              		.cfi_def_cfa_offset 12
 27158 057a BD46     		mov	sp, r7
 27159              		.cfi_def_cfa_register 13
 27160              		@ sp needed
 27161 057c 90BD     		pop	{r4, r7, pc}
 27162              	.L1045:
 27163 057e 00BF     		.align	2
 27164              	.L1044:
 27165 0580 00000000 		.word	g_imu
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 595


 27166 0584 00000000 		.word	IMU_connected
 27167 0588 00000000 		.word	c_mem
 27168 058c 00000000 		.word	single_imu_size
 27169 0590 00000000 		.word	N_IMU_Connected
 27170 0594 00000000 		.word	imus_data_size
 27171              		.cfi_endproc
 27172              	.LFE110:
 27173              		.size	cmd_get_imu_readings, .-cmd_get_imu_readings
 27174              		.section	.text.cmd_get_encoder_map,"ax",%progbits
 27175              		.align	2
 27176              		.global	cmd_get_encoder_map
 27177              		.thumb
 27178              		.thumb_func
 27179              		.type	cmd_get_encoder_map, %function
 27180              	cmd_get_encoder_map:
 27181              	.LFB111:
4076:..\src/command_processing.c **** 
4077:..\src/command_processing.c **** void cmd_get_encoder_map(){
 27182              		.loc 1 4077 0
 27183              		.cfi_startproc
 27184              		@ args = 0, pretend = 0, frame = 16
 27185              		@ frame_needed = 1, uses_anonymous_args = 0
 27186 0000 90B5     		push	{r4, r7, lr}
 27187              		.cfi_def_cfa_offset 12
 27188              		.cfi_offset 4, -12
 27189              		.cfi_offset 7, -8
 27190              		.cfi_offset 14, -4
 27191 0002 85B0     		sub	sp, sp, #20
 27192              		.cfi_def_cfa_offset 32
 27193 0004 00AF     		add	r7, sp, #0
 27194              		.cfi_def_cfa_register 7
4078:..\src/command_processing.c ****     //Retrieve Encoder map
4079:..\src/command_processing.c ****     
4080:..\src/command_processing.c ****     uint8 packet_data[4+N_ENCODER_LINE_MAX*N_ENCODERS_PER_LINE_MAX];
4081:..\src/command_processing.c ****     uint8 CYDATA i, j;
4082:..\src/command_processing.c ****     
4083:..\src/command_processing.c ****     // Header        
4084:..\src/command_processing.c ****     packet_data[0] = CMD_GET_ENCODER_CONF;
 27195              		.loc 1 4084 0
 27196 0006 A323     		movs	r3, #163
 27197 0008 3B70     		strb	r3, [r7]
4085:..\src/command_processing.c ****     
4086:..\src/command_processing.c ****     // Fill payload
4087:..\src/command_processing.c ****     packet_data[1] = N_ENCODER_LINE_MAX;
 27198              		.loc 1 4087 0
 27199 000a 0223     		movs	r3, #2
 27200 000c 7B70     		strb	r3, [r7, #1]
4088:..\src/command_processing.c ****     packet_data[2] = N_ENCODERS_PER_LINE_MAX;
 27201              		.loc 1 4088 0
 27202 000e 0523     		movs	r3, #5
 27203 0010 BB70     		strb	r3, [r7, #2]
4089:..\src/command_processing.c ****     for (i=0; i<N_ENCODER_LINE_MAX; i++) {
 27204              		.loc 1 4089 0
 27205 0012 0023     		movs	r3, #0
 27206 0014 FB73     		strb	r3, [r7, #15]
 27207 0016 23E0     		b	.L1047
 27208              	.L1050:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 596


4090:..\src/command_processing.c ****         for (j=0; j < N_ENCODERS_PER_LINE_MAX; j++) {
 27209              		.loc 1 4090 0
 27210 0018 0023     		movs	r3, #0
 27211 001a BB73     		strb	r3, [r7, #14]
 27212 001c 1AE0     		b	.L1048
 27213              	.L1049:
4091:..\src/command_processing.c ****             packet_data[3 + i*N_ENCODERS_PER_LINE_MAX + j] = c_mem.enc[i].Enc_raw_read_conf[j];
 27214              		.loc 1 4091 0 discriminator 3
 27215 001e FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 27216 0020 1346     		mov	r3, r2
 27217 0022 9B00     		lsls	r3, r3, #2
 27218 0024 1344     		add	r3, r3, r2
 27219 0026 DA1C     		adds	r2, r3, #3
 27220 0028 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 27221 002a D118     		adds	r1, r2, r3
 27222 002c FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 27223 002e B87B     		ldrb	r0, [r7, #14]	@ zero_extendqisi2
 27224 0030 154C     		ldr	r4, .L1051
 27225 0032 1346     		mov	r3, r2
 27226 0034 5B00     		lsls	r3, r3, #1
 27227 0036 1344     		add	r3, r3, r2
 27228 0038 1B01     		lsls	r3, r3, #4
 27229 003a 2344     		add	r3, r3, r4
 27230 003c 0344     		add	r3, r3, r0
 27231 003e 03F5C873 		add	r3, r3, #400
 27232 0042 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 27233 0044 07F11003 		add	r3, r7, #16
 27234 0048 0B44     		add	r3, r3, r1
 27235 004a 03F8102C 		strb	r2, [r3, #-16]
4090:..\src/command_processing.c ****         for (j=0; j < N_ENCODERS_PER_LINE_MAX; j++) {
 27236              		.loc 1 4090 0 discriminator 3
 27237 004e BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 27238 0050 0133     		adds	r3, r3, #1
 27239 0052 BB73     		strb	r3, [r7, #14]
 27240              	.L1048:
4090:..\src/command_processing.c ****         for (j=0; j < N_ENCODERS_PER_LINE_MAX; j++) {
 27241              		.loc 1 4090 0 is_stmt 0 discriminator 1
 27242 0054 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 27243 0056 042B     		cmp	r3, #4
 27244 0058 E1D9     		bls	.L1049
4089:..\src/command_processing.c ****     for (i=0; i<N_ENCODER_LINE_MAX; i++) {
 27245              		.loc 1 4089 0 is_stmt 1 discriminator 2
 27246 005a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 27247 005c 0133     		adds	r3, r3, #1
 27248 005e FB73     		strb	r3, [r7, #15]
 27249              	.L1047:
4089:..\src/command_processing.c ****     for (i=0; i<N_ENCODER_LINE_MAX; i++) {
 27250              		.loc 1 4089 0 is_stmt 0 discriminator 1
 27251 0060 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 27252 0062 012B     		cmp	r3, #1
 27253 0064 D8D9     		bls	.L1050
4092:..\src/command_processing.c ****         }
4093:..\src/command_processing.c ****     }
4094:..\src/command_processing.c ****     
4095:..\src/command_processing.c ****     // Calculate checksum
4096:..\src/command_processing.c ****     packet_data[3+N_ENCODER_LINE_MAX*N_ENCODERS_PER_LINE_MAX] = LCRChecksum(packet_data, 3+N_ENCODE
 27254              		.loc 1 4096 0 is_stmt 1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 597


 27255 0066 3B46     		mov	r3, r7
 27256 0068 0D21     		movs	r1, #13
 27257 006a 1846     		mov	r0, r3
 27258 006c FFF7FEFF 		bl	LCRChecksum
 27259 0070 0346     		mov	r3, r0
 27260 0072 7B73     		strb	r3, [r7, #13]
4097:..\src/command_processing.c ****     
4098:..\src/command_processing.c ****     // Send package to UART
4099:..\src/command_processing.c ****     commWrite(packet_data, 4+N_ENCODER_LINE_MAX*N_ENCODERS_PER_LINE_MAX);
 27261              		.loc 1 4099 0
 27262 0074 3B46     		mov	r3, r7
 27263 0076 0E21     		movs	r1, #14
 27264 0078 1846     		mov	r0, r3
 27265 007a FFF7FEFF 		bl	commWrite
4100:..\src/command_processing.c **** }
 27266              		.loc 1 4100 0
 27267 007e 00BF     		nop
 27268 0080 1437     		adds	r7, r7, #20
 27269              		.cfi_def_cfa_offset 12
 27270 0082 BD46     		mov	sp, r7
 27271              		.cfi_def_cfa_register 13
 27272              		@ sp needed
 27273 0084 90BD     		pop	{r4, r7, pc}
 27274              	.L1052:
 27275 0086 00BF     		.align	2
 27276              	.L1051:
 27277 0088 00000000 		.word	c_mem
 27278              		.cfi_endproc
 27279              	.LFE111:
 27280              		.size	cmd_get_encoder_map, .-cmd_get_encoder_map
 27281              		.section	.text.cmd_get_encoder_raw,"ax",%progbits
 27282              		.align	2
 27283              		.global	cmd_get_encoder_raw
 27284              		.thumb
 27285              		.thumb_func
 27286              		.type	cmd_get_encoder_raw, %function
 27287              	cmd_get_encoder_raw:
 27288              	.LFB112:
4101:..\src/command_processing.c **** 
4102:..\src/command_processing.c **** void cmd_get_encoder_raw(){
 27289              		.loc 1 4102 0
 27290              		.cfi_startproc
 27291              		@ args = 0, pretend = 0, frame = 32
 27292              		@ frame_needed = 1, uses_anonymous_args = 0
 27293 0000 90B5     		push	{r4, r7, lr}
 27294              		.cfi_def_cfa_offset 12
 27295              		.cfi_offset 4, -12
 27296              		.cfi_offset 7, -8
 27297              		.cfi_offset 14, -4
 27298 0002 89B0     		sub	sp, sp, #36
 27299              		.cfi_def_cfa_offset 48
 27300 0004 00AF     		add	r7, sp, #0
 27301              		.cfi_def_cfa_register 7
4103:..\src/command_processing.c ****     //Retrieve all Encoders raw values
4104:..\src/command_processing.c ****     
4105:..\src/command_processing.c ****     uint8 packet_data[2+2*N_ENCODER_LINE_MAX*N_ENCODERS_PER_LINE_MAX];
4106:..\src/command_processing.c ****     uint8 i, j, idx;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 598


4107:..\src/command_processing.c ****     uint16 aux_uint16;
4108:..\src/command_processing.c ****     
4109:..\src/command_processing.c ****     //Header package 
4110:..\src/command_processing.c ****     packet_data[0] = CMD_GET_ENCODER_RAW;
 27302              		.loc 1 4110 0
 27303 0006 A423     		movs	r3, #164
 27304 0008 3B71     		strb	r3, [r7, #4]
4111:..\src/command_processing.c ****  
4112:..\src/command_processing.c ****     // Fill payload
4113:..\src/command_processing.c ****     idx = 0;
 27305              		.loc 1 4113 0
 27306 000a 0023     		movs	r3, #0
 27307 000c 7B77     		strb	r3, [r7, #29]
4114:..\src/command_processing.c ****     for (i=0; i<N_ENCODER_LINE_MAX; i++) {
 27308              		.loc 1 4114 0
 27309 000e 0023     		movs	r3, #0
 27310 0010 FB77     		strb	r3, [r7, #31]
 27311 0012 3FE0     		b	.L1054
 27312              	.L1058:
4115:..\src/command_processing.c ****         for (j=0; j < N_Encoder_Line_Connected[i]; j++) {
 27313              		.loc 1 4115 0
 27314 0014 0023     		movs	r3, #0
 27315 0016 BB77     		strb	r3, [r7, #30]
 27316 0018 33E0     		b	.L1055
 27317              	.L1057:
4116:..\src/command_processing.c ****             if (c_mem.enc[i].Enc_raw_read_conf[j] == 1) {
 27318              		.loc 1 4116 0
 27319 001a FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 27320 001c B97F     		ldrb	r1, [r7, #30]	@ zero_extendqisi2
 27321 001e 3048     		ldr	r0, .L1059
 27322 0020 1346     		mov	r3, r2
 27323 0022 5B00     		lsls	r3, r3, #1
 27324 0024 1344     		add	r3, r3, r2
 27325 0026 1B01     		lsls	r3, r3, #4
 27326 0028 0344     		add	r3, r3, r0
 27327 002a 0B44     		add	r3, r3, r1
 27328 002c 03F5C873 		add	r3, r3, #400
 27329 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 27330 0032 012B     		cmp	r3, #1
 27331 0034 22D1     		bne	.L1056
4117:..\src/command_processing.c ****                 aux_uint16 = (uint16)Encoder_Value[i][j];
 27332              		.loc 1 4117 0
 27333 0036 FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 27334 0038 B97F     		ldrb	r1, [r7, #30]	@ zero_extendqisi2
 27335 003a 2A48     		ldr	r0, .L1059+4
 27336 003c 1346     		mov	r3, r2
 27337 003e 9B00     		lsls	r3, r3, #2
 27338 0040 1344     		add	r3, r3, r2
 27339 0042 0B44     		add	r3, r3, r1
 27340 0044 30F81330 		ldrh	r3, [r0, r3, lsl #1]
 27341 0048 7B80     		strh	r3, [r7, #2]	@ movhi
4118:..\src/command_processing.c ****                 packet_data[(idx << 1) + 2] = ((char*)(&aux_uint16))[0];
 27342              		.loc 1 4118 0
 27343 004a 7B7F     		ldrb	r3, [r7, #29]	@ zero_extendqisi2
 27344 004c 5B00     		lsls	r3, r3, #1
 27345 004e 0233     		adds	r3, r3, #2
 27346 0050 BA1C     		adds	r2, r7, #2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 599


 27347 0052 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 27348 0054 07F12001 		add	r1, r7, #32
 27349 0058 0B44     		add	r3, r3, r1
 27350 005a 03F81C2C 		strb	r2, [r3, #-28]
4119:..\src/command_processing.c ****                 packet_data[(idx << 1) + 1] = ((char*)(&aux_uint16))[1];
 27351              		.loc 1 4119 0
 27352 005e 7B7F     		ldrb	r3, [r7, #29]	@ zero_extendqisi2
 27353 0060 5B00     		lsls	r3, r3, #1
 27354 0062 5A1C     		adds	r2, r3, #1
 27355 0064 BB1C     		adds	r3, r7, #2
 27356 0066 0133     		adds	r3, r3, #1
 27357 0068 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 27358 006a 07F12003 		add	r3, r7, #32
 27359 006e 1344     		add	r3, r3, r2
 27360 0070 0A46     		mov	r2, r1
 27361 0072 03F81C2C 		strb	r2, [r3, #-28]
4120:..\src/command_processing.c ****                 idx++;
 27362              		.loc 1 4120 0
 27363 0076 7B7F     		ldrb	r3, [r7, #29]	@ zero_extendqisi2
 27364 0078 0133     		adds	r3, r3, #1
 27365 007a 7B77     		strb	r3, [r7, #29]
 27366              	.L1056:
4115:..\src/command_processing.c ****             if (c_mem.enc[i].Enc_raw_read_conf[j] == 1) {
 27367              		.loc 1 4115 0 discriminator 2
 27368 007c BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 27369 007e 0133     		adds	r3, r3, #1
 27370 0080 BB77     		strb	r3, [r7, #30]
 27371              	.L1055:
4115:..\src/command_processing.c ****             if (c_mem.enc[i].Enc_raw_read_conf[j] == 1) {
 27372              		.loc 1 4115 0 is_stmt 0 discriminator 1
 27373 0082 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 27374 0084 184A     		ldr	r2, .L1059+8
 27375 0086 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 27376 0088 BA7F     		ldrb	r2, [r7, #30]	@ zero_extendqisi2
 27377 008a 9A42     		cmp	r2, r3
 27378 008c C5D3     		bcc	.L1057
4114:..\src/command_processing.c ****         for (j=0; j < N_Encoder_Line_Connected[i]; j++) {
 27379              		.loc 1 4114 0 is_stmt 1 discriminator 2
 27380 008e FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 27381 0090 0133     		adds	r3, r3, #1
 27382 0092 FB77     		strb	r3, [r7, #31]
 27383              	.L1054:
4114:..\src/command_processing.c ****         for (j=0; j < N_Encoder_Line_Connected[i]; j++) {
 27384              		.loc 1 4114 0 is_stmt 0 discriminator 1
 27385 0094 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 27386 0096 012B     		cmp	r3, #1
 27387 0098 BCD9     		bls	.L1058
4121:..\src/command_processing.c ****             }
4122:..\src/command_processing.c ****         }
4123:..\src/command_processing.c ****     }
4124:..\src/command_processing.c **** 
4125:..\src/command_processing.c ****     // Calculate checksum
4126:..\src/command_processing.c ****     packet_data[1+2*idx] = LCRChecksum(packet_data, 1+2*idx);
 27388              		.loc 1 4126 0 is_stmt 1
 27389 009a 7B7F     		ldrb	r3, [r7, #29]	@ zero_extendqisi2
 27390 009c 5B00     		lsls	r3, r3, #1
 27391 009e 5C1C     		adds	r4, r3, #1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 600


 27392 00a0 7B7F     		ldrb	r3, [r7, #29]
 27393 00a2 5B00     		lsls	r3, r3, #1
 27394 00a4 DBB2     		uxtb	r3, r3
 27395 00a6 0133     		adds	r3, r3, #1
 27396 00a8 DAB2     		uxtb	r2, r3
 27397 00aa 3B1D     		adds	r3, r7, #4
 27398 00ac 1146     		mov	r1, r2
 27399 00ae 1846     		mov	r0, r3
 27400 00b0 FFF7FEFF 		bl	LCRChecksum
 27401 00b4 0346     		mov	r3, r0
 27402 00b6 1A46     		mov	r2, r3
 27403 00b8 07F12003 		add	r3, r7, #32
 27404 00bc 2344     		add	r3, r3, r4
 27405 00be 03F81C2C 		strb	r2, [r3, #-28]
4127:..\src/command_processing.c ****     
4128:..\src/command_processing.c ****     // Send package to UART
4129:..\src/command_processing.c ****     commWrite(packet_data, 2+2*idx);
 27406              		.loc 1 4129 0
 27407 00c2 7B7F     		ldrb	r3, [r7, #29]	@ zero_extendqisi2
 27408 00c4 0133     		adds	r3, r3, #1
 27409 00c6 9BB2     		uxth	r3, r3
 27410 00c8 5B00     		lsls	r3, r3, #1
 27411 00ca 9AB2     		uxth	r2, r3
 27412 00cc 3B1D     		adds	r3, r7, #4
 27413 00ce 1146     		mov	r1, r2
 27414 00d0 1846     		mov	r0, r3
 27415 00d2 FFF7FEFF 		bl	commWrite
4130:..\src/command_processing.c **** }
 27416              		.loc 1 4130 0
 27417 00d6 00BF     		nop
 27418 00d8 2437     		adds	r7, r7, #36
 27419              		.cfi_def_cfa_offset 12
 27420 00da BD46     		mov	sp, r7
 27421              		.cfi_def_cfa_register 13
 27422              		@ sp needed
 27423 00dc 90BD     		pop	{r4, r7, pc}
 27424              	.L1060:
 27425 00de 00BF     		.align	2
 27426              	.L1059:
 27427 00e0 00000000 		.word	c_mem
 27428 00e4 00000000 		.word	Encoder_Value
 27429 00e8 00000000 		.word	N_Encoder_Line_Connected
 27430              		.cfi_endproc
 27431              	.LFE112:
 27432              		.size	cmd_get_encoder_raw, .-cmd_get_encoder_raw
 27433              		.section	.text.cmd_get_ADC_map,"ax",%progbits
 27434              		.align	2
 27435              		.global	cmd_get_ADC_map
 27436              		.thumb
 27437              		.thumb_func
 27438              		.type	cmd_get_ADC_map, %function
 27439              	cmd_get_ADC_map:
 27440              	.LFB113:
4131:..\src/command_processing.c **** 
4132:..\src/command_processing.c **** void cmd_get_ADC_map(){
 27441              		.loc 1 4132 0
 27442              		.cfi_startproc
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 601


 27443              		@ args = 0, pretend = 0, frame = 16
 27444              		@ frame_needed = 1, uses_anonymous_args = 0
 27445 0000 80B5     		push	{r7, lr}
 27446              		.cfi_def_cfa_offset 8
 27447              		.cfi_offset 7, -8
 27448              		.cfi_offset 14, -4
 27449 0002 84B0     		sub	sp, sp, #16
 27450              		.cfi_def_cfa_offset 24
 27451 0004 00AF     		add	r7, sp, #0
 27452              		.cfi_def_cfa_register 7
4133:..\src/command_processing.c ****     //Retrieve Encoder map
4134:..\src/command_processing.c ****     
4135:..\src/command_processing.c ****     uint8 packet_data[3+NUM_OF_ADC_CHANNELS_MAX];
4136:..\src/command_processing.c ****     uint8 CYDATA i;
4137:..\src/command_processing.c ****     
4138:..\src/command_processing.c ****     // Header        
4139:..\src/command_processing.c ****     packet_data[0] = CMD_GET_ADC_CONF;
 27453              		.loc 1 4139 0
 27454 0006 A523     		movs	r3, #165
 27455 0008 3B70     		strb	r3, [r7]
4140:..\src/command_processing.c ****     
4141:..\src/command_processing.c ****     // Fill payload
4142:..\src/command_processing.c ****     packet_data[1] = NUM_OF_ADC_CHANNELS_MAX;
 27456              		.loc 1 4142 0
 27457 000a 0C23     		movs	r3, #12
 27458 000c 7B70     		strb	r3, [r7, #1]
4143:..\src/command_processing.c ****     for (i=0; i<NUM_OF_ADC_CHANNELS_MAX; i++) {
 27459              		.loc 1 4143 0
 27460 000e 0023     		movs	r3, #0
 27461 0010 FB73     		strb	r3, [r7, #15]
 27462 0012 0EE0     		b	.L1062
 27463              	.L1063:
4144:..\src/command_processing.c ****         packet_data[2 + i] = c_mem.exp.ADC_conf[i];
 27464              		.loc 1 4144 0 discriminator 3
 27465 0014 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 27466 0016 0233     		adds	r3, r3, #2
 27467 0018 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 27468 001a 0F49     		ldr	r1, .L1064
 27469 001c 0A44     		add	r2, r2, r1
 27470 001e 92F82822 		ldrb	r2, [r2, #552]	@ zero_extendqisi2
 27471 0022 07F11001 		add	r1, r7, #16
 27472 0026 0B44     		add	r3, r3, r1
 27473 0028 03F8102C 		strb	r2, [r3, #-16]
4143:..\src/command_processing.c ****     for (i=0; i<NUM_OF_ADC_CHANNELS_MAX; i++) {
 27474              		.loc 1 4143 0 discriminator 3
 27475 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 27476 002e 0133     		adds	r3, r3, #1
 27477 0030 FB73     		strb	r3, [r7, #15]
 27478              	.L1062:
4143:..\src/command_processing.c ****     for (i=0; i<NUM_OF_ADC_CHANNELS_MAX; i++) {
 27479              		.loc 1 4143 0 is_stmt 0 discriminator 1
 27480 0032 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 27481 0034 0B2B     		cmp	r3, #11
 27482 0036 EDD9     		bls	.L1063
4145:..\src/command_processing.c ****     }
4146:..\src/command_processing.c ****     
4147:..\src/command_processing.c ****     // Calculate checksum
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 602


4148:..\src/command_processing.c ****     packet_data[2+NUM_OF_ADC_CHANNELS_MAX] = LCRChecksum(packet_data, 2+NUM_OF_ADC_CHANNELS_MAX);
 27483              		.loc 1 4148 0 is_stmt 1
 27484 0038 3B46     		mov	r3, r7
 27485 003a 0E21     		movs	r1, #14
 27486 003c 1846     		mov	r0, r3
 27487 003e FFF7FEFF 		bl	LCRChecksum
 27488 0042 0346     		mov	r3, r0
 27489 0044 BB73     		strb	r3, [r7, #14]
4149:..\src/command_processing.c ****     
4150:..\src/command_processing.c ****     // Send package to UART
4151:..\src/command_processing.c ****     commWrite(packet_data, 3+NUM_OF_ADC_CHANNELS_MAX);
 27490              		.loc 1 4151 0
 27491 0046 3B46     		mov	r3, r7
 27492 0048 0F21     		movs	r1, #15
 27493 004a 1846     		mov	r0, r3
 27494 004c FFF7FEFF 		bl	commWrite
4152:..\src/command_processing.c ****     
4153:..\src/command_processing.c **** }
 27495              		.loc 1 4153 0
 27496 0050 00BF     		nop
 27497 0052 1037     		adds	r7, r7, #16
 27498              		.cfi_def_cfa_offset 8
 27499 0054 BD46     		mov	sp, r7
 27500              		.cfi_def_cfa_register 13
 27501              		@ sp needed
 27502 0056 80BD     		pop	{r7, pc}
 27503              	.L1065:
 27504              		.align	2
 27505              	.L1064:
 27506 0058 00000000 		.word	c_mem
 27507              		.cfi_endproc
 27508              	.LFE113:
 27509              		.size	cmd_get_ADC_map, .-cmd_get_ADC_map
 27510              		.section	.text.cmd_get_ADC_raw,"ax",%progbits
 27511              		.align	2
 27512              		.global	cmd_get_ADC_raw
 27513              		.thumb
 27514              		.thumb_func
 27515              		.type	cmd_get_ADC_raw, %function
 27516              	cmd_get_ADC_raw:
 27517              	.LFB114:
4154:..\src/command_processing.c **** 
4155:..\src/command_processing.c **** void cmd_get_ADC_raw(){
 27518              		.loc 1 4155 0
 27519              		.cfi_startproc
 27520              		@ args = 0, pretend = 0, frame = 32
 27521              		@ frame_needed = 1, uses_anonymous_args = 0
 27522 0000 90B5     		push	{r4, r7, lr}
 27523              		.cfi_def_cfa_offset 12
 27524              		.cfi_offset 4, -12
 27525              		.cfi_offset 7, -8
 27526              		.cfi_offset 14, -4
 27527 0002 89B0     		sub	sp, sp, #36
 27528              		.cfi_def_cfa_offset 48
 27529 0004 00AF     		add	r7, sp, #0
 27530              		.cfi_def_cfa_register 7
4156:..\src/command_processing.c ****     //Retrieve Additional EMG port raw values
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 603


4157:..\src/command_processing.c ****     
4158:..\src/command_processing.c ****     uint8 packet_data[2+2*NUM_OF_ADC_CHANNELS_MAX];
4159:..\src/command_processing.c ****     uint8 CYDATA i, idx = 0;
 27531              		.loc 1 4159 0
 27532 0006 0023     		movs	r3, #0
 27533 0008 BB77     		strb	r3, [r7, #30]
4160:..\src/command_processing.c ****     int16 aux_int16;
4161:..\src/command_processing.c ****     
4162:..\src/command_processing.c ****     // Header        
4163:..\src/command_processing.c ****     packet_data[0] = CMD_GET_ADC_RAW;
 27534              		.loc 1 4163 0
 27535 000a A623     		movs	r3, #166
 27536 000c 3B71     		strb	r3, [r7, #4]
4164:..\src/command_processing.c ****     
4165:..\src/command_processing.c ****     // Fill payload
4166:..\src/command_processing.c ****     for (i = 0; i < NUM_OF_ANALOG_INPUTS; i++) {       
 27537              		.loc 1 4166 0
 27538 000e 0023     		movs	r3, #0
 27539 0010 FB77     		strb	r3, [r7, #31]
 27540 0012 27E0     		b	.L1067
 27541              	.L1069:
4167:..\src/command_processing.c ****         if (c_mem.exp.ADC_conf[i] == 1) {
 27542              		.loc 1 4167 0
 27543 0014 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 27544 0016 274A     		ldr	r2, .L1070
 27545 0018 1344     		add	r3, r3, r2
 27546 001a 93F82832 		ldrb	r3, [r3, #552]	@ zero_extendqisi2
 27547 001e 012B     		cmp	r3, #1
 27548 0020 1DD1     		bne	.L1068
4168:..\src/command_processing.c ****             aux_int16 = (int16) ADC_buf[i];
 27549              		.loc 1 4168 0
 27550 0022 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 27551 0024 244A     		ldr	r2, .L1070+4
 27552 0026 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 27553 002a 7B80     		strh	r3, [r7, #2]	@ movhi
4169:..\src/command_processing.c ****             packet_data[(idx << 1) + 2] = ((char*)(&aux_int16))[0];
 27554              		.loc 1 4169 0
 27555 002c BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 27556 002e 5B00     		lsls	r3, r3, #1
 27557 0030 0233     		adds	r3, r3, #2
 27558 0032 BA1C     		adds	r2, r7, #2
 27559 0034 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 27560 0036 07F12001 		add	r1, r7, #32
 27561 003a 0B44     		add	r3, r3, r1
 27562 003c 03F81C2C 		strb	r2, [r3, #-28]
4170:..\src/command_processing.c ****             packet_data[(idx << 1) + 1] = ((char*)(&aux_int16))[1];
 27563              		.loc 1 4170 0
 27564 0040 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 27565 0042 5B00     		lsls	r3, r3, #1
 27566 0044 5A1C     		adds	r2, r3, #1
 27567 0046 BB1C     		adds	r3, r7, #2
 27568 0048 0133     		adds	r3, r3, #1
 27569 004a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 27570 004c 07F12003 		add	r3, r7, #32
 27571 0050 1344     		add	r3, r3, r2
 27572 0052 0A46     		mov	r2, r1
 27573 0054 03F81C2C 		strb	r2, [r3, #-28]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 604


4171:..\src/command_processing.c ****             idx++;
 27574              		.loc 1 4171 0
 27575 0058 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 27576 005a 0133     		adds	r3, r3, #1
 27577 005c BB77     		strb	r3, [r7, #30]
 27578              	.L1068:
4166:..\src/command_processing.c ****         if (c_mem.exp.ADC_conf[i] == 1) {
 27579              		.loc 1 4166 0 discriminator 2
 27580 005e FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 27581 0060 0133     		adds	r3, r3, #1
 27582 0062 FB77     		strb	r3, [r7, #31]
 27583              	.L1067:
4166:..\src/command_processing.c ****         if (c_mem.exp.ADC_conf[i] == 1) {
 27584              		.loc 1 4166 0 is_stmt 0 discriminator 1
 27585 0064 154B     		ldr	r3, .L1070+8
 27586 0066 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 27587 0068 FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 27588 006a 9A42     		cmp	r2, r3
 27589 006c D2D3     		bcc	.L1069
4172:..\src/command_processing.c ****         }
4173:..\src/command_processing.c ****     }
4174:..\src/command_processing.c **** 
4175:..\src/command_processing.c ****     // Calculate checksum
4176:..\src/command_processing.c ****     packet_data[1+2*idx] = LCRChecksum(packet_data, 1+2*idx);
 27590              		.loc 1 4176 0 is_stmt 1
 27591 006e BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 27592 0070 5B00     		lsls	r3, r3, #1
 27593 0072 5C1C     		adds	r4, r3, #1
 27594 0074 BB7F     		ldrb	r3, [r7, #30]
 27595 0076 5B00     		lsls	r3, r3, #1
 27596 0078 DBB2     		uxtb	r3, r3
 27597 007a 0133     		adds	r3, r3, #1
 27598 007c DAB2     		uxtb	r2, r3
 27599 007e 3B1D     		adds	r3, r7, #4
 27600 0080 1146     		mov	r1, r2
 27601 0082 1846     		mov	r0, r3
 27602 0084 FFF7FEFF 		bl	LCRChecksum
 27603 0088 0346     		mov	r3, r0
 27604 008a 1A46     		mov	r2, r3
 27605 008c 07F12003 		add	r3, r7, #32
 27606 0090 2344     		add	r3, r3, r4
 27607 0092 03F81C2C 		strb	r2, [r3, #-28]
4177:..\src/command_processing.c ****     
4178:..\src/command_processing.c ****     // Send package to UART
4179:..\src/command_processing.c ****     commWrite(packet_data, 2+2*idx);
 27608              		.loc 1 4179 0
 27609 0096 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 27610 0098 0133     		adds	r3, r3, #1
 27611 009a 9BB2     		uxth	r3, r3
 27612 009c 5B00     		lsls	r3, r3, #1
 27613 009e 9AB2     		uxth	r2, r3
 27614 00a0 3B1D     		adds	r3, r7, #4
 27615 00a2 1146     		mov	r1, r2
 27616 00a4 1846     		mov	r0, r3
 27617 00a6 FFF7FEFF 		bl	commWrite
4180:..\src/command_processing.c **** }
 27618              		.loc 1 4180 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 605


 27619 00aa 00BF     		nop
 27620 00ac 2437     		adds	r7, r7, #36
 27621              		.cfi_def_cfa_offset 12
 27622 00ae BD46     		mov	sp, r7
 27623              		.cfi_def_cfa_register 13
 27624              		@ sp needed
 27625 00b0 90BD     		pop	{r4, r7, pc}
 27626              	.L1071:
 27627 00b2 00BF     		.align	2
 27628              	.L1070:
 27629 00b4 00000000 		.word	c_mem
 27630 00b8 00000000 		.word	ADC_buf
 27631 00bc 00000000 		.word	NUM_OF_ANALOG_INPUTS
 27632              		.cfi_endproc
 27633              	.LFE114:
 27634              		.size	cmd_get_ADC_raw, .-cmd_get_ADC_raw
 27635              		.section	.rodata
 27636 2353 00       		.align	2
 27637              	.LC326:
 27638 2354 00       		.ascii	"\000"
 27639              		.section	.text.cmd_get_SD_file,"ax",%progbits
 27640              		.align	2
 27641              		.global	cmd_get_SD_file
 27642              		.thumb
 27643              		.thumb_func
 27644              		.type	cmd_get_SD_file, %function
 27645              	cmd_get_SD_file:
 27646              	.LFB115:
4181:..\src/command_processing.c **** 
4182:..\src/command_processing.c **** void cmd_get_SD_file( uint16 filename_length ){
 27647              		.loc 1 4182 0
 27648              		.cfi_startproc
 27649              		@ args = 0, pretend = 0, frame = 20064
 27650              		@ frame_needed = 1, uses_anonymous_args = 0
 27651 0000 80B5     		push	{r7, lr}
 27652              		.cfi_def_cfa_offset 8
 27653              		.cfi_offset 7, -8
 27654              		.cfi_offset 14, -4
 27655 0002 ADF59C4D 		sub	sp, sp, #19968
 27656              		.cfi_def_cfa_offset 19976
 27657 0006 98B0     		sub	sp, sp, #96
 27658              		.cfi_def_cfa_offset 20072
 27659 0008 00AF     		add	r7, sp, #0
 27660              		.cfi_def_cfa_register 7
 27661 000a 0246     		mov	r2, r0
 27662 000c 07F16003 		add	r3, r7, #96
 27663 0010 5A3B     		subs	r3, r3, #90
 27664 0012 1A80     		strh	r2, [r3]	@ movhi
4183:..\src/command_processing.c ****     
4184:..\src/command_processing.c ****     uint8 i = 0;
 27665              		.loc 1 4184 0
 27666 0014 0023     		movs	r3, #0
 27667 0016 07F59C42 		add	r2, r7, #19968
 27668 001a 02F15F02 		add	r2, r2, #95
 27669 001e 1370     		strb	r3, [r2]
4185:..\src/command_processing.c ****     char CYDATA filename[50] = "";
 27670              		.loc 1 4185 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 606


 27671 0020 0023     		movs	r3, #0
 27672 0022 07F59C42 		add	r2, r7, #19968
 27673 0026 02F12C02 		add	r2, r2, #44
 27674 002a 1360     		str	r3, [r2]
 27675 002c 07F59C43 		add	r3, r7, #19968
 27676 0030 03F13003 		add	r3, r3, #48
 27677 0034 2E22     		movs	r2, #46
 27678 0036 0021     		movs	r1, #0
 27679 0038 1846     		mov	r0, r3
 27680 003a FFF7FEFF 		bl	memset
4186:..\src/command_processing.c ****     char CYDATA str_sd_data[20000] = "";
 27681              		.loc 1 4186 0
 27682 003e 07F16003 		add	r3, r7, #96
 27683 0042 543B     		subs	r3, r3, #84
 27684 0044 0022     		movs	r2, #0
 27685 0046 1A60     		str	r2, [r3]
 27686 0048 0433     		adds	r3, r3, #4
 27687 004a 44F61C62 		movw	r2, #19996
 27688 004e 0021     		movs	r1, #0
 27689 0050 1846     		mov	r0, r3
 27690 0052 FFF7FEFF 		bl	memset
4187:..\src/command_processing.c ****     strcpy(filename, "");
 27691              		.loc 1 4187 0
 27692 0056 3C4B     		ldr	r3, .L1077
 27693 0058 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 27694 005a 07F59C42 		add	r2, r7, #19968
 27695 005e 02F12C02 		add	r2, r2, #44
 27696 0062 1370     		strb	r3, [r2]
4188:..\src/command_processing.c ****     strcpy(str_sd_data, "");
 27697              		.loc 1 4188 0
 27698 0064 384B     		ldr	r3, .L1077
 27699 0066 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 27700 0068 07F16003 		add	r3, r7, #96
 27701 006c 543B     		subs	r3, r3, #84
 27702 006e 1A70     		strb	r2, [r3]
4189:..\src/command_processing.c ****     
4190:..\src/command_processing.c ****     for (i=0; i<filename_length; i++){
 27703              		.loc 1 4190 0
 27704 0070 0023     		movs	r3, #0
 27705 0072 07F59C42 		add	r2, r7, #19968
 27706 0076 02F15F02 		add	r2, r2, #95
 27707 007a 1370     		strb	r3, [r2]
 27708 007c 1DE0     		b	.L1073
 27709              	.L1074:
4191:..\src/command_processing.c ****         *((uint8*)filename + i) = (char)g_rx.buffer[3+i];
 27710              		.loc 1 4191 0 discriminator 3
 27711 007e 07F59C43 		add	r3, r7, #19968
 27712 0082 03F15F03 		add	r3, r3, #95
 27713 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 27714 0088 07F59C42 		add	r2, r7, #19968
 27715 008c 02F12C02 		add	r2, r2, #44
 27716 0090 1344     		add	r3, r3, r2
 27717 0092 07F59C42 		add	r2, r7, #19968
 27718 0096 02F15F02 		add	r2, r2, #95
 27719 009a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 27720 009c 0332     		adds	r2, r2, #3
 27721 009e 2B49     		ldr	r1, .L1077+4
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 607


 27722 00a0 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 27723 00a2 1A70     		strb	r2, [r3]
4190:..\src/command_processing.c ****         *((uint8*)filename + i) = (char)g_rx.buffer[3+i];
 27724              		.loc 1 4190 0 discriminator 3
 27725 00a4 07F59C43 		add	r3, r7, #19968
 27726 00a8 03F15F03 		add	r3, r3, #95
 27727 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 27728 00ae 0133     		adds	r3, r3, #1
 27729 00b0 07F59C42 		add	r2, r7, #19968
 27730 00b4 02F15F02 		add	r2, r2, #95
 27731 00b8 1370     		strb	r3, [r2]
 27732              	.L1073:
4190:..\src/command_processing.c ****         *((uint8*)filename + i) = (char)g_rx.buffer[3+i];
 27733              		.loc 1 4190 0 is_stmt 0 discriminator 1
 27734 00ba 07F59C43 		add	r3, r7, #19968
 27735 00be 03F15F03 		add	r3, r3, #95
 27736 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 27737 00c4 9AB2     		uxth	r2, r3
 27738 00c6 07F16003 		add	r3, r7, #96
 27739 00ca 5A3B     		subs	r3, r3, #90
 27740 00cc 1B88     		ldrh	r3, [r3]
 27741 00ce 9342     		cmp	r3, r2
 27742 00d0 D5D8     		bhi	.L1074
4192:..\src/command_processing.c ****     }
4193:..\src/command_processing.c ****     *((uint8*)filename + i) = '\0';
 27743              		.loc 1 4193 0 is_stmt 1
 27744 00d2 07F59C43 		add	r3, r7, #19968
 27745 00d6 03F15F03 		add	r3, r3, #95
 27746 00da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 27747 00dc 07F59C42 		add	r2, r7, #19968
 27748 00e0 02F12C02 		add	r2, r2, #44
 27749 00e4 1344     		add	r3, r3, r2
 27750 00e6 0022     		movs	r2, #0
 27751 00e8 1A70     		strb	r2, [r3]
4194:..\src/command_processing.c ****      
4195:..\src/command_processing.c ****     // Check if the file is the one currently opened or not
4196:..\src/command_processing.c ****     if (strcmp(filename, sdFile)){
 27752              		.loc 1 4196 0
 27753 00ea 07F59C43 		add	r3, r7, #19968
 27754 00ee 03F12C03 		add	r3, r3, #44
 27755 00f2 1749     		ldr	r1, .L1077+8
 27756 00f4 1846     		mov	r0, r3
 27757 00f6 FFF7FEFF 		bl	strcmp
 27758 00fa 0346     		mov	r3, r0
 27759 00fc 002B     		cmp	r3, #0
 27760 00fe 0CD0     		beq	.L1075
4197:..\src/command_processing.c ****         Read_SD_Closed_File(filename, str_sd_data, sizeof(str_sd_data));
 27761              		.loc 1 4197 0
 27762 0100 07F16003 		add	r3, r7, #96
 27763 0104 543B     		subs	r3, r3, #84
 27764 0106 07F59C40 		add	r0, r7, #19968
 27765 010a 00F12C00 		add	r0, r0, #44
 27766 010e 44F62062 		movw	r2, #20000
 27767 0112 1946     		mov	r1, r3
 27768 0114 FFF7FEFF 		bl	Read_SD_Closed_File
 27769 0118 07E0     		b	.L1076
 27770              	.L1075:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 608


4198:..\src/command_processing.c ****     }
4199:..\src/command_processing.c ****     else {
4200:..\src/command_processing.c ****         //It is the currently open working file
4201:..\src/command_processing.c ****         Read_SD_Current_Data(str_sd_data, sizeof(str_sd_data));
 27771              		.loc 1 4201 0
 27772 011a 07F16003 		add	r3, r7, #96
 27773 011e 543B     		subs	r3, r3, #84
 27774 0120 44F62061 		movw	r1, #20000
 27775 0124 1846     		mov	r0, r3
 27776 0126 FFF7FEFF 		bl	Read_SD_Current_Data
 27777              	.L1076:
4202:..\src/command_processing.c ****     }
4203:..\src/command_processing.c **** 
4204:..\src/command_processing.c ****     //itoa(filename_length, filename, 10);
4205:..\src/command_processing.c ****     // Send the file to API that receives packet as a ping string
4206:..\src/command_processing.c ****     UART_RS485_ClearTxBuffer();
 27778              		.loc 1 4206 0
 27779 012a FFF7FEFF 		bl	UART_RS485_ClearTxBuffer
4207:..\src/command_processing.c ****     UART_RS485_PutString(str_sd_data);
 27780              		.loc 1 4207 0
 27781 012e 07F16003 		add	r3, r7, #96
 27782 0132 543B     		subs	r3, r3, #84
 27783 0134 1846     		mov	r0, r3
 27784 0136 FFF7FEFF 		bl	UART_RS485_PutString
4208:..\src/command_processing.c **** }
 27785              		.loc 1 4208 0
 27786 013a 00BF     		nop
 27787 013c 07F59C47 		add	r7, r7, #19968
 27788 0140 6037     		adds	r7, r7, #96
 27789              		.cfi_def_cfa_offset 8
 27790 0142 BD46     		mov	sp, r7
 27791              		.cfi_def_cfa_register 13
 27792              		@ sp needed
 27793 0144 80BD     		pop	{r7, pc}
 27794              	.L1078:
 27795 0146 00BF     		.align	2
 27796              	.L1077:
 27797 0148 54230000 		.word	.LC326
 27798 014c 00000000 		.word	g_rx
 27799 0150 00000000 		.word	sdFile
 27800              		.cfi_endproc
 27801              	.LFE115:
 27802              		.size	cmd_get_SD_file, .-cmd_get_SD_file
 27803              		.section	.text.cmd_remove_SD_file,"ax",%progbits
 27804              		.align	2
 27805              		.global	cmd_remove_SD_file
 27806              		.thumb
 27807              		.thumb_func
 27808              		.type	cmd_remove_SD_file, %function
 27809              	cmd_remove_SD_file:
 27810              	.LFB116:
4209:..\src/command_processing.c **** 
4210:..\src/command_processing.c **** void cmd_remove_SD_file( uint16 filename_length ){
 27811              		.loc 1 4210 0
 27812              		.cfi_startproc
 27813              		@ args = 0, pretend = 0, frame = 64
 27814              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 609


 27815 0000 80B5     		push	{r7, lr}
 27816              		.cfi_def_cfa_offset 8
 27817              		.cfi_offset 7, -8
 27818              		.cfi_offset 14, -4
 27819 0002 90B0     		sub	sp, sp, #64
 27820              		.cfi_def_cfa_offset 72
 27821 0004 00AF     		add	r7, sp, #0
 27822              		.cfi_def_cfa_register 7
 27823 0006 0346     		mov	r3, r0
 27824 0008 FB80     		strh	r3, [r7, #6]	@ movhi
4211:..\src/command_processing.c ****     
4212:..\src/command_processing.c ****     uint8 i = 0;
 27825              		.loc 1 4212 0
 27826 000a 0023     		movs	r3, #0
 27827 000c 87F83F30 		strb	r3, [r7, #63]
4213:..\src/command_processing.c ****     char CYDATA filename[50] = "";
 27828              		.loc 1 4213 0
 27829 0010 0023     		movs	r3, #0
 27830 0012 FB60     		str	r3, [r7, #12]
 27831 0014 07F11003 		add	r3, r7, #16
 27832 0018 2E22     		movs	r2, #46
 27833 001a 0021     		movs	r1, #0
 27834 001c 1846     		mov	r0, r3
 27835 001e FFF7FEFF 		bl	memset
4214:..\src/command_processing.c ****     strcpy(filename, "");
 27836              		.loc 1 4214 0
 27837 0022 214B     		ldr	r3, .L1082
 27838 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 27839 0026 3B73     		strb	r3, [r7, #12]
4215:..\src/command_processing.c ****     
4216:..\src/command_processing.c ****     for (i=0; i<filename_length; i++){
 27840              		.loc 1 4216 0
 27841 0028 0023     		movs	r3, #0
 27842 002a 87F83F30 		strb	r3, [r7, #63]
 27843 002e 0FE0     		b	.L1080
 27844              	.L1081:
4217:..\src/command_processing.c ****         *((uint8*)filename + i) = (char)g_rx.buffer[3+i];
 27845              		.loc 1 4217 0 discriminator 3
 27846 0030 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 27847 0034 07F10C02 		add	r2, r7, #12
 27848 0038 1344     		add	r3, r3, r2
 27849 003a 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 27850 003e 0332     		adds	r2, r2, #3
 27851 0040 1A49     		ldr	r1, .L1082+4
 27852 0042 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 27853 0044 1A70     		strb	r2, [r3]
4216:..\src/command_processing.c ****         *((uint8*)filename + i) = (char)g_rx.buffer[3+i];
 27854              		.loc 1 4216 0 discriminator 3
 27855 0046 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 27856 004a 0133     		adds	r3, r3, #1
 27857 004c 87F83F30 		strb	r3, [r7, #63]
 27858              	.L1080:
4216:..\src/command_processing.c ****         *((uint8*)filename + i) = (char)g_rx.buffer[3+i];
 27859              		.loc 1 4216 0 is_stmt 0 discriminator 1
 27860 0050 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 27861 0054 9BB2     		uxth	r3, r3
 27862 0056 FA88     		ldrh	r2, [r7, #6]
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 610


 27863 0058 9A42     		cmp	r2, r3
 27864 005a E9D8     		bhi	.L1081
4218:..\src/command_processing.c ****     }
4219:..\src/command_processing.c ****     *((uint8*)filename + i) = '\0';
 27865              		.loc 1 4219 0 is_stmt 1
 27866 005c 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 27867 0060 07F10C02 		add	r2, r7, #12
 27868 0064 1344     		add	r3, r3, r2
 27869 0066 0022     		movs	r2, #0
 27870 0068 1A70     		strb	r2, [r3]
4220:..\src/command_processing.c ****      
4221:..\src/command_processing.c ****     // Check if the file is the one currently opened or not
4222:..\src/command_processing.c ****     uint8 res = Remove_SD_File(filename);
 27871              		.loc 1 4222 0
 27872 006a 07F10C03 		add	r3, r7, #12
 27873 006e 1846     		mov	r0, r3
 27874 0070 FFF7FEFF 		bl	Remove_SD_File
 27875 0074 0346     		mov	r3, r0
 27876 0076 87F83E30 		strb	r3, [r7, #62]
4223:..\src/command_processing.c ****   
4224:..\src/command_processing.c ****     
4225:..\src/command_processing.c ****     uint8 packet_data[3]; 
4226:..\src/command_processing.c ****     
4227:..\src/command_processing.c ****     //Header package
4228:..\src/command_processing.c **** 
4229:..\src/command_processing.c ****     packet_data[0] = CMD_REMOVE_SD_SINGLE_FILE;
 27877              		.loc 1 4229 0
 27878 007a A823     		movs	r3, #168
 27879 007c 3B72     		strb	r3, [r7, #8]
4230:..\src/command_processing.c ****     packet_data[1] = res;
 27880              		.loc 1 4230 0
 27881 007e 97F83E30 		ldrb	r3, [r7, #62]
 27882 0082 7B72     		strb	r3, [r7, #9]
4231:..\src/command_processing.c **** 
4232:..\src/command_processing.c ****     // Calculate Checksum and send message to UART 
4233:..\src/command_processing.c ****     packet_data[2] = LCRChecksum (packet_data, 2);
 27883              		.loc 1 4233 0
 27884 0084 07F10803 		add	r3, r7, #8
 27885 0088 0221     		movs	r1, #2
 27886 008a 1846     		mov	r0, r3
 27887 008c FFF7FEFF 		bl	LCRChecksum
 27888 0090 0346     		mov	r3, r0
 27889 0092 BB72     		strb	r3, [r7, #10]
4234:..\src/command_processing.c ****     
4235:..\src/command_processing.c ****     commWrite(packet_data, 3);
 27890              		.loc 1 4235 0
 27891 0094 07F10803 		add	r3, r7, #8
 27892 0098 0321     		movs	r1, #3
 27893 009a 1846     		mov	r0, r3
 27894 009c FFF7FEFF 		bl	commWrite
4236:..\src/command_processing.c **** }
 27895              		.loc 1 4236 0
 27896 00a0 00BF     		nop
 27897 00a2 4037     		adds	r7, r7, #64
 27898              		.cfi_def_cfa_offset 8
 27899 00a4 BD46     		mov	sp, r7
 27900              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 611


 27901              		@ sp needed
 27902 00a6 80BD     		pop	{r7, pc}
 27903              	.L1083:
 27904              		.align	2
 27905              	.L1082:
 27906 00a8 54230000 		.word	.LC326
 27907 00ac 00000000 		.word	g_rx
 27908              		.cfi_endproc
 27909              	.LFE116:
 27910              		.size	cmd_remove_SD_file, .-cmd_remove_SD_file
 27911              		.section	.text.air_chambers_control,"ax",%progbits
 27912              		.align	2
 27913              		.global	air_chambers_control
 27914              		.thumb
 27915              		.thumb_func
 27916              		.type	air_chambers_control, %function
 27917              	air_chambers_control:
 27918              	.LFB117:
4237:..\src/command_processing.c **** 
4238:..\src/command_processing.c **** //==============================================================================
4239:..\src/command_processing.c **** //                                                          AIR CHAMBERS CONTROL
4240:..\src/command_processing.c **** //==============================================================================
4241:..\src/command_processing.c **** /* It asks current difference to the SoftHand and sets force feedback device inputs proportionally 
4242:..\src/command_processing.c **** 
4243:..\src/command_processing.c **** void air_chambers_control(int slave_motor_idx) {
 27919              		.loc 1 4243 0
 27920              		.cfi_startproc
 27921              		@ args = 0, pretend = 0, frame = 8
 27922              		@ frame_needed = 1, uses_anonymous_args = 0
 27923              		@ link register save eliminated.
 27924 0000 80B4     		push	{r7}
 27925              		.cfi_def_cfa_offset 4
 27926              		.cfi_offset 7, -4
 27927 0002 83B0     		sub	sp, sp, #12
 27928              		.cfi_def_cfa_offset 16
 27929 0004 00AF     		add	r7, sp, #0
 27930              		.cfi_def_cfa_register 7
 27931 0006 7860     		str	r0, [r7, #4]
4244:..\src/command_processing.c ****     
4245:..\src/command_processing.c **** #ifdef AIR_CHAMBERS_FB_FW
4246:..\src/command_processing.c ****     
4247:..\src/command_processing.c ****     int16 curr_diff;
4248:..\src/command_processing.c ****     int32 pressure_reference, err_pressure, pressure_value;
4249:..\src/command_processing.c ****     int32 valve_command;
4250:..\src/command_processing.c ****     int16 x_value;
4251:..\src/command_processing.c **** 
4252:..\src/command_processing.c ****     // Use pressure and residual current read from the SoftHand
4253:..\src/command_processing.c ****     
4254:..\src/command_processing.c ****     curr_diff = (int16)commReadResCurrFromSH();
4255:..\src/command_processing.c ****     
4256:..\src/command_processing.c ****     // Current difference saturation old mapping
4257:..\src/command_processing.c **** //    if(curr_diff > c_mem.FB.max_residual_current) {
4258:..\src/command_processing.c **** //        curr_diff = c_mem.FB.max_residual_current;
4259:..\src/command_processing.c **** //    }
4260:..\src/command_processing.c **** //    if(curr_diff < 0) {
4261:..\src/command_processing.c **** //        curr_diff = 0;
4262:..\src/command_processing.c **** //    }
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 612


4263:..\src/command_processing.c **** 
4264:..\src/command_processing.c ****     // Compute pressure reference
4265:..\src/command_processing.c **** 
4266:..\src/command_processing.c ****     x_value = curr_diff - 50.0;
4267:..\src/command_processing.c ****     if (x_value < 0)
4268:..\src/command_processing.c ****         x_value = 0;
4269:..\src/command_processing.c ****     
4270:..\src/command_processing.c ****     // old mapping --- linear mapping
4271:..\src/command_processing.c ****     //pressure_reference = (int32)(curr_diff * (c_mem.FB.maximum_pressure_kPa/c_mem.FB.max_residual
4272:..\src/command_processing.c ****     pressure_reference = (int32)((int32)(-30.0*x_value*x_value + 55.0*c_mem.FB.max_residual_current
4273:..\src/command_processing.c ****     if (pressure_reference < 0)
4274:..\src/command_processing.c ****         pressure_reference = 0;
4275:..\src/command_processing.c ****     if (pressure_reference > c_mem.FB.maximum_pressure_kPa)
4276:..\src/command_processing.c ****         pressure_reference = c_mem.FB.maximum_pressure_kPa;
4277:..\src/command_processing.c ****     
4278:..\src/command_processing.c ****     pressure_value = (int32)g_fb_meas.pressure;
4279:..\src/command_processing.c ****     err_pressure = pressure_reference - pressure_value;       // error in kPa
4280:..\src/command_processing.c **** //    if (err_pressure < 0){
4281:..\src/command_processing.c **** //        err_pressure = 0;
4282:..\src/command_processing.c **** //    }
4283:..\src/command_processing.c ****     
4284:..\src/command_processing.c ****     if (x_value <= 0){
4285:..\src/command_processing.c ****         //i.e the hand is opening
4286:..\src/command_processing.c ****         valve_command = 0;  //valve open: air passes
4287:..\src/command_processing.c ****     }
4288:..\src/command_processing.c ****     else {
4289:..\src/command_processing.c ****         //i.e the hand is closing, so valve should stay closed independently from the pressure erro
4290:..\src/command_processing.c ****         //if err_pressure greater than 0, it means pressure should increase, so valve should stay c
4291:..\src/command_processing.c ****         //if err_pressure==0, it means you reached the right pressure, so valve should stay closed
4292:..\src/command_processing.c ****         valve_command = 1;  //3.6V (5V - 2 diodes) - valve close: air doesn't pass
4293:..\src/command_processing.c ****     }
4294:..\src/command_processing.c ****     
4295:..\src/command_processing.c ****     // Pump control
4296:..\src/command_processing.c ****     g_refNew[0].pwm = (int32)(c_mem.FB.prop_err_fb_gain*err_pressure);
4297:..\src/command_processing.c ****     //c_mem.FB.prop_err_fb_gain default 1.0 gain since, max err_pressure is 25 and pwm range is app
4298:..\src/command_processing.c ****     
4299:..\src/command_processing.c ****     // Limit output voltage
4300:..\src/command_processing.c ****     if (g_refNew[0].pwm > 80) // 80 (3.5V) 80% of 4.3V (5V - 1 diode)
4301:..\src/command_processing.c ****         g_refNew[0].pwm = 80; // 80
4302:..\src/command_processing.c ****     if (g_refNew[0].pwm < 20)
4303:..\src/command_processing.c ****         g_refNew[0].pwm = 0;
4304:..\src/command_processing.c ****         
4305:..\src/command_processing.c ****     VALVE_Write(valve_command);
4306:..\src/command_processing.c ****     
4307:..\src/command_processing.c ****     
4308:..\src/command_processing.c ****     // Drive slave with reference generated on second motor index
4309:..\src/command_processing.c ****     // Use second motor structures and parameters, only to generate position reference not for PID 
4310:..\src/command_processing.c ****     // IMPORTANT: configure second motor parameters with proper slave parameters
4311:..\src/command_processing.c ****     motor_control_generic(slave_motor_idx);
4312:..\src/command_processing.c **** #endif
4313:..\src/command_processing.c **** }
 27932              		.loc 1 4313 0
 27933 0008 00BF     		nop
 27934 000a 0C37     		adds	r7, r7, #12
 27935              		.cfi_def_cfa_offset 4
 27936 000c BD46     		mov	sp, r7
 27937              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 613


 27938              		@ sp needed
 27939 000e 80BC     		pop	{r7}
 27940              		.cfi_restore 7
 27941              		.cfi_def_cfa_offset 0
 27942 0010 7047     		bx	lr
 27943              		.cfi_endproc
 27944              	.LFE117:
 27945              		.size	air_chambers_control, .-air_chambers_control
 27946 0012 00BF     		.section	.text.emg_activation_velocity_fsm,"ax",%progbits
 27947              		.align	2
 27948              		.global	emg_activation_velocity_fsm
 27949              		.thumb
 27950              		.thumb_func
 27951              		.type	emg_activation_velocity_fsm, %function
 27952              	emg_activation_velocity_fsm:
 27953              	.LFB118:
4314:..\src/command_processing.c **** 
4315:..\src/command_processing.c **** 
4316:..\src/command_processing.c **** //==============================================================================
4317:..\src/command_processing.c **** //                                                   EMG ACTIVATION VELOCITY FSM
4318:..\src/command_processing.c **** //==============================================================================
4319:..\src/command_processing.c **** /* It decides which is the current emg activation velocity.*/
4320:..\src/command_processing.c **** 
4321:..\src/command_processing.c **** uint8 emg_activation_velocity_fsm() {
 27954              		.loc 1 4321 0
 27955              		.cfi_startproc
 27956              		@ args = 0, pretend = 0, frame = 16
 27957              		@ frame_needed = 1, uses_anonymous_args = 0
 27958              		@ link register save eliminated.
 27959 0000 80B4     		push	{r7}
 27960              		.cfi_def_cfa_offset 4
 27961              		.cfi_offset 7, -4
 27962 0002 85B0     		sub	sp, sp, #20
 27963              		.cfi_def_cfa_offset 24
 27964 0004 00AF     		add	r7, sp, #0
 27965              		.cfi_def_cfa_register 7
4322:..\src/command_processing.c ****       
4323:..\src/command_processing.c ****     static uint8 fsm_state = RELAX_STATE;     // Wrist FSM state
4324:..\src/command_processing.c ****     static int32 cnt = 0;
4325:..\src/command_processing.c ****     int32 CYDATA err_emg_1, err_emg_2; 
4326:..\src/command_processing.c ****     int32 CYDATA f_err_emg_1, f_err_emg_2; 
4327:..\src/command_processing.c ****     
4328:..\src/command_processing.c ****     err_emg_1 = g_adc_meas.emg[0] - c_mem.emg.emg_threshold[0];
 27966              		.loc 1 4328 0
 27967 0006 534B     		ldr	r3, .L1114
 27968 0008 1B68     		ldr	r3, [r3]
 27969 000a 534A     		ldr	r2, .L1114+4
 27970 000c B2F8F021 		ldrh	r2, [r2, #496]
 27971 0010 9B1A     		subs	r3, r3, r2
 27972 0012 FB60     		str	r3, [r7, #12]
4329:..\src/command_processing.c ****     err_emg_2 = g_adc_meas.emg[1] - c_mem.emg.emg_threshold[1];
 27973              		.loc 1 4329 0
 27974 0014 4F4B     		ldr	r3, .L1114
 27975 0016 5B68     		ldr	r3, [r3, #4]
 27976 0018 4F4A     		ldr	r2, .L1114+4
 27977 001a B2F8F221 		ldrh	r2, [r2, #498]
 27978 001e 9B1A     		subs	r3, r3, r2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 614


 27979 0020 BB60     		str	r3, [r7, #8]
4330:..\src/command_processing.c ****     f_err_emg_1 = g_adc_meas.emg[0] - c_mem.WR.fast_act_threshold[0];
 27980              		.loc 1 4330 0
 27981 0022 4C4B     		ldr	r3, .L1114
 27982 0024 1B68     		ldr	r3, [r3]
 27983 0026 4C4A     		ldr	r2, .L1114+4
 27984 0028 B2F8E222 		ldrh	r2, [r2, #738]
 27985 002c 9B1A     		subs	r3, r3, r2
 27986 002e 7B60     		str	r3, [r7, #4]
4331:..\src/command_processing.c ****     f_err_emg_2 = g_adc_meas.emg[1] - c_mem.WR.fast_act_threshold[1];
 27987              		.loc 1 4331 0
 27988 0030 484B     		ldr	r3, .L1114
 27989 0032 5B68     		ldr	r3, [r3, #4]
 27990 0034 484A     		ldr	r2, .L1114+4
 27991 0036 B2F8E422 		ldrh	r2, [r2, #740]
 27992 003a 9B1A     		subs	r3, r3, r2
 27993 003c 3B60     		str	r3, [r7]
4332:..\src/command_processing.c ****     
4333:..\src/command_processing.c **** 
4334:..\src/command_processing.c ****     // State machine - Evaluate emg activation status
4335:..\src/command_processing.c ****     // Note: in this way, diff_emg_1 and diff_emg_2 are for sure differences between two consecutiv
4336:..\src/command_processing.c ****     switch (fsm_state){
 27994              		.loc 1 4336 0
 27995 003e 474B     		ldr	r3, .L1114+8
 27996 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 27997 0042 032B     		cmp	r3, #3
 27998 0044 7FD8     		bhi	.L1086
 27999 0046 01A2     		adr	r2, .L1088
 28000 0048 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 28001              		.p2align 2
 28002              	.L1088:
 28003 004c 5D000000 		.word	.L1087+1
 28004 0050 71000000 		.word	.L1089+1
 28005 0054 11010000 		.word	.L1090+1
 28006 0058 25010000 		.word	.L1091+1
 28007              		.p2align 1
 28008              	.L1087:
4337:..\src/command_processing.c ****         case RELAX_STATE:
4338:..\src/command_processing.c ****             if (err_emg_1 > 0 || err_emg_2 > 0){
 28009              		.loc 1 4338 0
 28010 005c FB68     		ldr	r3, [r7, #12]
 28011 005e 002B     		cmp	r3, #0
 28012 0060 02DC     		bgt	.L1092
 28013              		.loc 1 4338 0 is_stmt 0 discriminator 1
 28014 0062 BB68     		ldr	r3, [r7, #8]
 28015 0064 002B     		cmp	r3, #0
 28016 0066 67DD     		ble	.L1110
 28017              	.L1092:
4339:..\src/command_processing.c ****                 fsm_state = TIMER_STATE;
 28018              		.loc 1 4339 0 is_stmt 1
 28019 0068 3C4B     		ldr	r3, .L1114+8
 28020 006a 0122     		movs	r2, #1
 28021 006c 1A70     		strb	r2, [r3]
4340:..\src/command_processing.c ****             }
4341:..\src/command_processing.c ****             
4342:..\src/command_processing.c ****             break;
 28022              		.loc 1 4342 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 615


 28023 006e 63E0     		b	.L1110
 28024              	.L1089:
4343:..\src/command_processing.c ****         case TIMER_STATE:     // Timer
4344:..\src/command_processing.c ****             if (err_emg_1 > 0 || err_emg_2 > 0){
 28025              		.loc 1 4344 0
 28026 0070 FB68     		ldr	r3, [r7, #12]
 28027 0072 002B     		cmp	r3, #0
 28028 0074 02DC     		bgt	.L1094
 28029              		.loc 1 4344 0 is_stmt 0 discriminator 1
 28030 0076 BB68     		ldr	r3, [r7, #8]
 28031 0078 002B     		cmp	r3, #0
 28032 007a 05DD     		ble	.L1095
 28033              	.L1094:
4345:..\src/command_processing.c ****                 cnt = cnt +1;
 28034              		.loc 1 4345 0 is_stmt 1
 28035 007c 384B     		ldr	r3, .L1114+12
 28036 007e 1B68     		ldr	r3, [r3]
 28037 0080 0133     		adds	r3, r3, #1
 28038 0082 374A     		ldr	r2, .L1114+12
 28039 0084 1360     		str	r3, [r2]
 28040 0086 02E0     		b	.L1096
 28041              	.L1095:
4346:..\src/command_processing.c ****             }
4347:..\src/command_processing.c ****             else {
4348:..\src/command_processing.c ****                 fsm_state = RELAX_STATE;
 28042              		.loc 1 4348 0
 28043 0088 344B     		ldr	r3, .L1114+8
 28044 008a 0022     		movs	r2, #0
 28045 008c 1A70     		strb	r2, [r3]
 28046              	.L1096:
4349:..\src/command_processing.c ****             }
4350:..\src/command_processing.c ****             
4351:..\src/command_processing.c ****             if (cnt > 100){
 28047              		.loc 1 4351 0
 28048 008e 344B     		ldr	r3, .L1114+12
 28049 0090 1B68     		ldr	r3, [r3]
 28050 0092 642B     		cmp	r3, #100
 28051 0094 52DD     		ble	.L1111
4352:..\src/command_processing.c ****                 if ((err_emg_1 > 0 && f_err_emg_1 > 0) || (err_emg_2 > 0 && f_err_emg_2 > 0)){
 28052              		.loc 1 4352 0
 28053 0096 FB68     		ldr	r3, [r7, #12]
 28054 0098 002B     		cmp	r3, #0
 28055 009a 02DD     		ble	.L1098
 28056              		.loc 1 4352 0 is_stmt 0 discriminator 1
 28057 009c 7B68     		ldr	r3, [r7, #4]
 28058 009e 002B     		cmp	r3, #0
 28059 00a0 05DC     		bgt	.L1099
 28060              	.L1098:
 28061              		.loc 1 4352 0 discriminator 3
 28062 00a2 BB68     		ldr	r3, [r7, #8]
 28063 00a4 002B     		cmp	r3, #0
 28064 00a6 0EDD     		ble	.L1100
 28065              		.loc 1 4352 0 discriminator 4
 28066 00a8 3B68     		ldr	r3, [r7]
 28067 00aa 002B     		cmp	r3, #0
 28068 00ac 0BDD     		ble	.L1100
 28069              	.L1099:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 616


4353:..\src/command_processing.c ****                     // Fast activation
4354:..\src/command_processing.c ****                     if (c_mem.WR.activation_mode == 0){
 28070              		.loc 1 4354 0 is_stmt 1
 28071 00ae 2A4B     		ldr	r3, .L1114+4
 28072 00b0 93F8E032 		ldrb	r3, [r3, #736]	@ zero_extendqisi2
 28073 00b4 002B     		cmp	r3, #0
 28074 00b6 03D1     		bne	.L1101
4355:..\src/command_processing.c ****                         fsm_state = MOVE_FAST_ACT;
 28075              		.loc 1 4355 0
 28076 00b8 284B     		ldr	r3, .L1114+8
 28077 00ba 0222     		movs	r2, #2
 28078 00bc 1A70     		strb	r2, [r3]
 28079 00be 02E0     		b	.L1100
 28080              	.L1101:
4356:..\src/command_processing.c ****                     }
4357:..\src/command_processing.c ****                     else{
4358:..\src/command_processing.c ****                         fsm_state = MOVE_SLOW_ACT;
 28081              		.loc 1 4358 0
 28082 00c0 264B     		ldr	r3, .L1114+8
 28083 00c2 0322     		movs	r2, #3
 28084 00c4 1A70     		strb	r2, [r3]
 28085              	.L1100:
4359:..\src/command_processing.c ****                     }
4360:..\src/command_processing.c ****                 }
4361:..\src/command_processing.c ****                 if ((err_emg_1 > 0 && f_err_emg_1 < 0) || (err_emg_2 > 0 && f_err_emg_2 < 0)){
 28086              		.loc 1 4361 0
 28087 00c6 FB68     		ldr	r3, [r7, #12]
 28088 00c8 002B     		cmp	r3, #0
 28089 00ca 02DD     		ble	.L1102
 28090              		.loc 1 4361 0 is_stmt 0 discriminator 1
 28091 00cc 7B68     		ldr	r3, [r7, #4]
 28092 00ce 002B     		cmp	r3, #0
 28093 00d0 05DB     		blt	.L1103
 28094              	.L1102:
 28095              		.loc 1 4361 0 discriminator 3
 28096 00d2 BB68     		ldr	r3, [r7, #8]
 28097 00d4 002B     		cmp	r3, #0
 28098 00d6 0EDD     		ble	.L1104
 28099              		.loc 1 4361 0 discriminator 4
 28100 00d8 3B68     		ldr	r3, [r7]
 28101 00da 002B     		cmp	r3, #0
 28102 00dc 0BDA     		bge	.L1104
 28103              	.L1103:
4362:..\src/command_processing.c ****                     // Slow activation
4363:..\src/command_processing.c ****                     if (c_mem.WR.activation_mode == 0){
 28104              		.loc 1 4363 0 is_stmt 1
 28105 00de 1E4B     		ldr	r3, .L1114+4
 28106 00e0 93F8E032 		ldrb	r3, [r3, #736]	@ zero_extendqisi2
 28107 00e4 002B     		cmp	r3, #0
 28108 00e6 03D1     		bne	.L1105
4364:..\src/command_processing.c ****                         fsm_state = MOVE_SLOW_ACT;
 28109              		.loc 1 4364 0
 28110 00e8 1C4B     		ldr	r3, .L1114+8
 28111 00ea 0322     		movs	r2, #3
 28112 00ec 1A70     		strb	r2, [r3]
 28113 00ee 02E0     		b	.L1104
 28114              	.L1105:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 617


4365:..\src/command_processing.c ****                     }
4366:..\src/command_processing.c ****                     else{
4367:..\src/command_processing.c ****                         fsm_state = MOVE_FAST_ACT;
 28115              		.loc 1 4367 0
 28116 00f0 1A4B     		ldr	r3, .L1114+8
 28117 00f2 0222     		movs	r2, #2
 28118 00f4 1A70     		strb	r2, [r3]
 28119              	.L1104:
4368:..\src/command_processing.c ****                     }
4369:..\src/command_processing.c ****                 }
4370:..\src/command_processing.c ****                 if (err_emg_1 < 0 && err_emg_2 < 0){
 28120              		.loc 1 4370 0
 28121 00f6 FB68     		ldr	r3, [r7, #12]
 28122 00f8 002B     		cmp	r3, #0
 28123 00fa 05DA     		bge	.L1106
 28124              		.loc 1 4370 0 is_stmt 0 discriminator 1
 28125 00fc BB68     		ldr	r3, [r7, #8]
 28126 00fe 002B     		cmp	r3, #0
 28127 0100 02DA     		bge	.L1106
4371:..\src/command_processing.c ****                     // Involuntary activation
4372:..\src/command_processing.c ****                     fsm_state = RELAX_STATE;
 28128              		.loc 1 4372 0 is_stmt 1
 28129 0102 164B     		ldr	r3, .L1114+8
 28130 0104 0022     		movs	r2, #0
 28131 0106 1A70     		strb	r2, [r3]
 28132              	.L1106:
4373:..\src/command_processing.c ****                 }
4374:..\src/command_processing.c ****                 cnt = 0;
 28133              		.loc 1 4374 0
 28134 0108 154B     		ldr	r3, .L1114+12
 28135 010a 0022     		movs	r2, #0
 28136 010c 1A60     		str	r2, [r3]
4375:..\src/command_processing.c ****             }
4376:..\src/command_processing.c ****     
4377:..\src/command_processing.c ****             break;
 28137              		.loc 1 4377 0
 28138 010e 15E0     		b	.L1111
 28139              	.L1090:
4378:..\src/command_processing.c ****         case MOVE_FAST_ACT:
4379:..\src/command_processing.c ****             
4380:..\src/command_processing.c ****             if (err_emg_1 < 0 && err_emg_2 < 0){
 28140              		.loc 1 4380 0
 28141 0110 FB68     		ldr	r3, [r7, #12]
 28142 0112 002B     		cmp	r3, #0
 28143 0114 14DA     		bge	.L1112
 28144              		.loc 1 4380 0 is_stmt 0 discriminator 1
 28145 0116 BB68     		ldr	r3, [r7, #8]
 28146 0118 002B     		cmp	r3, #0
 28147 011a 11DA     		bge	.L1112
4381:..\src/command_processing.c ****                 fsm_state = RELAX_STATE;
 28148              		.loc 1 4381 0 is_stmt 1
 28149 011c 0F4B     		ldr	r3, .L1114+8
 28150 011e 0022     		movs	r2, #0
 28151 0120 1A70     		strb	r2, [r3]
4382:..\src/command_processing.c ****             }
4383:..\src/command_processing.c ****         
4384:..\src/command_processing.c ****             break;
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 618


 28152              		.loc 1 4384 0
 28153 0122 0DE0     		b	.L1112
 28154              	.L1091:
4385:..\src/command_processing.c ****         case MOVE_SLOW_ACT:
4386:..\src/command_processing.c ****           
4387:..\src/command_processing.c ****             if (err_emg_1 < 0 && err_emg_2 < 0){
 28155              		.loc 1 4387 0
 28156 0124 FB68     		ldr	r3, [r7, #12]
 28157 0126 002B     		cmp	r3, #0
 28158 0128 0CDA     		bge	.L1113
 28159              		.loc 1 4387 0 is_stmt 0 discriminator 1
 28160 012a BB68     		ldr	r3, [r7, #8]
 28161 012c 002B     		cmp	r3, #0
 28162 012e 09DA     		bge	.L1113
4388:..\src/command_processing.c ****                 fsm_state = RELAX_STATE;
 28163              		.loc 1 4388 0 is_stmt 1
 28164 0130 0A4B     		ldr	r3, .L1114+8
 28165 0132 0022     		movs	r2, #0
 28166 0134 1A70     		strb	r2, [r3]
4389:..\src/command_processing.c ****             }
4390:..\src/command_processing.c ****             
4391:..\src/command_processing.c ****             break;
 28167              		.loc 1 4391 0
 28168 0136 05E0     		b	.L1113
 28169              	.L1110:
4342:..\src/command_processing.c ****         case TIMER_STATE:     // Timer
 28170              		.loc 1 4342 0
 28171 0138 00BF     		nop
 28172 013a 04E0     		b	.L1086
 28173              	.L1111:
4377:..\src/command_processing.c ****         case MOVE_FAST_ACT:
 28174              		.loc 1 4377 0
 28175 013c 00BF     		nop
 28176 013e 02E0     		b	.L1086
 28177              	.L1112:
4384:..\src/command_processing.c ****         case MOVE_SLOW_ACT:
 28178              		.loc 1 4384 0
 28179 0140 00BF     		nop
 28180 0142 00E0     		b	.L1086
 28181              	.L1113:
 28182              		.loc 1 4391 0
 28183 0144 00BF     		nop
 28184              	.L1086:
4392:..\src/command_processing.c ****     }
4393:..\src/command_processing.c ****     
4394:..\src/command_processing.c ****     return fsm_state;
 28185              		.loc 1 4394 0
 28186 0146 054B     		ldr	r3, .L1114+8
 28187 0148 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
4395:..\src/command_processing.c **** 
4396:..\src/command_processing.c **** }
 28188              		.loc 1 4396 0
 28189 014a 1846     		mov	r0, r3
 28190 014c 1437     		adds	r7, r7, #20
 28191              		.cfi_def_cfa_offset 4
 28192 014e BD46     		mov	sp, r7
 28193              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 619


 28194              		@ sp needed
 28195 0150 80BC     		pop	{r7}
 28196              		.cfi_restore 7
 28197              		.cfi_def_cfa_offset 0
 28198 0152 7047     		bx	lr
 28199              	.L1115:
 28200              		.align	2
 28201              	.L1114:
 28202 0154 00000000 		.word	g_adc_meas
 28203 0158 00000000 		.word	c_mem
 28204 015c 0C000000 		.word	fsm_state.11561
 28205 0160 10000000 		.word	cnt.11562
 28206              		.cfi_endproc
 28207              	.LFE118:
 28208              		.size	emg_activation_velocity_fsm, .-emg_activation_velocity_fsm
 28209              		.section	.text.otbk_act_wrist_control,"ax",%progbits
 28210              		.align	2
 28211              		.global	otbk_act_wrist_control
 28212              		.thumb
 28213              		.thumb_func
 28214              		.type	otbk_act_wrist_control, %function
 28215              	otbk_act_wrist_control:
 28216              	.LFB119:
4397:..\src/command_processing.c **** 
4398:..\src/command_processing.c **** //==============================================================================
4399:..\src/command_processing.c **** //                                          OTTOBOCK ACTIVE WRIST MASTER CONTROL
4400:..\src/command_processing.c **** //==============================================================================
4401:..\src/command_processing.c **** /* It moves Ottobock active wrist (as master) and connected SoftHand slave according to emg activat
4402:..\src/command_processing.c **** 
4403:..\src/command_processing.c **** void otbk_act_wrist_control(int slave_motor_idx) {
 28217              		.loc 1 4403 0
 28218              		.cfi_startproc
 28219              		@ args = 0, pretend = 0, frame = 8
 28220              		@ frame_needed = 1, uses_anonymous_args = 0
 28221              		@ link register save eliminated.
 28222 0000 80B4     		push	{r7}
 28223              		.cfi_def_cfa_offset 4
 28224              		.cfi_offset 7, -4
 28225 0002 83B0     		sub	sp, sp, #12
 28226              		.cfi_def_cfa_offset 16
 28227 0004 00AF     		add	r7, sp, #0
 28228              		.cfi_def_cfa_register 7
 28229 0006 7860     		str	r0, [r7, #4]
4404:..\src/command_processing.c ****     
4405:..\src/command_processing.c **** #ifdef OTBK_ACT_WRIST_MS_FW
4406:..\src/command_processing.c ****     
4407:..\src/command_processing.c ****     uint8 fsm_state = emg_activation_velocity_fsm();
4408:..\src/command_processing.c ****         
4409:..\src/command_processing.c ****     // State machine - Evaluate emg activation status
4410:..\src/command_processing.c ****     // Note: in this way, diff_emg_1 and diff_emg_2 are for sure differences between two consecutiv
4411:..\src/command_processing.c ****     switch (fsm_state){
4412:..\src/command_processing.c ****         case RELAX_STATE:
4413:..\src/command_processing.c ****             
4414:..\src/command_processing.c ****             // Wrist stop
4415:..\src/command_processing.c ****             g_refNew[0].pwm = 0;
4416:..\src/command_processing.c ****             
4417:..\src/command_processing.c ****             // Softhand stop
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 620


4418:..\src/command_processing.c ****             // Do not update the motor reference, so the SoftHand stays still
4419:..\src/command_processing.c ****             g_ref[slave_motor_idx].pos = g_refOld[slave_motor_idx].pos;
4420:..\src/command_processing.c ****             g_refNew[slave_motor_idx].pos = g_ref[slave_motor_idx].pos;
4421:..\src/command_processing.c ****             
4422:..\src/command_processing.c ****             break;
4423:..\src/command_processing.c ****         case TIMER_STATE:     // Timer
4424:..\src/command_processing.c ****                 
4425:..\src/command_processing.c ****             break;
4426:..\src/command_processing.c ****         case MOVE_FAST_ACT: // Wrist movement
4427:..\src/command_processing.c ****             
4428:..\src/command_processing.c ****             // Wrist movement
4429:..\src/command_processing.c ****             if (g_adc_meas.emg[0] > g_adc_meas.emg[1]){
4430:..\src/command_processing.c ****                 if (c_mem.WR.wrist_direction_association == 0){
4431:..\src/command_processing.c ****                     g_refNew[0].pwm = 60;       //Rotate CW
4432:..\src/command_processing.c ****                 }
4433:..\src/command_processing.c ****                 else {
4434:..\src/command_processing.c ****                     g_refNew[0].pwm = -60;   // Rotate CCW
4435:..\src/command_processing.c ****                 }
4436:..\src/command_processing.c ****             }
4437:..\src/command_processing.c ****             else {
4438:..\src/command_processing.c ****                 if (c_mem.WR.wrist_direction_association == 0){
4439:..\src/command_processing.c ****                     g_refNew[0].pwm = -60;   // Rotate CCW
4440:..\src/command_processing.c ****                 }
4441:..\src/command_processing.c ****                 else {
4442:..\src/command_processing.c ****                     g_refNew[0].pwm = 60;       //Rotate CW
4443:..\src/command_processing.c ****                 }
4444:..\src/command_processing.c ****             }
4445:..\src/command_processing.c ****             
4446:..\src/command_processing.c ****             // Softhand stop
4447:..\src/command_processing.c ****             // Do not update the motor reference, so the SoftHand stays still
4448:..\src/command_processing.c ****             g_ref[slave_motor_idx].pos = g_refOld[slave_motor_idx].pos;
4449:..\src/command_processing.c ****             g_refNew[slave_motor_idx].pos = g_ref[slave_motor_idx].pos;
4450:..\src/command_processing.c ****             
4451:..\src/command_processing.c ****             break;
4452:..\src/command_processing.c ****         case MOVE_SLOW_ACT: // Hand movement
4453:..\src/command_processing.c ****             
4454:..\src/command_processing.c ****             // Wrist stop
4455:..\src/command_processing.c ****             g_refNew[0].pwm = 0;
4456:..\src/command_processing.c ****             
4457:..\src/command_processing.c ****             // SoftHand movement
4458:..\src/command_processing.c ****             // Drive slave with reference generated on second motor index
4459:..\src/command_processing.c ****             // Use second motor structures and parameters, only to generate position reference not 
4460:..\src/command_processing.c ****             // IMPORTANT: configure second motor parameters with proper slave parameters
4461:..\src/command_processing.c ****             motor_control_generic(slave_motor_idx);
4462:..\src/command_processing.c ****             
4463:..\src/command_processing.c ****             break;
4464:..\src/command_processing.c ****     }
4465:..\src/command_processing.c ****         
4466:..\src/command_processing.c ****     // Limit output voltage
4467:..\src/command_processing.c ****     if (g_refNew[0].pwm > 67) // 67 (8.4V max of 2S ottobock battery) 66.6% of 12.6V
4468:..\src/command_processing.c ****         g_refNew[0].pwm = 67; // 67
4469:..\src/command_processing.c ****     if (g_refNew[0].pwm < -67)
4470:..\src/command_processing.c ****         g_refNew[0].pwm = -67;
4471:..\src/command_processing.c ****     
4472:..\src/command_processing.c **** #endif
4473:..\src/command_processing.c **** }
 28230              		.loc 1 4473 0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 621


 28231 0008 00BF     		nop
 28232 000a 0C37     		adds	r7, r7, #12
 28233              		.cfi_def_cfa_offset 4
 28234 000c BD46     		mov	sp, r7
 28235              		.cfi_def_cfa_register 13
 28236              		@ sp needed
 28237 000e 80BC     		pop	{r7}
 28238              		.cfi_restore 7
 28239              		.cfi_def_cfa_offset 0
 28240 0010 7047     		bx	lr
 28241              		.cfi_endproc
 28242              	.LFE119:
 28243              		.size	otbk_act_wrist_control, .-otbk_act_wrist_control
 28244 0012 00BF     		.section	.text.drive_slave,"ax",%progbits
 28245              		.align	2
 28246              		.global	drive_slave
 28247              		.thumb
 28248              		.thumb_func
 28249              		.type	drive_slave, %function
 28250              	drive_slave:
 28251              	.LFB120:
4474:..\src/command_processing.c **** 
4475:..\src/command_processing.c **** //==============================================================================
4476:..\src/command_processing.c **** //                                                                   DRIVE SLAVE
4477:..\src/command_processing.c **** //==============================================================================
4478:..\src/command_processing.c ****  
4479:..\src/command_processing.c **** void drive_slave(uint8 motor_idx, uint8 slave_ID) {
 28252              		.loc 1 4479 0
 28253              		.cfi_startproc
 28254              		@ args = 0, pretend = 0, frame = 8
 28255              		@ frame_needed = 1, uses_anonymous_args = 0
 28256              		@ link register save eliminated.
 28257 0000 80B4     		push	{r7}
 28258              		.cfi_def_cfa_offset 4
 28259              		.cfi_offset 7, -4
 28260 0002 83B0     		sub	sp, sp, #12
 28261              		.cfi_def_cfa_offset 16
 28262 0004 00AF     		add	r7, sp, #0
 28263              		.cfi_def_cfa_register 7
 28264 0006 0346     		mov	r3, r0
 28265 0008 0A46     		mov	r2, r1
 28266 000a FB71     		strb	r3, [r7, #7]
 28267 000c 1346     		mov	r3, r2
 28268 000e BB71     		strb	r3, [r7, #6]
4480:..\src/command_processing.c **** 
4481:..\src/command_processing.c **** #ifdef MASTER_FW
4482:..\src/command_processing.c ****     uint8 packet_data[6];
4483:..\src/command_processing.c ****     uint8 packet_lenght;
4484:..\src/command_processing.c ****     int16 aux_int16;
4485:..\src/command_processing.c **** 
4486:..\src/command_processing.c ****     // If not the use of handle or an emg input mode is set, exit from master_mode
4487:..\src/command_processing.c ****     if( c_mem.motor[motor_idx].input_mode != INPUT_MODE_ENCODER3          &&
4488:..\src/command_processing.c ****         c_mem.motor[motor_idx].input_mode != INPUT_MODE_EMG_PROPORTIONAL  &&
4489:..\src/command_processing.c ****         c_mem.motor[motor_idx].input_mode != INPUT_MODE_EMG_INTEGRAL      &&
4490:..\src/command_processing.c ****         c_mem.motor[motor_idx].input_mode != INPUT_MODE_EMG_FCFS          &&
4491:..\src/command_processing.c ****         c_mem.motor[motor_idx].input_mode != INPUT_MODE_EMG_FCFS_ADV          &&
4492:..\src/command_processing.c ****         c_mem.motor[motor_idx].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC     ){
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 622


4493:..\src/command_processing.c ****         master_mode = 0;
4494:..\src/command_processing.c ****         return;
4495:..\src/command_processing.c ****     }
4496:..\src/command_processing.c ****         
4497:..\src/command_processing.c ****     if (dev_tension[0] >= 5000 && dev_tension[0] < 7000){
4498:..\src/command_processing.c ****         master_mode = 0;
4499:..\src/command_processing.c ****         return;
4500:..\src/command_processing.c ****     }
4501:..\src/command_processing.c ****     
4502:..\src/command_processing.c ****        
4503:..\src/command_processing.c ****     //Sends a Set inputs command to a second board
4504:..\src/command_processing.c ****     packet_data[0] = CMD_SET_INPUTS;
4505:..\src/command_processing.c ****     aux_int16 = (int16) (g_ref[motor_idx].pos >> g_mem.enc[g_mem.motor[motor_idx].encoder_line].res
4506:..\src/command_processing.c ****     packet_data[2] = ((char*)(&aux_int16))[0];
4507:..\src/command_processing.c ****     packet_data[1] = ((char*)(&aux_int16))[1];
4508:..\src/command_processing.c ****     *((int16 *) &packet_data[3]) = 0;
4509:..\src/command_processing.c ****     
4510:..\src/command_processing.c ****     packet_lenght = 6;
4511:..\src/command_processing.c ****     packet_data[packet_lenght - 1] = LCRChecksum(packet_data,packet_lenght - 1);
4512:..\src/command_processing.c ****     commWriteID(packet_data, packet_lenght, slave_ID);
4513:..\src/command_processing.c **** 
4514:..\src/command_processing.c **** #endif
4515:..\src/command_processing.c **** }
 28269              		.loc 1 4515 0
 28270 0010 00BF     		nop
 28271 0012 0C37     		adds	r7, r7, #12
 28272              		.cfi_def_cfa_offset 4
 28273 0014 BD46     		mov	sp, r7
 28274              		.cfi_def_cfa_register 13
 28275              		@ sp needed
 28276 0016 80BC     		pop	{r7}
 28277              		.cfi_restore 7
 28278              		.cfi_def_cfa_offset 0
 28279 0018 7047     		bx	lr
 28280              		.cfi_endproc
 28281              	.LFE120:
 28282              		.size	drive_slave, .-drive_slave
 28283 001a 00BF     		.section	.text.stop_master_device,"ax",%progbits
 28284              		.align	2
 28285              		.global	stop_master_device
 28286              		.thumb
 28287              		.thumb_func
 28288              		.type	stop_master_device, %function
 28289              	stop_master_device:
 28290              	.LFB121:
4516:..\src/command_processing.c **** 
4517:..\src/command_processing.c **** //==============================================================================
4518:..\src/command_processing.c **** //                                                            STOP MASTER DEVICE
4519:..\src/command_processing.c **** //==============================================================================
4520:..\src/command_processing.c ****  
4521:..\src/command_processing.c **** void stop_master_device() {
 28291              		.loc 1 4521 0
 28292              		.cfi_startproc
 28293              		@ args = 0, pretend = 0, frame = 0
 28294              		@ frame_needed = 1, uses_anonymous_args = 0
 28295              		@ link register save eliminated.
 28296 0000 80B4     		push	{r7}
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 623


 28297              		.cfi_def_cfa_offset 4
 28298              		.cfi_offset 7, -4
 28299 0002 00AF     		add	r7, sp, #0
 28300              		.cfi_def_cfa_register 7
4522:..\src/command_processing.c ****     
4523:..\src/command_processing.c **** #ifdef AIR_CHAMBERS_FB_FW
4524:..\src/command_processing.c ****     if (c_mem.dev.dev_type == AIR_CHAMBERS_FB){
4525:..\src/command_processing.c ****         // Stop pump and open valve
4526:..\src/command_processing.c ****         g_refNew[0].pwm = 0;    
4527:..\src/command_processing.c ****         VALVE_Write(0);
4528:..\src/command_processing.c ****     }
4529:..\src/command_processing.c **** #endif
4530:..\src/command_processing.c **** 
4531:..\src/command_processing.c **** #ifdef OTBK_ACT_WRIST_MS_FW
4532:..\src/command_processing.c ****     if (c_mem.dev.dev_type == OTBK_ACT_WRIST_MS){
4533:..\src/command_processing.c ****         //Stop wrist motor
4534:..\src/command_processing.c ****         g_refNew[0].pwm = 0;
4535:..\src/command_processing.c ****     }
4536:..\src/command_processing.c **** #endif    
4537:..\src/command_processing.c **** }
 28301              		.loc 1 4537 0
 28302 0004 00BF     		nop
 28303 0006 BD46     		mov	sp, r7
 28304              		.cfi_def_cfa_register 13
 28305              		@ sp needed
 28306 0008 80BC     		pop	{r7}
 28307              		.cfi_restore 7
 28308              		.cfi_def_cfa_offset 0
 28309 000a 7047     		bx	lr
 28310              		.cfi_endproc
 28311              	.LFE121:
 28312              		.size	stop_master_device, .-stop_master_device
 28313              		.section	.text.deactivate_slaves,"ax",%progbits
 28314              		.align	2
 28315              		.global	deactivate_slaves
 28316              		.thumb
 28317              		.thumb_func
 28318              		.type	deactivate_slaves, %function
 28319              	deactivate_slaves:
 28320              	.LFB122:
4538:..\src/command_processing.c **** 
4539:..\src/command_processing.c **** //==============================================================================
4540:..\src/command_processing.c **** //                                                             DEACTIVATE SLAVES
4541:..\src/command_processing.c **** //==============================================================================
4542:..\src/command_processing.c ****  
4543:..\src/command_processing.c **** void deactivate_slaves() {
 28321              		.loc 1 4543 0
 28322              		.cfi_startproc
 28323              		@ args = 0, pretend = 0, frame = 0
 28324              		@ frame_needed = 1, uses_anonymous_args = 0
 28325              		@ link register save eliminated.
 28326 0000 80B4     		push	{r7}
 28327              		.cfi_def_cfa_offset 4
 28328              		.cfi_offset 7, -4
 28329 0002 00AF     		add	r7, sp, #0
 28330              		.cfi_def_cfa_register 7
4544:..\src/command_processing.c ****     
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 624


4545:..\src/command_processing.c **** #ifdef MASTER_FW
4546:..\src/command_processing.c ****     
4547:..\src/command_processing.c ****     uint8 packet_data[10];
4548:..\src/command_processing.c ****     uint8 packet_lenght;
4549:..\src/command_processing.c ****     
4550:..\src/command_processing.c ****     // If not a emg input mode is set, exit from master_mode
4551:..\src/command_processing.c ****     if(c_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL  &&
4552:..\src/command_processing.c ****         c_mem.motor[0].input_mode != INPUT_MODE_EMG_INTEGRAL     &&
4553:..\src/command_processing.c ****         c_mem.motor[0].input_mode != INPUT_MODE_EMG_FCFS         &&
4554:..\src/command_processing.c ****         c_mem.motor[0].input_mode != INPUT_MODE_EMG_FCFS_ADV     &&
4555:..\src/command_processing.c ****         c_mem.motor[0].input_mode != INPUT_MODE_EMG_PROPORTIONAL_NC     ){
4556:..\src/command_processing.c ****         master_mode = 0;
4557:..\src/command_processing.c ****         return;
4558:..\src/command_processing.c ****     }
4559:..\src/command_processing.c ****    
4560:..\src/command_processing.c ****     //Sends a Set inputs command to a second board
4561:..\src/command_processing.c ****     packet_data[0] = CMD_ACTIVATE;
4562:..\src/command_processing.c **** 
4563:..\src/command_processing.c ****     *((int16 *) &packet_data[1]) = 0;   //3 to activate, 0 to deactivate
4564:..\src/command_processing.c ****     packet_lenght = 3;
4565:..\src/command_processing.c ****     packet_data[packet_lenght - 1] = LCRChecksum(packet_data,packet_lenght - 1);
4566:..\src/command_processing.c ****     
4567:..\src/command_processing.c ****     commWrite(packet_data, packet_lenght);
4568:..\src/command_processing.c ****     
4569:..\src/command_processing.c **** #endif    
4570:..\src/command_processing.c **** }
 28331              		.loc 1 4570 0
 28332 0004 00BF     		nop
 28333 0006 BD46     		mov	sp, r7
 28334              		.cfi_def_cfa_register 13
 28335              		@ sp needed
 28336 0008 80BC     		pop	{r7}
 28337              		.cfi_restore 7
 28338              		.cfi_def_cfa_offset 0
 28339 000a 7047     		bx	lr
 28340              		.cfi_endproc
 28341              	.LFE122:
 28342              		.size	deactivate_slaves, .-deactivate_slaves
 28343              		.bss
 28344              		.align	2
 28345              	h_time.11232:
 28346 0000 00000000 		.space	4
 28347              		.align	1
 28348              	i.11273:
 28349 0004 0000     		.space	2
 28350 0006 0000     		.align	2
 28351              	last_aux_int16.11404:
 28352 0008 00000000 		.space	4
 28353              	fsm_state.11561:
 28354 000c 00       		.space	1
 28355 000d 000000   		.align	2
 28356              	cnt.11562:
 28357 0010 00000000 		.space	4
 28358              		.text
 28359              	.Letext0:
 28360              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 28361              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 625


 28362              		.file 5 "Generated_Source\\PSoC5/cytypes.h"
 28363              		.file 6 "..\\src\\commands.h"
 28364              		.file 7 "..\\src\\emFile_V322c\\Code\\Include\\PSoC5/FS_Types.h"
 28365              		.file 8 "..\\src\\globals.h"
 28366              		.file 9 "Generated_Source\\PSoC5/core_cm3.h"
 28367              		.section	.debug_info,"",%progbits
 28368              	.Ldebug_info0:
 28369 0000 95270000 		.4byte	0x2795
 28370 0004 0400     		.2byte	0x4
 28371 0006 00000000 		.4byte	.Ldebug_abbrev0
 28372 000a 04       		.byte	0x4
 28373 000b 01       		.uleb128 0x1
 28374 000c CD090000 		.4byte	.LASF411
 28375 0010 0C       		.byte	0xc
 28376 0011 1F160000 		.4byte	.LASF412
 28377 0015 99110000 		.4byte	.LASF413
 28378 0019 00000000 		.4byte	.Ldebug_ranges0+0
 28379 001d 00000000 		.4byte	0
 28380 0021 00000000 		.4byte	.Ldebug_line0
 28381 0025 02       		.uleb128 0x2
 28382 0026 01       		.byte	0x1
 28383 0027 06       		.byte	0x6
 28384 0028 93040000 		.4byte	.LASF0
 28385 002c 02       		.uleb128 0x2
 28386 002d 01       		.byte	0x1
 28387 002e 08       		.byte	0x8
 28388 002f 0D050000 		.4byte	.LASF1
 28389 0033 02       		.uleb128 0x2
 28390 0034 02       		.byte	0x2
 28391 0035 05       		.byte	0x5
 28392 0036 88120000 		.4byte	.LASF2
 28393 003a 02       		.uleb128 0x2
 28394 003b 02       		.byte	0x2
 28395 003c 07       		.byte	0x7
 28396 003d 11150000 		.4byte	.LASF3
 28397 0041 03       		.uleb128 0x3
 28398 0042 DD150000 		.4byte	.LASF5
 28399 0046 03       		.byte	0x3
 28400 0047 3F       		.byte	0x3f
 28401 0048 4C000000 		.4byte	0x4c
 28402 004c 02       		.uleb128 0x2
 28403 004d 04       		.byte	0x4
 28404 004e 05       		.byte	0x5
 28405 004f 52030000 		.4byte	.LASF4
 28406 0053 03       		.uleb128 0x3
 28407 0054 980A0000 		.4byte	.LASF6
 28408 0058 03       		.byte	0x3
 28409 0059 41       		.byte	0x41
 28410 005a 5E000000 		.4byte	0x5e
 28411 005e 02       		.uleb128 0x2
 28412 005f 04       		.byte	0x4
 28413 0060 07       		.byte	0x7
 28414 0061 87080000 		.4byte	.LASF7
 28415 0065 02       		.uleb128 0x2
 28416 0066 08       		.byte	0x8
 28417 0067 05       		.byte	0x5
 28418 0068 A30A0000 		.4byte	.LASF8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 626


 28419 006c 02       		.uleb128 0x2
 28420 006d 08       		.byte	0x8
 28421 006e 07       		.byte	0x7
 28422 006f E70E0000 		.4byte	.LASF9
 28423 0073 04       		.uleb128 0x4
 28424 0074 04       		.byte	0x4
 28425 0075 05       		.byte	0x5
 28426 0076 696E7400 		.ascii	"int\000"
 28427 007a 02       		.uleb128 0x2
 28428 007b 04       		.byte	0x4
 28429 007c 07       		.byte	0x7
 28430 007d E00B0000 		.4byte	.LASF10
 28431 0081 03       		.uleb128 0x3
 28432 0082 EA000000 		.4byte	.LASF11
 28433 0086 04       		.byte	0x4
 28434 0087 2C       		.byte	0x2c
 28435 0088 41000000 		.4byte	0x41
 28436 008c 03       		.uleb128 0x3
 28437 008d 7F140000 		.4byte	.LASF12
 28438 0091 04       		.byte	0x4
 28439 0092 30       		.byte	0x30
 28440 0093 53000000 		.4byte	0x53
 28441 0097 05       		.uleb128 0x5
 28442 0098 6A120000 		.4byte	.LASF13
 28443 009c 05       		.byte	0x5
 28444 009d E401     		.2byte	0x1e4
 28445 009f 2C000000 		.4byte	0x2c
 28446 00a3 05       		.uleb128 0x5
 28447 00a4 9A160000 		.4byte	.LASF14
 28448 00a8 05       		.byte	0x5
 28449 00a9 E501     		.2byte	0x1e5
 28450 00ab 3A000000 		.4byte	0x3a
 28451 00af 05       		.uleb128 0x5
 28452 00b0 20010000 		.4byte	.LASF15
 28453 00b4 05       		.byte	0x5
 28454 00b5 E601     		.2byte	0x1e6
 28455 00b7 5E000000 		.4byte	0x5e
 28456 00bb 05       		.uleb128 0x5
 28457 00bc 2E020000 		.4byte	.LASF16
 28458 00c0 05       		.byte	0x5
 28459 00c1 E701     		.2byte	0x1e7
 28460 00c3 25000000 		.4byte	0x25
 28461 00c7 05       		.uleb128 0x5
 28462 00c8 DF130000 		.4byte	.LASF17
 28463 00cc 05       		.byte	0x5
 28464 00cd E801     		.2byte	0x1e8
 28465 00cf 33000000 		.4byte	0x33
 28466 00d3 05       		.uleb128 0x5
 28467 00d4 6B150000 		.4byte	.LASF18
 28468 00d8 05       		.byte	0x5
 28469 00d9 E901     		.2byte	0x1e9
 28470 00db 4C000000 		.4byte	0x4c
 28471 00df 05       		.uleb128 0x5
 28472 00e0 D9030000 		.4byte	.LASF19
 28473 00e4 05       		.byte	0x5
 28474 00e5 EA01     		.2byte	0x1ea
 28475 00e7 EB000000 		.4byte	0xeb
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 627


 28476 00eb 02       		.uleb128 0x2
 28477 00ec 04       		.byte	0x4
 28478 00ed 04       		.byte	0x4
 28479 00ee 890B0000 		.4byte	.LASF20
 28480 00f2 02       		.uleb128 0x2
 28481 00f3 08       		.byte	0x8
 28482 00f4 04       		.byte	0x4
 28483 00f5 FB0A0000 		.4byte	.LASF21
 28484 00f9 02       		.uleb128 0x2
 28485 00fa 01       		.byte	0x1
 28486 00fb 08       		.byte	0x8
 28487 00fc BB050000 		.4byte	.LASF22
 28488 0100 05       		.uleb128 0x5
 28489 0101 DC0F0000 		.4byte	.LASF23
 28490 0105 05       		.byte	0x5
 28491 0106 8E02     		.2byte	0x28e
 28492 0108 0C010000 		.4byte	0x10c
 28493 010c 06       		.uleb128 0x6
 28494 010d 97000000 		.4byte	0x97
 28495 0111 02       		.uleb128 0x2
 28496 0112 08       		.byte	0x8
 28497 0113 04       		.byte	0x4
 28498 0114 D30D0000 		.4byte	.LASF24
 28499 0118 02       		.uleb128 0x2
 28500 0119 04       		.byte	0x4
 28501 011a 07       		.byte	0x7
 28502 011b 39000000 		.4byte	.LASF25
 28503 011f 07       		.uleb128 0x7
 28504 0120 04       		.byte	0x4
 28505 0121 F9000000 		.4byte	0xf9
 28506 0125 07       		.uleb128 0x7
 28507 0126 04       		.byte	0x4
 28508 0127 2B010000 		.4byte	0x12b
 28509 012b 08       		.uleb128 0x8
 28510 012c F9000000 		.4byte	0xf9
 28511 0130 09       		.uleb128 0x9
 28512 0131 F9000000 		.4byte	0xf9
 28513 0135 40010000 		.4byte	0x140
 28514 0139 0A       		.uleb128 0xa
 28515 013a 18010000 		.4byte	0x118
 28516 013e 19       		.byte	0x19
 28517 013f 00       		.byte	0
 28518 0140 09       		.uleb128 0x9
 28519 0141 F9000000 		.4byte	0xf9
 28520 0145 50010000 		.4byte	0x150
 28521 0149 0A       		.uleb128 0xa
 28522 014a 18010000 		.4byte	0x118
 28523 014e 07       		.byte	0x7
 28524 014f 00       		.byte	0
 28525 0150 0B       		.uleb128 0xb
 28526 0151 400C0000 		.4byte	.LASF58
 28527 0155 01       		.byte	0x1
 28528 0156 2C000000 		.4byte	0x2c
 28529 015a 06       		.byte	0x6
 28530 015b 42       		.byte	0x42
 28531 015c 21020000 		.4byte	0x221
 28532 0160 0C       		.uleb128 0xc
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 628


 28533 0161 B4160000 		.4byte	.LASF26
 28534 0165 00       		.byte	0
 28535 0166 0C       		.uleb128 0xc
 28536 0167 19130000 		.4byte	.LASF27
 28537 016b 01       		.byte	0x1
 28538 016c 0C       		.uleb128 0xc
 28539 016d 63080000 		.4byte	.LASF28
 28540 0171 03       		.byte	0x3
 28541 0172 0C       		.uleb128 0xc
 28542 0173 45050000 		.4byte	.LASF29
 28543 0177 04       		.byte	0x4
 28544 0178 0C       		.uleb128 0xc
 28545 0179 15100000 		.4byte	.LASF30
 28546 017d 05       		.byte	0x5
 28547 017e 0C       		.uleb128 0xc
 28548 017f 75090000 		.4byte	.LASF31
 28549 0183 06       		.byte	0x6
 28550 0184 0C       		.uleb128 0xc
 28551 0185 99080000 		.4byte	.LASF32
 28552 0189 09       		.byte	0x9
 28553 018a 0C       		.uleb128 0xc
 28554 018b 4F000000 		.4byte	.LASF33
 28555 018f 0A       		.byte	0xa
 28556 0190 0C       		.uleb128 0xc
 28557 0191 C1130000 		.4byte	.LASF34
 28558 0195 0C       		.byte	0xc
 28559 0196 0C       		.uleb128 0xc
 28560 0197 330E0000 		.4byte	.LASF35
 28561 019b 0D       		.byte	0xd
 28562 019c 0C       		.uleb128 0xc
 28563 019d 95000000 		.4byte	.LASF36
 28564 01a1 80       		.byte	0x80
 28565 01a2 0C       		.uleb128 0xc
 28566 01a3 AA050000 		.4byte	.LASF37
 28567 01a7 81       		.byte	0x81
 28568 01a8 0C       		.uleb128 0xc
 28569 01a9 CF060000 		.4byte	.LASF38
 28570 01ad 82       		.byte	0x82
 28571 01ae 0C       		.uleb128 0xc
 28572 01af E3120000 		.4byte	.LASF39
 28573 01b3 83       		.byte	0x83
 28574 01b4 0C       		.uleb128 0xc
 28575 01b5 33120000 		.4byte	.LASF40
 28576 01b9 84       		.byte	0x84
 28577 01ba 0C       		.uleb128 0xc
 28578 01bb F1030000 		.4byte	.LASF41
 28579 01bf 85       		.byte	0x85
 28580 01c0 0C       		.uleb128 0xc
 28581 01c1 B7090000 		.4byte	.LASF42
 28582 01c5 86       		.byte	0x86
 28583 01c6 0C       		.uleb128 0xc
 28584 01c7 55090000 		.4byte	.LASF43
 28585 01cb 88       		.byte	0x88
 28586 01cc 0C       		.uleb128 0xc
 28587 01cd A2130000 		.4byte	.LASF44
 28588 01d1 89       		.byte	0x89
 28589 01d2 0C       		.uleb128 0xc
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 629


 28590 01d3 450F0000 		.4byte	.LASF45
 28591 01d7 8B       		.byte	0x8b
 28592 01d8 0C       		.uleb128 0xc
 28593 01d9 910D0000 		.4byte	.LASF46
 28594 01dd 8C       		.byte	0x8c
 28595 01de 0C       		.uleb128 0xc
 28596 01df 730A0000 		.4byte	.LASF47
 28597 01e3 8E       		.byte	0x8e
 28598 01e4 0C       		.uleb128 0xc
 28599 01e5 7D0F0000 		.4byte	.LASF48
 28600 01e9 90       		.byte	0x90
 28601 01ea 0C       		.uleb128 0xc
 28602 01eb BD020000 		.4byte	.LASF49
 28603 01ef 92       		.byte	0x92
 28604 01f0 0C       		.uleb128 0xc
 28605 01f1 E0140000 		.4byte	.LASF50
 28606 01f5 A1       		.byte	0xa1
 28607 01f6 0C       		.uleb128 0xc
 28608 01f7 5C110000 		.4byte	.LASF51
 28609 01fb A2       		.byte	0xa2
 28610 01fc 0C       		.uleb128 0xc
 28611 01fd 9E0C0000 		.4byte	.LASF52
 28612 0201 A3       		.byte	0xa3
 28613 0202 0C       		.uleb128 0xc
 28614 0203 6E110000 		.4byte	.LASF53
 28615 0207 A4       		.byte	0xa4
 28616 0208 0C       		.uleb128 0xc
 28617 0209 08130000 		.4byte	.LASF54
 28618 020d A5       		.byte	0xa5
 28619 020e 0C       		.uleb128 0xc
 28620 020f 10110000 		.4byte	.LASF55
 28621 0213 A6       		.byte	0xa6
 28622 0214 0C       		.uleb128 0xc
 28623 0215 020B0000 		.4byte	.LASF56
 28624 0219 A7       		.byte	0xa7
 28625 021a 0C       		.uleb128 0xc
 28626 021b 980B0000 		.4byte	.LASF57
 28627 021f A8       		.byte	0xa8
 28628 0220 00       		.byte	0
 28629 0221 0B       		.uleb128 0xb
 28630 0222 61160000 		.4byte	.LASF59
 28631 0226 01       		.byte	0x1
 28632 0227 2C000000 		.4byte	0x2c
 28633 022b 06       		.byte	0x6
 28634 022c 8F       		.byte	0x8f
 28635 022d 62020000 		.4byte	0x262
 28636 0231 0C       		.uleb128 0xc
 28637 0232 6B070000 		.4byte	.LASF60
 28638 0236 00       		.byte	0
 28639 0237 0C       		.uleb128 0xc
 28640 0238 7E0C0000 		.4byte	.LASF61
 28641 023c 01       		.byte	0x1
 28642 023d 0C       		.uleb128 0xc
 28643 023e CE020000 		.4byte	.LASF62
 28644 0242 02       		.byte	0x2
 28645 0243 0C       		.uleb128 0xc
 28646 0244 0A020000 		.4byte	.LASF63
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 630


 28647 0248 03       		.byte	0x3
 28648 0249 0C       		.uleb128 0xc
 28649 024a AE010000 		.4byte	.LASF64
 28650 024e 04       		.byte	0x4
 28651 024f 0C       		.uleb128 0xc
 28652 0250 7D000000 		.4byte	.LASF65
 28653 0254 05       		.byte	0x5
 28654 0255 0C       		.uleb128 0xc
 28655 0256 C1080000 		.4byte	.LASF66
 28656 025a 06       		.byte	0x6
 28657 025b 0C       		.uleb128 0xc
 28658 025c 3D110000 		.4byte	.LASF67
 28659 0260 07       		.byte	0x7
 28660 0261 00       		.byte	0
 28661 0262 0B       		.uleb128 0xb
 28662 0263 B10A0000 		.4byte	.LASF68
 28663 0267 01       		.byte	0x1
 28664 0268 2C000000 		.4byte	0x2c
 28665 026c 06       		.byte	0x6
 28666 026d A3       		.byte	0xa3
 28667 026e 8B020000 		.4byte	0x28b
 28668 0272 0C       		.uleb128 0xc
 28669 0273 C2150000 		.4byte	.LASF69
 28670 0277 00       		.byte	0
 28671 0278 0C       		.uleb128 0xc
 28672 0279 49090000 		.4byte	.LASF70
 28673 027d 01       		.byte	0x1
 28674 027e 0C       		.uleb128 0xc
 28675 027f C30D0000 		.4byte	.LASF71
 28676 0283 02       		.byte	0x2
 28677 0284 0C       		.uleb128 0xc
 28678 0285 4E080000 		.4byte	.LASF72
 28679 0289 03       		.byte	0x3
 28680 028a 00       		.byte	0
 28681 028b 0B       		.uleb128 0xb
 28682 028c D5040000 		.4byte	.LASF73
 28683 0290 01       		.byte	0x1
 28684 0291 2C000000 		.4byte	0x2c
 28685 0295 06       		.byte	0x6
 28686 0296 AD       		.byte	0xad
 28687 0297 A8020000 		.4byte	0x2a8
 28688 029b 0C       		.uleb128 0xc
 28689 029c 33110000 		.4byte	.LASF74
 28690 02a0 00       		.byte	0
 28691 02a1 0C       		.uleb128 0xc
 28692 02a2 DD0A0000 		.4byte	.LASF75
 28693 02a6 01       		.byte	0x1
 28694 02a7 00       		.byte	0
 28695 02a8 0B       		.uleb128 0xb
 28696 02a9 8C0E0000 		.4byte	.LASF76
 28697 02ad 01       		.byte	0x1
 28698 02ae 2C000000 		.4byte	0x2c
 28699 02b2 06       		.byte	0x6
 28700 02b3 B2       		.byte	0xb2
 28701 02b4 C5020000 		.4byte	0x2c5
 28702 02b8 0C       		.uleb128 0xc
 28703 02b9 50070000 		.4byte	.LASF77
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 631


 28704 02bd 00       		.byte	0
 28705 02be 0C       		.uleb128 0xc
 28706 02bf 06090000 		.4byte	.LASF78
 28707 02c3 01       		.byte	0x1
 28708 02c4 00       		.byte	0
 28709 02c5 0B       		.uleb128 0xb
 28710 02c6 D4130000 		.4byte	.LASF79
 28711 02ca 01       		.byte	0x1
 28712 02cb 2C000000 		.4byte	0x2c
 28713 02cf 06       		.byte	0x6
 28714 02d0 BA       		.byte	0xba
 28715 02d1 12030000 		.4byte	0x312
 28716 02d5 0C       		.uleb128 0xc
 28717 02d6 0D090000 		.4byte	.LASF80
 28718 02da 00       		.byte	0
 28719 02db 0C       		.uleb128 0xc
 28720 02dc 6F160000 		.4byte	.LASF81
 28721 02e0 01       		.byte	0x1
 28722 02e1 0C       		.uleb128 0xc
 28723 02e2 C10A0000 		.4byte	.LASF82
 28724 02e6 02       		.byte	0x2
 28725 02e7 0C       		.uleb128 0xc
 28726 02e8 6D0D0000 		.4byte	.LASF83
 28727 02ec 03       		.byte	0x3
 28728 02ed 0C       		.uleb128 0xc
 28729 02ee 4B0C0000 		.4byte	.LASF84
 28730 02f2 04       		.byte	0x4
 28731 02f3 0C       		.uleb128 0xc
 28732 02f4 FE0E0000 		.4byte	.LASF85
 28733 02f8 05       		.byte	0x5
 28734 02f9 0C       		.uleb128 0xc
 28735 02fa DF0D0000 		.4byte	.LASF86
 28736 02fe 06       		.byte	0x6
 28737 02ff 0C       		.uleb128 0xc
 28738 0300 0E0D0000 		.4byte	.LASF87
 28739 0304 07       		.byte	0x7
 28740 0305 0C       		.uleb128 0xc
 28741 0306 10070000 		.4byte	.LASF88
 28742 030a 08       		.byte	0x8
 28743 030b 0C       		.uleb128 0xc
 28744 030c 42080000 		.4byte	.LASF89
 28745 0310 09       		.byte	0x9
 28746 0311 00       		.byte	0
 28747 0312 03       		.uleb128 0x3
 28748 0313 A3150000 		.4byte	.LASF90
 28749 0317 07       		.byte	0x7
 28750 0318 7E       		.byte	0x7e
 28751 0319 1D030000 		.4byte	0x31d
 28752 031d 0D       		.uleb128 0xd
 28753 031e A3150000 		.4byte	.LASF90
 28754 0322 07       		.uleb128 0x7
 28755 0323 04       		.byte	0x4
 28756 0324 12030000 		.4byte	0x312
 28757 0328 0E       		.uleb128 0xe
 28758 0329 5B0A0000 		.4byte	.LASF93
 28759 032d 10       		.byte	0x10
 28760 032e 08       		.byte	0x8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 632


 28761 032f E5       		.byte	0xe5
 28762 0330 65030000 		.4byte	0x365
 28763 0334 0F       		.uleb128 0xf
 28764 0335 706F7300 		.ascii	"pos\000"
 28765 0339 08       		.byte	0x8
 28766 033a E6       		.byte	0xe6
 28767 033b D3000000 		.4byte	0xd3
 28768 033f 00       		.byte	0
 28769 0340 10       		.uleb128 0x10
 28770 0341 39090000 		.4byte	.LASF91
 28771 0345 08       		.byte	0x8
 28772 0346 E7       		.byte	0xe7
 28773 0347 D3000000 		.4byte	0xd3
 28774 034b 04       		.byte	0x4
 28775 034c 0F       		.uleb128 0xf
 28776 034d 70776D00 		.ascii	"pwm\000"
 28777 0351 08       		.byte	0x8
 28778 0352 E8       		.byte	0xe8
 28779 0353 D3000000 		.4byte	0xd3
 28780 0357 08       		.byte	0x8
 28781 0358 10       		.uleb128 0x10
 28782 0359 3F0F0000 		.4byte	.LASF92
 28783 035d 08       		.byte	0x8
 28784 035e E9       		.byte	0xe9
 28785 035f 97000000 		.4byte	0x97
 28786 0363 0C       		.byte	0xc
 28787 0364 00       		.byte	0
 28788 0365 0E       		.uleb128 0xe
 28789 0366 08110000 		.4byte	.LASF94
 28790 036a 34       		.byte	0x34
 28791 036b 08       		.byte	0x8
 28792 036c F0       		.byte	0xf0
 28793 036d C6030000 		.4byte	0x3c6
 28794 0371 0F       		.uleb128 0xf
 28795 0372 706F7300 		.ascii	"pos\000"
 28796 0376 08       		.byte	0x8
 28797 0377 F1       		.byte	0xf1
 28798 0378 C6030000 		.4byte	0x3c6
 28799 037c 00       		.byte	0
 28800 037d 10       		.uleb128 0x10
 28801 037e 39090000 		.4byte	.LASF91
 28802 0382 08       		.byte	0x8
 28803 0383 F2       		.byte	0xf2
 28804 0384 D3000000 		.4byte	0xd3
 28805 0388 0C       		.byte	0xc
 28806 0389 10       		.uleb128 0x10
 28807 038a 21140000 		.4byte	.LASF95
 28808 038e 08       		.byte	0x8
 28809 038f F3       		.byte	0xf3
 28810 0390 D3000000 		.4byte	0xd3
 28811 0394 10       		.byte	0x10
 28812 0395 10       		.uleb128 0x10
 28813 0396 B7080000 		.4byte	.LASF96
 28814 039a 08       		.byte	0x8
 28815 039b F4       		.byte	0xf4
 28816 039c D3000000 		.4byte	0xd3
 28817 03a0 14       		.byte	0x14
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 633


 28818 03a1 0F       		.uleb128 0xf
 28819 03a2 726F7400 		.ascii	"rot\000"
 28820 03a6 08       		.byte	0x8
 28821 03a7 F5       		.byte	0xf5
 28822 03a8 D6030000 		.4byte	0x3d6
 28823 03ac 18       		.byte	0x18
 28824 03ad 0F       		.uleb128 0xf
 28825 03ae 76656C00 		.ascii	"vel\000"
 28826 03b2 08       		.byte	0x8
 28827 03b3 F6       		.byte	0xf6
 28828 03b4 C6030000 		.4byte	0x3c6
 28829 03b8 1C       		.byte	0x1c
 28830 03b9 0F       		.uleb128 0xf
 28831 03ba 61636300 		.ascii	"acc\000"
 28832 03be 08       		.byte	0x8
 28833 03bf F7       		.byte	0xf7
 28834 03c0 C6030000 		.4byte	0x3c6
 28835 03c4 28       		.byte	0x28
 28836 03c5 00       		.byte	0
 28837 03c6 09       		.uleb128 0x9
 28838 03c7 D3000000 		.4byte	0xd3
 28839 03cb D6030000 		.4byte	0x3d6
 28840 03cf 0A       		.uleb128 0xa
 28841 03d0 18010000 		.4byte	0x118
 28842 03d4 02       		.byte	0x2
 28843 03d5 00       		.byte	0
 28844 03d6 09       		.uleb128 0x9
 28845 03d7 BB000000 		.4byte	0xbb
 28846 03db E6030000 		.4byte	0x3e6
 28847 03df 0A       		.uleb128 0xa
 28848 03e0 18010000 		.4byte	0x118
 28849 03e4 02       		.byte	0x2
 28850 03e5 00       		.byte	0
 28851 03e6 0E       		.uleb128 0xe
 28852 03e7 BC0B0000 		.4byte	.LASF97
 28853 03eb 28       		.byte	0x28
 28854 03ec 08       		.byte	0x8
 28855 03ed FA       		.byte	0xfa
 28856 03ee 17040000 		.4byte	0x417
 28857 03f2 0F       		.uleb128 0xf
 28858 03f3 656D6700 		.ascii	"emg\000"
 28859 03f7 08       		.byte	0x8
 28860 03f8 FB       		.byte	0xfb
 28861 03f9 17040000 		.4byte	0x417
 28862 03fd 00       		.byte	0
 28863 03fe 10       		.uleb128 0x10
 28864 03ff 650D0000 		.4byte	.LASF98
 28865 0403 08       		.byte	0x8
 28866 0404 FC       		.byte	0xfc
 28867 0405 27040000 		.4byte	0x427
 28868 0409 08       		.byte	0x8
 28869 040a 10       		.uleb128 0x10
 28870 040b C4120000 		.4byte	.LASF99
 28871 040f 08       		.byte	0x8
 28872 0410 FD       		.byte	0xfd
 28873 0411 17040000 		.4byte	0x417
 28874 0415 20       		.byte	0x20
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 634


 28875 0416 00       		.byte	0
 28876 0417 09       		.uleb128 0x9
 28877 0418 D3000000 		.4byte	0xd3
 28878 041c 27040000 		.4byte	0x427
 28879 0420 0A       		.uleb128 0xa
 28880 0421 18010000 		.4byte	0x118
 28881 0425 01       		.byte	0x1
 28882 0426 00       		.byte	0
 28883 0427 09       		.uleb128 0x9
 28884 0428 D3000000 		.4byte	0xd3
 28885 042c 37040000 		.4byte	0x437
 28886 0430 0A       		.uleb128 0xa
 28887 0431 18010000 		.4byte	0x118
 28888 0435 05       		.byte	0x5
 28889 0436 00       		.byte	0
 28890 0437 11       		.uleb128 0x11
 28891 0438 F7000000 		.4byte	.LASF100
 28892 043c 86       		.byte	0x86
 28893 043d 08       		.byte	0x8
 28894 043e 0801     		.2byte	0x108
 28895 0440 79040000 		.4byte	0x479
 28896 0444 12       		.uleb128 0x12
 28897 0445 DE060000 		.4byte	.LASF101
 28898 0449 08       		.byte	0x8
 28899 044a 0901     		.2byte	0x109
 28900 044c 79040000 		.4byte	0x479
 28901 0450 00       		.byte	0
 28902 0451 12       		.uleb128 0x12
 28903 0452 140F0000 		.4byte	.LASF102
 28904 0456 08       		.byte	0x8
 28905 0457 0A01     		.2byte	0x10a
 28906 0459 C7000000 		.4byte	0xc7
 28907 045d 80       		.byte	0x80
 28908 045e 13       		.uleb128 0x13
 28909 045f 696E6400 		.ascii	"ind\000"
 28910 0463 08       		.byte	0x8
 28911 0464 0B01     		.2byte	0x10b
 28912 0466 C7000000 		.4byte	0xc7
 28913 046a 82       		.byte	0x82
 28914 046b 12       		.uleb128 0x12
 28915 046c 9F020000 		.4byte	.LASF103
 28916 0470 08       		.byte	0x8
 28917 0471 0C01     		.2byte	0x10c
 28918 0473 97000000 		.4byte	0x97
 28919 0477 84       		.byte	0x84
 28920 0478 00       		.byte	0
 28921 0479 09       		.uleb128 0x9
 28922 047a 97000000 		.4byte	0x97
 28923 047e 89040000 		.4byte	0x489
 28924 0482 0A       		.uleb128 0xa
 28925 0483 18010000 		.4byte	0x118
 28926 0487 7F       		.byte	0x7f
 28927 0488 00       		.byte	0
 28928 0489 11       		.uleb128 0x11
 28929 048a C7030000 		.4byte	.LASF104
 28930 048e 70       		.byte	0x70
 28931 048f 08       		.byte	0x8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 635


 28932 0490 1501     		.2byte	0x115
 28933 0492 26050000 		.4byte	0x526
 28934 0496 12       		.uleb128 0x12
 28935 0497 09000000 		.4byte	.LASF105
 28936 049b 08       		.byte	0x8
 28937 049c 1601     		.2byte	0x116
 28938 049e 26050000 		.4byte	0x526
 28939 04a2 00       		.byte	0
 28940 04a3 12       		.uleb128 0x12
 28941 04a4 6B020000 		.4byte	.LASF106
 28942 04a8 08       		.byte	0x8
 28943 04a9 1701     		.2byte	0x117
 28944 04ab 36050000 		.4byte	0x536
 28945 04af 08       		.byte	0x8
 28946 04b0 12       		.uleb128 0x12
 28947 04b1 B60D0000 		.4byte	.LASF107
 28948 04b5 08       		.byte	0x8
 28949 04b6 1801     		.2byte	0x118
 28950 04b8 46050000 		.4byte	0x546
 28951 04bc 30       		.byte	0x30
 28952 04bd 12       		.uleb128 0x12
 28953 04be CE010000 		.4byte	.LASF108
 28954 04c2 08       		.byte	0x8
 28955 04c3 1901     		.2byte	0x119
 28956 04c5 AF000000 		.4byte	0xaf
 28957 04c9 40       		.byte	0x40
 28958 04ca 12       		.uleb128 0x12
 28959 04cb F6150000 		.4byte	.LASF109
 28960 04cf 08       		.byte	0x8
 28961 04d0 1A01     		.2byte	0x11a
 28962 04d2 AF000000 		.4byte	0xaf
 28963 04d6 44       		.byte	0x44
 28964 04d7 12       		.uleb128 0x12
 28965 04d8 12010000 		.4byte	.LASF110
 28966 04dc 08       		.byte	0x8
 28967 04dd 1B01     		.2byte	0x11b
 28968 04df AF000000 		.4byte	0xaf
 28969 04e3 48       		.byte	0x48
 28970 04e4 12       		.uleb128 0x12
 28971 04e5 D5080000 		.4byte	.LASF111
 28972 04e9 08       		.byte	0x8
 28973 04ea 1C01     		.2byte	0x11c
 28974 04ec AF000000 		.4byte	0xaf
 28975 04f0 4C       		.byte	0x4c
 28976 04f1 12       		.uleb128 0x12
 28977 04f2 42000000 		.4byte	.LASF112
 28978 04f6 08       		.byte	0x8
 28979 04f7 1D01     		.2byte	0x11d
 28980 04f9 AF000000 		.4byte	0xaf
 28981 04fd 50       		.byte	0x50
 28982 04fe 12       		.uleb128 0x12
 28983 04ff 05030000 		.4byte	.LASF113
 28984 0503 08       		.byte	0x8
 28985 0504 1E01     		.2byte	0x11e
 28986 0506 26050000 		.4byte	0x526
 28987 050a 54       		.byte	0x54
 28988 050b 12       		.uleb128 0x12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 636


 28989 050c 120E0000 		.4byte	.LASF114
 28990 0510 08       		.byte	0x8
 28991 0511 1F01     		.2byte	0x11f
 28992 0513 26050000 		.4byte	0x526
 28993 0517 5C       		.byte	0x5c
 28994 0518 12       		.uleb128 0x12
 28995 0519 A4030000 		.4byte	.LASF115
 28996 051d 08       		.byte	0x8
 28997 051e 2001     		.2byte	0x120
 28998 0520 56050000 		.4byte	0x556
 28999 0524 64       		.byte	0x64
 29000 0525 00       		.byte	0
 29001 0526 09       		.uleb128 0x9
 29002 0527 AF000000 		.4byte	0xaf
 29003 052b 36050000 		.4byte	0x536
 29004 052f 0A       		.uleb128 0xa
 29005 0530 18010000 		.4byte	0x118
 29006 0534 01       		.byte	0x1
 29007 0535 00       		.byte	0
 29008 0536 09       		.uleb128 0x9
 29009 0537 AF000000 		.4byte	0xaf
 29010 053b 46050000 		.4byte	0x546
 29011 053f 0A       		.uleb128 0xa
 29012 0540 18010000 		.4byte	0x118
 29013 0544 09       		.byte	0x9
 29014 0545 00       		.byte	0
 29015 0546 09       		.uleb128 0x9
 29016 0547 AF000000 		.4byte	0xaf
 29017 054b 56050000 		.4byte	0x556
 29018 054f 0A       		.uleb128 0xa
 29019 0550 18010000 		.4byte	0x118
 29020 0554 03       		.byte	0x3
 29021 0555 00       		.byte	0
 29022 0556 09       		.uleb128 0x9
 29023 0557 97000000 		.4byte	0x97
 29024 055b 66050000 		.4byte	0x566
 29025 055f 0A       		.uleb128 0xa
 29026 0560 18010000 		.4byte	0x118
 29027 0564 0B       		.byte	0xb
 29028 0565 00       		.byte	0
 29029 0566 11       		.uleb128 0x11
 29030 0567 85060000 		.4byte	.LASF116
 29031 056b 10       		.byte	0x10
 29032 056c 08       		.byte	0x8
 29033 056d 2701     		.2byte	0x127
 29034 056f F5050000 		.4byte	0x5f5
 29035 0573 13       		.uleb128 0x13
 29036 0574 696400   		.ascii	"id\000"
 29037 0577 08       		.byte	0x8
 29038 0578 2801     		.2byte	0x128
 29039 057a 97000000 		.4byte	0x97
 29040 057e 00       		.byte	0
 29041 057f 12       		.uleb128 0x12
 29042 0580 F2120000 		.4byte	.LASF117
 29043 0584 08       		.byte	0x8
 29044 0585 2901     		.2byte	0x129
 29045 0587 F5050000 		.4byte	0x5f5
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 637


 29046 058b 01       		.byte	0x1
 29047 058c 12       		.uleb128 0x12
 29048 058d 6E130000 		.4byte	.LASF118
 29049 0591 08       		.byte	0x8
 29050 0592 2A01     		.2byte	0x12a
 29051 0594 F5050000 		.4byte	0x5f5
 29052 0598 04       		.byte	0x4
 29053 0599 12       		.uleb128 0x12
 29054 059a 3A050000 		.4byte	.LASF119
 29055 059e 08       		.byte	0x8
 29056 059f 2B01     		.2byte	0x12b
 29057 05a1 97000000 		.4byte	0x97
 29058 05a5 07       		.byte	0x7
 29059 05a6 12       		.uleb128 0x12
 29060 05a7 73030000 		.4byte	.LASF120
 29061 05ab 08       		.byte	0x8
 29062 05ac 2C01     		.2byte	0x12c
 29063 05ae 97000000 		.4byte	0x97
 29064 05b2 08       		.byte	0x8
 29065 05b3 12       		.uleb128 0x12
 29066 05b4 EA020000 		.4byte	.LASF121
 29067 05b8 08       		.byte	0x8
 29068 05b9 2D01     		.2byte	0x12d
 29069 05bb 97000000 		.4byte	0x97
 29070 05bf 09       		.byte	0x9
 29071 05c0 12       		.uleb128 0x12
 29072 05c1 B3140000 		.4byte	.LASF122
 29073 05c5 08       		.byte	0x8
 29074 05c6 2E01     		.2byte	0x12e
 29075 05c8 97000000 		.4byte	0x97
 29076 05cc 0A       		.byte	0xa
 29077 05cd 12       		.uleb128 0x12
 29078 05ce 77140000 		.4byte	.LASF123
 29079 05d2 08       		.byte	0x8
 29080 05d3 2F01     		.2byte	0x12f
 29081 05d5 97000000 		.4byte	0x97
 29082 05d9 0B       		.byte	0xb
 29083 05da 12       		.uleb128 0x12
 29084 05db B2100000 		.4byte	.LASF124
 29085 05df 08       		.byte	0x8
 29086 05e0 3001     		.2byte	0x130
 29087 05e2 97000000 		.4byte	0x97
 29088 05e6 0C       		.byte	0xc
 29089 05e7 12       		.uleb128 0x12
 29090 05e8 A4030000 		.4byte	.LASF115
 29091 05ec 08       		.byte	0x8
 29092 05ed 3101     		.2byte	0x131
 29093 05ef F5050000 		.4byte	0x5f5
 29094 05f3 0D       		.byte	0xd
 29095 05f4 00       		.byte	0
 29096 05f5 09       		.uleb128 0x9
 29097 05f6 97000000 		.4byte	0x97
 29098 05fa 05060000 		.4byte	0x605
 29099 05fe 0A       		.uleb128 0xa
 29100 05ff 18010000 		.4byte	0x118
 29101 0603 02       		.byte	0x2
 29102 0604 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 638


 29103 0605 11       		.uleb128 0x11
 29104 0606 8E150000 		.4byte	.LASF125
 29105 060a 70       		.byte	0x70
 29106 060b 08       		.byte	0x8
 29107 060c 3801     		.2byte	0x138
 29108 060e 7F070000 		.4byte	0x77f
 29109 0612 13       		.uleb128 0x13
 29110 0613 6B5F7000 		.ascii	"k_p\000"
 29111 0617 08       		.byte	0x8
 29112 0618 3901     		.2byte	0x139
 29113 061a D3000000 		.4byte	0xd3
 29114 061e 00       		.byte	0
 29115 061f 13       		.uleb128 0x13
 29116 0620 6B5F6900 		.ascii	"k_i\000"
 29117 0624 08       		.byte	0x8
 29118 0625 3A01     		.2byte	0x13a
 29119 0627 D3000000 		.4byte	0xd3
 29120 062b 04       		.byte	0x4
 29121 062c 13       		.uleb128 0x13
 29122 062d 6B5F6400 		.ascii	"k_d\000"
 29123 0631 08       		.byte	0x8
 29124 0632 3B01     		.2byte	0x13b
 29125 0634 D3000000 		.4byte	0xd3
 29126 0638 08       		.byte	0x8
 29127 0639 12       		.uleb128 0x12
 29128 063a 8E0F0000 		.4byte	.LASF126
 29129 063e 08       		.byte	0x8
 29130 063f 3C01     		.2byte	0x13c
 29131 0641 D3000000 		.4byte	0xd3
 29132 0645 0C       		.byte	0xc
 29133 0646 12       		.uleb128 0x12
 29134 0647 33060000 		.4byte	.LASF127
 29135 064b 08       		.byte	0x8
 29136 064c 3D01     		.2byte	0x13d
 29137 064e D3000000 		.4byte	0xd3
 29138 0652 10       		.byte	0x10
 29139 0653 12       		.uleb128 0x12
 29140 0654 13060000 		.4byte	.LASF128
 29141 0658 08       		.byte	0x8
 29142 0659 3E01     		.2byte	0x13e
 29143 065b D3000000 		.4byte	0xd3
 29144 065f 14       		.byte	0x14
 29145 0660 12       		.uleb128 0x12
 29146 0661 1A140000 		.4byte	.LASF129
 29147 0665 08       		.byte	0x8
 29148 0666 3F01     		.2byte	0x13f
 29149 0668 D3000000 		.4byte	0xd3
 29150 066c 18       		.byte	0x18
 29151 066d 12       		.uleb128 0x12
 29152 066e C8060000 		.4byte	.LASF130
 29153 0672 08       		.byte	0x8
 29154 0673 4001     		.2byte	0x140
 29155 0675 D3000000 		.4byte	0xd3
 29156 0679 1C       		.byte	0x1c
 29157 067a 12       		.uleb128 0x12
 29158 067b B4120000 		.4byte	.LASF131
 29159 067f 08       		.byte	0x8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 639


 29160 0680 4101     		.2byte	0x141
 29161 0682 D3000000 		.4byte	0xd3
 29162 0686 20       		.byte	0x20
 29163 0687 12       		.uleb128 0x12
 29164 0688 E5060000 		.4byte	.LASF132
 29165 068c 08       		.byte	0x8
 29166 068d 4201     		.2byte	0x142
 29167 068f D3000000 		.4byte	0xd3
 29168 0693 24       		.byte	0x24
 29169 0694 12       		.uleb128 0x12
 29170 0695 D4070000 		.4byte	.LASF133
 29171 0699 08       		.byte	0x8
 29172 069a 4301     		.2byte	0x143
 29173 069c D3000000 		.4byte	0xd3
 29174 06a0 28       		.byte	0x28
 29175 06a1 12       		.uleb128 0x12
 29176 06a2 BD160000 		.4byte	.LASF134
 29177 06a6 08       		.byte	0x8
 29178 06a7 4401     		.2byte	0x144
 29179 06a9 D3000000 		.4byte	0xd3
 29180 06ad 2C       		.byte	0x2c
 29181 06ae 12       		.uleb128 0x12
 29182 06af F1080000 		.4byte	.LASF135
 29183 06b3 08       		.byte	0x8
 29184 06b4 4501     		.2byte	0x145
 29185 06b6 97000000 		.4byte	0x97
 29186 06ba 30       		.byte	0x30
 29187 06bb 12       		.uleb128 0x12
 29188 06bc 03140000 		.4byte	.LASF136
 29189 06c0 08       		.byte	0x8
 29190 06c1 4601     		.2byte	0x146
 29191 06c3 97000000 		.4byte	0x97
 29192 06c7 31       		.byte	0x31
 29193 06c8 12       		.uleb128 0x12
 29194 06c9 AE0F0000 		.4byte	.LASF137
 29195 06cd 08       		.byte	0x8
 29196 06ce 4701     		.2byte	0x147
 29197 06d0 97000000 		.4byte	0x97
 29198 06d4 32       		.byte	0x32
 29199 06d5 12       		.uleb128 0x12
 29200 06d6 AB150000 		.4byte	.LASF138
 29201 06da 08       		.byte	0x8
 29202 06db 4801     		.2byte	0x148
 29203 06dd 97000000 		.4byte	0x97
 29204 06e1 33       		.byte	0x33
 29205 06e2 12       		.uleb128 0x12
 29206 06e3 82010000 		.4byte	.LASF139
 29207 06e7 08       		.byte	0x8
 29208 06e8 4901     		.2byte	0x149
 29209 06ea D3000000 		.4byte	0xd3
 29210 06ee 34       		.byte	0x34
 29211 06ef 12       		.uleb128 0x12
 29212 06f0 52060000 		.4byte	.LASF140
 29213 06f4 08       		.byte	0x8
 29214 06f5 4A01     		.2byte	0x14a
 29215 06f7 D3000000 		.4byte	0xd3
 29216 06fb 38       		.byte	0x38
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 640


 29217 06fc 12       		.uleb128 0x12
 29218 06fd 370B0000 		.4byte	.LASF141
 29219 0701 08       		.byte	0x8
 29220 0702 4B01     		.2byte	0x14b
 29221 0704 D3000000 		.4byte	0xd3
 29222 0708 3C       		.byte	0x3c
 29223 0709 12       		.uleb128 0x12
 29224 070a C0050000 		.4byte	.LASF142
 29225 070e 08       		.byte	0x8
 29226 070f 4C01     		.2byte	0x14c
 29227 0711 D3000000 		.4byte	0xd3
 29228 0715 40       		.byte	0x40
 29229 0716 12       		.uleb128 0x12
 29230 0717 C2010000 		.4byte	.LASF143
 29231 071b 08       		.byte	0x8
 29232 071c 4D01     		.2byte	0x14d
 29233 071e 7F070000 		.4byte	0x77f
 29234 0722 44       		.byte	0x44
 29235 0723 12       		.uleb128 0x12
 29236 0724 3B160000 		.4byte	.LASF144
 29237 0728 08       		.byte	0x8
 29238 0729 4E01     		.2byte	0x14e
 29239 072b C7000000 		.4byte	0xc7
 29240 072f 5C       		.byte	0x5c
 29241 0730 12       		.uleb128 0x12
 29242 0731 3E090000 		.4byte	.LASF145
 29243 0735 08       		.byte	0x8
 29244 0736 4F01     		.2byte	0x14f
 29245 0738 97000000 		.4byte	0x97
 29246 073c 5E       		.byte	0x5e
 29247 073d 12       		.uleb128 0x12
 29248 073e 6B0C0000 		.4byte	.LASF146
 29249 0742 08       		.byte	0x8
 29250 0743 5001     		.2byte	0x150
 29251 0745 97000000 		.4byte	0x97
 29252 0749 5F       		.byte	0x5f
 29253 074a 12       		.uleb128 0x12
 29254 074b 5E050000 		.4byte	.LASF147
 29255 074f 08       		.byte	0x8
 29256 0750 5101     		.2byte	0x151
 29257 0752 97000000 		.4byte	0x97
 29258 0756 60       		.byte	0x60
 29259 0757 12       		.uleb128 0x12
 29260 0758 02060000 		.4byte	.LASF148
 29261 075c 08       		.byte	0x8
 29262 075d 5201     		.2byte	0x152
 29263 075f 97000000 		.4byte	0x97
 29264 0763 61       		.byte	0x61
 29265 0764 12       		.uleb128 0x12
 29266 0765 1B050000 		.4byte	.LASF149
 29267 0769 08       		.byte	0x8
 29268 076a 5301     		.2byte	0x153
 29269 076c 97000000 		.4byte	0x97
 29270 0770 62       		.byte	0x62
 29271 0771 12       		.uleb128 0x12
 29272 0772 A4030000 		.4byte	.LASF115
 29273 0776 08       		.byte	0x8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 641


 29274 0777 5401     		.2byte	0x154
 29275 0779 8F070000 		.4byte	0x78f
 29276 077d 63       		.byte	0x63
 29277 077e 00       		.byte	0
 29278 077f 09       		.uleb128 0x9
 29279 0780 EB000000 		.4byte	0xeb
 29280 0784 8F070000 		.4byte	0x78f
 29281 0788 0A       		.uleb128 0xa
 29282 0789 18010000 		.4byte	0x118
 29283 078d 05       		.byte	0x5
 29284 078e 00       		.byte	0
 29285 078f 09       		.uleb128 0x9
 29286 0790 97000000 		.4byte	0x97
 29287 0794 9F070000 		.4byte	0x79f
 29288 0798 0A       		.uleb128 0xa
 29289 0799 18010000 		.4byte	0x118
 29290 079d 0C       		.byte	0xc
 29291 079e 00       		.byte	0
 29292 079f 11       		.uleb128 0x11
 29293 07a0 24150000 		.4byte	.LASF150
 29294 07a4 30       		.byte	0x30
 29295 07a5 08       		.byte	0x8
 29296 07a6 5B01     		.2byte	0x15b
 29297 07a8 22080000 		.4byte	0x822
 29298 07ac 12       		.uleb128 0x12
 29299 07ad 190B0000 		.4byte	.LASF151
 29300 07b1 08       		.byte	0x8
 29301 07b2 5C01     		.2byte	0x15c
 29302 07b4 22080000 		.4byte	0x822
 29303 07b8 00       		.byte	0
 29304 07b9 13       		.uleb128 0x13
 29305 07ba 72657300 		.ascii	"res\000"
 29306 07be 08       		.byte	0x8
 29307 07bf 5D01     		.2byte	0x15d
 29308 07c1 F5050000 		.4byte	0x5f5
 29309 07c5 05       		.byte	0x5
 29310 07c6 12       		.uleb128 0x12
 29311 07c7 00090000 		.4byte	.LASF152
 29312 07cb 08       		.byte	0x8
 29313 07cc 5E01     		.2byte	0x15e
 29314 07ce C6030000 		.4byte	0x3c6
 29315 07d2 08       		.byte	0x8
 29316 07d3 12       		.uleb128 0x12
 29317 07d4 2C060000 		.4byte	.LASF153
 29318 07d8 08       		.byte	0x8
 29319 07d9 5F01     		.2byte	0x15f
 29320 07db 32080000 		.4byte	0x832
 29321 07df 14       		.byte	0x14
 29322 07e0 12       		.uleb128 0x12
 29323 07e1 5B0E0000 		.4byte	.LASF154
 29324 07e5 08       		.byte	0x8
 29325 07e6 6001     		.2byte	0x160
 29326 07e8 97000000 		.4byte	0x97
 29327 07ec 20       		.byte	0x20
 29328 07ed 12       		.uleb128 0x12
 29329 07ee A5020000 		.4byte	.LASF155
 29330 07f2 08       		.byte	0x8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 642


 29331 07f3 6101     		.2byte	0x161
 29332 07f5 F5050000 		.4byte	0x5f5
 29333 07f9 21       		.byte	0x21
 29334 07fa 12       		.uleb128 0x12
 29335 07fb A30D0000 		.4byte	.LASF156
 29336 07ff 08       		.byte	0x8
 29337 0800 6201     		.2byte	0x162
 29338 0802 BB000000 		.4byte	0xbb
 29339 0806 24       		.byte	0x24
 29340 0807 12       		.uleb128 0x12
 29341 0808 D9100000 		.4byte	.LASF157
 29342 080c 08       		.byte	0x8
 29343 080d 6301     		.2byte	0x163
 29344 080f D6030000 		.4byte	0x3d6
 29345 0813 25       		.byte	0x25
 29346 0814 12       		.uleb128 0x12
 29347 0815 A4030000 		.4byte	.LASF115
 29348 0819 08       		.byte	0x8
 29349 081a 6401     		.2byte	0x164
 29350 081c 42080000 		.4byte	0x842
 29351 0820 28       		.byte	0x28
 29352 0821 00       		.byte	0
 29353 0822 09       		.uleb128 0x9
 29354 0823 97000000 		.4byte	0x97
 29355 0827 32080000 		.4byte	0x832
 29356 082b 0A       		.uleb128 0xa
 29357 082c 18010000 		.4byte	0x118
 29358 0830 04       		.byte	0x4
 29359 0831 00       		.byte	0
 29360 0832 09       		.uleb128 0x9
 29361 0833 DF000000 		.4byte	0xdf
 29362 0837 42080000 		.4byte	0x842
 29363 083b 0A       		.uleb128 0xa
 29364 083c 18010000 		.4byte	0x118
 29365 0840 02       		.byte	0x2
 29366 0841 00       		.byte	0
 29367 0842 09       		.uleb128 0x9
 29368 0843 97000000 		.4byte	0x97
 29369 0847 52080000 		.4byte	0x852
 29370 084b 0A       		.uleb128 0xa
 29371 084c 18010000 		.4byte	0x118
 29372 0850 07       		.byte	0x7
 29373 0851 00       		.byte	0
 29374 0852 11       		.uleb128 0x11
 29375 0853 64020000 		.4byte	.LASF158
 29376 0857 10       		.byte	0x10
 29377 0858 08       		.byte	0x8
 29378 0859 6B01     		.2byte	0x16b
 29379 085b A1080000 		.4byte	0x8a1
 29380 085f 12       		.uleb128 0x12
 29381 0860 830D0000 		.4byte	.LASF159
 29382 0864 08       		.byte	0x8
 29383 0865 6C01     		.2byte	0x16c
 29384 0867 A1080000 		.4byte	0x8a1
 29385 086b 00       		.byte	0
 29386 086c 12       		.uleb128 0x12
 29387 086d 00160000 		.4byte	.LASF160
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 643


 29388 0871 08       		.byte	0x8
 29389 0872 6D01     		.2byte	0x16d
 29390 0874 26050000 		.4byte	0x526
 29391 0878 04       		.byte	0x4
 29392 0879 12       		.uleb128 0x12
 29393 087a 66060000 		.4byte	.LASF161
 29394 087e 08       		.byte	0x8
 29395 087f 6E01     		.2byte	0x16e
 29396 0881 B1080000 		.4byte	0x8b1
 29397 0885 0C       		.byte	0xc
 29398 0886 12       		.uleb128 0x12
 29399 0887 F3100000 		.4byte	.LASF162
 29400 088b 08       		.byte	0x8
 29401 088c 6F01     		.2byte	0x16f
 29402 088e 97000000 		.4byte	0x97
 29403 0892 0E       		.byte	0xe
 29404 0893 12       		.uleb128 0x12
 29405 0894 F8130000 		.4byte	.LASF163
 29406 0898 08       		.byte	0x8
 29407 0899 7001     		.2byte	0x170
 29408 089b 97000000 		.4byte	0x97
 29409 089f 0F       		.byte	0xf
 29410 08a0 00       		.byte	0
 29411 08a1 09       		.uleb128 0x9
 29412 08a2 A3000000 		.4byte	0xa3
 29413 08a6 B1080000 		.4byte	0x8b1
 29414 08aa 0A       		.uleb128 0xa
 29415 08ab 18010000 		.4byte	0x118
 29416 08af 01       		.byte	0x1
 29417 08b0 00       		.byte	0
 29418 08b1 09       		.uleb128 0x9
 29419 08b2 97000000 		.4byte	0x97
 29420 08b6 C1080000 		.4byte	0x8c1
 29421 08ba 0A       		.uleb128 0xa
 29422 08bb 18010000 		.4byte	0x118
 29423 08bf 01       		.byte	0x1
 29424 08c0 00       		.byte	0
 29425 08c1 11       		.uleb128 0x11
 29426 08c2 B30C0000 		.4byte	.LASF164
 29427 08c6 20       		.byte	0x20
 29428 08c7 08       		.byte	0x8
 29429 08c8 7701     		.2byte	0x177
 29430 08ca 03090000 		.4byte	0x903
 29431 08ce 12       		.uleb128 0x12
 29432 08cf 1F030000 		.4byte	.LASF165
 29433 08d3 08       		.byte	0x8
 29434 08d4 7801     		.2byte	0x178
 29435 08d6 97000000 		.4byte	0x97
 29436 08da 00       		.byte	0
 29437 08db 12       		.uleb128 0x12
 29438 08dc 7D0E0000 		.4byte	.LASF166
 29439 08e0 08       		.byte	0x8
 29440 08e1 7901     		.2byte	0x179
 29441 08e3 97000000 		.4byte	0x97
 29442 08e7 01       		.byte	0x1
 29443 08e8 12       		.uleb128 0x12
 29444 08e9 8F0B0000 		.4byte	.LASF167
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 644


 29445 08ed 08       		.byte	0x8
 29446 08ee 7A01     		.2byte	0x17a
 29447 08f0 03090000 		.4byte	0x903
 29448 08f4 02       		.byte	0x2
 29449 08f5 12       		.uleb128 0x12
 29450 08f6 A4030000 		.4byte	.LASF115
 29451 08fa 08       		.byte	0x8
 29452 08fb 7B01     		.2byte	0x17b
 29453 08fd 22080000 		.4byte	0x822
 29454 0901 1B       		.byte	0x1b
 29455 0902 00       		.byte	0
 29456 0903 09       		.uleb128 0x9
 29457 0904 97000000 		.4byte	0x97
 29458 0908 19090000 		.4byte	0x919
 29459 090c 0A       		.uleb128 0xa
 29460 090d 18010000 		.4byte	0x118
 29461 0911 04       		.byte	0x4
 29462 0912 0A       		.uleb128 0xa
 29463 0913 18010000 		.4byte	0x118
 29464 0917 04       		.byte	0x4
 29465 0918 00       		.byte	0
 29466 0919 11       		.uleb128 0x11
 29467 091a E6100000 		.4byte	.LASF168
 29468 091e 20       		.byte	0x20
 29469 091f 08       		.byte	0x8
 29470 0920 8201     		.2byte	0x182
 29471 0922 75090000 		.4byte	0x975
 29472 0926 12       		.uleb128 0x12
 29473 0927 510E0000 		.4byte	.LASF169
 29474 092b 08       		.byte	0x8
 29475 092c 8301     		.2byte	0x183
 29476 092e 75090000 		.4byte	0x975
 29477 0932 00       		.byte	0
 29478 0933 12       		.uleb128 0x12
 29479 0934 E5130000 		.4byte	.LASF170
 29480 0938 08       		.byte	0x8
 29481 0939 8401     		.2byte	0x184
 29482 093b 97000000 		.4byte	0x97
 29483 093f 06       		.byte	0x6
 29484 0940 12       		.uleb128 0x12
 29485 0941 3A140000 		.4byte	.LASF171
 29486 0945 08       		.byte	0x8
 29487 0946 8501     		.2byte	0x185
 29488 0948 97000000 		.4byte	0x97
 29489 094c 07       		.byte	0x7
 29490 094d 12       		.uleb128 0x12
 29491 094e 95060000 		.4byte	.LASF172
 29492 0952 08       		.byte	0x8
 29493 0953 8601     		.2byte	0x186
 29494 0955 56050000 		.4byte	0x556
 29495 0959 08       		.byte	0x8
 29496 095a 12       		.uleb128 0x12
 29497 095b 2D030000 		.4byte	.LASF173
 29498 095f 08       		.byte	0x8
 29499 0960 8701     		.2byte	0x187
 29500 0962 97000000 		.4byte	0x97
 29501 0966 14       		.byte	0x14
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 645


 29502 0967 12       		.uleb128 0x12
 29503 0968 A4030000 		.4byte	.LASF115
 29504 096c 08       		.byte	0x8
 29505 096d 8801     		.2byte	0x188
 29506 096f 85090000 		.4byte	0x985
 29507 0973 15       		.byte	0x15
 29508 0974 00       		.byte	0
 29509 0975 09       		.uleb128 0x9
 29510 0976 97000000 		.4byte	0x97
 29511 097a 85090000 		.4byte	0x985
 29512 097e 0A       		.uleb128 0xa
 29513 097f 18010000 		.4byte	0x118
 29514 0983 05       		.byte	0x5
 29515 0984 00       		.byte	0
 29516 0985 09       		.uleb128 0x9
 29517 0986 97000000 		.4byte	0x97
 29518 098a 95090000 		.4byte	0x995
 29519 098e 0A       		.uleb128 0xa
 29520 098f 18010000 		.4byte	0x118
 29521 0993 0A       		.byte	0xa
 29522 0994 00       		.byte	0
 29523 0995 11       		.uleb128 0x11
 29524 0996 BB100000 		.4byte	.LASF174
 29525 099a 20       		.byte	0x20
 29526 099b 08       		.byte	0x8
 29527 099c 8F01     		.2byte	0x18f
 29528 099e CA090000 		.4byte	0x9ca
 29529 09a2 12       		.uleb128 0x12
 29530 09a3 9F040000 		.4byte	.LASF175
 29531 09a7 08       		.byte	0x8
 29532 09a8 9001     		.2byte	0x190
 29533 09aa 40010000 		.4byte	0x140
 29534 09ae 00       		.byte	0
 29535 09af 12       		.uleb128 0x12
 29536 09b0 82030000 		.4byte	.LASF176
 29537 09b4 08       		.byte	0x8
 29538 09b5 9101     		.2byte	0x191
 29539 09b7 52080000 		.4byte	0x852
 29540 09bb 08       		.byte	0x8
 29541 09bc 12       		.uleb128 0x12
 29542 09bd A4030000 		.4byte	.LASF115
 29543 09c1 08       		.byte	0x8
 29544 09c2 9201     		.2byte	0x192
 29545 09c4 42080000 		.4byte	0x842
 29546 09c8 18       		.byte	0x18
 29547 09c9 00       		.byte	0
 29548 09ca 11       		.uleb128 0x11
 29549 09cb 870A0000 		.4byte	.LASF177
 29550 09cf 10       		.byte	0x10
 29551 09d0 08       		.byte	0x8
 29552 09d1 9901     		.2byte	0x199
 29553 09d3 190A0000 		.4byte	0xa19
 29554 09d7 12       		.uleb128 0x12
 29555 09d8 30090000 		.4byte	.LASF178
 29556 09dc 08       		.byte	0x8
 29557 09dd 9A01     		.2byte	0x19a
 29558 09df D3000000 		.4byte	0xd3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 646


 29559 09e3 00       		.byte	0
 29560 09e4 12       		.uleb128 0x12
 29561 09e5 A1160000 		.4byte	.LASF179
 29562 09e9 08       		.byte	0x8
 29563 09ea 9B01     		.2byte	0x19b
 29564 09ec D3000000 		.4byte	0xd3
 29565 09f0 04       		.byte	0x4
 29566 09f1 12       		.uleb128 0x12
 29567 09f2 70060000 		.4byte	.LASF180
 29568 09f6 08       		.byte	0x8
 29569 09f7 9C01     		.2byte	0x19c
 29570 09f9 D3000000 		.4byte	0xd3
 29571 09fd 08       		.byte	0x8
 29572 09fe 12       		.uleb128 0x12
 29573 09ff 9A070000 		.4byte	.LASF181
 29574 0a03 08       		.byte	0x8
 29575 0a04 9D01     		.2byte	0x19d
 29576 0a06 97000000 		.4byte	0x97
 29577 0a0a 0C       		.byte	0xc
 29578 0a0b 12       		.uleb128 0x12
 29579 0a0c A4030000 		.4byte	.LASF115
 29580 0a10 08       		.byte	0x8
 29581 0a11 9E01     		.2byte	0x19e
 29582 0a13 F5050000 		.4byte	0x5f5
 29583 0a17 0D       		.byte	0xd
 29584 0a18 00       		.byte	0
 29585 0a19 11       		.uleb128 0x11
 29586 0a1a 7C120000 		.4byte	.LASF182
 29587 0a1e 10       		.byte	0x10
 29588 0a1f 08       		.byte	0x8
 29589 0a20 A501     		.2byte	0x1a5
 29590 0a22 5B0A0000 		.4byte	0xa5b
 29591 0a26 12       		.uleb128 0x12
 29592 0a27 AD070000 		.4byte	.LASF183
 29593 0a2b 08       		.byte	0x8
 29594 0a2c A601     		.2byte	0x1a6
 29595 0a2e A3000000 		.4byte	0xa3
 29596 0a32 00       		.byte	0
 29597 0a33 12       		.uleb128 0x12
 29598 0a34 20110000 		.4byte	.LASF184
 29599 0a38 08       		.byte	0x8
 29600 0a39 A701     		.2byte	0x1a7
 29601 0a3b C7000000 		.4byte	0xc7
 29602 0a3f 02       		.byte	0x2
 29603 0a40 12       		.uleb128 0x12
 29604 0a41 A8080000 		.4byte	.LASF185
 29605 0a45 08       		.byte	0x8
 29606 0a46 A801     		.2byte	0x1a8
 29607 0a48 A1080000 		.4byte	0x8a1
 29608 0a4c 04       		.byte	0x4
 29609 0a4d 12       		.uleb128 0x12
 29610 0a4e A4030000 		.4byte	.LASF115
 29611 0a52 08       		.byte	0x8
 29612 0a53 A901     		.2byte	0x1a9
 29613 0a55 42080000 		.4byte	0x842
 29614 0a59 08       		.byte	0x8
 29615 0a5a 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 647


 29616 0a5b 11       		.uleb128 0x11
 29617 0a5c F0010000 		.4byte	.LASF186
 29618 0a60 10       		.byte	0x10
 29619 0a61 08       		.byte	0x8
 29620 0a62 B001     		.2byte	0x1b0
 29621 0a64 900A0000 		.4byte	0xa90
 29622 0a68 12       		.uleb128 0x12
 29623 0a69 5A100000 		.4byte	.LASF187
 29624 0a6d 08       		.byte	0x8
 29625 0a6e B101     		.2byte	0x1b1
 29626 0a70 97000000 		.4byte	0x97
 29627 0a74 00       		.byte	0
 29628 0a75 12       		.uleb128 0x12
 29629 0a76 590B0000 		.4byte	.LASF188
 29630 0a7a 08       		.byte	0x8
 29631 0a7b B201     		.2byte	0x1b2
 29632 0a7d 97000000 		.4byte	0x97
 29633 0a81 01       		.byte	0x1
 29634 0a82 12       		.uleb128 0x12
 29635 0a83 A4030000 		.4byte	.LASF115
 29636 0a87 08       		.byte	0x8
 29637 0a88 B301     		.2byte	0x1b3
 29638 0a8a 900A0000 		.4byte	0xa90
 29639 0a8e 02       		.byte	0x2
 29640 0a8f 00       		.byte	0
 29641 0a90 09       		.uleb128 0x9
 29642 0a91 97000000 		.4byte	0x97
 29643 0a95 A00A0000 		.4byte	0xaa0
 29644 0a99 0A       		.uleb128 0xa
 29645 0a9a 18010000 		.4byte	0x118
 29646 0a9e 0D       		.byte	0xd
 29647 0a9f 00       		.byte	0
 29648 0aa0 11       		.uleb128 0x11
 29649 0aa1 EB0D0000 		.4byte	.LASF189
 29650 0aa5 10       		.byte	0x10
 29651 0aa6 08       		.byte	0x8
 29652 0aa7 BA01     		.2byte	0x1ba
 29653 0aa9 E20A0000 		.4byte	0xae2
 29654 0aad 12       		.uleb128 0x12
 29655 0aae 3A150000 		.4byte	.LASF190
 29656 0ab2 08       		.byte	0x8
 29657 0ab3 BB01     		.2byte	0x1bb
 29658 0ab5 D3000000 		.4byte	0xd3
 29659 0ab9 00       		.byte	0
 29660 0aba 12       		.uleb128 0x12
 29661 0abb 85070000 		.4byte	.LASF191
 29662 0abf 08       		.byte	0x8
 29663 0ac0 BC01     		.2byte	0x1bc
 29664 0ac2 EB000000 		.4byte	0xeb
 29665 0ac6 04       		.byte	0x4
 29666 0ac7 12       		.uleb128 0x12
 29667 0ac8 E10F0000 		.4byte	.LASF192
 29668 0acc 08       		.byte	0x8
 29669 0acd BD01     		.2byte	0x1bd
 29670 0acf EB000000 		.4byte	0xeb
 29671 0ad3 08       		.byte	0x8
 29672 0ad4 12       		.uleb128 0x12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 648


 29673 0ad5 A4030000 		.4byte	.LASF115
 29674 0ad9 08       		.byte	0x8
 29675 0ada BE01     		.2byte	0x1be
 29676 0adc E20A0000 		.4byte	0xae2
 29677 0ae0 0C       		.byte	0xc
 29678 0ae1 00       		.byte	0
 29679 0ae2 09       		.uleb128 0x9
 29680 0ae3 97000000 		.4byte	0x97
 29681 0ae7 F20A0000 		.4byte	0xaf2
 29682 0aeb 0A       		.uleb128 0xa
 29683 0aec 18010000 		.4byte	0x118
 29684 0af0 03       		.byte	0x3
 29685 0af1 00       		.byte	0
 29686 0af2 11       		.uleb128 0x11
 29687 0af3 94020000 		.4byte	.LASF193
 29688 0af7 12       		.byte	0x12
 29689 0af8 08       		.byte	0x8
 29690 0af9 C501     		.2byte	0x1c5
 29691 0afb 340B0000 		.4byte	0xb34
 29692 0aff 12       		.uleb128 0x12
 29693 0b00 79160000 		.4byte	.LASF194
 29694 0b04 08       		.byte	0x8
 29695 0b05 C601     		.2byte	0x1c6
 29696 0b07 97000000 		.4byte	0x97
 29697 0b0b 00       		.byte	0
 29698 0b0c 12       		.uleb128 0x12
 29699 0b0d C3140000 		.4byte	.LASF195
 29700 0b11 08       		.byte	0x8
 29701 0b12 C701     		.2byte	0x1c7
 29702 0b14 A1080000 		.4byte	0x8a1
 29703 0b18 02       		.byte	0x2
 29704 0b19 12       		.uleb128 0x12
 29705 0b1a 61000000 		.4byte	.LASF196
 29706 0b1e 08       		.byte	0x8
 29707 0b1f C801     		.2byte	0x1c8
 29708 0b21 97000000 		.4byte	0x97
 29709 0b25 06       		.byte	0x6
 29710 0b26 12       		.uleb128 0x12
 29711 0b27 A4030000 		.4byte	.LASF115
 29712 0b2b 08       		.byte	0x8
 29713 0b2c C901     		.2byte	0x1c9
 29714 0b2e 340B0000 		.4byte	0xb34
 29715 0b32 07       		.byte	0x7
 29716 0b33 00       		.byte	0
 29717 0b34 09       		.uleb128 0x9
 29718 0b35 97000000 		.4byte	0x97
 29719 0b39 440B0000 		.4byte	0xb44
 29720 0b3d 0A       		.uleb128 0xa
 29721 0b3e 18010000 		.4byte	0x118
 29722 0b42 09       		.byte	0x9
 29723 0b43 00       		.byte	0
 29724 0b44 14       		.uleb128 0x14
 29725 0b45 55150000 		.4byte	.LASF197
 29726 0b49 F402     		.2byte	0x2f4
 29727 0b4b 08       		.byte	0x8
 29728 0b4c D201     		.2byte	0x1d2
 29729 0b4e 290C0000 		.4byte	0xc29
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 649


 29730 0b52 12       		.uleb128 0x12
 29731 0b53 570C0000 		.4byte	.LASF198
 29732 0b57 08       		.byte	0x8
 29733 0b58 D401     		.2byte	0x1d4
 29734 0b5a 97000000 		.4byte	0x97
 29735 0b5e 00       		.byte	0
 29736 0b5f 12       		.uleb128 0x12
 29737 0b60 A4030000 		.4byte	.LASF115
 29738 0b64 08       		.byte	0x8
 29739 0b65 D501     		.2byte	0x1d5
 29740 0b67 290C0000 		.4byte	0xc29
 29741 0b6b 01       		.byte	0x1
 29742 0b6c 13       		.uleb128 0x13
 29743 0b6d 636E7400 		.ascii	"cnt\000"
 29744 0b71 08       		.byte	0x8
 29745 0b72 D601     		.2byte	0x1d6
 29746 0b74 89040000 		.4byte	0x489
 29747 0b78 10       		.byte	0x10
 29748 0b79 12       		.uleb128 0x12
 29749 0b7a 5B030000 		.4byte	.LASF199
 29750 0b7e 08       		.byte	0x8
 29751 0b7f D701     		.2byte	0x1d7
 29752 0b81 390C0000 		.4byte	0xc39
 29753 0b85 80       		.byte	0x80
 29754 0b86 13       		.uleb128 0x13
 29755 0b87 64657600 		.ascii	"dev\000"
 29756 0b8b 08       		.byte	0x8
 29757 0b8c D801     		.2byte	0x1d8
 29758 0b8e 66050000 		.4byte	0x566
 29759 0b92 A0       		.byte	0xa0
 29760 0b93 12       		.uleb128 0x12
 29761 0b94 CD120000 		.4byte	.LASF200
 29762 0b98 08       		.byte	0x8
 29763 0b99 D901     		.2byte	0x1d9
 29764 0b9b 490C0000 		.4byte	0xc49
 29765 0b9f B0       		.byte	0xb0
 29766 0ba0 15       		.uleb128 0x15
 29767 0ba1 656E6300 		.ascii	"enc\000"
 29768 0ba5 08       		.byte	0x8
 29769 0ba6 DA01     		.2byte	0x1da
 29770 0ba8 590C0000 		.4byte	0xc59
 29771 0bac 9001     		.2byte	0x190
 29772 0bae 15       		.uleb128 0x15
 29773 0baf 656D6700 		.ascii	"emg\000"
 29774 0bb3 08       		.byte	0x8
 29775 0bb4 DB01     		.2byte	0x1db
 29776 0bb6 52080000 		.4byte	0x852
 29777 0bba F001     		.2byte	0x1f0
 29778 0bbc 15       		.uleb128 0x15
 29779 0bbd 696D7500 		.ascii	"imu\000"
 29780 0bc1 08       		.byte	0x8
 29781 0bc2 DC01     		.2byte	0x1dc
 29782 0bc4 C1080000 		.4byte	0x8c1
 29783 0bc8 0002     		.2byte	0x200
 29784 0bca 15       		.uleb128 0x15
 29785 0bcb 65787000 		.ascii	"exp\000"
 29786 0bcf 08       		.byte	0x8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 650


 29787 0bd0 DD01     		.2byte	0x1dd
 29788 0bd2 19090000 		.4byte	0x919
 29789 0bd6 2002     		.2byte	0x220
 29790 0bd8 16       		.uleb128 0x16
 29791 0bd9 A2000000 		.4byte	.LASF201
 29792 0bdd 08       		.byte	0x8
 29793 0bde DE01     		.2byte	0x1de
 29794 0be0 690C0000 		.4byte	0xc69
 29795 0be4 4002     		.2byte	0x240
 29796 0be6 15       		.uleb128 0x15
 29797 0be7 534800   		.ascii	"SH\000"
 29798 0bea 08       		.byte	0x8
 29799 0beb E001     		.2byte	0x1e0
 29800 0bed CA090000 		.4byte	0x9ca
 29801 0bf1 A002     		.2byte	0x2a0
 29802 0bf3 16       		.uleb128 0x16
 29803 0bf4 64010000 		.4byte	.LASF202
 29804 0bf8 08       		.byte	0x8
 29805 0bf9 E101     		.2byte	0x1e1
 29806 0bfb 190A0000 		.4byte	0xa19
 29807 0bff B002     		.2byte	0x2b0
 29808 0c01 15       		.uleb128 0x15
 29809 0c02 4D5300   		.ascii	"MS\000"
 29810 0c05 08       		.byte	0x8
 29811 0c06 E201     		.2byte	0x1e2
 29812 0c08 5B0A0000 		.4byte	0xa5b
 29813 0c0c C002     		.2byte	0x2c0
 29814 0c0e 15       		.uleb128 0x15
 29815 0c0f 464200   		.ascii	"FB\000"
 29816 0c12 08       		.byte	0x8
 29817 0c13 E301     		.2byte	0x1e3
 29818 0c15 A00A0000 		.4byte	0xaa0
 29819 0c19 D002     		.2byte	0x2d0
 29820 0c1b 15       		.uleb128 0x15
 29821 0c1c 575200   		.ascii	"WR\000"
 29822 0c1f 08       		.byte	0x8
 29823 0c20 E401     		.2byte	0x1e4
 29824 0c22 F20A0000 		.4byte	0xaf2
 29825 0c26 E002     		.2byte	0x2e0
 29826 0c28 00       		.byte	0
 29827 0c29 09       		.uleb128 0x9
 29828 0c2a 97000000 		.4byte	0x97
 29829 0c2e 390C0000 		.4byte	0xc39
 29830 0c32 0A       		.uleb128 0xa
 29831 0c33 18010000 		.4byte	0x118
 29832 0c37 0E       		.byte	0xe
 29833 0c38 00       		.byte	0
 29834 0c39 09       		.uleb128 0x9
 29835 0c3a 97000000 		.4byte	0x97
 29836 0c3e 490C0000 		.4byte	0xc49
 29837 0c42 0A       		.uleb128 0xa
 29838 0c43 18010000 		.4byte	0x118
 29839 0c47 1F       		.byte	0x1f
 29840 0c48 00       		.byte	0
 29841 0c49 09       		.uleb128 0x9
 29842 0c4a 05060000 		.4byte	0x605
 29843 0c4e 590C0000 		.4byte	0xc59
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 651


 29844 0c52 0A       		.uleb128 0xa
 29845 0c53 18010000 		.4byte	0x118
 29846 0c57 01       		.byte	0x1
 29847 0c58 00       		.byte	0
 29848 0c59 09       		.uleb128 0x9
 29849 0c5a 9F070000 		.4byte	0x79f
 29850 0c5e 690C0000 		.4byte	0xc69
 29851 0c62 0A       		.uleb128 0xa
 29852 0c63 18010000 		.4byte	0x118
 29853 0c67 01       		.byte	0x1
 29854 0c68 00       		.byte	0
 29855 0c69 09       		.uleb128 0x9
 29856 0c6a 95090000 		.4byte	0x995
 29857 0c6e 790C0000 		.4byte	0xc79
 29858 0c72 0A       		.uleb128 0xa
 29859 0c73 18010000 		.4byte	0x118
 29860 0c77 02       		.byte	0x2
 29861 0c78 00       		.byte	0
 29862 0c79 11       		.uleb128 0x11
 29863 0c7a 290F0000 		.4byte	.LASF203
 29864 0c7e 28       		.byte	0x28
 29865 0c7f 08       		.byte	0x8
 29866 0c80 EF01     		.2byte	0x1ef
 29867 0c82 D50C0000 		.4byte	0xcd5
 29868 0c86 12       		.uleb128 0x12
 29869 0c87 91050000 		.4byte	.LASF204
 29870 0c8b 08       		.byte	0x8
 29871 0c8c F001     		.2byte	0x1f0
 29872 0c8e 97000000 		.4byte	0x97
 29873 0c92 00       		.byte	0
 29874 0c93 12       		.uleb128 0x12
 29875 0c94 B1030000 		.4byte	.LASF205
 29876 0c98 08       		.byte	0x8
 29877 0c99 F101     		.2byte	0x1f1
 29878 0c9b D50C0000 		.4byte	0xcd5
 29879 0c9f 02       		.byte	0x2
 29880 0ca0 12       		.uleb128 0x12
 29881 0ca1 460E0000 		.4byte	.LASF206
 29882 0ca5 08       		.byte	0x8
 29883 0ca6 F201     		.2byte	0x1f2
 29884 0ca8 D50C0000 		.4byte	0xcd5
 29885 0cac 08       		.byte	0x8
 29886 0cad 12       		.uleb128 0x12
 29887 0cae 350F0000 		.4byte	.LASF207
 29888 0cb2 08       		.byte	0x8
 29889 0cb3 F301     		.2byte	0x1f3
 29890 0cb5 D50C0000 		.4byte	0xcd5
 29891 0cb9 0E       		.byte	0xe
 29892 0cba 12       		.uleb128 0x12
 29893 0cbb 17090000 		.4byte	.LASF208
 29894 0cbf 08       		.byte	0x8
 29895 0cc0 F401     		.2byte	0x1f4
 29896 0cc2 E50C0000 		.4byte	0xce5
 29897 0cc6 14       		.byte	0x14
 29898 0cc7 12       		.uleb128 0x12
 29899 0cc8 79020000 		.4byte	.LASF209
 29900 0ccc 08       		.byte	0x8
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 652


 29901 0ccd F501     		.2byte	0x1f5
 29902 0ccf C7000000 		.4byte	0xc7
 29903 0cd3 24       		.byte	0x24
 29904 0cd4 00       		.byte	0
 29905 0cd5 09       		.uleb128 0x9
 29906 0cd6 C7000000 		.4byte	0xc7
 29907 0cda E50C0000 		.4byte	0xce5
 29908 0cde 0A       		.uleb128 0xa
 29909 0cdf 18010000 		.4byte	0x118
 29910 0ce3 02       		.byte	0x2
 29911 0ce4 00       		.byte	0
 29912 0ce5 09       		.uleb128 0x9
 29913 0ce6 EB000000 		.4byte	0xeb
 29914 0cea F50C0000 		.4byte	0xcf5
 29915 0cee 0A       		.uleb128 0xa
 29916 0cef 18010000 		.4byte	0x118
 29917 0cf3 03       		.byte	0x3
 29918 0cf4 00       		.byte	0
 29919 0cf5 11       		.uleb128 0x11
 29920 0cf6 B0040000 		.4byte	.LASF210
 29921 0cfa 06       		.byte	0x6
 29922 0cfb 08       		.byte	0x8
 29923 0cfc 0502     		.2byte	0x205
 29924 0cfe 370D0000 		.4byte	0xd37
 29925 0d02 12       		.uleb128 0x12
 29926 0d03 7F080000 		.4byte	.LASF211
 29927 0d07 08       		.byte	0x8
 29928 0d08 0602     		.2byte	0x206
 29929 0d0a 97000000 		.4byte	0x97
 29930 0d0e 00       		.byte	0
 29931 0d0f 12       		.uleb128 0x12
 29932 0d10 C6160000 		.4byte	.LASF212
 29933 0d14 08       		.byte	0x8
 29934 0d15 0702     		.2byte	0x207
 29935 0d17 97000000 		.4byte	0x97
 29936 0d1b 01       		.byte	0x1
 29937 0d1c 12       		.uleb128 0x12
 29938 0d1d 03070000 		.4byte	.LASF213
 29939 0d21 08       		.byte	0x8
 29940 0d22 0802     		.2byte	0x208
 29941 0d24 C7000000 		.4byte	0xc7
 29942 0d28 02       		.byte	0x2
 29943 0d29 12       		.uleb128 0x12
 29944 0d2a 2B0B0000 		.4byte	.LASF214
 29945 0d2e 08       		.byte	0x8
 29946 0d2f 0902     		.2byte	0x209
 29947 0d31 C7000000 		.4byte	0xc7
 29948 0d35 04       		.byte	0x4
 29949 0d36 00       		.byte	0
 29950 0d37 17       		.uleb128 0x17
 29951 0d38 91100000 		.4byte	.LASF414
 29952 0d3c 02       		.byte	0x2
 29953 0d3d 1403     		.2byte	0x314
 29954 0d3f 8C000000 		.4byte	0x8c
 29955 0d43 03       		.byte	0x3
 29956 0d44 610D0000 		.4byte	0xd61
 29957 0d48 18       		.uleb128 0x18
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 653


 29958 0d49 8B050000 		.4byte	.LASF303
 29959 0d4d 02       		.byte	0x2
 29960 0d4e 1403     		.2byte	0x314
 29961 0d50 8C000000 		.4byte	0x8c
 29962 0d54 19       		.uleb128 0x19
 29963 0d55 8D020000 		.4byte	.LASF415
 29964 0d59 02       		.byte	0x2
 29965 0d5a 1603     		.2byte	0x316
 29966 0d5c 8C000000 		.4byte	0x8c
 29967 0d60 00       		.byte	0
 29968 0d61 1A       		.uleb128 0x1a
 29969 0d62 70120000 		.4byte	.LASF215
 29970 0d66 01       		.byte	0x1
 29971 0d67 3E       		.byte	0x3e
 29972 0d68 00000000 		.4byte	.LFB64
 29973 0d6c 7C050000 		.4byte	.LFE64-.LFB64
 29974 0d70 01       		.uleb128 0x1
 29975 0d71 9C       		.byte	0x9c
 29976 0d72 6A0E0000 		.4byte	0xe6a
 29977 0d76 1B       		.uleb128 0x1b
 29978 0d77 09070000 		.4byte	.LASF217
 29979 0d7b 01       		.byte	0x1
 29980 0d7c 40       		.byte	0x40
 29981 0d7d 97000000 		.4byte	0x97
 29982 0d81 02       		.uleb128 0x2
 29983 0d82 91       		.byte	0x91
 29984 0d83 77       		.sleb128 -9
 29985 0d84 1C       		.uleb128 0x1c
 29986 0d85 370D0000 		.4byte	0xd37
 29987 0d89 48030000 		.4byte	.LBB12
 29988 0d8d 08000000 		.4byte	.LBE12-.LBB12
 29989 0d91 01       		.byte	0x1
 29990 0d92 A0       		.byte	0xa0
 29991 0d93 B20D0000 		.4byte	0xdb2
 29992 0d97 1D       		.uleb128 0x1d
 29993 0d98 480D0000 		.4byte	0xd48
 29994 0d9c 02       		.uleb128 0x2
 29995 0d9d 91       		.byte	0x91
 29996 0d9e 60       		.sleb128 -32
 29997 0d9f 1E       		.uleb128 0x1e
 29998 0da0 48030000 		.4byte	.LBB13
 29999 0da4 08000000 		.4byte	.LBE13-.LBB13
 30000 0da8 1F       		.uleb128 0x1f
 30001 0da9 540D0000 		.4byte	0xd54
 30002 0dad 02       		.uleb128 0x2
 30003 0dae 91       		.byte	0x91
 30004 0daf 5C       		.sleb128 -36
 30005 0db0 00       		.byte	0
 30006 0db1 00       		.byte	0
 30007 0db2 1C       		.uleb128 0x1c
 30008 0db3 370D0000 		.4byte	0xd37
 30009 0db7 66030000 		.4byte	.LBB14
 30010 0dbb 08000000 		.4byte	.LBE14-.LBB14
 30011 0dbf 01       		.byte	0x1
 30012 0dc0 AC       		.byte	0xac
 30013 0dc1 E00D0000 		.4byte	0xde0
 30014 0dc5 1D       		.uleb128 0x1d
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 654


 30015 0dc6 480D0000 		.4byte	0xd48
 30016 0dca 02       		.uleb128 0x2
 30017 0dcb 91       		.byte	0x91
 30018 0dcc 70       		.sleb128 -16
 30019 0dcd 1E       		.uleb128 0x1e
 30020 0dce 66030000 		.4byte	.LBB15
 30021 0dd2 08000000 		.4byte	.LBE15-.LBB15
 30022 0dd6 1F       		.uleb128 0x1f
 30023 0dd7 540D0000 		.4byte	0xd54
 30024 0ddb 02       		.uleb128 0x2
 30025 0ddc 91       		.byte	0x91
 30026 0ddd 58       		.sleb128 -40
 30027 0dde 00       		.byte	0
 30028 0ddf 00       		.byte	0
 30029 0de0 20       		.uleb128 0x20
 30030 0de1 370D0000 		.4byte	0xd37
 30031 0de5 F8040000 		.4byte	.LBB16
 30032 0de9 08000000 		.4byte	.LBE16-.LBB16
 30033 0ded 01       		.byte	0x1
 30034 0dee 0E01     		.2byte	0x10e
 30035 0df0 0F0E0000 		.4byte	0xe0f
 30036 0df4 1D       		.uleb128 0x1d
 30037 0df5 480D0000 		.4byte	0xd48
 30038 0df9 02       		.uleb128 0x2
 30039 0dfa 91       		.byte	0x91
 30040 0dfb 6C       		.sleb128 -20
 30041 0dfc 1E       		.uleb128 0x1e
 30042 0dfd F8040000 		.4byte	.LBB17
 30043 0e01 08000000 		.4byte	.LBE17-.LBB17
 30044 0e05 1F       		.uleb128 0x1f
 30045 0e06 540D0000 		.4byte	0xd54
 30046 0e0a 02       		.uleb128 0x2
 30047 0e0b 91       		.byte	0x91
 30048 0e0c 54       		.sleb128 -44
 30049 0e0d 00       		.byte	0
 30050 0e0e 00       		.byte	0
 30051 0e0f 20       		.uleb128 0x20
 30052 0e10 370D0000 		.4byte	0xd37
 30053 0e14 28050000 		.4byte	.LBB18
 30054 0e18 08000000 		.4byte	.LBE18-.LBB18
 30055 0e1c 01       		.byte	0x1
 30056 0e1d 2C01     		.2byte	0x12c
 30057 0e1f 3E0E0000 		.4byte	0xe3e
 30058 0e23 1D       		.uleb128 0x1d
 30059 0e24 480D0000 		.4byte	0xd48
 30060 0e28 02       		.uleb128 0x2
 30061 0e29 91       		.byte	0x91
 30062 0e2a 68       		.sleb128 -24
 30063 0e2b 1E       		.uleb128 0x1e
 30064 0e2c 28050000 		.4byte	.LBB19
 30065 0e30 08000000 		.4byte	.LBE19-.LBB19
 30066 0e34 1F       		.uleb128 0x1f
 30067 0e35 540D0000 		.4byte	0xd54
 30068 0e39 02       		.uleb128 0x2
 30069 0e3a 91       		.byte	0x91
 30070 0e3b 50       		.sleb128 -48
 30071 0e3c 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 655


 30072 0e3d 00       		.byte	0
 30073 0e3e 21       		.uleb128 0x21
 30074 0e3f 370D0000 		.4byte	0xd37
 30075 0e43 40050000 		.4byte	.LBB20
 30076 0e47 08000000 		.4byte	.LBE20-.LBB20
 30077 0e4b 01       		.byte	0x1
 30078 0e4c 3201     		.2byte	0x132
 30079 0e4e 1D       		.uleb128 0x1d
 30080 0e4f 480D0000 		.4byte	0xd48
 30081 0e53 02       		.uleb128 0x2
 30082 0e54 91       		.byte	0x91
 30083 0e55 64       		.sleb128 -28
 30084 0e56 1E       		.uleb128 0x1e
 30085 0e57 40050000 		.4byte	.LBB21
 30086 0e5b 08000000 		.4byte	.LBE21-.LBB21
 30087 0e5f 1F       		.uleb128 0x1f
 30088 0e60 540D0000 		.4byte	0xd54
 30089 0e64 02       		.uleb128 0x2
 30090 0e65 91       		.byte	0x91
 30091 0e66 4C       		.sleb128 -52
 30092 0e67 00       		.byte	0
 30093 0e68 00       		.byte	0
 30094 0e69 00       		.byte	0
 30095 0e6a 22       		.uleb128 0x22
 30096 0e6b 00000000 		.4byte	.LASF216
 30097 0e6f 01       		.byte	0x1
 30098 0e70 4001     		.2byte	0x140
 30099 0e72 00000000 		.4byte	.LFB65
 30100 0e76 22000000 		.4byte	.LFE65-.LFB65
 30101 0e7a 01       		.uleb128 0x1
 30102 0e7b 9C       		.byte	0x9c
 30103 0e7c 910E0000 		.4byte	0xe91
 30104 0e80 23       		.uleb128 0x23
 30105 0e81 1E060000 		.4byte	.LASF218
 30106 0e85 01       		.byte	0x1
 30107 0e86 4101     		.2byte	0x141
 30108 0e88 910E0000 		.4byte	0xe91
 30109 0e8c 03       		.uleb128 0x3
 30110 0e8d 91       		.byte	0x91
 30111 0e8e 9C74     		.sleb128 -1508
 30112 0e90 00       		.byte	0
 30113 0e91 09       		.uleb128 0x9
 30114 0e92 F9000000 		.4byte	0xf9
 30115 0e96 A20E0000 		.4byte	0xea2
 30116 0e9a 24       		.uleb128 0x24
 30117 0e9b 18010000 		.4byte	0x118
 30118 0e9f DB05     		.2byte	0x5db
 30119 0ea1 00       		.byte	0
 30120 0ea2 22       		.uleb128 0x22
 30121 0ea3 86150000 		.4byte	.LASF219
 30122 0ea7 01       		.byte	0x1
 30123 0ea8 4C01     		.2byte	0x14c
 30124 0eaa 00000000 		.4byte	.LFB66
 30125 0eae 64010000 		.4byte	.LFE66-.LFB66
 30126 0eb2 01       		.uleb128 0x1
 30127 0eb3 9C       		.byte	0x9c
 30128 0eb4 EB0E0000 		.4byte	0xeeb
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 656


 30129 0eb8 25       		.uleb128 0x25
 30130 0eb9 D6140000 		.4byte	.LASF222
 30131 0ebd 01       		.byte	0x1
 30132 0ebe 4C01     		.2byte	0x14c
 30133 0ec0 A3000000 		.4byte	0xa3
 30134 0ec4 04       		.uleb128 0x4
 30135 0ec5 91       		.byte	0x91
 30136 0ec6 B6C47E   		.sleb128 -24010
 30137 0ec9 23       		.uleb128 0x23
 30138 0eca 1E060000 		.4byte	.LASF218
 30139 0ece 01       		.byte	0x1
 30140 0ecf 4D01     		.2byte	0x14d
 30141 0ed1 EB0E0000 		.4byte	0xeeb
 30142 0ed5 03       		.uleb128 0x3
 30143 0ed6 91       		.byte	0x91
 30144 0ed7 D860     		.sleb128 -4008
 30145 0ed9 23       		.uleb128 0x23
 30146 0eda E5080000 		.4byte	.LASF220
 30147 0ede 01       		.byte	0x1
 30148 0edf 4E01     		.2byte	0x14e
 30149 0ee1 FC0E0000 		.4byte	0xefc
 30150 0ee5 04       		.uleb128 0x4
 30151 0ee6 91       		.byte	0x91
 30152 0ee7 B8C47E   		.sleb128 -24008
 30153 0eea 00       		.byte	0
 30154 0eeb 09       		.uleb128 0x9
 30155 0eec F9000000 		.4byte	0xf9
 30156 0ef0 FC0E0000 		.4byte	0xefc
 30157 0ef4 24       		.uleb128 0x24
 30158 0ef5 18010000 		.4byte	0x118
 30159 0ef9 9F0F     		.2byte	0xf9f
 30160 0efb 00       		.byte	0
 30161 0efc 09       		.uleb128 0x9
 30162 0efd F9000000 		.4byte	0xf9
 30163 0f01 0D0F0000 		.4byte	0xf0d
 30164 0f05 24       		.uleb128 0x24
 30165 0f06 18010000 		.4byte	0x118
 30166 0f0a 1F4E     		.2byte	0x4e1f
 30167 0f0c 00       		.byte	0
 30168 0f0d 22       		.uleb128 0x22
 30169 0f0e 33020000 		.4byte	.LASF221
 30170 0f12 01       		.byte	0x1
 30171 0f13 7E01     		.2byte	0x17e
 30172 0f15 00000000 		.4byte	.LFB67
 30173 0f19 A2320000 		.4byte	.LFE67-.LFB67
 30174 0f1d 01       		.uleb128 0x1
 30175 0f1e 9C       		.byte	0x9c
 30176 0f1f B1100000 		.4byte	0x10b1
 30177 0f23 25       		.uleb128 0x25
 30178 0f24 F60D0000 		.4byte	.LASF223
 30179 0f28 01       		.byte	0x1
 30180 0f29 7E01     		.2byte	0x17e
 30181 0f2b B1100000 		.4byte	0x10b1
 30182 0f2f 03       		.uleb128 0x3
 30183 0f30 91       		.byte	0x91
 30184 0f31 DC53     		.sleb128 -5668
 30185 0f33 25       		.uleb128 0x25
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 657


 30186 0f34 5F150000 		.4byte	.LASF224
 30187 0f38 01       		.byte	0x1
 30188 0f39 7E01     		.2byte	0x17e
 30189 0f3b B7100000 		.4byte	0x10b7
 30190 0f3f 03       		.uleb128 0x3
 30191 0f40 91       		.byte	0x91
 30192 0f41 D853     		.sleb128 -5672
 30193 0f43 25       		.uleb128 0x25
 30194 0f44 BD030000 		.4byte	.LASF225
 30195 0f48 01       		.byte	0x1
 30196 0f49 7F01     		.2byte	0x17f
 30197 0f4b B7100000 		.4byte	0x10b7
 30198 0f4f 03       		.uleb128 0x3
 30199 0f50 91       		.byte	0x91
 30200 0f51 D453     		.sleb128 -5676
 30201 0f53 25       		.uleb128 0x25
 30202 0f54 2F0D0000 		.4byte	.LASF226
 30203 0f58 01       		.byte	0x1
 30204 0f59 7F01     		.2byte	0x17f
 30205 0f5b B7100000 		.4byte	0x10b7
 30206 0f5f 03       		.uleb128 0x3
 30207 0f60 91       		.byte	0x91
 30208 0f61 D053     		.sleb128 -5680
 30209 0f63 25       		.uleb128 0x25
 30210 0f64 A0140000 		.4byte	.LASF227
 30211 0f68 01       		.byte	0x1
 30212 0f69 8001     		.2byte	0x180
 30213 0f6b B7100000 		.4byte	0x10b7
 30214 0f6f 02       		.uleb128 0x2
 30215 0f70 91       		.byte	0x91
 30216 0f71 00       		.sleb128 0
 30217 0f72 25       		.uleb128 0x25
 30218 0f73 74080000 		.4byte	.LASF228
 30219 0f77 01       		.byte	0x1
 30220 0f78 8001     		.2byte	0x180
 30221 0f7a BD100000 		.4byte	0x10bd
 30222 0f7e 02       		.uleb128 0x2
 30223 0f7f 91       		.byte	0x91
 30224 0f80 04       		.sleb128 4
 30225 0f81 25       		.uleb128 0x25
 30226 0f82 780B0000 		.4byte	.LASF229
 30227 0f86 01       		.byte	0x1
 30228 0f87 8101     		.2byte	0x181
 30229 0f89 B7100000 		.4byte	0x10b7
 30230 0f8d 02       		.uleb128 0x2
 30231 0f8e 91       		.byte	0x91
 30232 0f8f 08       		.sleb128 8
 30233 0f90 25       		.uleb128 0x25
 30234 0f91 F7080000 		.4byte	.LASF230
 30235 0f95 01       		.byte	0x1
 30236 0f96 8101     		.2byte	0x181
 30237 0f98 BD100000 		.4byte	0x10bd
 30238 0f9c 02       		.uleb128 0x2
 30239 0f9d 91       		.byte	0x91
 30240 0f9e 0C       		.sleb128 12
 30241 0f9f 23       		.uleb128 0x23
 30242 0fa0 79060000 		.4byte	.LASF231
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 658


 30243 0fa4 01       		.byte	0x1
 30244 0fa5 8401     		.2byte	0x184
 30245 0fa7 C3100000 		.4byte	0x10c3
 30246 0fab 03       		.uleb128 0x3
 30247 0fac 91       		.byte	0x91
 30248 0fad A454     		.sleb128 -5596
 30249 0faf 23       		.uleb128 0x23
 30250 0fb0 060C0000 		.4byte	.LASF232
 30251 0fb4 01       		.byte	0x1
 30252 0fb5 8501     		.2byte	0x185
 30253 0fb7 A3000000 		.4byte	0xa3
 30254 0fbb 02       		.uleb128 0x2
 30255 0fbc 91       		.byte	0x91
 30256 0fbd 60       		.sleb128 -32
 30257 0fbe 26       		.uleb128 0x26
 30258 0fbf 6900     		.ascii	"i\000"
 30259 0fc1 01       		.byte	0x1
 30260 0fc2 8801     		.2byte	0x188
 30261 0fc4 97000000 		.4byte	0x97
 30262 0fc8 02       		.uleb128 0x2
 30263 0fc9 91       		.byte	0x91
 30264 0fca 67       		.sleb128 -25
 30265 0fcb 26       		.uleb128 0x26
 30266 0fcc 6A00     		.ascii	"j\000"
 30267 0fce 01       		.byte	0x1
 30268 0fcf 8801     		.2byte	0x188
 30269 0fd1 97000000 		.4byte	0x97
 30270 0fd5 02       		.uleb128 0x2
 30271 0fd6 91       		.byte	0x91
 30272 0fd7 66       		.sleb128 -26
 30273 0fd8 26       		.uleb128 0x26
 30274 0fd9 69647800 		.ascii	"idx\000"
 30275 0fdd 01       		.byte	0x1
 30276 0fde 8901     		.2byte	0x189
 30277 0fe0 97000000 		.4byte	0x97
 30278 0fe4 02       		.uleb128 0x2
 30279 0fe5 91       		.byte	0x91
 30280 0fe6 65       		.sleb128 -27
 30281 0fe7 23       		.uleb128 0x23
 30282 0fe8 BB120000 		.4byte	.LASF233
 30283 0fec 01       		.byte	0x1
 30284 0fed 8A01     		.2byte	0x18a
 30285 0fef 97000000 		.4byte	0x97
 30286 0ff3 02       		.uleb128 0x2
 30287 0ff4 91       		.byte	0x91
 30288 0ff5 64       		.sleb128 -28
 30289 0ff6 26       		.uleb128 0x26
 30290 0ff7 736F6400 		.ascii	"sod\000"
 30291 0ffb 01       		.byte	0x1
 30292 0ffc 8B01     		.2byte	0x18b
 30293 0ffe 97000000 		.4byte	0x97
 30294 1002 02       		.uleb128 0x2
 30295 1003 91       		.byte	0x91
 30296 1004 63       		.sleb128 -29
 30297 1005 23       		.uleb128 0x23
 30298 1006 000D0000 		.4byte	.LASF234
 30299 100a 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 659


 30300 100b 8C01     		.2byte	0x18c
 30301 100d 97000000 		.4byte	0x97
 30302 1011 02       		.uleb128 0x2
 30303 1012 91       		.byte	0x91
 30304 1013 62       		.sleb128 -30
 30305 1014 23       		.uleb128 0x23
 30306 1015 AC160000 		.4byte	.LASF235
 30307 1019 01       		.byte	0x1
 30308 101a 8D01     		.2byte	0x18d
 30309 101c D4100000 		.4byte	0x10d4
 30310 1020 03       		.uleb128 0x3
 30311 1021 91       		.byte	0x91
 30312 1022 F053     		.sleb128 -5648
 30313 1024 23       		.uleb128 0x23
 30314 1025 88140000 		.4byte	.LASF236
 30315 1029 01       		.byte	0x1
 30316 102a 8E01     		.2byte	0x18e
 30317 102c EB000000 		.4byte	0xeb
 30318 1030 03       		.uleb128 0x3
 30319 1031 91       		.byte	0x91
 30320 1032 EC53     		.sleb128 -5652
 30321 1034 23       		.uleb128 0x23
 30322 1035 4C130000 		.4byte	.LASF237
 30323 1039 01       		.byte	0x1
 30324 103a 8F01     		.2byte	0x18f
 30325 103c C7000000 		.4byte	0xc7
 30326 1040 03       		.uleb128 0x3
 30327 1041 91       		.byte	0x91
 30328 1042 EA53     		.sleb128 -5654
 30329 1044 23       		.uleb128 0x23
 30330 1045 780D0000 		.4byte	.LASF238
 30331 1049 01       		.byte	0x1
 30332 104a 9001     		.2byte	0x190
 30333 104c A3000000 		.4byte	0xa3
 30334 1050 03       		.uleb128 0x3
 30335 1051 91       		.byte	0x91
 30336 1052 E853     		.sleb128 -5656
 30337 1054 23       		.uleb128 0x23
 30338 1055 A9140000 		.4byte	.LASF239
 30339 1059 01       		.byte	0x1
 30340 105a 9101     		.2byte	0x191
 30341 105c D3000000 		.4byte	0xd3
 30342 1060 03       		.uleb128 0x3
 30343 1061 91       		.byte	0x91
 30344 1062 E453     		.sleb128 -5660
 30345 1064 23       		.uleb128 0x23
 30346 1065 090F0000 		.4byte	.LASF240
 30347 1069 01       		.byte	0x1
 30348 106a 9201     		.2byte	0x192
 30349 106c AF000000 		.4byte	0xaf
 30350 1070 03       		.uleb128 0x3
 30351 1071 91       		.byte	0x91
 30352 1072 E053     		.sleb128 -5664
 30353 1074 23       		.uleb128 0x23
 30354 1075 A20E0000 		.4byte	.LASF241
 30355 1079 01       		.byte	0x1
 30356 107a 9401     		.2byte	0x194
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 660


 30357 107c 97000000 		.4byte	0x97
 30358 1080 02       		.uleb128 0x2
 30359 1081 91       		.byte	0x91
 30360 1082 5F       		.sleb128 -33
 30361 1083 23       		.uleb128 0x23
 30362 1084 8E010000 		.4byte	.LASF242
 30363 1088 01       		.byte	0x1
 30364 1089 9501     		.2byte	0x195
 30365 108b 97000000 		.4byte	0x97
 30366 108f 02       		.uleb128 0x2
 30367 1090 91       		.byte	0x91
 30368 1091 5E       		.sleb128 -34
 30369 1092 23       		.uleb128 0x23
 30370 1093 C80B0000 		.4byte	.LASF243
 30371 1097 01       		.byte	0x1
 30372 1098 9701     		.2byte	0x197
 30373 109a B7100000 		.4byte	0x10b7
 30374 109e 02       		.uleb128 0x2
 30375 109f 91       		.byte	0x91
 30376 10a0 58       		.sleb128 -40
 30377 10a1 23       		.uleb128 0x23
 30378 10a2 22020000 		.4byte	.LASF244
 30379 10a6 01       		.byte	0x1
 30380 10a7 9801     		.2byte	0x198
 30381 10a9 B7100000 		.4byte	0x10b7
 30382 10ad 02       		.uleb128 0x2
 30383 10ae 91       		.byte	0x91
 30384 10af 54       		.sleb128 -44
 30385 10b0 00       		.byte	0
 30386 10b1 07       		.uleb128 0x7
 30387 10b2 04       		.byte	0x4
 30388 10b3 B7100000 		.4byte	0x10b7
 30389 10b7 07       		.uleb128 0x7
 30390 10b8 04       		.byte	0x4
 30391 10b9 97000000 		.4byte	0x97
 30392 10bd 07       		.uleb128 0x7
 30393 10be 04       		.byte	0x4
 30394 10bf 25010000 		.4byte	0x125
 30395 10c3 09       		.uleb128 0x9
 30396 10c4 97000000 		.4byte	0x97
 30397 10c8 D4100000 		.4byte	0x10d4
 30398 10cc 24       		.uleb128 0x24
 30399 10cd 18010000 		.4byte	0x118
 30400 10d1 AD15     		.2byte	0x15ad
 30401 10d3 00       		.byte	0
 30402 10d4 09       		.uleb128 0x9
 30403 10d5 F9000000 		.4byte	0xf9
 30404 10d9 E4100000 		.4byte	0x10e4
 30405 10dd 0A       		.uleb128 0xa
 30406 10de 18010000 		.4byte	0x118
 30407 10e2 31       		.byte	0x31
 30408 10e3 00       		.byte	0
 30409 10e4 22       		.uleb128 0x22
 30410 10e5 03100000 		.4byte	.LASF245
 30411 10e9 01       		.byte	0x1
 30412 10ea 8603     		.2byte	0x386
 30413 10ec 00000000 		.4byte	.LFB68
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 661


 30414 10f0 3C190000 		.4byte	.LFE68-.LFB68
 30415 10f4 01       		.uleb128 0x1
 30416 10f5 9C       		.byte	0x9c
 30417 10f6 C2120000 		.4byte	0x12c2
 30418 10fa 25       		.uleb128 0x25
 30419 10fb 7F070000 		.4byte	.LASF246
 30420 10ff 01       		.byte	0x1
 30421 1100 8603     		.2byte	0x386
 30422 1102 A3000000 		.4byte	0xa3
 30423 1106 03       		.uleb128 0x3
 30424 1107 91       		.byte	0x91
 30425 1108 EE74     		.sleb128 -1426
 30426 110a 26       		.uleb128 0x26
 30427 110b 6900     		.ascii	"i\000"
 30428 110d 01       		.byte	0x1
 30429 110e 8703     		.2byte	0x387
 30430 1110 97000000 		.4byte	0x97
 30431 1114 02       		.uleb128 0x2
 30432 1115 91       		.byte	0x91
 30433 1116 6F       		.sleb128 -17
 30434 1117 26       		.uleb128 0x26
 30435 1118 6A00     		.ascii	"j\000"
 30436 111a 01       		.byte	0x1
 30437 111b 8703     		.2byte	0x387
 30438 111d 97000000 		.4byte	0x97
 30439 1121 02       		.uleb128 0x2
 30440 1122 91       		.byte	0x91
 30441 1123 6E       		.sleb128 -18
 30442 1124 26       		.uleb128 0x26
 30443 1125 736F6400 		.ascii	"sod\000"
 30444 1129 01       		.byte	0x1
 30445 112a 8803     		.2byte	0x388
 30446 112c 97000000 		.4byte	0x97
 30447 1130 02       		.uleb128 0x2
 30448 1131 91       		.byte	0x91
 30449 1132 6D       		.sleb128 -19
 30450 1133 23       		.uleb128 0x23
 30451 1134 B20B0000 		.4byte	.LASF247
 30452 1138 01       		.byte	0x1
 30453 1139 8903     		.2byte	0x389
 30454 113b 97000000 		.4byte	0x97
 30455 113f 02       		.uleb128 0x2
 30456 1140 91       		.byte	0x91
 30457 1141 62       		.sleb128 -30
 30458 1142 23       		.uleb128 0x23
 30459 1143 4C130000 		.4byte	.LASF237
 30460 1147 01       		.byte	0x1
 30461 1148 8A03     		.2byte	0x38a
 30462 114a C7000000 		.4byte	0xc7
 30463 114e 02       		.uleb128 0x2
 30464 114f 91       		.byte	0x91
 30465 1150 60       		.sleb128 -32
 30466 1151 23       		.uleb128 0x23
 30467 1152 780D0000 		.4byte	.LASF238
 30468 1156 01       		.byte	0x1
 30469 1157 8B03     		.2byte	0x38b
 30470 1159 A3000000 		.4byte	0xa3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 662


 30471 115d 02       		.uleb128 0x2
 30472 115e 91       		.byte	0x91
 30473 115f 5E       		.sleb128 -34
 30474 1160 23       		.uleb128 0x23
 30475 1161 A9140000 		.4byte	.LASF239
 30476 1165 01       		.byte	0x1
 30477 1166 8C03     		.2byte	0x38c
 30478 1168 D3000000 		.4byte	0xd3
 30479 116c 02       		.uleb128 0x2
 30480 116d 91       		.byte	0x91
 30481 116e 58       		.sleb128 -40
 30482 116f 23       		.uleb128 0x23
 30483 1170 090F0000 		.4byte	.LASF240
 30484 1174 01       		.byte	0x1
 30485 1175 8D03     		.2byte	0x38d
 30486 1177 AF000000 		.4byte	0xaf
 30487 117b 02       		.uleb128 0x2
 30488 117c 91       		.byte	0x91
 30489 117d 54       		.sleb128 -44
 30490 117e 23       		.uleb128 0x23
 30491 117f 88140000 		.4byte	.LASF236
 30492 1183 01       		.byte	0x1
 30493 1184 8E03     		.2byte	0x38e
 30494 1186 EB000000 		.4byte	0xeb
 30495 118a 02       		.uleb128 0x2
 30496 118b 91       		.byte	0x91
 30497 118c 50       		.sleb128 -48
 30498 118d 23       		.uleb128 0x23
 30499 118e A20E0000 		.4byte	.LASF241
 30500 1192 01       		.byte	0x1
 30501 1193 9003     		.2byte	0x390
 30502 1195 97000000 		.4byte	0x97
 30503 1199 02       		.uleb128 0x2
 30504 119a 91       		.byte	0x91
 30505 119b 65       		.sleb128 -27
 30506 119c 23       		.uleb128 0x23
 30507 119d 8E010000 		.4byte	.LASF242
 30508 11a1 01       		.byte	0x1
 30509 11a2 9103     		.2byte	0x391
 30510 11a4 97000000 		.4byte	0x97
 30511 11a8 02       		.uleb128 0x2
 30512 11a9 91       		.byte	0x91
 30513 11aa 64       		.sleb128 -28
 30514 11ab 23       		.uleb128 0x23
 30515 11ac D3030000 		.4byte	.LASF248
 30516 11b0 01       		.byte	0x1
 30517 11b1 9403     		.2byte	0x394
 30518 11b3 C2120000 		.4byte	0x12c2
 30519 11b7 02       		.uleb128 0x2
 30520 11b8 91       		.byte	0x91
 30521 11b9 68       		.sleb128 -24
 30522 11ba 23       		.uleb128 0x23
 30523 11bb F60D0000 		.4byte	.LASF223
 30524 11bf 01       		.byte	0x1
 30525 11c0 9C03     		.2byte	0x39c
 30526 11c2 C8120000 		.4byte	0x12c8
 30527 11c6 03       		.uleb128 0x3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 663


 30528 11c7 91       		.byte	0x91
 30529 11c8 847D     		.sleb128 -380
 30530 11ca 23       		.uleb128 0x23
 30531 11cb 5F150000 		.4byte	.LASF224
 30532 11cf 01       		.byte	0x1
 30533 11d0 FA03     		.2byte	0x3fa
 30534 11d2 D8120000 		.4byte	0x12d8
 30535 11d6 03       		.uleb128 0x3
 30536 11d7 91       		.byte	0x91
 30537 11d8 B07C     		.sleb128 -464
 30538 11da 23       		.uleb128 0x23
 30539 11db BD030000 		.4byte	.LASF225
 30540 11df 01       		.byte	0x1
 30541 11e0 1604     		.2byte	0x416
 30542 11e2 D8120000 		.4byte	0x12d8
 30543 11e6 03       		.uleb128 0x3
 30544 11e7 91       		.byte	0x91
 30545 11e8 DC7B     		.sleb128 -548
 30546 11ea 23       		.uleb128 0x23
 30547 11eb 2F0D0000 		.4byte	.LASF226
 30548 11ef 01       		.byte	0x1
 30549 11f0 3204     		.2byte	0x432
 30550 11f2 D8120000 		.4byte	0x12d8
 30551 11f6 03       		.uleb128 0x3
 30552 11f7 91       		.byte	0x91
 30553 11f8 887B     		.sleb128 -632
 30554 11fa 23       		.uleb128 0x23
 30555 11fb 74080000 		.4byte	.LASF228
 30556 11ff 01       		.byte	0x1
 30557 1200 4F04     		.2byte	0x44f
 30558 1202 E8120000 		.4byte	0x12e8
 30559 1206 03       		.uleb128 0x3
 30560 1207 91       		.byte	0x91
 30561 1208 BC78     		.sleb128 -964
 30562 120a 23       		.uleb128 0x23
 30563 120b E7150000 		.4byte	.LASF249
 30564 120f 01       		.byte	0x1
 30565 1210 6C04     		.2byte	0x46c
 30566 1212 F8120000 		.4byte	0x12f8
 30567 1216 03       		.uleb128 0x3
 30568 1217 91       		.byte	0x91
 30569 1218 C477     		.sleb128 -1084
 30570 121a 23       		.uleb128 0x23
 30571 121b 20000000 		.4byte	.LASF250
 30572 121f 01       		.byte	0x1
 30573 1220 6F04     		.2byte	0x46f
 30574 1222 08130000 		.4byte	0x1308
 30575 1226 03       		.uleb128 0x3
 30576 1227 91       		.byte	0x91
 30577 1228 8C77     		.sleb128 -1140
 30578 122a 23       		.uleb128 0x23
 30579 122b F7080000 		.4byte	.LASF230
 30580 122f 01       		.byte	0x1
 30581 1230 7704     		.2byte	0x477
 30582 1232 18130000 		.4byte	0x1318
 30583 1236 03       		.uleb128 0x3
 30584 1237 91       		.byte	0x91
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 664


 30585 1238 DC76     		.sleb128 -1188
 30586 123a 23       		.uleb128 0x23
 30587 123b A0140000 		.4byte	.LASF227
 30588 123f 01       		.byte	0x1
 30589 1240 8604     		.2byte	0x486
 30590 1242 390C0000 		.4byte	0xc39
 30591 1246 03       		.uleb128 0x3
 30592 1247 91       		.byte	0x91
 30593 1248 BC76     		.sleb128 -1220
 30594 124a 23       		.uleb128 0x23
 30595 124b FC0D0000 		.4byte	.LASF251
 30596 124f 01       		.byte	0x1
 30597 1250 8704     		.2byte	0x487
 30598 1252 28130000 		.4byte	0x1328
 30599 1256 03       		.uleb128 0x3
 30600 1257 91       		.byte	0x91
 30601 1258 B076     		.sleb128 -1232
 30602 125a 23       		.uleb128 0x23
 30603 125b 190D0000 		.4byte	.LASF252
 30604 125f 01       		.byte	0x1
 30605 1260 8804     		.2byte	0x488
 30606 1262 38130000 		.4byte	0x1338
 30607 1266 03       		.uleb128 0x3
 30608 1267 91       		.byte	0x91
 30609 1268 9C76     		.sleb128 -1252
 30610 126a 23       		.uleb128 0x23
 30611 126b 1B0F0000 		.4byte	.LASF253
 30612 126f 01       		.byte	0x1
 30613 1270 8904     		.2byte	0x489
 30614 1272 97000000 		.4byte	0x97
 30615 1276 02       		.uleb128 0x2
 30616 1277 91       		.byte	0x91
 30617 1278 63       		.sleb128 -29
 30618 1279 23       		.uleb128 0x23
 30619 127a 780B0000 		.4byte	.LASF229
 30620 127e 01       		.byte	0x1
 30621 127f 9204     		.2byte	0x492
 30622 1281 D8120000 		.4byte	0x12d8
 30623 1285 03       		.uleb128 0x3
 30624 1286 91       		.byte	0x91
 30625 1287 C875     		.sleb128 -1336
 30626 1289 23       		.uleb128 0x23
 30627 128a 0E160000 		.4byte	.LASF254
 30628 128e 01       		.byte	0x1
 30629 128f 9D04     		.2byte	0x49d
 30630 1291 D8120000 		.4byte	0x12d8
 30631 1295 03       		.uleb128 0x3
 30632 1296 91       		.byte	0x91
 30633 1297 F474     		.sleb128 -1420
 30634 1299 1E       		.uleb128 0x1e
 30635 129a A6180000 		.4byte	.LBB22
 30636 129e 86000000 		.4byte	.LBE22-.LBB22
 30637 12a2 26       		.uleb128 0x26
 30638 12a3 69647800 		.ascii	"idx\000"
 30639 12a7 01       		.byte	0x1
 30640 12a8 0605     		.2byte	0x506
 30641 12aa 97000000 		.4byte	0x97
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 665


 30642 12ae 02       		.uleb128 0x2
 30643 12af 91       		.byte	0x91
 30644 12b0 67       		.sleb128 -25
 30645 12b1 23       		.uleb128 0x23
 30646 12b2 DB050000 		.4byte	.LASF255
 30647 12b6 01       		.byte	0x1
 30648 12b7 0605     		.2byte	0x506
 30649 12b9 97000000 		.4byte	0x97
 30650 12bd 02       		.uleb128 0x2
 30651 12be 91       		.byte	0x91
 30652 12bf 66       		.sleb128 -26
 30653 12c0 00       		.byte	0
 30654 12c1 00       		.byte	0
 30655 12c2 07       		.uleb128 0x7
 30656 12c3 04       		.byte	0x4
 30657 12c4 440B0000 		.4byte	0xb44
 30658 12c8 09       		.uleb128 0x9
 30659 12c9 B7100000 		.4byte	0x10b7
 30660 12cd D8120000 		.4byte	0x12d8
 30661 12d1 0A       		.uleb128 0xa
 30662 12d2 18010000 		.4byte	0x118
 30663 12d6 52       		.byte	0x52
 30664 12d7 00       		.byte	0
 30665 12d8 09       		.uleb128 0x9
 30666 12d9 97000000 		.4byte	0x97
 30667 12dd E8120000 		.4byte	0x12e8
 30668 12e1 0A       		.uleb128 0xa
 30669 12e2 18010000 		.4byte	0x118
 30670 12e6 52       		.byte	0x52
 30671 12e7 00       		.byte	0
 30672 12e8 09       		.uleb128 0x9
 30673 12e9 25010000 		.4byte	0x125
 30674 12ed F8120000 		.4byte	0x12f8
 30675 12f1 0A       		.uleb128 0xa
 30676 12f2 18010000 		.4byte	0x118
 30677 12f6 52       		.byte	0x52
 30678 12f7 00       		.byte	0
 30679 12f8 09       		.uleb128 0x9
 30680 12f9 F9000000 		.4byte	0xf9
 30681 12fd 08130000 		.4byte	0x1308
 30682 1301 0A       		.uleb128 0xa
 30683 1302 18010000 		.4byte	0x118
 30684 1306 75       		.byte	0x75
 30685 1307 00       		.byte	0
 30686 1308 09       		.uleb128 0x9
 30687 1309 F9000000 		.4byte	0xf9
 30688 130d 18130000 		.4byte	0x1318
 30689 1311 0A       		.uleb128 0xa
 30690 1312 18010000 		.4byte	0x118
 30691 1316 37       		.byte	0x37
 30692 1317 00       		.byte	0
 30693 1318 09       		.uleb128 0x9
 30694 1319 25010000 		.4byte	0x125
 30695 131d 28130000 		.4byte	0x1328
 30696 1321 0A       		.uleb128 0xa
 30697 1322 18010000 		.4byte	0x118
 30698 1326 0B       		.byte	0xb
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 666


 30699 1327 00       		.byte	0
 30700 1328 09       		.uleb128 0x9
 30701 1329 97000000 		.4byte	0x97
 30702 132d 38130000 		.4byte	0x1338
 30703 1331 0A       		.uleb128 0xa
 30704 1332 18010000 		.4byte	0x118
 30705 1336 08       		.byte	0x8
 30706 1337 00       		.byte	0
 30707 1338 09       		.uleb128 0x9
 30708 1339 97000000 		.4byte	0x97
 30709 133d 48130000 		.4byte	0x1348
 30710 1341 0A       		.uleb128 0xa
 30711 1342 18010000 		.4byte	0x118
 30712 1346 11       		.byte	0x11
 30713 1347 00       		.byte	0
 30714 1348 22       		.uleb128 0x22
 30715 1349 58040000 		.4byte	.LASF256
 30716 134d 01       		.byte	0x1
 30717 134e 1705     		.2byte	0x517
 30718 1350 00000000 		.4byte	.LFB69
 30719 1354 DC140000 		.4byte	.LFE69-.LFB69
 30720 1358 01       		.uleb128 0x1
 30721 1359 9C       		.byte	0x9c
 30722 135a EA130000 		.4byte	0x13ea
 30723 135e 25       		.uleb128 0x25
 30724 135f 7F070000 		.4byte	.LASF246
 30725 1363 01       		.byte	0x1
 30726 1364 1705     		.2byte	0x517
 30727 1366 A3000000 		.4byte	0xa3
 30728 136a 02       		.uleb128 0x2
 30729 136b 91       		.byte	0x91
 30730 136c 56       		.sleb128 -42
 30731 136d 26       		.uleb128 0x26
 30732 136e 6900     		.ascii	"i\000"
 30733 1370 01       		.byte	0x1
 30734 1371 1905     		.2byte	0x519
 30735 1373 97000000 		.4byte	0x97
 30736 1377 02       		.uleb128 0x2
 30737 1378 91       		.byte	0x91
 30738 1379 67       		.sleb128 -25
 30739 137a 26       		.uleb128 0x26
 30740 137b 6A00     		.ascii	"j\000"
 30741 137d 01       		.byte	0x1
 30742 137e 1905     		.2byte	0x519
 30743 1380 97000000 		.4byte	0x97
 30744 1384 02       		.uleb128 0x2
 30745 1385 91       		.byte	0x91
 30746 1386 66       		.sleb128 -26
 30747 1387 23       		.uleb128 0x23
 30748 1388 4A0D0000 		.4byte	.LASF257
 30749 138c 01       		.byte	0x1
 30750 138d 1A05     		.2byte	0x51a
 30751 138f 97000000 		.4byte	0x97
 30752 1393 02       		.uleb128 0x2
 30753 1394 91       		.byte	0x91
 30754 1395 62       		.sleb128 -30
 30755 1396 23       		.uleb128 0x23
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 667


 30756 1397 88140000 		.4byte	.LASF236
 30757 139b 01       		.byte	0x1
 30758 139c 1B05     		.2byte	0x51b
 30759 139e EB000000 		.4byte	0xeb
 30760 13a2 02       		.uleb128 0x2
 30761 13a3 91       		.byte	0x91
 30762 13a4 5C       		.sleb128 -36
 30763 13a5 23       		.uleb128 0x23
 30764 13a6 31040000 		.4byte	.LASF258
 30765 13aa 01       		.byte	0x1
 30766 13ab 1B05     		.2byte	0x51b
 30767 13ad EB000000 		.4byte	0xeb
 30768 13b1 02       		.uleb128 0x2
 30769 13b2 91       		.byte	0x91
 30770 13b3 58       		.sleb128 -40
 30771 13b4 23       		.uleb128 0x23
 30772 13b5 A20E0000 		.4byte	.LASF241
 30773 13b9 01       		.byte	0x1
 30774 13ba 1D05     		.2byte	0x51d
 30775 13bc 97000000 		.4byte	0x97
 30776 13c0 02       		.uleb128 0x2
 30777 13c1 91       		.byte	0x91
 30778 13c2 64       		.sleb128 -28
 30779 13c3 23       		.uleb128 0x23
 30780 13c4 8E010000 		.4byte	.LASF242
 30781 13c8 01       		.byte	0x1
 30782 13c9 1E05     		.2byte	0x51e
 30783 13cb 97000000 		.4byte	0x97
 30784 13cf 02       		.uleb128 0x2
 30785 13d0 91       		.byte	0x91
 30786 13d1 63       		.sleb128 -29
 30787 13d2 1E       		.uleb128 0x1e
 30788 13d3 080B0000 		.4byte	.LBB23
 30789 13d7 26000000 		.4byte	.LBE23-.LBB23
 30790 13db 26       		.uleb128 0x26
 30791 13dc 6900     		.ascii	"i\000"
 30792 13de 01       		.byte	0x1
 30793 13df C505     		.2byte	0x5c5
 30794 13e1 97000000 		.4byte	0x97
 30795 13e5 02       		.uleb128 0x2
 30796 13e6 91       		.byte	0x91
 30797 13e7 65       		.sleb128 -27
 30798 13e8 00       		.byte	0
 30799 13e9 00       		.byte	0
 30800 13ea 22       		.uleb128 0x22
 30801 13eb 82090000 		.4byte	.LASF259
 30802 13ef 01       		.byte	0x1
 30803 13f0 7106     		.2byte	0x671
 30804 13f2 00000000 		.4byte	.LFB70
 30805 13f6 F40D0000 		.4byte	.LFE70-.LFB70
 30806 13fa 01       		.uleb128 0x1
 30807 13fb 9C       		.byte	0x9c
 30808 13fc 79150000 		.4byte	0x1579
 30809 1400 25       		.uleb128 0x25
 30810 1401 7F070000 		.4byte	.LASF246
 30811 1405 01       		.byte	0x1
 30812 1406 7106     		.2byte	0x671
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 668


 30813 1408 A3000000 		.4byte	0xa3
 30814 140c 03       		.uleb128 0x3
 30815 140d 91       		.byte	0x91
 30816 140e CE72     		.sleb128 -1714
 30817 1410 23       		.uleb128 0x23
 30818 1411 79060000 		.4byte	.LASF231
 30819 1415 01       		.byte	0x1
 30820 1416 7406     		.2byte	0x674
 30821 1418 79150000 		.4byte	0x1579
 30822 141c 03       		.uleb128 0x3
 30823 141d 91       		.byte	0x91
 30824 141e DC74     		.sleb128 -1444
 30825 1420 23       		.uleb128 0x23
 30826 1421 39130000 		.4byte	.LASF260
 30827 1425 01       		.byte	0x1
 30828 1426 7B06     		.2byte	0x67b
 30829 1428 A3000000 		.4byte	0xa3
 30830 142c 02       		.uleb128 0x2
 30831 142d 91       		.byte	0x91
 30832 142e 62       		.sleb128 -30
 30833 142f 23       		.uleb128 0x23
 30834 1430 EF050000 		.4byte	.LASF261
 30835 1434 01       		.byte	0x1
 30836 1435 7C06     		.2byte	0x67c
 30837 1437 A3000000 		.4byte	0xa3
 30838 143b 02       		.uleb128 0x2
 30839 143c 91       		.byte	0x91
 30840 143d 6E       		.sleb128 -18
 30841 143e 23       		.uleb128 0x23
 30842 143f A3090000 		.4byte	.LASF262
 30843 1443 01       		.byte	0x1
 30844 1444 7D06     		.2byte	0x67d
 30845 1446 A3000000 		.4byte	0xa3
 30846 144a 02       		.uleb128 0x2
 30847 144b 91       		.byte	0x91
 30848 144c 60       		.sleb128 -32
 30849 144d 23       		.uleb128 0x23
 30850 144e 22090000 		.4byte	.LASF263
 30851 1452 01       		.byte	0x1
 30852 1453 7E06     		.2byte	0x67e
 30853 1455 A3000000 		.4byte	0xa3
 30854 1459 02       		.uleb128 0x2
 30855 145a 91       		.byte	0x91
 30856 145b 5E       		.sleb128 -34
 30857 145c 26       		.uleb128 0x26
 30858 145d 6900     		.ascii	"i\000"
 30859 145f 01       		.byte	0x1
 30860 1460 8606     		.2byte	0x686
 30861 1462 A3000000 		.4byte	0xa3
 30862 1466 02       		.uleb128 0x2
 30863 1467 91       		.byte	0x91
 30864 1468 6C       		.sleb128 -20
 30865 1469 26       		.uleb128 0x26
 30866 146a 6A00     		.ascii	"j\000"
 30867 146c 01       		.byte	0x1
 30868 146d 8606     		.2byte	0x686
 30869 146f A3000000 		.4byte	0xa3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 669


 30870 1473 02       		.uleb128 0x2
 30871 1474 91       		.byte	0x91
 30872 1475 6A       		.sleb128 -22
 30873 1476 26       		.uleb128 0x26
 30874 1477 6B00     		.ascii	"k\000"
 30875 1479 01       		.byte	0x1
 30876 147a 8606     		.2byte	0x686
 30877 147c A3000000 		.4byte	0xa3
 30878 1480 02       		.uleb128 0x2
 30879 1481 91       		.byte	0x91
 30880 1482 68       		.sleb128 -24
 30881 1483 26       		.uleb128 0x26
 30882 1484 6800     		.ascii	"h\000"
 30883 1486 01       		.byte	0x1
 30884 1487 8606     		.2byte	0x686
 30885 1489 A3000000 		.4byte	0xa3
 30886 148d 02       		.uleb128 0x2
 30887 148e 91       		.byte	0x91
 30888 148f 66       		.sleb128 -26
 30889 1490 23       		.uleb128 0x23
 30890 1491 E4050000 		.4byte	.LASF264
 30891 1495 01       		.byte	0x1
 30892 1496 8706     		.2byte	0x687
 30893 1498 A3000000 		.4byte	0xa3
 30894 149c 02       		.uleb128 0x2
 30895 149d 91       		.byte	0x91
 30896 149e 5C       		.sleb128 -36
 30897 149f 23       		.uleb128 0x23
 30898 14a0 B70E0000 		.4byte	.LASF265
 30899 14a4 01       		.byte	0x1
 30900 14a5 8A06     		.2byte	0x68a
 30901 14a7 30010000 		.4byte	0x130
 30902 14ab 03       		.uleb128 0x3
 30903 14ac 91       		.byte	0x91
 30904 14ad C074     		.sleb128 -1472
 30905 14af 23       		.uleb128 0x23
 30906 14b0 00130000 		.4byte	.LASF266
 30907 14b4 01       		.byte	0x1
 30908 14b5 8B06     		.2byte	0x68b
 30909 14b7 8A150000 		.4byte	0x158a
 30910 14bb 03       		.uleb128 0x3
 30911 14bc 91       		.byte	0x91
 30912 14bd B474     		.sleb128 -1484
 30913 14bf 23       		.uleb128 0x23
 30914 14c0 0D080000 		.4byte	.LASF267
 30915 14c4 01       		.byte	0x1
 30916 14c5 8C06     		.2byte	0x68c
 30917 14c7 9A150000 		.4byte	0x159a
 30918 14cb 03       		.uleb128 0x3
 30919 14cc 91       		.byte	0x91
 30920 14cd A074     		.sleb128 -1504
 30921 14cf 23       		.uleb128 0x23
 30922 14d0 19000000 		.4byte	.LASF268
 30923 14d4 01       		.byte	0x1
 30924 14d5 8D06     		.2byte	0x68d
 30925 14d7 AA150000 		.4byte	0x15aa
 30926 14db 03       		.uleb128 0x3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 670


 30927 14dc 91       		.byte	0x91
 30928 14dd 9074     		.sleb128 -1520
 30929 14df 23       		.uleb128 0x23
 30930 14e0 940F0000 		.4byte	.LASF269
 30931 14e4 01       		.byte	0x1
 30932 14e5 8E06     		.2byte	0x68e
 30933 14e7 BA150000 		.4byte	0x15ba
 30934 14eb 03       		.uleb128 0x3
 30935 14ec 91       		.byte	0x91
 30936 14ed E473     		.sleb128 -1564
 30937 14ef 23       		.uleb128 0x23
 30938 14f0 97050000 		.4byte	.LASF270
 30939 14f4 01       		.byte	0x1
 30940 14f5 8F06     		.2byte	0x68f
 30941 14f7 30010000 		.4byte	0x130
 30942 14fb 03       		.uleb128 0x3
 30943 14fc 91       		.byte	0x91
 30944 14fd C873     		.sleb128 -1592
 30945 14ff 23       		.uleb128 0x23
 30946 1500 FF010000 		.4byte	.LASF271
 30947 1504 01       		.byte	0x1
 30948 1505 9206     		.2byte	0x692
 30949 1507 97000000 		.4byte	0x97
 30950 150b 02       		.uleb128 0x2
 30951 150c 91       		.byte	0x91
 30952 150d 5B       		.sleb128 -37
 30953 150e 23       		.uleb128 0x23
 30954 150f 6B050000 		.4byte	.LASF272
 30955 1513 01       		.byte	0x1
 30956 1514 9306     		.2byte	0x693
 30957 1516 97000000 		.4byte	0x97
 30958 151a 02       		.uleb128 0x2
 30959 151b 91       		.byte	0x91
 30960 151c 5A       		.sleb128 -38
 30961 151d 23       		.uleb128 0x23
 30962 151e A8120000 		.4byte	.LASF273
 30963 1522 01       		.byte	0x1
 30964 1523 9406     		.2byte	0x694
 30965 1525 97000000 		.4byte	0x97
 30966 1529 02       		.uleb128 0x2
 30967 152a 91       		.byte	0x91
 30968 152b 59       		.sleb128 -39
 30969 152c 23       		.uleb128 0x23
 30970 152d 27130000 		.4byte	.LASF274
 30971 1531 01       		.byte	0x1
 30972 1532 9506     		.2byte	0x695
 30973 1534 97000000 		.4byte	0x97
 30974 1538 02       		.uleb128 0x2
 30975 1539 91       		.byte	0x91
 30976 153a 58       		.sleb128 -40
 30977 153b 23       		.uleb128 0x23
 30978 153c 79050000 		.4byte	.LASF275
 30979 1540 01       		.byte	0x1
 30980 1541 9606     		.2byte	0x696
 30981 1543 97000000 		.4byte	0x97
 30982 1547 02       		.uleb128 0x2
 30983 1548 91       		.byte	0x91
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 671


 30984 1549 57       		.sleb128 -41
 30985 154a 23       		.uleb128 0x23
 30986 154b 4D010000 		.4byte	.LASF276
 30987 154f 01       		.byte	0x1
 30988 1550 9706     		.2byte	0x697
 30989 1552 97000000 		.4byte	0x97
 30990 1556 02       		.uleb128 0x2
 30991 1557 91       		.byte	0x91
 30992 1558 65       		.sleb128 -27
 30993 1559 23       		.uleb128 0x23
 30994 155a E7150000 		.4byte	.LASF249
 30995 155e 01       		.byte	0x1
 30996 155f 9906     		.2byte	0x699
 30997 1561 F8120000 		.4byte	0x12f8
 30998 1565 03       		.uleb128 0x3
 30999 1566 91       		.byte	0x91
 31000 1567 D072     		.sleb128 -1712
 31001 1569 23       		.uleb128 0x23
 31002 156a 45040000 		.4byte	.LASF277
 31003 156e 01       		.byte	0x1
 31004 156f 9A06     		.2byte	0x69a
 31005 1571 97000000 		.4byte	0x97
 31006 1575 02       		.uleb128 0x2
 31007 1576 91       		.byte	0x91
 31008 1577 56       		.sleb128 -42
 31009 1578 00       		.byte	0
 31010 1579 09       		.uleb128 0x9
 31011 157a 97000000 		.4byte	0x97
 31012 157e 8A150000 		.4byte	0x158a
 31013 1582 24       		.uleb128 0x24
 31014 1583 18010000 		.4byte	0x118
 31015 1587 7805     		.2byte	0x578
 31016 1589 00       		.byte	0
 31017 158a 09       		.uleb128 0x9
 31018 158b F9000000 		.4byte	0xf9
 31019 158f 9A150000 		.4byte	0x159a
 31020 1593 0A       		.uleb128 0xa
 31021 1594 18010000 		.4byte	0x118
 31022 1598 0A       		.byte	0xa
 31023 1599 00       		.byte	0
 31024 159a 09       		.uleb128 0x9
 31025 159b F9000000 		.4byte	0xf9
 31026 159f AA150000 		.4byte	0x15aa
 31027 15a3 0A       		.uleb128 0xa
 31028 15a4 18010000 		.4byte	0x118
 31029 15a8 13       		.byte	0x13
 31030 15a9 00       		.byte	0
 31031 15aa 09       		.uleb128 0x9
 31032 15ab F9000000 		.4byte	0xf9
 31033 15af BA150000 		.4byte	0x15ba
 31034 15b3 0A       		.uleb128 0xa
 31035 15b4 18010000 		.4byte	0x118
 31036 15b8 0F       		.byte	0xf
 31037 15b9 00       		.byte	0
 31038 15ba 09       		.uleb128 0x9
 31039 15bb F9000000 		.4byte	0xf9
 31040 15bf CA150000 		.4byte	0x15ca
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 672


 31041 15c3 0A       		.uleb128 0xa
 31042 15c4 18010000 		.4byte	0x118
 31043 15c8 29       		.byte	0x29
 31044 15c9 00       		.byte	0
 31045 15ca 27       		.uleb128 0x27
 31046 15cb 9B030000 		.4byte	.LASF317
 31047 15cf 01       		.byte	0x1
 31048 15d0 6007     		.2byte	0x760
 31049 15d2 00000000 		.4byte	.LFB71
 31050 15d6 90000000 		.4byte	.LFE71-.LFB71
 31051 15da 01       		.uleb128 0x1
 31052 15db 9C       		.byte	0x9c
 31053 15dc FB150000 		.4byte	0x15fb
 31054 15e0 26       		.uleb128 0x26
 31055 15e1 6900     		.ascii	"i\000"
 31056 15e3 01       		.byte	0x1
 31057 15e4 6207     		.2byte	0x762
 31058 15e6 97000000 		.4byte	0x97
 31059 15ea 02       		.uleb128 0x2
 31060 15eb 91       		.byte	0x91
 31061 15ec 6F       		.sleb128 -17
 31062 15ed 26       		.uleb128 0x26
 31063 15ee 6A00     		.ascii	"j\000"
 31064 15f0 01       		.byte	0x1
 31065 15f1 6207     		.2byte	0x762
 31066 15f3 97000000 		.4byte	0x97
 31067 15f7 02       		.uleb128 0x2
 31068 15f8 91       		.byte	0x91
 31069 15f9 6E       		.sleb128 -18
 31070 15fa 00       		.byte	0
 31071 15fb 22       		.uleb128 0x22
 31072 15fc 6D010000 		.4byte	.LASF278
 31073 1600 01       		.byte	0x1
 31074 1601 7307     		.2byte	0x773
 31075 1603 00000000 		.4byte	.LFB72
 31076 1607 A8220000 		.4byte	.LFE72-.LFB72
 31077 160b 01       		.uleb128 0x1
 31078 160c 9C       		.byte	0x9c
 31079 160d C4160000 		.4byte	0x16c4
 31080 1611 25       		.uleb128 0x25
 31081 1612 C10E0000 		.4byte	.LASF279
 31082 1616 01       		.byte	0x1
 31083 1617 7307     		.2byte	0x773
 31084 1619 1F010000 		.4byte	0x11f
 31085 161d 03       		.uleb128 0x3
 31086 161e 91       		.byte	0x91
 31087 161f CC7E     		.sleb128 -180
 31088 1621 26       		.uleb128 0x26
 31089 1622 6900     		.ascii	"i\000"
 31090 1624 01       		.byte	0x1
 31091 1625 7507     		.2byte	0x775
 31092 1627 73000000 		.4byte	0x73
 31093 162b 02       		.uleb128 0x2
 31094 162c 91       		.byte	0x91
 31095 162d 54       		.sleb128 -44
 31096 162e 23       		.uleb128 0x23
 31097 162f D3030000 		.4byte	.LASF248
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 673


 31098 1633 01       		.byte	0x1
 31099 1634 7707     		.2byte	0x777
 31100 1636 C2120000 		.4byte	0x12c2
 31101 163a 02       		.uleb128 0x2
 31102 163b 91       		.byte	0x91
 31103 163c 44       		.sleb128 -60
 31104 163d 1E       		.uleb128 0x1e
 31105 163e 1C000000 		.4byte	.LBB24
 31106 1642 16220000 		.4byte	.LBE24-.LBB24
 31107 1646 26       		.uleb128 0x26
 31108 1647 73747200 		.ascii	"str\000"
 31109 164b 01       		.byte	0x1
 31110 164c 7A07     		.2byte	0x77a
 31111 164e C4160000 		.4byte	0x16c4
 31112 1652 03       		.uleb128 0x3
 31113 1653 91       		.byte	0x91
 31114 1654 D47E     		.sleb128 -172
 31115 1656 26       		.uleb128 0x26
 31116 1657 6A00     		.ascii	"j\000"
 31117 1659 01       		.byte	0x1
 31118 165a 3609     		.2byte	0x936
 31119 165c 73000000 		.4byte	0x73
 31120 1660 02       		.uleb128 0x2
 31121 1661 91       		.byte	0x91
 31122 1662 4C       		.sleb128 -52
 31123 1663 23       		.uleb128 0x23
 31124 1664 19060000 		.4byte	.LASF280
 31125 1668 01       		.byte	0x1
 31126 1669 5E09     		.2byte	0x95e
 31127 166b 97000000 		.4byte	0x97
 31128 166f 02       		.uleb128 0x2
 31129 1670 91       		.byte	0x91
 31130 1671 4B       		.sleb128 -53
 31131 1672 1E       		.uleb128 0x1e
 31132 1673 D8020000 		.4byte	.LBB25
 31133 1677 02140000 		.4byte	.LBE25-.LBB25
 31134 167b 26       		.uleb128 0x26
 31135 167c 6B00     		.ascii	"k\000"
 31136 167e 01       		.byte	0x1
 31137 167f AE07     		.2byte	0x7ae
 31138 1681 97000000 		.4byte	0x97
 31139 1685 02       		.uleb128 0x2
 31140 1686 91       		.byte	0x91
 31141 1687 53       		.sleb128 -45
 31142 1688 1E       		.uleb128 0x1e
 31143 1689 24030000 		.4byte	.LBB26
 31144 168d 9A130000 		.4byte	.LBE26-.LBB26
 31145 1691 23       		.uleb128 0x23
 31146 1692 A20E0000 		.4byte	.LASF241
 31147 1696 01       		.byte	0x1
 31148 1697 B007     		.2byte	0x7b0
 31149 1699 97000000 		.4byte	0x97
 31150 169d 02       		.uleb128 0x2
 31151 169e 91       		.byte	0x91
 31152 169f 43       		.sleb128 -61
 31153 16a0 26       		.uleb128 0x26
 31154 16a1 4D4F5400 		.ascii	"MOT\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 674


 31155 16a5 01       		.byte	0x1
 31156 16a6 B107     		.2byte	0x7b1
 31157 16a8 D4160000 		.4byte	0x16d4
 31158 16ac 03       		.uleb128 0x3
 31159 16ad 91       		.byte	0x91
 31160 16ae BC7F     		.sleb128 -68
 31161 16b0 23       		.uleb128 0x23
 31162 16b1 4F150000 		.4byte	.LASF281
 31163 16b5 01       		.byte	0x1
 31164 16b6 B207     		.2byte	0x7b2
 31165 16b8 97000000 		.4byte	0x97
 31166 16bc 03       		.uleb128 0x3
 31167 16bd 91       		.byte	0x91
 31168 16be BB7F     		.sleb128 -69
 31169 16c0 00       		.byte	0
 31170 16c1 00       		.byte	0
 31171 16c2 00       		.byte	0
 31172 16c3 00       		.byte	0
 31173 16c4 09       		.uleb128 0x9
 31174 16c5 F9000000 		.4byte	0xf9
 31175 16c9 D4160000 		.4byte	0x16d4
 31176 16cd 0A       		.uleb128 0xa
 31177 16ce 18010000 		.4byte	0x118
 31178 16d2 63       		.byte	0x63
 31179 16d3 00       		.byte	0
 31180 16d4 07       		.uleb128 0x7
 31181 16d5 04       		.byte	0x4
 31182 16d6 05060000 		.4byte	0x605
 31183 16da 22       		.uleb128 0x22
 31184 16db C70F0000 		.4byte	.LASF282
 31185 16df 01       		.byte	0x1
 31186 16e0 7109     		.2byte	0x971
 31187 16e2 00000000 		.4byte	.LFB73
 31188 16e6 90040000 		.4byte	.LFE73-.LFB73
 31189 16ea 01       		.uleb128 0x1
 31190 16eb 9C       		.byte	0x9c
 31191 16ec 6A170000 		.4byte	0x176a
 31192 16f0 25       		.uleb128 0x25
 31193 16f1 C10E0000 		.4byte	.LASF279
 31194 16f5 01       		.byte	0x1
 31195 16f6 7109     		.2byte	0x971
 31196 16f8 1F010000 		.4byte	0x11f
 31197 16fc 03       		.uleb128 0x3
 31198 16fd 91       		.byte	0x91
 31199 16fe BC7C     		.sleb128 -452
 31200 1700 26       		.uleb128 0x26
 31201 1701 73747200 		.ascii	"str\000"
 31202 1705 01       		.byte	0x1
 31203 1706 7309     		.2byte	0x973
 31204 1708 C4160000 		.4byte	0x16c4
 31205 170c 03       		.uleb128 0x3
 31206 170d 91       		.byte	0x91
 31207 170e F07E     		.sleb128 -144
 31208 1710 26       		.uleb128 0x26
 31209 1711 6900     		.ascii	"i\000"
 31210 1713 01       		.byte	0x1
 31211 1714 7409     		.2byte	0x974
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 675


 31212 1716 73000000 		.4byte	0x73
 31213 171a 02       		.uleb128 0x2
 31214 171b 91       		.byte	0x91
 31215 171c 64       		.sleb128 -28
 31216 171d 23       		.uleb128 0x23
 31217 171e 08050000 		.4byte	.LASF283
 31218 1722 01       		.byte	0x1
 31219 1723 7509     		.2byte	0x975
 31220 1725 73000000 		.4byte	0x73
 31221 1729 02       		.uleb128 0x2
 31222 172a 91       		.byte	0x91
 31223 172b 54       		.sleb128 -44
 31224 172c 23       		.uleb128 0x23
 31225 172d D3030000 		.4byte	.LASF248
 31226 1731 01       		.byte	0x1
 31227 1732 7709     		.2byte	0x977
 31228 1734 C2120000 		.4byte	0x12c2
 31229 1738 02       		.uleb128 0x2
 31230 1739 91       		.byte	0x91
 31231 173a 60       		.sleb128 -32
 31232 173b 26       		.uleb128 0x26
 31233 173c 4D4F5400 		.ascii	"MOT\000"
 31234 1740 01       		.byte	0x1
 31235 1741 7809     		.2byte	0x978
 31236 1743 D4160000 		.4byte	0x16d4
 31237 1747 02       		.uleb128 0x2
 31238 1748 91       		.byte	0x91
 31239 1749 5C       		.sleb128 -36
 31240 174a 23       		.uleb128 0x23
 31241 174b 4F150000 		.4byte	.LASF281
 31242 174f 01       		.byte	0x1
 31243 1750 7909     		.2byte	0x979
 31244 1752 97000000 		.4byte	0x97
 31245 1756 02       		.uleb128 0x2
 31246 1757 91       		.byte	0x91
 31247 1758 5B       		.sleb128 -37
 31248 1759 23       		.uleb128 0x23
 31249 175a 5E060000 		.4byte	.LASF284
 31250 175e 01       		.byte	0x1
 31251 175f B109     		.2byte	0x9b1
 31252 1761 6A170000 		.4byte	0x176a
 31253 1765 03       		.uleb128 0x3
 31254 1766 91       		.byte	0x91
 31255 1767 C47C     		.sleb128 -444
 31256 1769 00       		.byte	0
 31257 176a 09       		.uleb128 0x9
 31258 176b F9000000 		.4byte	0xf9
 31259 176f 7B170000 		.4byte	0x177b
 31260 1773 24       		.uleb128 0x24
 31261 1774 18010000 		.4byte	0x118
 31262 1778 2B01     		.2byte	0x12b
 31263 177a 00       		.byte	0
 31264 177b 22       		.uleb128 0x22
 31265 177c 540D0000 		.4byte	.LASF285
 31266 1780 01       		.byte	0x1
 31267 1781 BB09     		.2byte	0x9bb
 31268 1783 00000000 		.4byte	.LFB74
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 676


 31269 1787 5C020000 		.4byte	.LFE74-.LFB74
 31270 178b 01       		.uleb128 0x1
 31271 178c 9C       		.byte	0x9c
 31272 178d C1170000 		.4byte	0x17c1
 31273 1791 25       		.uleb128 0x25
 31274 1792 C10E0000 		.4byte	.LASF279
 31275 1796 01       		.byte	0x1
 31276 1797 BB09     		.2byte	0x9bb
 31277 1799 1F010000 		.4byte	0x11f
 31278 179d 03       		.uleb128 0x3
 31279 179e 91       		.byte	0x91
 31280 179f CC7E     		.sleb128 -180
 31281 17a1 26       		.uleb128 0x26
 31282 17a2 73747200 		.ascii	"str\000"
 31283 17a6 01       		.byte	0x1
 31284 17a7 BD09     		.2byte	0x9bd
 31285 17a9 C1170000 		.4byte	0x17c1
 31286 17ad 03       		.uleb128 0x3
 31287 17ae 91       		.byte	0x91
 31288 17af D47E     		.sleb128 -172
 31289 17b1 23       		.uleb128 0x23
 31290 17b2 D3030000 		.4byte	.LASF248
 31291 17b6 01       		.byte	0x1
 31292 17b7 BF09     		.2byte	0x9bf
 31293 17b9 C2120000 		.4byte	0x12c2
 31294 17bd 02       		.uleb128 0x2
 31295 17be 91       		.byte	0x91
 31296 17bf 6C       		.sleb128 -20
 31297 17c0 00       		.byte	0
 31298 17c1 09       		.uleb128 0x9
 31299 17c2 F9000000 		.4byte	0xf9
 31300 17c6 D1170000 		.4byte	0x17d1
 31301 17ca 0A       		.uleb128 0xa
 31302 17cb 18010000 		.4byte	0x118
 31303 17cf 95       		.byte	0x95
 31304 17d0 00       		.byte	0
 31305 17d1 22       		.uleb128 0x22
 31306 17d2 3A100000 		.4byte	.LASF286
 31307 17d6 01       		.byte	0x1
 31308 17d7 E809     		.2byte	0x9e8
 31309 17d9 00000000 		.4byte	.LFB75
 31310 17dd 80120000 		.4byte	.LFE75-.LFB75
 31311 17e1 01       		.uleb128 0x1
 31312 17e2 9C       		.byte	0x9c
 31313 17e3 72180000 		.4byte	0x1872
 31314 17e7 25       		.uleb128 0x25
 31315 17e8 C10E0000 		.4byte	.LASF279
 31316 17ec 01       		.byte	0x1
 31317 17ed E809     		.2byte	0x9e8
 31318 17ef 1F010000 		.4byte	0x11f
 31319 17f3 03       		.uleb128 0x3
 31320 17f4 91       		.byte	0x91
 31321 17f5 D47E     		.sleb128 -172
 31322 17f7 26       		.uleb128 0x26
 31323 17f8 73747200 		.ascii	"str\000"
 31324 17fc 01       		.byte	0x1
 31325 17fd EA09     		.2byte	0x9ea
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 677


 31326 17ff C4160000 		.4byte	0x16c4
 31327 1803 03       		.uleb128 0x3
 31328 1804 91       		.byte	0x91
 31329 1805 DC7E     		.sleb128 -164
 31330 1807 26       		.uleb128 0x26
 31331 1808 6900     		.ascii	"i\000"
 31332 180a 01       		.byte	0x1
 31333 180b EB09     		.2byte	0x9eb
 31334 180d 73000000 		.4byte	0x73
 31335 1811 02       		.uleb128 0x2
 31336 1812 91       		.byte	0x91
 31337 1813 54       		.sleb128 -44
 31338 1814 23       		.uleb128 0x23
 31339 1815 D3030000 		.4byte	.LASF248
 31340 1819 01       		.byte	0x1
 31341 181a EF09     		.2byte	0x9ef
 31342 181c C2120000 		.4byte	0x12c2
 31343 1820 02       		.uleb128 0x2
 31344 1821 91       		.byte	0x91
 31345 1822 4C       		.sleb128 -52
 31346 1823 1E       		.uleb128 0x1e
 31347 1824 08010000 		.4byte	.LBB27
 31348 1828 D80C0000 		.4byte	.LBE27-.LBB27
 31349 182c 26       		.uleb128 0x26
 31350 182d 6B00     		.ascii	"k\000"
 31351 182f 01       		.byte	0x1
 31352 1830 040A     		.2byte	0xa04
 31353 1832 97000000 		.4byte	0x97
 31354 1836 02       		.uleb128 0x2
 31355 1837 91       		.byte	0x91
 31356 1838 53       		.sleb128 -45
 31357 1839 1E       		.uleb128 0x1e
 31358 183a 12010000 		.4byte	.LBB28
 31359 183e B20C0000 		.4byte	.LBE28-.LBB28
 31360 1842 23       		.uleb128 0x23
 31361 1843 A20E0000 		.4byte	.LASF241
 31362 1847 01       		.byte	0x1
 31363 1848 060A     		.2byte	0xa06
 31364 184a 97000000 		.4byte	0x97
 31365 184e 02       		.uleb128 0x2
 31366 184f 91       		.byte	0x91
 31367 1850 4B       		.sleb128 -53
 31368 1851 26       		.uleb128 0x26
 31369 1852 4D4F5400 		.ascii	"MOT\000"
 31370 1856 01       		.byte	0x1
 31371 1857 070A     		.2byte	0xa07
 31372 1859 D4160000 		.4byte	0x16d4
 31373 185d 02       		.uleb128 0x2
 31374 185e 91       		.byte	0x91
 31375 185f 44       		.sleb128 -60
 31376 1860 23       		.uleb128 0x23
 31377 1861 4F150000 		.4byte	.LASF281
 31378 1865 01       		.byte	0x1
 31379 1866 080A     		.2byte	0xa08
 31380 1868 97000000 		.4byte	0x97
 31381 186c 02       		.uleb128 0x2
 31382 186d 91       		.byte	0x91
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 678


 31383 186e 43       		.sleb128 -61
 31384 186f 00       		.byte	0
 31385 1870 00       		.byte	0
 31386 1871 00       		.byte	0
 31387 1872 22       		.uleb128 0x22
 31388 1873 270C0000 		.4byte	.LASF287
 31389 1877 01       		.byte	0x1
 31390 1878 F00A     		.2byte	0xaf0
 31391 187a 00000000 		.4byte	.LFB76
 31392 187e DC000000 		.4byte	.LFE76-.LFB76
 31393 1882 01       		.uleb128 0x1
 31394 1883 9C       		.byte	0x9c
 31395 1884 B6180000 		.4byte	0x18b6
 31396 1888 25       		.uleb128 0x25
 31397 1889 C10E0000 		.4byte	.LASF279
 31398 188d 01       		.byte	0x1
 31399 188e F00A     		.2byte	0xaf0
 31400 1890 1F010000 		.4byte	0x11f
 31401 1894 03       		.uleb128 0x3
 31402 1895 91       		.byte	0x91
 31403 1896 DC7E     		.sleb128 -164
 31404 1898 26       		.uleb128 0x26
 31405 1899 73747200 		.ascii	"str\000"
 31406 189d 01       		.byte	0x1
 31407 189e F20A     		.2byte	0xaf2
 31408 18a0 B6180000 		.4byte	0x18b6
 31409 18a4 03       		.uleb128 0x3
 31410 18a5 91       		.byte	0x91
 31411 18a6 E07E     		.sleb128 -160
 31412 18a8 26       		.uleb128 0x26
 31413 18a9 6900     		.ascii	"i\000"
 31414 18ab 01       		.byte	0x1
 31415 18ac F30A     		.2byte	0xaf3
 31416 18ae 73000000 		.4byte	0x73
 31417 18b2 02       		.uleb128 0x2
 31418 18b3 91       		.byte	0x91
 31419 18b4 6C       		.sleb128 -20
 31420 18b5 00       		.byte	0
 31421 18b6 09       		.uleb128 0x9
 31422 18b7 F9000000 		.4byte	0xf9
 31423 18bb C6180000 		.4byte	0x18c6
 31424 18bf 0A       		.uleb128 0xa
 31425 18c0 18010000 		.4byte	0x118
 31426 18c4 8B       		.byte	0x8b
 31427 18c5 00       		.byte	0
 31428 18c6 22       		.uleb128 0x22
 31429 18c7 CD0E0000 		.4byte	.LASF288
 31430 18cb 01       		.byte	0x1
 31431 18cc 080B     		.2byte	0xb08
 31432 18ce 00000000 		.4byte	.LFB77
 31433 18d2 80010000 		.4byte	.LFE77-.LFB77
 31434 18d6 01       		.uleb128 0x1
 31435 18d7 9C       		.byte	0x9c
 31436 18d8 0A190000 		.4byte	0x190a
 31437 18dc 25       		.uleb128 0x25
 31438 18dd C10E0000 		.4byte	.LASF279
 31439 18e1 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 679


 31440 18e2 080B     		.2byte	0xb08
 31441 18e4 1F010000 		.4byte	0x11f
 31442 18e8 03       		.uleb128 0x3
 31443 18e9 91       		.byte	0x91
 31444 18ea E47E     		.sleb128 -156
 31445 18ec 26       		.uleb128 0x26
 31446 18ed 73747200 		.ascii	"str\000"
 31447 18f1 01       		.byte	0x1
 31448 18f2 0A0B     		.2byte	0xb0a
 31449 18f4 0A190000 		.4byte	0x190a
 31450 18f8 03       		.uleb128 0x3
 31451 18f9 91       		.byte	0x91
 31452 18fa EC7E     		.sleb128 -148
 31453 18fc 26       		.uleb128 0x26
 31454 18fd 6900     		.ascii	"i\000"
 31455 18ff 01       		.byte	0x1
 31456 1900 0B0B     		.2byte	0xb0b
 31457 1902 73000000 		.4byte	0x73
 31458 1906 02       		.uleb128 0x2
 31459 1907 91       		.byte	0x91
 31460 1908 64       		.sleb128 -28
 31461 1909 00       		.byte	0
 31462 190a 09       		.uleb128 0x9
 31463 190b F9000000 		.4byte	0xf9
 31464 190f 1A190000 		.4byte	0x191a
 31465 1913 0A       		.uleb128 0xa
 31466 1914 18010000 		.4byte	0x118
 31467 1918 77       		.byte	0x77
 31468 1919 00       		.byte	0
 31469 191a 28       		.uleb128 0x28
 31470 191b 6C100000 		.4byte	.LASF289
 31471 191f 01       		.byte	0x1
 31472 1920 340B     		.2byte	0xb34
 31473 1922 00000000 		.4byte	.LFB78
 31474 1926 28000000 		.4byte	.LFE78-.LFB78
 31475 192a 01       		.uleb128 0x1
 31476 192b 9C       		.byte	0x9c
 31477 192c 40190000 		.4byte	0x1940
 31478 1930 25       		.uleb128 0x25
 31479 1931 C10E0000 		.4byte	.LASF279
 31480 1935 01       		.byte	0x1
 31481 1936 340B     		.2byte	0xb34
 31482 1938 1F010000 		.4byte	0x11f
 31483 193c 02       		.uleb128 0x2
 31484 193d 91       		.byte	0x91
 31485 193e 6C       		.sleb128 -20
 31486 193f 00       		.byte	0
 31487 1940 22       		.uleb128 0x22
 31488 1941 02040000 		.4byte	.LASF290
 31489 1945 01       		.byte	0x1
 31490 1946 3F0B     		.2byte	0xb3f
 31491 1948 00000000 		.4byte	.LFB79
 31492 194c F0000000 		.4byte	.LFE79-.LFB79
 31493 1950 01       		.uleb128 0x1
 31494 1951 9C       		.byte	0x9c
 31495 1952 AF190000 		.4byte	0x19af
 31496 1956 25       		.uleb128 0x25
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 680


 31497 1957 C10E0000 		.4byte	.LASF279
 31498 195b 01       		.byte	0x1
 31499 195c 3F0B     		.2byte	0xb3f
 31500 195e 1F010000 		.4byte	0x11f
 31501 1962 03       		.uleb128 0x3
 31502 1963 91       		.byte	0x91
 31503 1964 FC7E     		.sleb128 -132
 31504 1966 23       		.uleb128 0x23
 31505 1967 84020000 		.4byte	.LASF291
 31506 196b 01       		.byte	0x1
 31507 196c 410B     		.2byte	0xb41
 31508 196e C4160000 		.4byte	0x16c4
 31509 1972 03       		.uleb128 0x3
 31510 1973 91       		.byte	0x91
 31511 1974 847F     		.sleb128 -124
 31512 1976 23       		.uleb128 0x23
 31513 1977 28020000 		.4byte	.LASF292
 31514 197b 01       		.byte	0x1
 31515 197c 420B     		.2byte	0xb42
 31516 197e A3000000 		.4byte	0xa3
 31517 1982 02       		.uleb128 0x2
 31518 1983 91       		.byte	0x91
 31519 1984 6E       		.sleb128 -18
 31520 1985 23       		.uleb128 0x23
 31521 1986 FF000000 		.4byte	.LASF293
 31522 198a 01       		.byte	0x1
 31523 198b 430B     		.2byte	0xb43
 31524 198d EB000000 		.4byte	0xeb
 31525 1991 05       		.uleb128 0x5
 31526 1992 03       		.byte	0x3
 31527 1993 00000000 		.4byte	h_time.11232
 31528 1997 1E       		.uleb128 0x1e
 31529 1998 26000000 		.4byte	.LBB29
 31530 199c A4000000 		.4byte	.LBE29-.LBB29
 31531 19a0 26       		.uleb128 0x26
 31532 19a1 6900     		.ascii	"i\000"
 31533 19a3 01       		.byte	0x1
 31534 19a4 480B     		.2byte	0xb48
 31535 19a6 73000000 		.4byte	0x73
 31536 19aa 02       		.uleb128 0x2
 31537 19ab 91       		.byte	0x91
 31538 19ac 68       		.sleb128 -24
 31539 19ad 00       		.byte	0
 31540 19ae 00       		.byte	0
 31541 19af 22       		.uleb128 0x22
 31542 19b0 89160000 		.4byte	.LASF294
 31543 19b4 01       		.byte	0x1
 31544 19b5 600B     		.2byte	0xb60
 31545 19b7 00000000 		.4byte	.LFB80
 31546 19bb 74030000 		.4byte	.LFE80-.LFB80
 31547 19bf 01       		.uleb128 0x1
 31548 19c0 9C       		.byte	0x9c
 31549 19c1 F3190000 		.4byte	0x19f3
 31550 19c5 25       		.uleb128 0x25
 31551 19c6 C10E0000 		.4byte	.LASF279
 31552 19ca 01       		.byte	0x1
 31553 19cb 600B     		.2byte	0xb60
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 681


 31554 19cd 1F010000 		.4byte	0x11f
 31555 19d1 03       		.uleb128 0x3
 31556 19d2 91       		.byte	0x91
 31557 19d3 AC7D     		.sleb128 -340
 31558 19d5 26       		.uleb128 0x26
 31559 19d6 73747200 		.ascii	"str\000"
 31560 19da 01       		.byte	0x1
 31561 19db 620B     		.2byte	0xb62
 31562 19dd 6A170000 		.4byte	0x176a
 31563 19e1 03       		.uleb128 0x3
 31564 19e2 91       		.byte	0x91
 31565 19e3 B07D     		.sleb128 -336
 31566 19e5 26       		.uleb128 0x26
 31567 19e6 6900     		.ascii	"i\000"
 31568 19e8 01       		.byte	0x1
 31569 19e9 630B     		.2byte	0xb63
 31570 19eb 73000000 		.4byte	0x73
 31571 19ef 02       		.uleb128 0x2
 31572 19f0 91       		.byte	0x91
 31573 19f1 5C       		.sleb128 -36
 31574 19f2 00       		.byte	0
 31575 19f3 22       		.uleb128 0x22
 31576 19f4 F20F0000 		.4byte	.LASF295
 31577 19f8 01       		.byte	0x1
 31578 19f9 8B0B     		.2byte	0xb8b
 31579 19fb 00000000 		.4byte	.LFB81
 31580 19ff 84000000 		.4byte	.LFE81-.LFB81
 31581 1a03 01       		.uleb128 0x1
 31582 1a04 9C       		.byte	0x9c
 31583 1a05 461A0000 		.4byte	0x1a46
 31584 1a09 25       		.uleb128 0x25
 31585 1a0a 79060000 		.4byte	.LASF231
 31586 1a0e 01       		.byte	0x1
 31587 1a0f 8B0B     		.2byte	0xb8b
 31588 1a11 B7100000 		.4byte	0x10b7
 31589 1a15 02       		.uleb128 0x2
 31590 1a16 91       		.byte	0x91
 31591 1a17 6C       		.sleb128 -20
 31592 1a18 25       		.uleb128 0x25
 31593 1a19 060C0000 		.4byte	.LASF232
 31594 1a1d 01       		.byte	0x1
 31595 1a1e 8B0B     		.2byte	0xb8b
 31596 1a20 A3000000 		.4byte	0xa3
 31597 1a24 02       		.uleb128 0x2
 31598 1a25 91       		.byte	0x91
 31599 1a26 6A       		.sleb128 -22
 31600 1a27 25       		.uleb128 0x25
 31601 1a28 8A100000 		.4byte	.LASF296
 31602 1a2c 01       		.byte	0x1
 31603 1a2d 8B0B     		.2byte	0xb8b
 31604 1a2f 97000000 		.4byte	0x97
 31605 1a33 02       		.uleb128 0x2
 31606 1a34 91       		.byte	0x91
 31607 1a35 69       		.sleb128 -23
 31608 1a36 23       		.uleb128 0x23
 31609 1a37 7F070000 		.4byte	.LASF246
 31610 1a3b 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 682


 31611 1a3c 8D0B     		.2byte	0xb8d
 31612 1a3e A3000000 		.4byte	0xa3
 31613 1a42 02       		.uleb128 0x2
 31614 1a43 91       		.byte	0x91
 31615 1a44 76       		.sleb128 -10
 31616 1a45 00       		.byte	0
 31617 1a46 22       		.uleb128 0x22
 31618 1a47 9E060000 		.4byte	.LASF297
 31619 1a4b 01       		.byte	0x1
 31620 1a4c A70B     		.2byte	0xba7
 31621 1a4e 00000000 		.4byte	.LFB82
 31622 1a52 88000000 		.4byte	.LFE82-.LFB82
 31623 1a56 01       		.uleb128 0x1
 31624 1a57 9C       		.byte	0x9c
 31625 1a58 8A1A0000 		.4byte	0x1a8a
 31626 1a5c 25       		.uleb128 0x25
 31627 1a5d 79060000 		.4byte	.LASF231
 31628 1a61 01       		.byte	0x1
 31629 1a62 A70B     		.2byte	0xba7
 31630 1a64 B7100000 		.4byte	0x10b7
 31631 1a68 02       		.uleb128 0x2
 31632 1a69 91       		.byte	0x91
 31633 1a6a 6C       		.sleb128 -20
 31634 1a6b 25       		.uleb128 0x25
 31635 1a6c 060C0000 		.4byte	.LASF232
 31636 1a70 01       		.byte	0x1
 31637 1a71 A70B     		.2byte	0xba7
 31638 1a73 A3000000 		.4byte	0xa3
 31639 1a77 02       		.uleb128 0x2
 31640 1a78 91       		.byte	0x91
 31641 1a79 6A       		.sleb128 -22
 31642 1a7a 23       		.uleb128 0x23
 31643 1a7b 7F070000 		.4byte	.LASF246
 31644 1a7f 01       		.byte	0x1
 31645 1a80 A90B     		.2byte	0xba9
 31646 1a82 A3000000 		.4byte	0xa3
 31647 1a86 02       		.uleb128 0x2
 31648 1a87 91       		.byte	0x91
 31649 1a88 76       		.sleb128 -10
 31650 1a89 00       		.byte	0
 31651 1a8a 22       		.uleb128 0x22
 31652 1a8b 920C0000 		.4byte	.LASF298
 31653 1a8f 01       		.byte	0x1
 31654 1a90 C30B     		.2byte	0xbc3
 31655 1a92 00000000 		.4byte	.LFB83
 31656 1a96 A0000000 		.4byte	.LFE83-.LFB83
 31657 1a9a 01       		.uleb128 0x1
 31658 1a9b 9C       		.byte	0x9c
 31659 1a9c DD1A0000 		.4byte	0x1add
 31660 1aa0 25       		.uleb128 0x25
 31661 1aa1 79060000 		.4byte	.LASF231
 31662 1aa5 01       		.byte	0x1
 31663 1aa6 C30B     		.2byte	0xbc3
 31664 1aa8 B7100000 		.4byte	0x10b7
 31665 1aac 02       		.uleb128 0x2
 31666 1aad 91       		.byte	0x91
 31667 1aae 74       		.sleb128 -12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 683


 31668 1aaf 25       		.uleb128 0x25
 31669 1ab0 060C0000 		.4byte	.LASF232
 31670 1ab4 01       		.byte	0x1
 31671 1ab5 C30B     		.2byte	0xbc3
 31672 1ab7 A3000000 		.4byte	0xa3
 31673 1abb 02       		.uleb128 0x2
 31674 1abc 91       		.byte	0x91
 31675 1abd 72       		.sleb128 -14
 31676 1abe 29       		.uleb128 0x29
 31677 1abf 696400   		.ascii	"id\000"
 31678 1ac2 01       		.byte	0x1
 31679 1ac3 C30B     		.2byte	0xbc3
 31680 1ac5 97000000 		.4byte	0x97
 31681 1ac9 02       		.uleb128 0x2
 31682 1aca 91       		.byte	0x91
 31683 1acb 71       		.sleb128 -15
 31684 1acc 26       		.uleb128 0x26
 31685 1acd 6900     		.ascii	"i\000"
 31686 1acf 01       		.byte	0x1
 31687 1ad0 C50B     		.2byte	0xbc5
 31688 1ad2 A3000000 		.4byte	0xa3
 31689 1ad6 05       		.uleb128 0x5
 31690 1ad7 03       		.byte	0x3
 31691 1ad8 04000000 		.4byte	i.11273
 31692 1adc 00       		.byte	0
 31693 1add 2A       		.uleb128 0x2a
 31694 1ade FF140000 		.4byte	.LASF304
 31695 1ae2 01       		.byte	0x1
 31696 1ae3 E10B     		.2byte	0xbe1
 31697 1ae5 97000000 		.4byte	0x97
 31698 1ae9 00000000 		.4byte	.LFB84
 31699 1aed 3E000000 		.4byte	.LFE84-.LFB84
 31700 1af1 01       		.uleb128 0x1
 31701 1af2 9C       		.byte	0x9c
 31702 1af3 321B0000 		.4byte	0x1b32
 31703 1af7 25       		.uleb128 0x25
 31704 1af8 D50B0000 		.4byte	.LASF299
 31705 1afc 01       		.byte	0x1
 31706 1afd E10B     		.2byte	0xbe1
 31707 1aff B7100000 		.4byte	0x10b7
 31708 1b03 02       		.uleb128 0x2
 31709 1b04 91       		.byte	0x91
 31710 1b05 6C       		.sleb128 -20
 31711 1b06 25       		.uleb128 0x25
 31712 1b07 46060000 		.4byte	.LASF300
 31713 1b0b 01       		.byte	0x1
 31714 1b0c E10B     		.2byte	0xbe1
 31715 1b0e 97000000 		.4byte	0x97
 31716 1b12 02       		.uleb128 0x2
 31717 1b13 91       		.byte	0x91
 31718 1b14 6B       		.sleb128 -21
 31719 1b15 26       		.uleb128 0x26
 31720 1b16 6900     		.ascii	"i\000"
 31721 1b18 01       		.byte	0x1
 31722 1b19 E30B     		.2byte	0xbe3
 31723 1b1b 97000000 		.4byte	0x97
 31724 1b1f 02       		.uleb128 0x2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 684


 31725 1b20 91       		.byte	0x91
 31726 1b21 77       		.sleb128 -9
 31727 1b22 23       		.uleb128 0x23
 31728 1b23 210E0000 		.4byte	.LASF301
 31729 1b27 01       		.byte	0x1
 31730 1b28 E40B     		.2byte	0xbe4
 31731 1b2a 97000000 		.4byte	0x97
 31732 1b2e 02       		.uleb128 0x2
 31733 1b2f 91       		.byte	0x91
 31734 1b30 76       		.sleb128 -10
 31735 1b31 00       		.byte	0
 31736 1b32 22       		.uleb128 0x22
 31737 1b33 140C0000 		.4byte	.LASF302
 31738 1b37 01       		.byte	0x1
 31739 1b38 F10B     		.2byte	0xbf1
 31740 1b3a 00000000 		.4byte	.LFB85
 31741 1b3e 2E000000 		.4byte	.LFE85-.LFB85
 31742 1b42 01       		.uleb128 0x1
 31743 1b43 9C       		.byte	0x9c
 31744 1b44 761B0000 		.4byte	0x1b76
 31745 1b48 25       		.uleb128 0x25
 31746 1b49 8B050000 		.4byte	.LASF303
 31747 1b4d 01       		.byte	0x1
 31748 1b4e F10B     		.2byte	0xbf1
 31749 1b50 97000000 		.4byte	0x97
 31750 1b54 02       		.uleb128 0x2
 31751 1b55 91       		.byte	0x91
 31752 1b56 6F       		.sleb128 -17
 31753 1b57 23       		.uleb128 0x23
 31754 1b58 060C0000 		.4byte	.LASF232
 31755 1b5c 01       		.byte	0x1
 31756 1b5d F20B     		.2byte	0xbf2
 31757 1b5f 73000000 		.4byte	0x73
 31758 1b63 02       		.uleb128 0x2
 31759 1b64 91       		.byte	0x91
 31760 1b65 74       		.sleb128 -12
 31761 1b66 23       		.uleb128 0x23
 31762 1b67 79060000 		.4byte	.LASF231
 31763 1b6b 01       		.byte	0x1
 31764 1b6c F30B     		.2byte	0xbf3
 31765 1b6e B1080000 		.4byte	0x8b1
 31766 1b72 02       		.uleb128 0x2
 31767 1b73 91       		.byte	0x91
 31768 1b74 70       		.sleb128 -16
 31769 1b75 00       		.byte	0
 31770 1b76 2B       		.uleb128 0x2b
 31771 1b77 C3040000 		.4byte	.LASF305
 31772 1b7b 01       		.byte	0x1
 31773 1b7c 000C     		.2byte	0xc00
 31774 1b7e 97000000 		.4byte	0x97
 31775 1b82 00000000 		.4byte	.LFB86
 31776 1b86 98000000 		.4byte	.LFE86-.LFB86
 31777 1b8a 01       		.uleb128 0x1
 31778 1b8b 9C       		.byte	0x9c
 31779 1b8c DA1B0000 		.4byte	0x1bda
 31780 1b90 25       		.uleb128 0x25
 31781 1b91 39060000 		.4byte	.LASF306
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 685


 31782 1b95 01       		.byte	0x1
 31783 1b96 000C     		.2byte	0xc00
 31784 1b98 73000000 		.4byte	0x73
 31785 1b9c 02       		.uleb128 0x2
 31786 1b9d 91       		.byte	0x91
 31787 1b9e 64       		.sleb128 -28
 31788 1b9f 26       		.uleb128 0x26
 31789 1ba0 6900     		.ascii	"i\000"
 31790 1ba2 01       		.byte	0x1
 31791 1ba3 020C     		.2byte	0xc02
 31792 1ba5 73000000 		.4byte	0x73
 31793 1ba9 02       		.uleb128 0x2
 31794 1baa 91       		.byte	0x91
 31795 1bab 74       		.sleb128 -12
 31796 1bac 23       		.uleb128 0x23
 31797 1bad 06010000 		.4byte	.LASF307
 31798 1bb1 01       		.byte	0x1
 31799 1bb2 030C     		.2byte	0xc03
 31800 1bb4 97000000 		.4byte	0x97
 31801 1bb8 02       		.uleb128 0x2
 31802 1bb9 91       		.byte	0x91
 31803 1bba 6B       		.sleb128 -21
 31804 1bbb 23       		.uleb128 0x23
 31805 1bbc BA060000 		.4byte	.LASF308
 31806 1bc0 01       		.byte	0x1
 31807 1bc1 040C     		.2byte	0xc04
 31808 1bc3 73000000 		.4byte	0x73
 31809 1bc7 02       		.uleb128 0x2
 31810 1bc8 91       		.byte	0x91
 31811 1bc9 6C       		.sleb128 -20
 31812 1bca 23       		.uleb128 0x23
 31813 1bcb D3050000 		.4byte	.LASF309
 31814 1bcf 01       		.byte	0x1
 31815 1bd0 050C     		.2byte	0xc05
 31816 1bd2 97000000 		.4byte	0x97
 31817 1bd6 02       		.uleb128 0x2
 31818 1bd7 91       		.byte	0x91
 31819 1bd8 73       		.sleb128 -13
 31820 1bd9 00       		.byte	0
 31821 1bda 22       		.uleb128 0x22
 31822 1bdb 660F0000 		.4byte	.LASF310
 31823 1bdf 01       		.byte	0x1
 31824 1be0 2A0C     		.2byte	0xc2a
 31825 1be2 00000000 		.4byte	.LFB87
 31826 1be6 80000000 		.4byte	.LFE87-.LFB87
 31827 1bea 01       		.uleb128 0x1
 31828 1beb 9C       		.byte	0x9c
 31829 1bec FE1B0000 		.4byte	0x1bfe
 31830 1bf0 26       		.uleb128 0x26
 31831 1bf1 6900     		.ascii	"i\000"
 31832 1bf3 01       		.byte	0x1
 31833 1bf4 2C0C     		.2byte	0xc2c
 31834 1bf6 A3000000 		.4byte	0xa3
 31835 1bfa 02       		.uleb128 0x2
 31836 1bfb 91       		.byte	0x91
 31837 1bfc 76       		.sleb128 -10
 31838 1bfd 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 686


 31839 1bfe 2B       		.uleb128 0x2b
 31840 1bff AC0E0000 		.4byte	.LASF311
 31841 1c03 01       		.byte	0x1
 31842 1c04 430C     		.2byte	0xc43
 31843 1c06 97000000 		.4byte	0x97
 31844 1c0a 00000000 		.4byte	.LFB88
 31845 1c0e 5C000000 		.4byte	.LFE88-.LFB88
 31846 1c12 01       		.uleb128 0x1
 31847 1c13 9C       		.byte	0x9c
 31848 1c14 261C0000 		.4byte	0x1c26
 31849 1c18 26       		.uleb128 0x26
 31850 1c19 6900     		.ascii	"i\000"
 31851 1c1b 01       		.byte	0x1
 31852 1c1c 440C     		.2byte	0xc44
 31853 1c1e A3000000 		.4byte	0xa3
 31854 1c22 02       		.uleb128 0x2
 31855 1c23 91       		.byte	0x91
 31856 1c24 76       		.sleb128 -10
 31857 1c25 00       		.byte	0
 31858 1c26 2B       		.uleb128 0x2b
 31859 1c27 C0060000 		.4byte	.LASF312
 31860 1c2b 01       		.byte	0x1
 31861 1c2c 560C     		.2byte	0xc56
 31862 1c2e 97000000 		.4byte	0x97
 31863 1c32 00000000 		.4byte	.LFB89
 31864 1c36 24060000 		.4byte	.LFE89-.LFB89
 31865 1c3a 01       		.uleb128 0x1
 31866 1c3b 9C       		.byte	0x9c
 31867 1c3c 5B1C0000 		.4byte	0x1c5b
 31868 1c40 26       		.uleb128 0x26
 31869 1c41 6900     		.ascii	"i\000"
 31870 1c43 01       		.byte	0x1
 31871 1c44 580C     		.2byte	0xc58
 31872 1c46 97000000 		.4byte	0x97
 31873 1c4a 02       		.uleb128 0x2
 31874 1c4b 91       		.byte	0x91
 31875 1c4c 77       		.sleb128 -9
 31876 1c4d 26       		.uleb128 0x26
 31877 1c4e 6A00     		.ascii	"j\000"
 31878 1c50 01       		.byte	0x1
 31879 1c51 580C     		.2byte	0xc58
 31880 1c53 97000000 		.4byte	0x97
 31881 1c57 02       		.uleb128 0x2
 31882 1c58 91       		.byte	0x91
 31883 1c59 76       		.sleb128 -10
 31884 1c5a 00       		.byte	0
 31885 1c5b 28       		.uleb128 0x28
 31886 1c5c 61090000 		.4byte	.LASF313
 31887 1c60 01       		.byte	0x1
 31888 1c61 F90C     		.2byte	0xcf9
 31889 1c63 00000000 		.4byte	.LFB90
 31890 1c67 40020000 		.4byte	.LFE90-.LFB90
 31891 1c6b 01       		.uleb128 0x1
 31892 1c6c 9C       		.byte	0x9c
 31893 1c6d 981C0000 		.4byte	0x1c98
 31894 1c71 23       		.uleb128 0x23
 31895 1c72 A20E0000 		.4byte	.LASF241
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 687


 31896 1c76 01       		.byte	0x1
 31897 1c77 FB0C     		.2byte	0xcfb
 31898 1c79 97000000 		.4byte	0x97
 31899 1c7d 02       		.uleb128 0x2
 31900 1c7e 91       		.byte	0x91
 31901 1c7f 73       		.sleb128 -13
 31902 1c80 1E       		.uleb128 0x1e
 31903 1c81 FA000000 		.4byte	.LBB30
 31904 1c85 6A000000 		.4byte	.LBE30-.LBB30
 31905 1c89 26       		.uleb128 0x26
 31906 1c8a 6900     		.ascii	"i\000"
 31907 1c8c 01       		.byte	0x1
 31908 1c8d 0C0D     		.2byte	0xd0c
 31909 1c8f 73000000 		.4byte	0x73
 31910 1c93 02       		.uleb128 0x2
 31911 1c94 91       		.byte	0x91
 31912 1c95 74       		.sleb128 -12
 31913 1c96 00       		.byte	0
 31914 1c97 00       		.byte	0
 31915 1c98 2C       		.uleb128 0x2c
 31916 1c99 F70B0000 		.4byte	.LASF314
 31917 1c9d 01       		.byte	0x1
 31918 1c9e 2C0D     		.2byte	0xd2c
 31919 1ca0 00000000 		.4byte	.LFB91
 31920 1ca4 28000000 		.4byte	.LFE91-.LFB91
 31921 1ca8 01       		.uleb128 0x1
 31922 1ca9 9C       		.byte	0x9c
 31923 1caa 2C       		.uleb128 0x2c
 31924 1cab 92120000 		.4byte	.LASF315
 31925 1caf 01       		.byte	0x1
 31926 1cb0 380D     		.2byte	0xd38
 31927 1cb2 00000000 		.4byte	.LFB92
 31928 1cb6 78000000 		.4byte	.LFE92-.LFB92
 31929 1cba 01       		.uleb128 0x1
 31930 1cbb 9C       		.byte	0x9c
 31931 1cbc 2C       		.uleb128 0x2c
 31932 1cbd 7C040000 		.4byte	.LASF316
 31933 1cc1 01       		.byte	0x1
 31934 1cc2 4E0D     		.2byte	0xd4e
 31935 1cc4 00000000 		.4byte	.LFB93
 31936 1cc8 B0000000 		.4byte	.LFE93-.LFB93
 31937 1ccc 01       		.uleb128 0x1
 31938 1ccd 9C       		.byte	0x9c
 31939 1cce 27       		.uleb128 0x27
 31940 1ccf EE060000 		.4byte	.LASF318
 31941 1cd3 01       		.byte	0x1
 31942 1cd4 6F0D     		.2byte	0xd6f
 31943 1cd6 00000000 		.4byte	.LFB94
 31944 1cda 28010000 		.4byte	.LFE94-.LFB94
 31945 1cde 01       		.uleb128 0x1
 31946 1cdf 9C       		.byte	0x9c
 31947 1ce0 121D0000 		.4byte	0x1d12
 31948 1ce4 23       		.uleb128 0x23
 31949 1ce5 7F070000 		.4byte	.LASF246
 31950 1ce9 01       		.byte	0x1
 31951 1cea 710D     		.2byte	0xd71
 31952 1cec 97000000 		.4byte	0x97
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 688


 31953 1cf0 02       		.uleb128 0x2
 31954 1cf1 91       		.byte	0x91
 31955 1cf2 6F       		.sleb128 -17
 31956 1cf3 23       		.uleb128 0x23
 31957 1cf4 4C130000 		.4byte	.LASF237
 31958 1cf8 01       		.byte	0x1
 31959 1cf9 720D     		.2byte	0xd72
 31960 1cfb C7000000 		.4byte	0xc7
 31961 1cff 02       		.uleb128 0x2
 31962 1d00 91       		.byte	0x91
 31963 1d01 6C       		.sleb128 -20
 31964 1d02 23       		.uleb128 0x23
 31965 1d03 79060000 		.4byte	.LASF231
 31966 1d07 01       		.byte	0x1
 31967 1d08 750D     		.2byte	0xd75
 31968 1d0a 42080000 		.4byte	0x842
 31969 1d0e 02       		.uleb128 0x2
 31970 1d0f 91       		.byte	0x91
 31971 1d10 64       		.sleb128 -28
 31972 1d11 00       		.byte	0
 31973 1d12 27       		.uleb128 0x27
 31974 1d13 530F0000 		.4byte	.LASF319
 31975 1d17 01       		.byte	0x1
 31976 1d18 900D     		.2byte	0xd90
 31977 1d1a 00000000 		.4byte	.LFB95
 31978 1d1e B8000000 		.4byte	.LFE95-.LFB95
 31979 1d22 01       		.uleb128 0x1
 31980 1d23 9C       		.byte	0x9c
 31981 1d24 561D0000 		.4byte	0x1d56
 31982 1d28 23       		.uleb128 0x23
 31983 1d29 7F070000 		.4byte	.LASF246
 31984 1d2d 01       		.byte	0x1
 31985 1d2e 920D     		.2byte	0xd92
 31986 1d30 97000000 		.4byte	0x97
 31987 1d34 02       		.uleb128 0x2
 31988 1d35 91       		.byte	0x91
 31989 1d36 6F       		.sleb128 -17
 31990 1d37 23       		.uleb128 0x23
 31991 1d38 4C130000 		.4byte	.LASF237
 31992 1d3c 01       		.byte	0x1
 31993 1d3d 930D     		.2byte	0xd93
 31994 1d3f C7000000 		.4byte	0xc7
 31995 1d43 02       		.uleb128 0x2
 31996 1d44 91       		.byte	0x91
 31997 1d45 6C       		.sleb128 -20
 31998 1d46 23       		.uleb128 0x23
 31999 1d47 79060000 		.4byte	.LASF231
 32000 1d4b 01       		.byte	0x1
 32001 1d4c 970D     		.2byte	0xd97
 32002 1d4e 42080000 		.4byte	0x842
 32003 1d52 02       		.uleb128 0x2
 32004 1d53 91       		.byte	0x91
 32005 1d54 64       		.sleb128 -28
 32006 1d55 00       		.byte	0
 32007 1d56 27       		.uleb128 0x27
 32008 1d57 42020000 		.4byte	.LASF320
 32009 1d5b 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 689


 32010 1d5c A90D     		.2byte	0xda9
 32011 1d5e 00000000 		.4byte	.LFB96
 32012 1d62 B8000000 		.4byte	.LFE96-.LFB96
 32013 1d66 01       		.uleb128 0x1
 32014 1d67 9C       		.byte	0x9c
 32015 1d68 9A1D0000 		.4byte	0x1d9a
 32016 1d6c 23       		.uleb128 0x23
 32017 1d6d 7F070000 		.4byte	.LASF246
 32018 1d71 01       		.byte	0x1
 32019 1d72 AB0D     		.2byte	0xdab
 32020 1d74 97000000 		.4byte	0x97
 32021 1d78 02       		.uleb128 0x2
 32022 1d79 91       		.byte	0x91
 32023 1d7a 6F       		.sleb128 -17
 32024 1d7b 23       		.uleb128 0x23
 32025 1d7c 4C130000 		.4byte	.LASF237
 32026 1d80 01       		.byte	0x1
 32027 1d81 AC0D     		.2byte	0xdac
 32028 1d83 C7000000 		.4byte	0xc7
 32029 1d87 02       		.uleb128 0x2
 32030 1d88 91       		.byte	0x91
 32031 1d89 6C       		.sleb128 -20
 32032 1d8a 23       		.uleb128 0x23
 32033 1d8b 79060000 		.4byte	.LASF231
 32034 1d8f 01       		.byte	0x1
 32035 1d90 B00D     		.2byte	0xdb0
 32036 1d92 42080000 		.4byte	0x842
 32037 1d96 02       		.uleb128 0x2
 32038 1d97 91       		.byte	0x91
 32039 1d98 64       		.sleb128 -28
 32040 1d99 00       		.byte	0
 32041 1d9a 27       		.uleb128 0x27
 32042 1d9b 620A0000 		.4byte	.LASF321
 32043 1d9f 01       		.byte	0x1
 32044 1da0 C20D     		.2byte	0xdc2
 32045 1da2 00000000 		.4byte	.LFB97
 32046 1da6 5C000000 		.4byte	.LFE97-.LFB97
 32047 1daa 01       		.uleb128 0x1
 32048 1dab 9C       		.byte	0x9c
 32049 1dac CF1D0000 		.4byte	0x1dcf
 32050 1db0 23       		.uleb128 0x23
 32051 1db1 4C130000 		.4byte	.LASF237
 32052 1db5 01       		.byte	0x1
 32053 1db6 C40D     		.2byte	0xdc4
 32054 1db8 C7000000 		.4byte	0xc7
 32055 1dbc 02       		.uleb128 0x2
 32056 1dbd 91       		.byte	0x91
 32057 1dbe 76       		.sleb128 -10
 32058 1dbf 23       		.uleb128 0x23
 32059 1dc0 79060000 		.4byte	.LASF231
 32060 1dc4 01       		.byte	0x1
 32061 1dc5 C80D     		.2byte	0xdc8
 32062 1dc7 75090000 		.4byte	0x975
 32063 1dcb 02       		.uleb128 0x2
 32064 1dcc 91       		.byte	0x91
 32065 1dcd 70       		.sleb128 -16
 32066 1dce 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 690


 32067 1dcf 2D       		.uleb128 0x2d
 32068 1dd0 5C0C0000 		.4byte	.LASF322
 32069 1dd4 01       		.byte	0x1
 32070 1dd5 DA0D     		.2byte	0xdda
 32071 1dd7 00000000 		.4byte	.LFB98
 32072 1ddb 44020000 		.4byte	.LFE98-.LFB98
 32073 1ddf 01       		.uleb128 0x1
 32074 1de0 9C       		.byte	0x9c
 32075 1de1 391E0000 		.4byte	0x1e39
 32076 1de5 23       		.uleb128 0x23
 32077 1de6 4C130000 		.4byte	.LASF237
 32078 1dea 01       		.byte	0x1
 32079 1deb DD0D     		.2byte	0xddd
 32080 1ded 391E0000 		.4byte	0x1e39
 32081 1df1 02       		.uleb128 0x2
 32082 1df2 91       		.byte	0x91
 32083 1df3 70       		.sleb128 -16
 32084 1df4 23       		.uleb128 0x23
 32085 1df5 41070000 		.4byte	.LASF323
 32086 1df9 01       		.byte	0x1
 32087 1dfa DE0D     		.2byte	0xdde
 32088 1dfc 391E0000 		.4byte	0x1e39
 32089 1e00 05       		.uleb128 0x5
 32090 1e01 03       		.byte	0x3
 32091 1e02 08000000 		.4byte	last_aux_int16.11404
 32092 1e06 2E       		.uleb128 0x2e
 32093 1e07 2E000000 		.4byte	.LBB31
 32094 1e0b 50000000 		.4byte	.LBE31-.LBB31
 32095 1e0f 211E0000 		.4byte	0x1e21
 32096 1e13 26       		.uleb128 0x26
 32097 1e14 6900     		.ascii	"i\000"
 32098 1e16 01       		.byte	0x1
 32099 1e17 E50D     		.2byte	0xde5
 32100 1e19 97000000 		.4byte	0x97
 32101 1e1d 02       		.uleb128 0x2
 32102 1e1e 91       		.byte	0x91
 32103 1e1f 77       		.sleb128 -9
 32104 1e20 00       		.byte	0
 32105 1e21 1E       		.uleb128 0x1e
 32106 1e22 88000000 		.4byte	.LBB32
 32107 1e26 98010000 		.4byte	.LBE32-.LBB32
 32108 1e2a 26       		.uleb128 0x26
 32109 1e2b 6900     		.ascii	"i\000"
 32110 1e2d 01       		.byte	0x1
 32111 1e2e EF0D     		.2byte	0xdef
 32112 1e30 97000000 		.4byte	0x97
 32113 1e34 02       		.uleb128 0x2
 32114 1e35 91       		.byte	0x91
 32115 1e36 76       		.sleb128 -10
 32116 1e37 00       		.byte	0
 32117 1e38 00       		.byte	0
 32118 1e39 09       		.uleb128 0x9
 32119 1e3a C7000000 		.4byte	0xc7
 32120 1e3e 491E0000 		.4byte	0x1e49
 32121 1e42 0A       		.uleb128 0xa
 32122 1e43 18010000 		.4byte	0x118
 32123 1e47 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 691


 32124 1e48 00       		.byte	0
 32125 1e49 27       		.uleb128 0x27
 32126 1e4a D0150000 		.4byte	.LASF324
 32127 1e4e 01       		.byte	0x1
 32128 1e4f 0A0E     		.2byte	0xe0a
 32129 1e51 00000000 		.4byte	.LFB99
 32130 1e55 BC000000 		.4byte	.LFE99-.LFB99
 32131 1e59 01       		.uleb128 0x1
 32132 1e5a 9C       		.byte	0x9c
 32133 1e5b 6F1E0000 		.4byte	0x1e6f
 32134 1e5f 26       		.uleb128 0x26
 32135 1e60 61757800 		.ascii	"aux\000"
 32136 1e64 01       		.byte	0x1
 32137 1e65 0D0E     		.2byte	0xe0d
 32138 1e67 97000000 		.4byte	0x97
 32139 1e6b 02       		.uleb128 0x2
 32140 1e6c 91       		.byte	0x91
 32141 1e6d 77       		.sleb128 -9
 32142 1e6e 00       		.byte	0
 32143 1e6f 27       		.uleb128 0x27
 32144 1e70 D30C0000 		.4byte	.LASF325
 32145 1e74 01       		.byte	0x1
 32146 1e75 2F0E     		.2byte	0xe2f
 32147 1e77 00000000 		.4byte	.LFB100
 32148 1e7b 5C000000 		.4byte	.LFE100-.LFB100
 32149 1e7f 01       		.uleb128 0x1
 32150 1e80 9C       		.byte	0x9c
 32151 1e81 951E0000 		.4byte	0x1e95
 32152 1e85 23       		.uleb128 0x23
 32153 1e86 79060000 		.4byte	.LASF231
 32154 1e8a 01       		.byte	0x1
 32155 1e8b 310E     		.2byte	0xe31
 32156 1e8d F5050000 		.4byte	0x5f5
 32157 1e91 02       		.uleb128 0x2
 32158 1e92 91       		.byte	0x91
 32159 1e93 74       		.sleb128 -12
 32160 1e94 00       		.byte	0
 32161 1e95 27       		.uleb128 0x27
 32162 1e96 C3100000 		.4byte	.LASF326
 32163 1e9a 01       		.byte	0x1
 32164 1e9b 460E     		.2byte	0xe46
 32165 1e9d 00000000 		.4byte	.LFB101
 32166 1ea1 38010000 		.4byte	.LFE101-.LFB101
 32167 1ea5 01       		.uleb128 0x1
 32168 1ea6 9C       		.byte	0x9c
 32169 1ea7 D91E0000 		.4byte	0x1ed9
 32170 1eab 23       		.uleb128 0x23
 32171 1eac 7F070000 		.4byte	.LASF246
 32172 1eb0 01       		.byte	0x1
 32173 1eb1 480E     		.2byte	0xe48
 32174 1eb3 97000000 		.4byte	0x97
 32175 1eb7 02       		.uleb128 0x2
 32176 1eb8 91       		.byte	0x91
 32177 1eb9 6F       		.sleb128 -17
 32178 1eba 23       		.uleb128 0x23
 32179 1ebb 4C130000 		.4byte	.LASF237
 32180 1ebf 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 692


 32181 1ec0 490E     		.2byte	0xe49
 32182 1ec2 C7000000 		.4byte	0xc7
 32183 1ec6 02       		.uleb128 0x2
 32184 1ec7 91       		.byte	0x91
 32185 1ec8 6C       		.sleb128 -20
 32186 1ec9 23       		.uleb128 0x23
 32187 1eca 79060000 		.4byte	.LASF231
 32188 1ece 01       		.byte	0x1
 32189 1ecf 4D0E     		.2byte	0xe4d
 32190 1ed1 56050000 		.4byte	0x556
 32191 1ed5 02       		.uleb128 0x2
 32192 1ed6 91       		.byte	0x91
 32193 1ed7 60       		.sleb128 -32
 32194 1ed8 00       		.byte	0
 32195 1ed9 27       		.uleb128 0x27
 32196 1eda CC0A0000 		.4byte	.LASF327
 32197 1ede 01       		.byte	0x1
 32198 1edf 6D0E     		.2byte	0xe6d
 32199 1ee1 00000000 		.4byte	.LFB102
 32200 1ee5 6C000000 		.4byte	.LFE102-.LFB102
 32201 1ee9 01       		.uleb128 0x1
 32202 1eea 9C       		.byte	0x9c
 32203 1eeb 0E1F0000 		.4byte	0x1f0e
 32204 1eef 23       		.uleb128 0x23
 32205 1ef0 79060000 		.4byte	.LASF231
 32206 1ef4 01       		.byte	0x1
 32207 1ef5 710E     		.2byte	0xe71
 32208 1ef7 75090000 		.4byte	0x975
 32209 1efb 02       		.uleb128 0x2
 32210 1efc 91       		.byte	0x91
 32211 1efd 70       		.sleb128 -16
 32212 1efe 23       		.uleb128 0x23
 32213 1eff 4C130000 		.4byte	.LASF237
 32214 1f03 01       		.byte	0x1
 32215 1f04 720E     		.2byte	0xe72
 32216 1f06 C7000000 		.4byte	0xc7
 32217 1f0a 02       		.uleb128 0x2
 32218 1f0b 91       		.byte	0x91
 32219 1f0c 6E       		.sleb128 -18
 32220 1f0d 00       		.byte	0
 32221 1f0e 27       		.uleb128 0x27
 32222 1f0f F3070000 		.4byte	.LASF328
 32223 1f13 01       		.byte	0x1
 32224 1f14 B60E     		.2byte	0xeb6
 32225 1f16 00000000 		.4byte	.LFB103
 32226 1f1a 64000000 		.4byte	.LFE103-.LFB103
 32227 1f1e 01       		.uleb128 0x1
 32228 1f1f 9C       		.byte	0x9c
 32229 1f20 431F0000 		.4byte	0x1f43
 32230 1f24 23       		.uleb128 0x23
 32231 1f25 79060000 		.4byte	.LASF231
 32232 1f29 01       		.byte	0x1
 32233 1f2a BA0E     		.2byte	0xeba
 32234 1f2c E20A0000 		.4byte	0xae2
 32235 1f30 02       		.uleb128 0x2
 32236 1f31 91       		.byte	0x91
 32237 1f32 74       		.sleb128 -12
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 693


 32238 1f33 23       		.uleb128 0x23
 32239 1f34 4C130000 		.4byte	.LASF237
 32240 1f38 01       		.byte	0x1
 32241 1f39 BB0E     		.2byte	0xebb
 32242 1f3b C7000000 		.4byte	0xc7
 32243 1f3f 02       		.uleb128 0x2
 32244 1f40 91       		.byte	0x91
 32245 1f41 72       		.sleb128 -14
 32246 1f42 00       		.byte	0
 32247 1f43 2F       		.uleb128 0x2f
 32248 1f44 DD070000 		.4byte	.LASF329
 32249 1f48 01       		.byte	0x1
 32250 1f49 D00E     		.2byte	0xed0
 32251 1f4b C7000000 		.4byte	0xc7
 32252 1f4f 00000000 		.4byte	.LFB104
 32253 1f53 A8000000 		.4byte	.LFE104-.LFB104
 32254 1f57 01       		.uleb128 0x1
 32255 1f58 9C       		.byte	0x9c
 32256 1f59 B81F0000 		.4byte	0x1fb8
 32257 1f5d 23       		.uleb128 0x23
 32258 1f5e 79060000 		.4byte	.LASF231
 32259 1f62 01       		.byte	0x1
 32260 1f63 D20E     		.2byte	0xed2
 32261 1f65 B81F0000 		.4byte	0x1fb8
 32262 1f69 02       		.uleb128 0x2
 32263 1f6a 91       		.byte	0x91
 32264 1f6b 5C       		.sleb128 -36
 32265 1f6c 23       		.uleb128 0x23
 32266 1f6d 060C0000 		.4byte	.LASF232
 32267 1f71 01       		.byte	0x1
 32268 1f72 D30E     		.2byte	0xed3
 32269 1f74 97000000 		.4byte	0x97
 32270 1f78 02       		.uleb128 0x2
 32271 1f79 91       		.byte	0x91
 32272 1f7a 74       		.sleb128 -12
 32273 1f7b 23       		.uleb128 0x23
 32274 1f7c 50100000 		.4byte	.LASF330
 32275 1f80 01       		.byte	0x1
 32276 1f81 D40E     		.2byte	0xed4
 32277 1f83 C7000000 		.4byte	0xc7
 32278 1f87 02       		.uleb128 0x2
 32279 1f88 91       		.byte	0x91
 32280 1f89 76       		.sleb128 -10
 32281 1f8a 23       		.uleb128 0x23
 32282 1f8b FD020000 		.4byte	.LASF331
 32283 1f8f 01       		.byte	0x1
 32284 1f90 D50E     		.2byte	0xed5
 32285 1f92 AF000000 		.4byte	0xaf
 32286 1f96 02       		.uleb128 0x2
 32287 1f97 91       		.byte	0x91
 32288 1f98 70       		.sleb128 -16
 32289 1f99 23       		.uleb128 0x23
 32290 1f9a BD140000 		.4byte	.LASF332
 32291 1f9e 01       		.byte	0x1
 32292 1f9f D50E     		.2byte	0xed5
 32293 1fa1 AF000000 		.4byte	0xaf
 32294 1fa5 02       		.uleb128 0x2
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 694


 32295 1fa6 91       		.byte	0x91
 32296 1fa7 6C       		.sleb128 -20
 32297 1fa8 23       		.uleb128 0x23
 32298 1fa9 E7040000 		.4byte	.LASF333
 32299 1fad 01       		.byte	0x1
 32300 1fae D60E     		.2byte	0xed6
 32301 1fb0 97000000 		.4byte	0x97
 32302 1fb4 02       		.uleb128 0x2
 32303 1fb5 91       		.byte	0x91
 32304 1fb6 75       		.sleb128 -11
 32305 1fb7 00       		.byte	0
 32306 1fb8 09       		.uleb128 0x9
 32307 1fb9 97000000 		.4byte	0x97
 32308 1fbd C81F0000 		.4byte	0x1fc8
 32309 1fc1 0A       		.uleb128 0xa
 32310 1fc2 18010000 		.4byte	0x118
 32311 1fc6 0F       		.byte	0xf
 32312 1fc7 00       		.byte	0
 32313 1fc8 30       		.uleb128 0x30
 32314 1fc9 27010000 		.4byte	.LASF363
 32315 1fcd 01       		.byte	0x1
 32316 1fce F30E     		.2byte	0xef3
 32317 1fd0 00000000 		.4byte	.LFB105
 32318 1fd4 34000000 		.4byte	.LFE105-.LFB105
 32319 1fd8 01       		.uleb128 0x1
 32320 1fd9 9C       		.byte	0x9c
 32321 1fda 27       		.uleb128 0x27
 32322 1fdb 3C040000 		.4byte	.LASF334
 32323 1fdf 01       		.byte	0x1
 32324 1fe0 010F     		.2byte	0xf01
 32325 1fe2 00000000 		.4byte	.LFB106
 32326 1fe6 20000000 		.4byte	.LFE106-.LFB106
 32327 1fea 01       		.uleb128 0x1
 32328 1feb 9C       		.byte	0x9c
 32329 1fec 00200000 		.4byte	0x2000
 32330 1ff0 23       		.uleb128 0x23
 32331 1ff1 79060000 		.4byte	.LASF231
 32332 1ff5 01       		.byte	0x1
 32333 1ff6 030F     		.2byte	0xf03
 32334 1ff8 B1080000 		.4byte	0x8b1
 32335 1ffc 02       		.uleb128 0x2
 32336 1ffd 91       		.byte	0x91
 32337 1ffe 74       		.sleb128 -12
 32338 1fff 00       		.byte	0
 32339 2000 27       		.uleb128 0x27
 32340 2001 9F010000 		.4byte	.LASF335
 32341 2005 01       		.byte	0x1
 32342 2006 0F0F     		.2byte	0xf0f
 32343 2008 00000000 		.4byte	.LFB107
 32344 200c A0000000 		.4byte	.LFE107-.LFB107
 32345 2010 01       		.uleb128 0x1
 32346 2011 9C       		.byte	0x9c
 32347 2012 35200000 		.4byte	0x2035
 32348 2016 23       		.uleb128 0x23
 32349 2017 79060000 		.4byte	.LASF231
 32350 201b 01       		.byte	0x1
 32351 201c 130F     		.2byte	0xf13
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 695


 32352 201e 75090000 		.4byte	0x975
 32353 2022 02       		.uleb128 0x2
 32354 2023 91       		.byte	0x91
 32355 2024 70       		.sleb128 -16
 32356 2025 23       		.uleb128 0x23
 32357 2026 4C130000 		.4byte	.LASF237
 32358 202a 01       		.byte	0x1
 32359 202b 140F     		.2byte	0xf14
 32360 202d C7000000 		.4byte	0xc7
 32361 2031 02       		.uleb128 0x2
 32362 2032 91       		.byte	0x91
 32363 2033 6E       		.sleb128 -18
 32364 2034 00       		.byte	0
 32365 2035 27       		.uleb128 0x27
 32366 2036 82110000 		.4byte	.LASF336
 32367 203a 01       		.byte	0x1
 32368 203b 280F     		.2byte	0xf28
 32369 203d 00000000 		.4byte	.LFB108
 32370 2041 BC010000 		.4byte	.LFE108-.LFB108
 32371 2045 01       		.uleb128 0x1
 32372 2046 9C       		.byte	0x9c
 32373 2047 97200000 		.4byte	0x2097
 32374 204b 23       		.uleb128 0x23
 32375 204c 780C0000 		.4byte	.LASF337
 32376 2050 01       		.byte	0x1
 32377 2051 2B0F     		.2byte	0xf2b
 32378 2053 AF000000 		.4byte	0xaf
 32379 2057 02       		.uleb128 0x2
 32380 2058 91       		.byte	0x91
 32381 2059 70       		.sleb128 -16
 32382 205a 23       		.uleb128 0x23
 32383 205b C00F0000 		.4byte	.LASF338
 32384 205f 01       		.byte	0x1
 32385 2060 2C0F     		.2byte	0xf2c
 32386 2062 EB000000 		.4byte	0xeb
 32387 2066 02       		.uleb128 0x2
 32388 2067 91       		.byte	0x91
 32389 2068 6C       		.sleb128 -20
 32390 2069 23       		.uleb128 0x23
 32391 206a 060C0000 		.4byte	.LASF232
 32392 206e 01       		.byte	0x1
 32393 206f 2D0F     		.2byte	0xf2d
 32394 2071 97000000 		.4byte	0x97
 32395 2075 02       		.uleb128 0x2
 32396 2076 91       		.byte	0x91
 32397 2077 77       		.sleb128 -9
 32398 2078 23       		.uleb128 0x23
 32399 2079 79060000 		.4byte	.LASF231
 32400 207d 01       		.byte	0x1
 32401 207e 2E0F     		.2byte	0xf2e
 32402 2080 B1080000 		.4byte	0x8b1
 32403 2084 02       		.uleb128 0x2
 32404 2085 91       		.byte	0x91
 32405 2086 68       		.sleb128 -24
 32406 2087 23       		.uleb128 0x23
 32407 2088 8A100000 		.4byte	.LASF296
 32408 208c 01       		.byte	0x1
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 696


 32409 208d 2F0F     		.2byte	0xf2f
 32410 208f 97000000 		.4byte	0x97
 32411 2093 02       		.uleb128 0x2
 32412 2094 91       		.byte	0x91
 32413 2095 6B       		.sleb128 -21
 32414 2096 00       		.byte	0
 32415 2097 27       		.uleb128 0x27
 32416 2098 58020000 		.4byte	.LASF339
 32417 209c 01       		.byte	0x1
 32418 209d 690F     		.2byte	0xf69
 32419 209f 00000000 		.4byte	.LFB109
 32420 20a3 60000000 		.4byte	.LFE109-.LFB109
 32421 20a7 01       		.uleb128 0x1
 32422 20a8 9C       		.byte	0x9c
 32423 20a9 CC200000 		.4byte	0x20cc
 32424 20ad 23       		.uleb128 0x23
 32425 20ae 79060000 		.4byte	.LASF231
 32426 20b2 01       		.byte	0x1
 32427 20b3 6B0F     		.2byte	0xf6b
 32428 20b5 75090000 		.4byte	0x975
 32429 20b9 02       		.uleb128 0x2
 32430 20ba 91       		.byte	0x91
 32431 20bb 70       		.sleb128 -16
 32432 20bc 23       		.uleb128 0x23
 32433 20bd 4C130000 		.4byte	.LASF237
 32434 20c1 01       		.byte	0x1
 32435 20c2 6C0F     		.2byte	0xf6c
 32436 20c4 C7000000 		.4byte	0xc7
 32437 20c8 02       		.uleb128 0x2
 32438 20c9 91       		.byte	0x91
 32439 20ca 6E       		.sleb128 -18
 32440 20cb 00       		.byte	0
 32441 20cc 27       		.uleb128 0x27
 32442 20cd DB010000 		.4byte	.LASF340
 32443 20d1 01       		.byte	0x1
 32444 20d2 7F0F     		.2byte	0xf7f
 32445 20d4 00000000 		.4byte	.LFB110
 32446 20d8 98050000 		.4byte	.LFE110-.LFB110
 32447 20dc 01       		.uleb128 0x1
 32448 20dd 9C       		.byte	0x9c
 32449 20de 59210000 		.4byte	0x2159
 32450 20e2 23       		.uleb128 0x23
 32451 20e3 0B150000 		.4byte	.LASF341
 32452 20e7 01       		.byte	0x1
 32453 20e8 810F     		.2byte	0xf81
 32454 20ea 97000000 		.4byte	0x97
 32455 20ee 02       		.uleb128 0x2
 32456 20ef 91       		.byte	0x91
 32457 20f0 6F       		.sleb128 -17
 32458 20f1 26       		.uleb128 0x26
 32459 20f2 6300     		.ascii	"c\000"
 32460 20f4 01       		.byte	0x1
 32461 20f5 820F     		.2byte	0xf82
 32462 20f7 A3000000 		.4byte	0xa3
 32463 20fb 02       		.uleb128 0x2
 32464 20fc 91       		.byte	0x91
 32465 20fd 6C       		.sleb128 -20
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 697


 32466 20fe 26       		.uleb128 0x26
 32467 20ff 6B00     		.ascii	"k\000"
 32468 2101 01       		.byte	0x1
 32469 2102 830F     		.2byte	0xf83
 32470 2104 97000000 		.4byte	0x97
 32471 2108 02       		.uleb128 0x2
 32472 2109 91       		.byte	0x91
 32473 210a 6B       		.sleb128 -21
 32474 210b 23       		.uleb128 0x23
 32475 210c 5C000000 		.4byte	.LASF342
 32476 2110 01       		.byte	0x1
 32477 2111 840F     		.2byte	0xf84
 32478 2113 A3000000 		.4byte	0xa3
 32479 2117 02       		.uleb128 0x2
 32480 2118 91       		.byte	0x91
 32481 2119 68       		.sleb128 -24
 32482 211a 23       		.uleb128 0x23
 32483 211b 4C130000 		.4byte	.LASF237
 32484 211f 01       		.byte	0x1
 32485 2120 850F     		.2byte	0xf85
 32486 2122 C7000000 		.4byte	0xc7
 32487 2126 02       		.uleb128 0x2
 32488 2127 91       		.byte	0x91
 32489 2128 66       		.sleb128 -26
 32490 2129 23       		.uleb128 0x23
 32491 212a 88140000 		.4byte	.LASF236
 32492 212e 01       		.byte	0x1
 32493 212f 860F     		.2byte	0xf86
 32494 2131 EB000000 		.4byte	0xeb
 32495 2135 02       		.uleb128 0x2
 32496 2136 91       		.byte	0x91
 32497 2137 60       		.sleb128 -32
 32498 2138 23       		.uleb128 0x23
 32499 2139 79060000 		.4byte	.LASF231
 32500 213d 01       		.byte	0x1
 32501 213e 890F     		.2byte	0xf89
 32502 2140 59210000 		.4byte	0x2159
 32503 2144 03       		.uleb128 0x3
 32504 2145 91       		.byte	0x91
 32505 2146 807D     		.sleb128 -384
 32506 2148 23       		.uleb128 0x23
 32507 2149 95090000 		.4byte	.LASF343
 32508 214d 01       		.byte	0x1
 32509 214e 8A0F     		.2byte	0xf8a
 32510 2150 390C0000 		.4byte	0xc39
 32511 2154 03       		.uleb128 0x3
 32512 2155 91       		.byte	0x91
 32513 2156 E07C     		.sleb128 -416
 32514 2158 00       		.byte	0
 32515 2159 09       		.uleb128 0x9
 32516 215a 97000000 		.4byte	0x97
 32517 215e 6A210000 		.4byte	0x216a
 32518 2162 24       		.uleb128 0x24
 32519 2163 18010000 		.4byte	0x118
 32520 2167 5D01     		.2byte	0x15d
 32521 2169 00       		.byte	0
 32522 216a 27       		.uleb128 0x27
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 698


 32523 216b 63140000 		.4byte	.LASF344
 32524 216f 01       		.byte	0x1
 32525 2170 ED0F     		.2byte	0xfed
 32526 2172 00000000 		.4byte	.LFB111
 32527 2176 8C000000 		.4byte	.LFE111-.LFB111
 32528 217a 01       		.uleb128 0x1
 32529 217b 9C       		.byte	0x9c
 32530 217c AA210000 		.4byte	0x21aa
 32531 2180 23       		.uleb128 0x23
 32532 2181 79060000 		.4byte	.LASF231
 32533 2185 01       		.byte	0x1
 32534 2186 F00F     		.2byte	0xff0
 32535 2188 900A0000 		.4byte	0xa90
 32536 218c 02       		.uleb128 0x2
 32537 218d 91       		.byte	0x91
 32538 218e 60       		.sleb128 -32
 32539 218f 26       		.uleb128 0x26
 32540 2190 6900     		.ascii	"i\000"
 32541 2192 01       		.byte	0x1
 32542 2193 F10F     		.2byte	0xff1
 32543 2195 97000000 		.4byte	0x97
 32544 2199 02       		.uleb128 0x2
 32545 219a 91       		.byte	0x91
 32546 219b 6F       		.sleb128 -17
 32547 219c 26       		.uleb128 0x26
 32548 219d 6A00     		.ascii	"j\000"
 32549 219f 01       		.byte	0x1
 32550 21a0 F10F     		.2byte	0xff1
 32551 21a2 97000000 		.4byte	0x97
 32552 21a6 02       		.uleb128 0x2
 32553 21a7 91       		.byte	0x91
 32554 21a8 6E       		.sleb128 -18
 32555 21a9 00       		.byte	0
 32556 21aa 27       		.uleb128 0x27
 32557 21ab 56120000 		.4byte	.LASF345
 32558 21af 01       		.byte	0x1
 32559 21b0 0610     		.2byte	0x1006
 32560 21b2 00000000 		.4byte	.LFB112
 32561 21b6 EC000000 		.4byte	.LFE112-.LFB112
 32562 21ba 01       		.uleb128 0x1
 32563 21bb 9C       		.byte	0x9c
 32564 21bc 08220000 		.4byte	0x2208
 32565 21c0 23       		.uleb128 0x23
 32566 21c1 79060000 		.4byte	.LASF231
 32567 21c5 01       		.byte	0x1
 32568 21c6 0910     		.2byte	0x1009
 32569 21c8 08220000 		.4byte	0x2208
 32570 21cc 02       		.uleb128 0x2
 32571 21cd 91       		.byte	0x91
 32572 21ce 54       		.sleb128 -44
 32573 21cf 26       		.uleb128 0x26
 32574 21d0 6900     		.ascii	"i\000"
 32575 21d2 01       		.byte	0x1
 32576 21d3 0A10     		.2byte	0x100a
 32577 21d5 97000000 		.4byte	0x97
 32578 21d9 02       		.uleb128 0x2
 32579 21da 91       		.byte	0x91
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 699


 32580 21db 6F       		.sleb128 -17
 32581 21dc 26       		.uleb128 0x26
 32582 21dd 6A00     		.ascii	"j\000"
 32583 21df 01       		.byte	0x1
 32584 21e0 0A10     		.2byte	0x100a
 32585 21e2 97000000 		.4byte	0x97
 32586 21e6 02       		.uleb128 0x2
 32587 21e7 91       		.byte	0x91
 32588 21e8 6E       		.sleb128 -18
 32589 21e9 26       		.uleb128 0x26
 32590 21ea 69647800 		.ascii	"idx\000"
 32591 21ee 01       		.byte	0x1
 32592 21ef 0A10     		.2byte	0x100a
 32593 21f1 97000000 		.4byte	0x97
 32594 21f5 02       		.uleb128 0x2
 32595 21f6 91       		.byte	0x91
 32596 21f7 6D       		.sleb128 -19
 32597 21f8 23       		.uleb128 0x23
 32598 21f9 780D0000 		.4byte	.LASF238
 32599 21fd 01       		.byte	0x1
 32600 21fe 0B10     		.2byte	0x100b
 32601 2200 A3000000 		.4byte	0xa3
 32602 2204 02       		.uleb128 0x2
 32603 2205 91       		.byte	0x91
 32604 2206 52       		.sleb128 -46
 32605 2207 00       		.byte	0
 32606 2208 09       		.uleb128 0x9
 32607 2209 97000000 		.4byte	0x97
 32608 220d 18220000 		.4byte	0x2218
 32609 2211 0A       		.uleb128 0xa
 32610 2212 18010000 		.4byte	0x118
 32611 2216 15       		.byte	0x15
 32612 2217 00       		.byte	0
 32613 2218 27       		.uleb128 0x27
 32614 2219 E1030000 		.4byte	.LASF346
 32615 221d 01       		.byte	0x1
 32616 221e 2410     		.2byte	0x1024
 32617 2220 00000000 		.4byte	.LFB113
 32618 2224 5C000000 		.4byte	.LFE113-.LFB113
 32619 2228 01       		.uleb128 0x1
 32620 2229 9C       		.byte	0x9c
 32621 222a 4B220000 		.4byte	0x224b
 32622 222e 23       		.uleb128 0x23
 32623 222f 79060000 		.4byte	.LASF231
 32624 2233 01       		.byte	0x1
 32625 2234 2710     		.2byte	0x1027
 32626 2236 290C0000 		.4byte	0xc29
 32627 223a 02       		.uleb128 0x2
 32628 223b 91       		.byte	0x91
 32629 223c 68       		.sleb128 -24
 32630 223d 26       		.uleb128 0x26
 32631 223e 6900     		.ascii	"i\000"
 32632 2240 01       		.byte	0x1
 32633 2241 2810     		.2byte	0x1028
 32634 2243 97000000 		.4byte	0x97
 32635 2247 02       		.uleb128 0x2
 32636 2248 91       		.byte	0x91
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 700


 32637 2249 77       		.sleb128 -9
 32638 224a 00       		.byte	0
 32639 224b 27       		.uleb128 0x27
 32640 224c 19040000 		.4byte	.LASF347
 32641 2250 01       		.byte	0x1
 32642 2251 3B10     		.2byte	0x103b
 32643 2253 00000000 		.4byte	.LFB114
 32644 2257 C0000000 		.4byte	.LFE114-.LFB114
 32645 225b 01       		.uleb128 0x1
 32646 225c 9C       		.byte	0x9c
 32647 225d 9C220000 		.4byte	0x229c
 32648 2261 23       		.uleb128 0x23
 32649 2262 79060000 		.4byte	.LASF231
 32650 2266 01       		.byte	0x1
 32651 2267 3E10     		.2byte	0x103e
 32652 2269 9C220000 		.4byte	0x229c
 32653 226d 02       		.uleb128 0x2
 32654 226e 91       		.byte	0x91
 32655 226f 54       		.sleb128 -44
 32656 2270 26       		.uleb128 0x26
 32657 2271 6900     		.ascii	"i\000"
 32658 2273 01       		.byte	0x1
 32659 2274 3F10     		.2byte	0x103f
 32660 2276 97000000 		.4byte	0x97
 32661 227a 02       		.uleb128 0x2
 32662 227b 91       		.byte	0x91
 32663 227c 6F       		.sleb128 -17
 32664 227d 26       		.uleb128 0x26
 32665 227e 69647800 		.ascii	"idx\000"
 32666 2282 01       		.byte	0x1
 32667 2283 3F10     		.2byte	0x103f
 32668 2285 97000000 		.4byte	0x97
 32669 2289 02       		.uleb128 0x2
 32670 228a 91       		.byte	0x91
 32671 228b 6E       		.sleb128 -18
 32672 228c 23       		.uleb128 0x23
 32673 228d 4C130000 		.4byte	.LASF237
 32674 2291 01       		.byte	0x1
 32675 2292 4010     		.2byte	0x1040
 32676 2294 C7000000 		.4byte	0xc7
 32677 2298 02       		.uleb128 0x2
 32678 2299 91       		.byte	0x91
 32679 229a 52       		.sleb128 -46
 32680 229b 00       		.byte	0
 32681 229c 09       		.uleb128 0x9
 32682 229d 97000000 		.4byte	0x97
 32683 22a1 AC220000 		.4byte	0x22ac
 32684 22a5 0A       		.uleb128 0xa
 32685 22a6 18010000 		.4byte	0x118
 32686 22aa 19       		.byte	0x19
 32687 22ab 00       		.byte	0
 32688 22ac 22       		.uleb128 0x22
 32689 22ad 8B030000 		.4byte	.LASF348
 32690 22b1 01       		.byte	0x1
 32691 22b2 5610     		.2byte	0x1056
 32692 22b4 00000000 		.4byte	.LFB115
 32693 22b8 54010000 		.4byte	.LFE115-.LFB115
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 701


 32694 22bc 01       		.uleb128 0x1
 32695 22bd 9C       		.byte	0x9c
 32696 22be 01230000 		.4byte	0x2301
 32697 22c2 25       		.uleb128 0x25
 32698 22c3 C4070000 		.4byte	.LASF349
 32699 22c7 01       		.byte	0x1
 32700 22c8 5610     		.2byte	0x1056
 32701 22ca A3000000 		.4byte	0xa3
 32702 22ce 04       		.uleb128 0x4
 32703 22cf 91       		.byte	0x91
 32704 22d0 9EE37E   		.sleb128 -20066
 32705 22d3 26       		.uleb128 0x26
 32706 22d4 6900     		.ascii	"i\000"
 32707 22d6 01       		.byte	0x1
 32708 22d7 5810     		.2byte	0x1058
 32709 22d9 97000000 		.4byte	0x97
 32710 22dd 02       		.uleb128 0x2
 32711 22de 91       		.byte	0x91
 32712 22df 77       		.sleb128 -9
 32713 22e0 23       		.uleb128 0x23
 32714 22e1 CC040000 		.4byte	.LASF350
 32715 22e5 01       		.byte	0x1
 32716 22e6 5910     		.2byte	0x1059
 32717 22e8 D4100000 		.4byte	0x10d4
 32718 22ec 02       		.uleb128 0x2
 32719 22ed 91       		.byte	0x91
 32720 22ee 44       		.sleb128 -60
 32721 22ef 23       		.uleb128 0x23
 32722 22f0 E5080000 		.4byte	.LASF220
 32723 22f4 01       		.byte	0x1
 32724 22f5 5A10     		.2byte	0x105a
 32725 22f7 FC0E0000 		.4byte	0xefc
 32726 22fb 04       		.uleb128 0x4
 32727 22fc 91       		.byte	0x91
 32728 22fd A4E37E   		.sleb128 -20060
 32729 2300 00       		.byte	0
 32730 2301 22       		.uleb128 0x22
 32731 2302 69040000 		.4byte	.LASF351
 32732 2306 01       		.byte	0x1
 32733 2307 7210     		.2byte	0x1072
 32734 2309 00000000 		.4byte	.LFB116
 32735 230d B0000000 		.4byte	.LFE116-.LFB116
 32736 2311 01       		.uleb128 0x1
 32737 2312 9C       		.byte	0x9c
 32738 2313 62230000 		.4byte	0x2362
 32739 2317 25       		.uleb128 0x25
 32740 2318 C4070000 		.4byte	.LASF349
 32741 231c 01       		.byte	0x1
 32742 231d 7210     		.2byte	0x1072
 32743 231f A3000000 		.4byte	0xa3
 32744 2323 03       		.uleb128 0x3
 32745 2324 91       		.byte	0x91
 32746 2325 BE7F     		.sleb128 -66
 32747 2327 26       		.uleb128 0x26
 32748 2328 6900     		.ascii	"i\000"
 32749 232a 01       		.byte	0x1
 32750 232b 7410     		.2byte	0x1074
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 702


 32751 232d 97000000 		.4byte	0x97
 32752 2331 02       		.uleb128 0x2
 32753 2332 91       		.byte	0x91
 32754 2333 77       		.sleb128 -9
 32755 2334 23       		.uleb128 0x23
 32756 2335 CC040000 		.4byte	.LASF350
 32757 2339 01       		.byte	0x1
 32758 233a 7510     		.2byte	0x1075
 32759 233c D4100000 		.4byte	0x10d4
 32760 2340 02       		.uleb128 0x2
 32761 2341 91       		.byte	0x91
 32762 2342 44       		.sleb128 -60
 32763 2343 26       		.uleb128 0x26
 32764 2344 72657300 		.ascii	"res\000"
 32765 2348 01       		.byte	0x1
 32766 2349 7E10     		.2byte	0x107e
 32767 234b 97000000 		.4byte	0x97
 32768 234f 02       		.uleb128 0x2
 32769 2350 91       		.byte	0x91
 32770 2351 76       		.sleb128 -10
 32771 2352 23       		.uleb128 0x23
 32772 2353 79060000 		.4byte	.LASF231
 32773 2357 01       		.byte	0x1
 32774 2358 8110     		.2byte	0x1081
 32775 235a F5050000 		.4byte	0x5f5
 32776 235e 02       		.uleb128 0x2
 32777 235f 91       		.byte	0x91
 32778 2360 40       		.sleb128 -64
 32779 2361 00       		.byte	0
 32780 2362 28       		.uleb128 0x28
 32781 2363 38010000 		.4byte	.LASF352
 32782 2367 01       		.byte	0x1
 32783 2368 9310     		.2byte	0x1093
 32784 236a 00000000 		.4byte	.LFB117
 32785 236e 12000000 		.4byte	.LFE117-.LFB117
 32786 2372 01       		.uleb128 0x1
 32787 2373 9C       		.byte	0x9c
 32788 2374 88230000 		.4byte	0x2388
 32789 2378 25       		.uleb128 0x25
 32790 2379 1C070000 		.4byte	.LASF353
 32791 237d 01       		.byte	0x1
 32792 237e 9310     		.2byte	0x1093
 32793 2380 73000000 		.4byte	0x73
 32794 2384 02       		.uleb128 0x2
 32795 2385 91       		.byte	0x91
 32796 2386 74       		.sleb128 -12
 32797 2387 00       		.byte	0
 32798 2388 31       		.uleb128 0x31
 32799 2389 E40C0000 		.4byte	.LASF354
 32800 238d 01       		.byte	0x1
 32801 238e E110     		.2byte	0x10e1
 32802 2390 97000000 		.4byte	0x97
 32803 2394 00000000 		.4byte	.LFB118
 32804 2398 64010000 		.4byte	.LFE118-.LFB118
 32805 239c 01       		.uleb128 0x1
 32806 239d 9C       		.byte	0x9c
 32807 239e 03240000 		.4byte	0x2403
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 703


 32808 23a2 23       		.uleb128 0x23
 32809 23a3 DD0E0000 		.4byte	.LASF355
 32810 23a7 01       		.byte	0x1
 32811 23a8 E310     		.2byte	0x10e3
 32812 23aa 97000000 		.4byte	0x97
 32813 23ae 05       		.uleb128 0x5
 32814 23af 03       		.byte	0x3
 32815 23b0 0C000000 		.4byte	fsm_state.11561
 32816 23b4 26       		.uleb128 0x26
 32817 23b5 636E7400 		.ascii	"cnt\000"
 32818 23b9 01       		.byte	0x1
 32819 23ba E410     		.2byte	0x10e4
 32820 23bc D3000000 		.4byte	0xd3
 32821 23c0 05       		.uleb128 0x5
 32822 23c1 03       		.byte	0x3
 32823 23c2 10000000 		.4byte	cnt.11562
 32824 23c6 23       		.uleb128 0x23
 32825 23c7 B9040000 		.4byte	.LASF356
 32826 23cb 01       		.byte	0x1
 32827 23cc E510     		.2byte	0x10e5
 32828 23ce D3000000 		.4byte	0xd3
 32829 23d2 02       		.uleb128 0x2
 32830 23d3 91       		.byte	0x91
 32831 23d4 74       		.sleb128 -12
 32832 23d5 23       		.uleb128 0x23
 32833 23d6 ED0B0000 		.4byte	.LASF357
 32834 23da 01       		.byte	0x1
 32835 23db E510     		.2byte	0x10e5
 32836 23dd D3000000 		.4byte	0xd3
 32837 23e1 02       		.uleb128 0x2
 32838 23e2 91       		.byte	0x91
 32839 23e3 70       		.sleb128 -16
 32840 23e4 23       		.uleb128 0x23
 32841 23e5 A7000000 		.4byte	.LASF358
 32842 23e9 01       		.byte	0x1
 32843 23ea E610     		.2byte	0x10e6
 32844 23ec D3000000 		.4byte	0xd3
 32845 23f0 02       		.uleb128 0x2
 32846 23f1 91       		.byte	0x91
 32847 23f2 6C       		.sleb128 -20
 32848 23f3 23       		.uleb128 0x23
 32849 23f4 B3000000 		.4byte	.LASF359
 32850 23f8 01       		.byte	0x1
 32851 23f9 E610     		.2byte	0x10e6
 32852 23fb D3000000 		.4byte	0xd3
 32853 23ff 02       		.uleb128 0x2
 32854 2400 91       		.byte	0x91
 32855 2401 68       		.sleb128 -24
 32856 2402 00       		.byte	0
 32857 2403 28       		.uleb128 0x28
 32858 2404 2B080000 		.4byte	.LASF360
 32859 2408 01       		.byte	0x1
 32860 2409 3311     		.2byte	0x1133
 32861 240b 00000000 		.4byte	.LFB119
 32862 240f 12000000 		.4byte	.LFE119-.LFB119
 32863 2413 01       		.uleb128 0x1
 32864 2414 9C       		.byte	0x9c
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 704


 32865 2415 29240000 		.4byte	0x2429
 32866 2419 25       		.uleb128 0x25
 32867 241a 1C070000 		.4byte	.LASF353
 32868 241e 01       		.byte	0x1
 32869 241f 3311     		.2byte	0x1133
 32870 2421 73000000 		.4byte	0x73
 32871 2425 02       		.uleb128 0x2
 32872 2426 91       		.byte	0x91
 32873 2427 74       		.sleb128 -12
 32874 2428 00       		.byte	0
 32875 2429 28       		.uleb128 0x28
 32876 242a 710E0000 		.4byte	.LASF361
 32877 242e 01       		.byte	0x1
 32878 242f 7F11     		.2byte	0x117f
 32879 2431 00000000 		.4byte	.LFB120
 32880 2435 1A000000 		.4byte	.LFE120-.LFB120
 32881 2439 01       		.uleb128 0x1
 32882 243a 9C       		.byte	0x9c
 32883 243b 5E240000 		.4byte	0x245e
 32884 243f 25       		.uleb128 0x25
 32885 2440 69030000 		.4byte	.LASF362
 32886 2444 01       		.byte	0x1
 32887 2445 7F11     		.2byte	0x117f
 32888 2447 97000000 		.4byte	0x97
 32889 244b 02       		.uleb128 0x2
 32890 244c 91       		.byte	0x91
 32891 244d 77       		.sleb128 -9
 32892 244e 25       		.uleb128 0x25
 32893 244f 590B0000 		.4byte	.LASF188
 32894 2453 01       		.byte	0x1
 32895 2454 7F11     		.2byte	0x117f
 32896 2456 97000000 		.4byte	0x97
 32897 245a 02       		.uleb128 0x2
 32898 245b 91       		.byte	0x91
 32899 245c 76       		.sleb128 -10
 32900 245d 00       		.byte	0
 32901 245e 32       		.uleb128 0x32
 32902 245f D7000000 		.4byte	.LASF364
 32903 2463 01       		.byte	0x1
 32904 2464 A911     		.2byte	0x11a9
 32905 2466 00000000 		.4byte	.LFB121
 32906 246a 0C000000 		.4byte	.LFE121-.LFB121
 32907 246e 01       		.uleb128 0x1
 32908 246f 9C       		.byte	0x9c
 32909 2470 32       		.uleb128 0x32
 32910 2471 A8060000 		.4byte	.LASF365
 32911 2475 01       		.byte	0x1
 32912 2476 BF11     		.2byte	0x11bf
 32913 2478 00000000 		.4byte	.LFB122
 32914 247c 0C000000 		.4byte	.LFE122-.LFB122
 32915 2480 01       		.uleb128 0x1
 32916 2481 9C       		.byte	0x9c
 32917 2482 33       		.uleb128 0x33
 32918 2483 95130000 		.4byte	.LASF366
 32919 2487 09       		.byte	0x9
 32920 2488 1207     		.2byte	0x712
 32921 248a 8E240000 		.4byte	0x248e
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 705


 32922 248e 06       		.uleb128 0x6
 32923 248f 81000000 		.4byte	0x81
 32924 2493 09       		.uleb128 0x9
 32925 2494 28030000 		.4byte	0x328
 32926 2498 A3240000 		.4byte	0x24a3
 32927 249c 0A       		.uleb128 0xa
 32928 249d 18010000 		.4byte	0x118
 32929 24a1 01       		.byte	0x1
 32930 24a2 00       		.byte	0
 32931 24a3 33       		.uleb128 0x33
 32932 24a4 65150000 		.4byte	.LASF367
 32933 24a8 08       		.byte	0x8
 32934 24a9 2202     		.2byte	0x222
 32935 24ab 93240000 		.4byte	0x2493
 32936 24af 33       		.uleb128 0x33
 32937 24b0 31050000 		.4byte	.LASF368
 32938 24b4 08       		.byte	0x8
 32939 24b5 2202     		.2byte	0x222
 32940 24b7 93240000 		.4byte	0x2493
 32941 24bb 33       		.uleb128 0x33
 32942 24bc 2A0E0000 		.4byte	.LASF369
 32943 24c0 08       		.byte	0x8
 32944 24c1 2202     		.2byte	0x222
 32945 24c3 93240000 		.4byte	0x2493
 32946 24c7 09       		.uleb128 0x9
 32947 24c8 65030000 		.4byte	0x365
 32948 24cc D7240000 		.4byte	0x24d7
 32949 24d0 0A       		.uleb128 0xa
 32950 24d1 18010000 		.4byte	0x118
 32951 24d5 01       		.byte	0x1
 32952 24d6 00       		.byte	0
 32953 24d7 33       		.uleb128 0x33
 32954 24d8 2C070000 		.4byte	.LASF370
 32955 24dc 08       		.byte	0x8
 32956 24dd 2302     		.2byte	0x223
 32957 24df C7240000 		.4byte	0x24c7
 32958 24e3 33       		.uleb128 0x33
 32959 24e4 B8150000 		.4byte	.LASF371
 32960 24e8 08       		.byte	0x8
 32961 24e9 2302     		.2byte	0x223
 32962 24eb C7240000 		.4byte	0x24c7
 32963 24ef 33       		.uleb128 0x33
 32964 24f0 2F150000 		.4byte	.LASF372
 32965 24f4 08       		.byte	0x8
 32966 24f5 2402     		.2byte	0x224
 32967 24f7 E6030000 		.4byte	0x3e6
 32968 24fb 33       		.uleb128 0x33
 32969 24fc 48120000 		.4byte	.LASF373
 32970 2500 08       		.byte	0x8
 32971 2501 2402     		.2byte	0x224
 32972 2503 E6030000 		.4byte	0x3e6
 32973 2507 33       		.uleb128 0x33
 32974 2508 F2000000 		.4byte	.LASF374
 32975 250c 08       		.byte	0x8
 32976 250d 2602     		.2byte	0x226
 32977 250f 37040000 		.4byte	0x437
 32978 2513 33       		.uleb128 0x33
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 706


 32979 2514 93110000 		.4byte	.LASF375
 32980 2518 08       		.byte	0x8
 32981 2519 2702     		.2byte	0x227
 32982 251b 440B0000 		.4byte	0xb44
 32983 251f 33       		.uleb128 0x33
 32984 2520 CF0B0000 		.4byte	.LASF376
 32985 2524 08       		.byte	0x8
 32986 2525 2702     		.2byte	0x227
 32987 2527 440B0000 		.4byte	0xb44
 32988 252b 33       		.uleb128 0x33
 32989 252c 920A0000 		.4byte	.LASF377
 32990 2530 08       		.byte	0x8
 32991 2531 2802     		.2byte	0x228
 32992 2533 F50C0000 		.4byte	0xcf5
 32993 2537 09       		.uleb128 0x9
 32994 2538 A3000000 		.4byte	0xa3
 32995 253c 47250000 		.4byte	0x2547
 32996 2540 0A       		.uleb128 0xa
 32997 2541 18010000 		.4byte	0x118
 32998 2545 09       		.byte	0x9
 32999 2546 00       		.byte	0
 33000 2547 34       		.uleb128 0x34
 33001 2548 494400   		.ascii	"ID\000"
 33002 254b 08       		.byte	0x8
 33003 254c 2D02     		.2byte	0x22d
 33004 254e 37250000 		.4byte	0x2537
 33005 2552 33       		.uleb128 0x33
 33006 2553 46030000 		.4byte	.LASF378
 33007 2557 08       		.byte	0x8
 33008 2558 2E02     		.2byte	0x22e
 33009 255a 37250000 		.4byte	0x2537
 33010 255e 33       		.uleb128 0x33
 33011 255f BF000000 		.4byte	.LASF379
 33012 2563 08       		.byte	0x8
 33013 2564 2F02     		.2byte	0x22f
 33014 2566 A3000000 		.4byte	0xa3
 33015 256a 33       		.uleb128 0x33
 33016 256b BA0C0000 		.4byte	.LASF380
 33017 256f 08       		.byte	0x8
 33018 2570 3002     		.2byte	0x230
 33019 2572 A3000000 		.4byte	0xa3
 33020 2576 33       		.uleb128 0x33
 33021 2577 49160000 		.4byte	.LASF381
 33022 257b 08       		.byte	0x8
 33023 257c 3102     		.2byte	0x231
 33024 257e A3000000 		.4byte	0xa3
 33025 2582 33       		.uleb128 0x33
 33026 2583 700F0000 		.4byte	.LASF382
 33027 2587 08       		.byte	0x8
 33028 2588 3302     		.2byte	0x233
 33029 258a 37250000 		.4byte	0x2537
 33030 258e 09       		.uleb128 0x9
 33031 258f EB000000 		.4byte	0xeb
 33032 2593 9E250000 		.4byte	0x259e
 33033 2597 0A       		.uleb128 0xa
 33034 2598 18010000 		.4byte	0x118
 33035 259c 09       		.byte	0x9
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 707


 33036 259d 00       		.byte	0
 33037 259e 33       		.uleb128 0x33
 33038 259f 2F100000 		.4byte	.LASF383
 33039 25a3 08       		.byte	0x8
 33040 25a4 3402     		.2byte	0x234
 33041 25a6 8E250000 		.4byte	0x258e
 33042 25aa 33       		.uleb128 0x33
 33043 25ab A20F0000 		.4byte	.LASF384
 33044 25af 08       		.byte	0x8
 33045 25b0 3602     		.2byte	0x236
 33046 25b2 17040000 		.4byte	0x417
 33047 25b6 33       		.uleb128 0x33
 33048 25b7 2C140000 		.4byte	.LASF385
 33049 25bb 08       		.byte	0x8
 33050 25bc 3702     		.2byte	0x237
 33051 25be A1080000 		.4byte	0x8a1
 33052 25c2 33       		.uleb128 0x33
 33053 25c3 B5130000 		.4byte	.LASF386
 33054 25c7 08       		.byte	0x8
 33055 25c8 3A02     		.2byte	0x23a
 33056 25ca 17040000 		.4byte	0x417
 33057 25ce 33       		.uleb128 0x33
 33058 25cf 620B0000 		.4byte	.LASF387
 33059 25d3 08       		.byte	0x8
 33060 25d4 4402     		.2byte	0x244
 33061 25d6 B1080000 		.4byte	0x8b1
 33062 25da 33       		.uleb128 0x33
 33063 25db F9040000 		.4byte	.LASF388
 33064 25df 08       		.byte	0x8
 33065 25e0 4602     		.2byte	0x246
 33066 25e2 97000000 		.4byte	0x97
 33067 25e6 33       		.uleb128 0x33
 33068 25e7 E70A0000 		.4byte	.LASF389
 33069 25eb 08       		.byte	0x8
 33070 25ec 4D02     		.2byte	0x24d
 33071 25ee 97000000 		.4byte	0x97
 33072 25f2 33       		.uleb128 0x33
 33073 25f3 1B080000 		.4byte	.LASF390
 33074 25f7 08       		.byte	0x8
 33075 25f8 4E02     		.2byte	0x24e
 33076 25fa 97000000 		.4byte	0x97
 33077 25fe 09       		.uleb128 0x9
 33078 25ff C7000000 		.4byte	0xc7
 33079 2603 0E260000 		.4byte	0x260e
 33080 2607 0A       		.uleb128 0xa
 33081 2608 18010000 		.4byte	0x118
 33082 260c 0B       		.byte	0xb
 33083 260d 00       		.byte	0
 33084 260e 33       		.uleb128 0x33
 33085 260f F1040000 		.4byte	.LASF391
 33086 2613 08       		.byte	0x8
 33087 2614 5102     		.2byte	0x251
 33088 2616 FE250000 		.4byte	0x25fe
 33089 261a 33       		.uleb128 0x33
 33090 261b 71150000 		.4byte	.LASF392
 33091 261f 08       		.byte	0x8
 33092 2620 5202     		.2byte	0x252
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 708


 33093 2622 97000000 		.4byte	0x97
 33094 2626 09       		.uleb128 0x9
 33095 2627 AF000000 		.4byte	0xaf
 33096 262b 3C260000 		.4byte	0x263c
 33097 262f 0A       		.uleb128 0xa
 33098 2630 18010000 		.4byte	0x118
 33099 2634 01       		.byte	0x1
 33100 2635 0A       		.uleb128 0xa
 33101 2636 18010000 		.4byte	0x118
 33102 263a 04       		.byte	0x4
 33103 263b 00       		.byte	0
 33104 263c 33       		.uleb128 0x33
 33105 263d 5A070000 		.4byte	.LASF393
 33106 2641 08       		.byte	0x8
 33107 2642 5802     		.2byte	0x258
 33108 2644 26260000 		.4byte	0x2626
 33109 2648 33       		.uleb128 0x33
 33110 2649 99100000 		.4byte	.LASF394
 33111 264d 08       		.byte	0x8
 33112 264e 5902     		.2byte	0x259
 33113 2650 B1080000 		.4byte	0x8b1
 33114 2654 09       		.uleb128 0x9
 33115 2655 A3000000 		.4byte	0xa3
 33116 2659 6A260000 		.4byte	0x266a
 33117 265d 0A       		.uleb128 0xa
 33118 265e 18010000 		.4byte	0x118
 33119 2662 01       		.byte	0x1
 33120 2663 0A       		.uleb128 0xa
 33121 2664 18010000 		.4byte	0x118
 33122 2668 04       		.byte	0x4
 33123 2669 00       		.byte	0
 33124 266a 33       		.uleb128 0x33
 33125 266b 55140000 		.4byte	.LASF395
 33126 266f 08       		.byte	0x8
 33127 2670 5A02     		.2byte	0x25a
 33128 2672 54260000 		.4byte	0x2654
 33129 2676 09       		.uleb128 0x9
 33130 2677 97000000 		.4byte	0x97
 33131 267b 8C260000 		.4byte	0x268c
 33132 267f 0A       		.uleb128 0xa
 33133 2680 18010000 		.4byte	0x118
 33134 2684 01       		.byte	0x1
 33135 2685 0A       		.uleb128 0xa
 33136 2686 18010000 		.4byte	0x118
 33137 268a 04       		.byte	0x4
 33138 268b 00       		.byte	0
 33139 268c 33       		.uleb128 0x33
 33140 268d 33070000 		.4byte	.LASF396
 33141 2691 08       		.byte	0x8
 33142 2692 5B02     		.2byte	0x25b
 33143 2694 76260000 		.4byte	0x2676
 33144 2698 33       		.uleb128 0x33
 33145 2699 8F060000 		.4byte	.LASF397
 33146 269d 08       		.byte	0x8
 33147 269e 6202     		.2byte	0x262
 33148 26a0 22030000 		.4byte	0x322
 33149 26a4 33       		.uleb128 0x33
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 709


 33150 26a5 28100000 		.4byte	.LASF398
 33151 26a9 08       		.byte	0x8
 33152 26aa 6302     		.2byte	0x263
 33153 26ac C4160000 		.4byte	0x16c4
 33154 26b0 33       		.uleb128 0x33
 33155 26b1 29040000 		.4byte	.LASF399
 33156 26b5 08       		.byte	0x8
 33157 26b6 6402     		.2byte	0x264
 33158 26b8 C4160000 		.4byte	0x16c4
 33159 26bc 33       		.uleb128 0x33
 33160 26bd F5140000 		.4byte	.LASF400
 33161 26c1 08       		.byte	0x8
 33162 26c2 6702     		.2byte	0x267
 33163 26c4 C4160000 		.4byte	0x16c4
 33164 26c8 33       		.uleb128 0x33
 33165 26c9 D3120000 		.4byte	.LASF401
 33166 26cd 08       		.byte	0x8
 33167 26ce 6A02     		.2byte	0x26a
 33168 26d0 97000000 		.4byte	0x97
 33169 26d4 33       		.uleb128 0x33
 33170 26d5 92140000 		.4byte	.LASF402
 33171 26d9 08       		.byte	0x8
 33172 26da 6B02     		.2byte	0x26b
 33173 26dc 22080000 		.4byte	0x822
 33174 26e0 33       		.uleb128 0x33
 33175 26e1 86130000 		.4byte	.LASF403
 33176 26e5 08       		.byte	0x8
 33177 26e6 6C02     		.2byte	0x26c
 33178 26e8 73000000 		.4byte	0x73
 33179 26ec 09       		.uleb128 0x9
 33180 26ed 73000000 		.4byte	0x73
 33181 26f1 FC260000 		.4byte	0x26fc
 33182 26f5 0A       		.uleb128 0xa
 33183 26f6 18010000 		.4byte	0x118
 33184 26fa 04       		.byte	0x4
 33185 26fb 00       		.byte	0
 33186 26fc 33       		.uleb128 0x33
 33187 26fd 3A0D0000 		.4byte	.LASF404
 33188 2701 08       		.byte	0x8
 33189 2702 6D02     		.2byte	0x26d
 33190 2704 EC260000 		.4byte	0x26ec
 33191 2708 09       		.uleb128 0x9
 33192 2709 790C0000 		.4byte	0xc79
 33193 270d 18270000 		.4byte	0x2718
 33194 2711 0A       		.uleb128 0xa
 33195 2712 18010000 		.4byte	0x118
 33196 2716 04       		.byte	0x4
 33197 2717 00       		.byte	0
 33198 2718 33       		.uleb128 0x33
 33199 2719 CD050000 		.4byte	.LASF405
 33200 271d 08       		.byte	0x8
 33201 271e 6E02     		.2byte	0x26e
 33202 2720 08270000 		.4byte	0x2708
 33203 2724 09       		.uleb128 0x9
 33204 2725 97000000 		.4byte	0x97
 33205 2729 3A270000 		.4byte	0x273a
 33206 272d 0A       		.uleb128 0xa
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 710


 33207 272e 18010000 		.4byte	0x118
 33208 2732 04       		.byte	0x4
 33209 2733 0A       		.uleb128 0xa
 33210 2734 18010000 		.4byte	0x118
 33211 2738 02       		.byte	0x2
 33212 2739 00       		.byte	0
 33213 273a 33       		.uleb128 0x33
 33214 273b 390C0000 		.4byte	.LASF406
 33215 273f 08       		.byte	0x8
 33216 2740 7202     		.2byte	0x272
 33217 2742 24270000 		.4byte	0x2724
 33218 2746 33       		.uleb128 0x33
 33219 2747 97150000 		.4byte	.LASF407
 33220 274b 08       		.byte	0x8
 33221 274c 7702     		.2byte	0x277
 33222 274e 97000000 		.4byte	0x97
 33223 2752 09       		.uleb128 0x9
 33224 2753 A3000000 		.4byte	0xa3
 33225 2757 69270000 		.4byte	0x2769
 33226 275b 24       		.uleb128 0x24
 33227 275c 18010000 		.4byte	0x118
 33228 2760 5702     		.2byte	0x257
 33229 2762 0A       		.uleb128 0xa
 33230 2763 18010000 		.4byte	0x118
 33231 2767 01       		.byte	0x1
 33232 2768 00       		.byte	0
 33233 2769 33       		.uleb128 0x33
 33234 276a 56130000 		.4byte	.LASF408
 33235 276e 08       		.byte	0x8
 33236 276f 7A02     		.2byte	0x27a
 33237 2771 52270000 		.4byte	0x2752
 33238 2775 33       		.uleb128 0x33
 33239 2776 440B0000 		.4byte	.LASF409
 33240 277a 08       		.byte	0x8
 33241 277b 7B02     		.2byte	0x27b
 33242 277d AF000000 		.4byte	0xaf
 33243 2781 35       		.uleb128 0x35
 33244 2782 62130000 		.4byte	.LASF410
 33245 2786 01       		.byte	0x1
 33246 2787 34       		.byte	0x34
 33247 2788 92270000 		.4byte	0x2792
 33248 278c 05       		.uleb128 0x5
 33249 278d 03       		.byte	0x3
 33250 278e 00000000 		.4byte	EEPROM_ADDR
 33251 2792 07       		.uleb128 0x7
 33252 2793 04       		.byte	0x4
 33253 2794 00010000 		.4byte	0x100
 33254 2798 00       		.byte	0
 33255              		.section	.debug_abbrev,"",%progbits
 33256              	.Ldebug_abbrev0:
 33257 0000 01       		.uleb128 0x1
 33258 0001 11       		.uleb128 0x11
 33259 0002 01       		.byte	0x1
 33260 0003 25       		.uleb128 0x25
 33261 0004 0E       		.uleb128 0xe
 33262 0005 13       		.uleb128 0x13
 33263 0006 0B       		.uleb128 0xb
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 711


 33264 0007 03       		.uleb128 0x3
 33265 0008 0E       		.uleb128 0xe
 33266 0009 1B       		.uleb128 0x1b
 33267 000a 0E       		.uleb128 0xe
 33268 000b 55       		.uleb128 0x55
 33269 000c 17       		.uleb128 0x17
 33270 000d 11       		.uleb128 0x11
 33271 000e 01       		.uleb128 0x1
 33272 000f 10       		.uleb128 0x10
 33273 0010 17       		.uleb128 0x17
 33274 0011 00       		.byte	0
 33275 0012 00       		.byte	0
 33276 0013 02       		.uleb128 0x2
 33277 0014 24       		.uleb128 0x24
 33278 0015 00       		.byte	0
 33279 0016 0B       		.uleb128 0xb
 33280 0017 0B       		.uleb128 0xb
 33281 0018 3E       		.uleb128 0x3e
 33282 0019 0B       		.uleb128 0xb
 33283 001a 03       		.uleb128 0x3
 33284 001b 0E       		.uleb128 0xe
 33285 001c 00       		.byte	0
 33286 001d 00       		.byte	0
 33287 001e 03       		.uleb128 0x3
 33288 001f 16       		.uleb128 0x16
 33289 0020 00       		.byte	0
 33290 0021 03       		.uleb128 0x3
 33291 0022 0E       		.uleb128 0xe
 33292 0023 3A       		.uleb128 0x3a
 33293 0024 0B       		.uleb128 0xb
 33294 0025 3B       		.uleb128 0x3b
 33295 0026 0B       		.uleb128 0xb
 33296 0027 49       		.uleb128 0x49
 33297 0028 13       		.uleb128 0x13
 33298 0029 00       		.byte	0
 33299 002a 00       		.byte	0
 33300 002b 04       		.uleb128 0x4
 33301 002c 24       		.uleb128 0x24
 33302 002d 00       		.byte	0
 33303 002e 0B       		.uleb128 0xb
 33304 002f 0B       		.uleb128 0xb
 33305 0030 3E       		.uleb128 0x3e
 33306 0031 0B       		.uleb128 0xb
 33307 0032 03       		.uleb128 0x3
 33308 0033 08       		.uleb128 0x8
 33309 0034 00       		.byte	0
 33310 0035 00       		.byte	0
 33311 0036 05       		.uleb128 0x5
 33312 0037 16       		.uleb128 0x16
 33313 0038 00       		.byte	0
 33314 0039 03       		.uleb128 0x3
 33315 003a 0E       		.uleb128 0xe
 33316 003b 3A       		.uleb128 0x3a
 33317 003c 0B       		.uleb128 0xb
 33318 003d 3B       		.uleb128 0x3b
 33319 003e 05       		.uleb128 0x5
 33320 003f 49       		.uleb128 0x49
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 712


 33321 0040 13       		.uleb128 0x13
 33322 0041 00       		.byte	0
 33323 0042 00       		.byte	0
 33324 0043 06       		.uleb128 0x6
 33325 0044 35       		.uleb128 0x35
 33326 0045 00       		.byte	0
 33327 0046 49       		.uleb128 0x49
 33328 0047 13       		.uleb128 0x13
 33329 0048 00       		.byte	0
 33330 0049 00       		.byte	0
 33331 004a 07       		.uleb128 0x7
 33332 004b 0F       		.uleb128 0xf
 33333 004c 00       		.byte	0
 33334 004d 0B       		.uleb128 0xb
 33335 004e 0B       		.uleb128 0xb
 33336 004f 49       		.uleb128 0x49
 33337 0050 13       		.uleb128 0x13
 33338 0051 00       		.byte	0
 33339 0052 00       		.byte	0
 33340 0053 08       		.uleb128 0x8
 33341 0054 26       		.uleb128 0x26
 33342 0055 00       		.byte	0
 33343 0056 49       		.uleb128 0x49
 33344 0057 13       		.uleb128 0x13
 33345 0058 00       		.byte	0
 33346 0059 00       		.byte	0
 33347 005a 09       		.uleb128 0x9
 33348 005b 01       		.uleb128 0x1
 33349 005c 01       		.byte	0x1
 33350 005d 49       		.uleb128 0x49
 33351 005e 13       		.uleb128 0x13
 33352 005f 01       		.uleb128 0x1
 33353 0060 13       		.uleb128 0x13
 33354 0061 00       		.byte	0
 33355 0062 00       		.byte	0
 33356 0063 0A       		.uleb128 0xa
 33357 0064 21       		.uleb128 0x21
 33358 0065 00       		.byte	0
 33359 0066 49       		.uleb128 0x49
 33360 0067 13       		.uleb128 0x13
 33361 0068 2F       		.uleb128 0x2f
 33362 0069 0B       		.uleb128 0xb
 33363 006a 00       		.byte	0
 33364 006b 00       		.byte	0
 33365 006c 0B       		.uleb128 0xb
 33366 006d 04       		.uleb128 0x4
 33367 006e 01       		.byte	0x1
 33368 006f 03       		.uleb128 0x3
 33369 0070 0E       		.uleb128 0xe
 33370 0071 0B       		.uleb128 0xb
 33371 0072 0B       		.uleb128 0xb
 33372 0073 49       		.uleb128 0x49
 33373 0074 13       		.uleb128 0x13
 33374 0075 3A       		.uleb128 0x3a
 33375 0076 0B       		.uleb128 0xb
 33376 0077 3B       		.uleb128 0x3b
 33377 0078 0B       		.uleb128 0xb
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 713


 33378 0079 01       		.uleb128 0x1
 33379 007a 13       		.uleb128 0x13
 33380 007b 00       		.byte	0
 33381 007c 00       		.byte	0
 33382 007d 0C       		.uleb128 0xc
 33383 007e 28       		.uleb128 0x28
 33384 007f 00       		.byte	0
 33385 0080 03       		.uleb128 0x3
 33386 0081 0E       		.uleb128 0xe
 33387 0082 1C       		.uleb128 0x1c
 33388 0083 0B       		.uleb128 0xb
 33389 0084 00       		.byte	0
 33390 0085 00       		.byte	0
 33391 0086 0D       		.uleb128 0xd
 33392 0087 13       		.uleb128 0x13
 33393 0088 00       		.byte	0
 33394 0089 03       		.uleb128 0x3
 33395 008a 0E       		.uleb128 0xe
 33396 008b 3C       		.uleb128 0x3c
 33397 008c 19       		.uleb128 0x19
 33398 008d 00       		.byte	0
 33399 008e 00       		.byte	0
 33400 008f 0E       		.uleb128 0xe
 33401 0090 13       		.uleb128 0x13
 33402 0091 01       		.byte	0x1
 33403 0092 03       		.uleb128 0x3
 33404 0093 0E       		.uleb128 0xe
 33405 0094 0B       		.uleb128 0xb
 33406 0095 0B       		.uleb128 0xb
 33407 0096 3A       		.uleb128 0x3a
 33408 0097 0B       		.uleb128 0xb
 33409 0098 3B       		.uleb128 0x3b
 33410 0099 0B       		.uleb128 0xb
 33411 009a 01       		.uleb128 0x1
 33412 009b 13       		.uleb128 0x13
 33413 009c 00       		.byte	0
 33414 009d 00       		.byte	0
 33415 009e 0F       		.uleb128 0xf
 33416 009f 0D       		.uleb128 0xd
 33417 00a0 00       		.byte	0
 33418 00a1 03       		.uleb128 0x3
 33419 00a2 08       		.uleb128 0x8
 33420 00a3 3A       		.uleb128 0x3a
 33421 00a4 0B       		.uleb128 0xb
 33422 00a5 3B       		.uleb128 0x3b
 33423 00a6 0B       		.uleb128 0xb
 33424 00a7 49       		.uleb128 0x49
 33425 00a8 13       		.uleb128 0x13
 33426 00a9 38       		.uleb128 0x38
 33427 00aa 0B       		.uleb128 0xb
 33428 00ab 00       		.byte	0
 33429 00ac 00       		.byte	0
 33430 00ad 10       		.uleb128 0x10
 33431 00ae 0D       		.uleb128 0xd
 33432 00af 00       		.byte	0
 33433 00b0 03       		.uleb128 0x3
 33434 00b1 0E       		.uleb128 0xe
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 714


 33435 00b2 3A       		.uleb128 0x3a
 33436 00b3 0B       		.uleb128 0xb
 33437 00b4 3B       		.uleb128 0x3b
 33438 00b5 0B       		.uleb128 0xb
 33439 00b6 49       		.uleb128 0x49
 33440 00b7 13       		.uleb128 0x13
 33441 00b8 38       		.uleb128 0x38
 33442 00b9 0B       		.uleb128 0xb
 33443 00ba 00       		.byte	0
 33444 00bb 00       		.byte	0
 33445 00bc 11       		.uleb128 0x11
 33446 00bd 13       		.uleb128 0x13
 33447 00be 01       		.byte	0x1
 33448 00bf 03       		.uleb128 0x3
 33449 00c0 0E       		.uleb128 0xe
 33450 00c1 0B       		.uleb128 0xb
 33451 00c2 0B       		.uleb128 0xb
 33452 00c3 3A       		.uleb128 0x3a
 33453 00c4 0B       		.uleb128 0xb
 33454 00c5 3B       		.uleb128 0x3b
 33455 00c6 05       		.uleb128 0x5
 33456 00c7 01       		.uleb128 0x1
 33457 00c8 13       		.uleb128 0x13
 33458 00c9 00       		.byte	0
 33459 00ca 00       		.byte	0
 33460 00cb 12       		.uleb128 0x12
 33461 00cc 0D       		.uleb128 0xd
 33462 00cd 00       		.byte	0
 33463 00ce 03       		.uleb128 0x3
 33464 00cf 0E       		.uleb128 0xe
 33465 00d0 3A       		.uleb128 0x3a
 33466 00d1 0B       		.uleb128 0xb
 33467 00d2 3B       		.uleb128 0x3b
 33468 00d3 05       		.uleb128 0x5
 33469 00d4 49       		.uleb128 0x49
 33470 00d5 13       		.uleb128 0x13
 33471 00d6 38       		.uleb128 0x38
 33472 00d7 0B       		.uleb128 0xb
 33473 00d8 00       		.byte	0
 33474 00d9 00       		.byte	0
 33475 00da 13       		.uleb128 0x13
 33476 00db 0D       		.uleb128 0xd
 33477 00dc 00       		.byte	0
 33478 00dd 03       		.uleb128 0x3
 33479 00de 08       		.uleb128 0x8
 33480 00df 3A       		.uleb128 0x3a
 33481 00e0 0B       		.uleb128 0xb
 33482 00e1 3B       		.uleb128 0x3b
 33483 00e2 05       		.uleb128 0x5
 33484 00e3 49       		.uleb128 0x49
 33485 00e4 13       		.uleb128 0x13
 33486 00e5 38       		.uleb128 0x38
 33487 00e6 0B       		.uleb128 0xb
 33488 00e7 00       		.byte	0
 33489 00e8 00       		.byte	0
 33490 00e9 14       		.uleb128 0x14
 33491 00ea 13       		.uleb128 0x13
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 715


 33492 00eb 01       		.byte	0x1
 33493 00ec 03       		.uleb128 0x3
 33494 00ed 0E       		.uleb128 0xe
 33495 00ee 0B       		.uleb128 0xb
 33496 00ef 05       		.uleb128 0x5
 33497 00f0 3A       		.uleb128 0x3a
 33498 00f1 0B       		.uleb128 0xb
 33499 00f2 3B       		.uleb128 0x3b
 33500 00f3 05       		.uleb128 0x5
 33501 00f4 01       		.uleb128 0x1
 33502 00f5 13       		.uleb128 0x13
 33503 00f6 00       		.byte	0
 33504 00f7 00       		.byte	0
 33505 00f8 15       		.uleb128 0x15
 33506 00f9 0D       		.uleb128 0xd
 33507 00fa 00       		.byte	0
 33508 00fb 03       		.uleb128 0x3
 33509 00fc 08       		.uleb128 0x8
 33510 00fd 3A       		.uleb128 0x3a
 33511 00fe 0B       		.uleb128 0xb
 33512 00ff 3B       		.uleb128 0x3b
 33513 0100 05       		.uleb128 0x5
 33514 0101 49       		.uleb128 0x49
 33515 0102 13       		.uleb128 0x13
 33516 0103 38       		.uleb128 0x38
 33517 0104 05       		.uleb128 0x5
 33518 0105 00       		.byte	0
 33519 0106 00       		.byte	0
 33520 0107 16       		.uleb128 0x16
 33521 0108 0D       		.uleb128 0xd
 33522 0109 00       		.byte	0
 33523 010a 03       		.uleb128 0x3
 33524 010b 0E       		.uleb128 0xe
 33525 010c 3A       		.uleb128 0x3a
 33526 010d 0B       		.uleb128 0xb
 33527 010e 3B       		.uleb128 0x3b
 33528 010f 05       		.uleb128 0x5
 33529 0110 49       		.uleb128 0x49
 33530 0111 13       		.uleb128 0x13
 33531 0112 38       		.uleb128 0x38
 33532 0113 05       		.uleb128 0x5
 33533 0114 00       		.byte	0
 33534 0115 00       		.byte	0
 33535 0116 17       		.uleb128 0x17
 33536 0117 2E       		.uleb128 0x2e
 33537 0118 01       		.byte	0x1
 33538 0119 03       		.uleb128 0x3
 33539 011a 0E       		.uleb128 0xe
 33540 011b 3A       		.uleb128 0x3a
 33541 011c 0B       		.uleb128 0xb
 33542 011d 3B       		.uleb128 0x3b
 33543 011e 05       		.uleb128 0x5
 33544 011f 27       		.uleb128 0x27
 33545 0120 19       		.uleb128 0x19
 33546 0121 49       		.uleb128 0x49
 33547 0122 13       		.uleb128 0x13
 33548 0123 20       		.uleb128 0x20
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 716


 33549 0124 0B       		.uleb128 0xb
 33550 0125 01       		.uleb128 0x1
 33551 0126 13       		.uleb128 0x13
 33552 0127 00       		.byte	0
 33553 0128 00       		.byte	0
 33554 0129 18       		.uleb128 0x18
 33555 012a 05       		.uleb128 0x5
 33556 012b 00       		.byte	0
 33557 012c 03       		.uleb128 0x3
 33558 012d 0E       		.uleb128 0xe
 33559 012e 3A       		.uleb128 0x3a
 33560 012f 0B       		.uleb128 0xb
 33561 0130 3B       		.uleb128 0x3b
 33562 0131 05       		.uleb128 0x5
 33563 0132 49       		.uleb128 0x49
 33564 0133 13       		.uleb128 0x13
 33565 0134 00       		.byte	0
 33566 0135 00       		.byte	0
 33567 0136 19       		.uleb128 0x19
 33568 0137 34       		.uleb128 0x34
 33569 0138 00       		.byte	0
 33570 0139 03       		.uleb128 0x3
 33571 013a 0E       		.uleb128 0xe
 33572 013b 3A       		.uleb128 0x3a
 33573 013c 0B       		.uleb128 0xb
 33574 013d 3B       		.uleb128 0x3b
 33575 013e 05       		.uleb128 0x5
 33576 013f 49       		.uleb128 0x49
 33577 0140 13       		.uleb128 0x13
 33578 0141 00       		.byte	0
 33579 0142 00       		.byte	0
 33580 0143 1A       		.uleb128 0x1a
 33581 0144 2E       		.uleb128 0x2e
 33582 0145 01       		.byte	0x1
 33583 0146 3F       		.uleb128 0x3f
 33584 0147 19       		.uleb128 0x19
 33585 0148 03       		.uleb128 0x3
 33586 0149 0E       		.uleb128 0xe
 33587 014a 3A       		.uleb128 0x3a
 33588 014b 0B       		.uleb128 0xb
 33589 014c 3B       		.uleb128 0x3b
 33590 014d 0B       		.uleb128 0xb
 33591 014e 27       		.uleb128 0x27
 33592 014f 19       		.uleb128 0x19
 33593 0150 11       		.uleb128 0x11
 33594 0151 01       		.uleb128 0x1
 33595 0152 12       		.uleb128 0x12
 33596 0153 06       		.uleb128 0x6
 33597 0154 40       		.uleb128 0x40
 33598 0155 18       		.uleb128 0x18
 33599 0156 9642     		.uleb128 0x2116
 33600 0158 19       		.uleb128 0x19
 33601 0159 01       		.uleb128 0x1
 33602 015a 13       		.uleb128 0x13
 33603 015b 00       		.byte	0
 33604 015c 00       		.byte	0
 33605 015d 1B       		.uleb128 0x1b
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 717


 33606 015e 34       		.uleb128 0x34
 33607 015f 00       		.byte	0
 33608 0160 03       		.uleb128 0x3
 33609 0161 0E       		.uleb128 0xe
 33610 0162 3A       		.uleb128 0x3a
 33611 0163 0B       		.uleb128 0xb
 33612 0164 3B       		.uleb128 0x3b
 33613 0165 0B       		.uleb128 0xb
 33614 0166 49       		.uleb128 0x49
 33615 0167 13       		.uleb128 0x13
 33616 0168 02       		.uleb128 0x2
 33617 0169 18       		.uleb128 0x18
 33618 016a 00       		.byte	0
 33619 016b 00       		.byte	0
 33620 016c 1C       		.uleb128 0x1c
 33621 016d 1D       		.uleb128 0x1d
 33622 016e 01       		.byte	0x1
 33623 016f 31       		.uleb128 0x31
 33624 0170 13       		.uleb128 0x13
 33625 0171 11       		.uleb128 0x11
 33626 0172 01       		.uleb128 0x1
 33627 0173 12       		.uleb128 0x12
 33628 0174 06       		.uleb128 0x6
 33629 0175 58       		.uleb128 0x58
 33630 0176 0B       		.uleb128 0xb
 33631 0177 59       		.uleb128 0x59
 33632 0178 0B       		.uleb128 0xb
 33633 0179 01       		.uleb128 0x1
 33634 017a 13       		.uleb128 0x13
 33635 017b 00       		.byte	0
 33636 017c 00       		.byte	0
 33637 017d 1D       		.uleb128 0x1d
 33638 017e 05       		.uleb128 0x5
 33639 017f 00       		.byte	0
 33640 0180 31       		.uleb128 0x31
 33641 0181 13       		.uleb128 0x13
 33642 0182 02       		.uleb128 0x2
 33643 0183 18       		.uleb128 0x18
 33644 0184 00       		.byte	0
 33645 0185 00       		.byte	0
 33646 0186 1E       		.uleb128 0x1e
 33647 0187 0B       		.uleb128 0xb
 33648 0188 01       		.byte	0x1
 33649 0189 11       		.uleb128 0x11
 33650 018a 01       		.uleb128 0x1
 33651 018b 12       		.uleb128 0x12
 33652 018c 06       		.uleb128 0x6
 33653 018d 00       		.byte	0
 33654 018e 00       		.byte	0
 33655 018f 1F       		.uleb128 0x1f
 33656 0190 34       		.uleb128 0x34
 33657 0191 00       		.byte	0
 33658 0192 31       		.uleb128 0x31
 33659 0193 13       		.uleb128 0x13
 33660 0194 02       		.uleb128 0x2
 33661 0195 18       		.uleb128 0x18
 33662 0196 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 718


 33663 0197 00       		.byte	0
 33664 0198 20       		.uleb128 0x20
 33665 0199 1D       		.uleb128 0x1d
 33666 019a 01       		.byte	0x1
 33667 019b 31       		.uleb128 0x31
 33668 019c 13       		.uleb128 0x13
 33669 019d 11       		.uleb128 0x11
 33670 019e 01       		.uleb128 0x1
 33671 019f 12       		.uleb128 0x12
 33672 01a0 06       		.uleb128 0x6
 33673 01a1 58       		.uleb128 0x58
 33674 01a2 0B       		.uleb128 0xb
 33675 01a3 59       		.uleb128 0x59
 33676 01a4 05       		.uleb128 0x5
 33677 01a5 01       		.uleb128 0x1
 33678 01a6 13       		.uleb128 0x13
 33679 01a7 00       		.byte	0
 33680 01a8 00       		.byte	0
 33681 01a9 21       		.uleb128 0x21
 33682 01aa 1D       		.uleb128 0x1d
 33683 01ab 01       		.byte	0x1
 33684 01ac 31       		.uleb128 0x31
 33685 01ad 13       		.uleb128 0x13
 33686 01ae 11       		.uleb128 0x11
 33687 01af 01       		.uleb128 0x1
 33688 01b0 12       		.uleb128 0x12
 33689 01b1 06       		.uleb128 0x6
 33690 01b2 58       		.uleb128 0x58
 33691 01b3 0B       		.uleb128 0xb
 33692 01b4 59       		.uleb128 0x59
 33693 01b5 05       		.uleb128 0x5
 33694 01b6 00       		.byte	0
 33695 01b7 00       		.byte	0
 33696 01b8 22       		.uleb128 0x22
 33697 01b9 2E       		.uleb128 0x2e
 33698 01ba 01       		.byte	0x1
 33699 01bb 3F       		.uleb128 0x3f
 33700 01bc 19       		.uleb128 0x19
 33701 01bd 03       		.uleb128 0x3
 33702 01be 0E       		.uleb128 0xe
 33703 01bf 3A       		.uleb128 0x3a
 33704 01c0 0B       		.uleb128 0xb
 33705 01c1 3B       		.uleb128 0x3b
 33706 01c2 05       		.uleb128 0x5
 33707 01c3 27       		.uleb128 0x27
 33708 01c4 19       		.uleb128 0x19
 33709 01c5 11       		.uleb128 0x11
 33710 01c6 01       		.uleb128 0x1
 33711 01c7 12       		.uleb128 0x12
 33712 01c8 06       		.uleb128 0x6
 33713 01c9 40       		.uleb128 0x40
 33714 01ca 18       		.uleb128 0x18
 33715 01cb 9642     		.uleb128 0x2116
 33716 01cd 19       		.uleb128 0x19
 33717 01ce 01       		.uleb128 0x1
 33718 01cf 13       		.uleb128 0x13
 33719 01d0 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 719


 33720 01d1 00       		.byte	0
 33721 01d2 23       		.uleb128 0x23
 33722 01d3 34       		.uleb128 0x34
 33723 01d4 00       		.byte	0
 33724 01d5 03       		.uleb128 0x3
 33725 01d6 0E       		.uleb128 0xe
 33726 01d7 3A       		.uleb128 0x3a
 33727 01d8 0B       		.uleb128 0xb
 33728 01d9 3B       		.uleb128 0x3b
 33729 01da 05       		.uleb128 0x5
 33730 01db 49       		.uleb128 0x49
 33731 01dc 13       		.uleb128 0x13
 33732 01dd 02       		.uleb128 0x2
 33733 01de 18       		.uleb128 0x18
 33734 01df 00       		.byte	0
 33735 01e0 00       		.byte	0
 33736 01e1 24       		.uleb128 0x24
 33737 01e2 21       		.uleb128 0x21
 33738 01e3 00       		.byte	0
 33739 01e4 49       		.uleb128 0x49
 33740 01e5 13       		.uleb128 0x13
 33741 01e6 2F       		.uleb128 0x2f
 33742 01e7 05       		.uleb128 0x5
 33743 01e8 00       		.byte	0
 33744 01e9 00       		.byte	0
 33745 01ea 25       		.uleb128 0x25
 33746 01eb 05       		.uleb128 0x5
 33747 01ec 00       		.byte	0
 33748 01ed 03       		.uleb128 0x3
 33749 01ee 0E       		.uleb128 0xe
 33750 01ef 3A       		.uleb128 0x3a
 33751 01f0 0B       		.uleb128 0xb
 33752 01f1 3B       		.uleb128 0x3b
 33753 01f2 05       		.uleb128 0x5
 33754 01f3 49       		.uleb128 0x49
 33755 01f4 13       		.uleb128 0x13
 33756 01f5 02       		.uleb128 0x2
 33757 01f6 18       		.uleb128 0x18
 33758 01f7 00       		.byte	0
 33759 01f8 00       		.byte	0
 33760 01f9 26       		.uleb128 0x26
 33761 01fa 34       		.uleb128 0x34
 33762 01fb 00       		.byte	0
 33763 01fc 03       		.uleb128 0x3
 33764 01fd 08       		.uleb128 0x8
 33765 01fe 3A       		.uleb128 0x3a
 33766 01ff 0B       		.uleb128 0xb
 33767 0200 3B       		.uleb128 0x3b
 33768 0201 05       		.uleb128 0x5
 33769 0202 49       		.uleb128 0x49
 33770 0203 13       		.uleb128 0x13
 33771 0204 02       		.uleb128 0x2
 33772 0205 18       		.uleb128 0x18
 33773 0206 00       		.byte	0
 33774 0207 00       		.byte	0
 33775 0208 27       		.uleb128 0x27
 33776 0209 2E       		.uleb128 0x2e
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 720


 33777 020a 01       		.byte	0x1
 33778 020b 3F       		.uleb128 0x3f
 33779 020c 19       		.uleb128 0x19
 33780 020d 03       		.uleb128 0x3
 33781 020e 0E       		.uleb128 0xe
 33782 020f 3A       		.uleb128 0x3a
 33783 0210 0B       		.uleb128 0xb
 33784 0211 3B       		.uleb128 0x3b
 33785 0212 05       		.uleb128 0x5
 33786 0213 11       		.uleb128 0x11
 33787 0214 01       		.uleb128 0x1
 33788 0215 12       		.uleb128 0x12
 33789 0216 06       		.uleb128 0x6
 33790 0217 40       		.uleb128 0x40
 33791 0218 18       		.uleb128 0x18
 33792 0219 9642     		.uleb128 0x2116
 33793 021b 19       		.uleb128 0x19
 33794 021c 01       		.uleb128 0x1
 33795 021d 13       		.uleb128 0x13
 33796 021e 00       		.byte	0
 33797 021f 00       		.byte	0
 33798 0220 28       		.uleb128 0x28
 33799 0221 2E       		.uleb128 0x2e
 33800 0222 01       		.byte	0x1
 33801 0223 3F       		.uleb128 0x3f
 33802 0224 19       		.uleb128 0x19
 33803 0225 03       		.uleb128 0x3
 33804 0226 0E       		.uleb128 0xe
 33805 0227 3A       		.uleb128 0x3a
 33806 0228 0B       		.uleb128 0xb
 33807 0229 3B       		.uleb128 0x3b
 33808 022a 05       		.uleb128 0x5
 33809 022b 27       		.uleb128 0x27
 33810 022c 19       		.uleb128 0x19
 33811 022d 11       		.uleb128 0x11
 33812 022e 01       		.uleb128 0x1
 33813 022f 12       		.uleb128 0x12
 33814 0230 06       		.uleb128 0x6
 33815 0231 40       		.uleb128 0x40
 33816 0232 18       		.uleb128 0x18
 33817 0233 9742     		.uleb128 0x2117
 33818 0235 19       		.uleb128 0x19
 33819 0236 01       		.uleb128 0x1
 33820 0237 13       		.uleb128 0x13
 33821 0238 00       		.byte	0
 33822 0239 00       		.byte	0
 33823 023a 29       		.uleb128 0x29
 33824 023b 05       		.uleb128 0x5
 33825 023c 00       		.byte	0
 33826 023d 03       		.uleb128 0x3
 33827 023e 08       		.uleb128 0x8
 33828 023f 3A       		.uleb128 0x3a
 33829 0240 0B       		.uleb128 0xb
 33830 0241 3B       		.uleb128 0x3b
 33831 0242 05       		.uleb128 0x5
 33832 0243 49       		.uleb128 0x49
 33833 0244 13       		.uleb128 0x13
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 721


 33834 0245 02       		.uleb128 0x2
 33835 0246 18       		.uleb128 0x18
 33836 0247 00       		.byte	0
 33837 0248 00       		.byte	0
 33838 0249 2A       		.uleb128 0x2a
 33839 024a 2E       		.uleb128 0x2e
 33840 024b 01       		.byte	0x1
 33841 024c 3F       		.uleb128 0x3f
 33842 024d 19       		.uleb128 0x19
 33843 024e 03       		.uleb128 0x3
 33844 024f 0E       		.uleb128 0xe
 33845 0250 3A       		.uleb128 0x3a
 33846 0251 0B       		.uleb128 0xb
 33847 0252 3B       		.uleb128 0x3b
 33848 0253 05       		.uleb128 0x5
 33849 0254 27       		.uleb128 0x27
 33850 0255 19       		.uleb128 0x19
 33851 0256 49       		.uleb128 0x49
 33852 0257 13       		.uleb128 0x13
 33853 0258 11       		.uleb128 0x11
 33854 0259 01       		.uleb128 0x1
 33855 025a 12       		.uleb128 0x12
 33856 025b 06       		.uleb128 0x6
 33857 025c 40       		.uleb128 0x40
 33858 025d 18       		.uleb128 0x18
 33859 025e 9742     		.uleb128 0x2117
 33860 0260 19       		.uleb128 0x19
 33861 0261 01       		.uleb128 0x1
 33862 0262 13       		.uleb128 0x13
 33863 0263 00       		.byte	0
 33864 0264 00       		.byte	0
 33865 0265 2B       		.uleb128 0x2b
 33866 0266 2E       		.uleb128 0x2e
 33867 0267 01       		.byte	0x1
 33868 0268 3F       		.uleb128 0x3f
 33869 0269 19       		.uleb128 0x19
 33870 026a 03       		.uleb128 0x3
 33871 026b 0E       		.uleb128 0xe
 33872 026c 3A       		.uleb128 0x3a
 33873 026d 0B       		.uleb128 0xb
 33874 026e 3B       		.uleb128 0x3b
 33875 026f 05       		.uleb128 0x5
 33876 0270 27       		.uleb128 0x27
 33877 0271 19       		.uleb128 0x19
 33878 0272 49       		.uleb128 0x49
 33879 0273 13       		.uleb128 0x13
 33880 0274 11       		.uleb128 0x11
 33881 0275 01       		.uleb128 0x1
 33882 0276 12       		.uleb128 0x12
 33883 0277 06       		.uleb128 0x6
 33884 0278 40       		.uleb128 0x40
 33885 0279 18       		.uleb128 0x18
 33886 027a 9642     		.uleb128 0x2116
 33887 027c 19       		.uleb128 0x19
 33888 027d 01       		.uleb128 0x1
 33889 027e 13       		.uleb128 0x13
 33890 027f 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 722


 33891 0280 00       		.byte	0
 33892 0281 2C       		.uleb128 0x2c
 33893 0282 2E       		.uleb128 0x2e
 33894 0283 00       		.byte	0
 33895 0284 3F       		.uleb128 0x3f
 33896 0285 19       		.uleb128 0x19
 33897 0286 03       		.uleb128 0x3
 33898 0287 0E       		.uleb128 0xe
 33899 0288 3A       		.uleb128 0x3a
 33900 0289 0B       		.uleb128 0xb
 33901 028a 3B       		.uleb128 0x3b
 33902 028b 05       		.uleb128 0x5
 33903 028c 27       		.uleb128 0x27
 33904 028d 19       		.uleb128 0x19
 33905 028e 11       		.uleb128 0x11
 33906 028f 01       		.uleb128 0x1
 33907 0290 12       		.uleb128 0x12
 33908 0291 06       		.uleb128 0x6
 33909 0292 40       		.uleb128 0x40
 33910 0293 18       		.uleb128 0x18
 33911 0294 9742     		.uleb128 0x2117
 33912 0296 19       		.uleb128 0x19
 33913 0297 00       		.byte	0
 33914 0298 00       		.byte	0
 33915 0299 2D       		.uleb128 0x2d
 33916 029a 2E       		.uleb128 0x2e
 33917 029b 01       		.byte	0x1
 33918 029c 3F       		.uleb128 0x3f
 33919 029d 19       		.uleb128 0x19
 33920 029e 03       		.uleb128 0x3
 33921 029f 0E       		.uleb128 0xe
 33922 02a0 3A       		.uleb128 0x3a
 33923 02a1 0B       		.uleb128 0xb
 33924 02a2 3B       		.uleb128 0x3b
 33925 02a3 05       		.uleb128 0x5
 33926 02a4 11       		.uleb128 0x11
 33927 02a5 01       		.uleb128 0x1
 33928 02a6 12       		.uleb128 0x12
 33929 02a7 06       		.uleb128 0x6
 33930 02a8 40       		.uleb128 0x40
 33931 02a9 18       		.uleb128 0x18
 33932 02aa 9742     		.uleb128 0x2117
 33933 02ac 19       		.uleb128 0x19
 33934 02ad 01       		.uleb128 0x1
 33935 02ae 13       		.uleb128 0x13
 33936 02af 00       		.byte	0
 33937 02b0 00       		.byte	0
 33938 02b1 2E       		.uleb128 0x2e
 33939 02b2 0B       		.uleb128 0xb
 33940 02b3 01       		.byte	0x1
 33941 02b4 11       		.uleb128 0x11
 33942 02b5 01       		.uleb128 0x1
 33943 02b6 12       		.uleb128 0x12
 33944 02b7 06       		.uleb128 0x6
 33945 02b8 01       		.uleb128 0x1
 33946 02b9 13       		.uleb128 0x13
 33947 02ba 00       		.byte	0
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 723


 33948 02bb 00       		.byte	0
 33949 02bc 2F       		.uleb128 0x2f
 33950 02bd 2E       		.uleb128 0x2e
 33951 02be 01       		.byte	0x1
 33952 02bf 3F       		.uleb128 0x3f
 33953 02c0 19       		.uleb128 0x19
 33954 02c1 03       		.uleb128 0x3
 33955 02c2 0E       		.uleb128 0xe
 33956 02c3 3A       		.uleb128 0x3a
 33957 02c4 0B       		.uleb128 0xb
 33958 02c5 3B       		.uleb128 0x3b
 33959 02c6 05       		.uleb128 0x5
 33960 02c7 49       		.uleb128 0x49
 33961 02c8 13       		.uleb128 0x13
 33962 02c9 11       		.uleb128 0x11
 33963 02ca 01       		.uleb128 0x1
 33964 02cb 12       		.uleb128 0x12
 33965 02cc 06       		.uleb128 0x6
 33966 02cd 40       		.uleb128 0x40
 33967 02ce 18       		.uleb128 0x18
 33968 02cf 9642     		.uleb128 0x2116
 33969 02d1 19       		.uleb128 0x19
 33970 02d2 01       		.uleb128 0x1
 33971 02d3 13       		.uleb128 0x13
 33972 02d4 00       		.byte	0
 33973 02d5 00       		.byte	0
 33974 02d6 30       		.uleb128 0x30
 33975 02d7 2E       		.uleb128 0x2e
 33976 02d8 00       		.byte	0
 33977 02d9 3F       		.uleb128 0x3f
 33978 02da 19       		.uleb128 0x19
 33979 02db 03       		.uleb128 0x3
 33980 02dc 0E       		.uleb128 0xe
 33981 02dd 3A       		.uleb128 0x3a
 33982 02de 0B       		.uleb128 0xb
 33983 02df 3B       		.uleb128 0x3b
 33984 02e0 05       		.uleb128 0x5
 33985 02e1 11       		.uleb128 0x11
 33986 02e2 01       		.uleb128 0x1
 33987 02e3 12       		.uleb128 0x12
 33988 02e4 06       		.uleb128 0x6
 33989 02e5 40       		.uleb128 0x40
 33990 02e6 18       		.uleb128 0x18
 33991 02e7 9642     		.uleb128 0x2116
 33992 02e9 19       		.uleb128 0x19
 33993 02ea 00       		.byte	0
 33994 02eb 00       		.byte	0
 33995 02ec 31       		.uleb128 0x31
 33996 02ed 2E       		.uleb128 0x2e
 33997 02ee 01       		.byte	0x1
 33998 02ef 3F       		.uleb128 0x3f
 33999 02f0 19       		.uleb128 0x19
 34000 02f1 03       		.uleb128 0x3
 34001 02f2 0E       		.uleb128 0xe
 34002 02f3 3A       		.uleb128 0x3a
 34003 02f4 0B       		.uleb128 0xb
 34004 02f5 3B       		.uleb128 0x3b
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 724


 34005 02f6 05       		.uleb128 0x5
 34006 02f7 49       		.uleb128 0x49
 34007 02f8 13       		.uleb128 0x13
 34008 02f9 11       		.uleb128 0x11
 34009 02fa 01       		.uleb128 0x1
 34010 02fb 12       		.uleb128 0x12
 34011 02fc 06       		.uleb128 0x6
 34012 02fd 40       		.uleb128 0x40
 34013 02fe 18       		.uleb128 0x18
 34014 02ff 9742     		.uleb128 0x2117
 34015 0301 19       		.uleb128 0x19
 34016 0302 01       		.uleb128 0x1
 34017 0303 13       		.uleb128 0x13
 34018 0304 00       		.byte	0
 34019 0305 00       		.byte	0
 34020 0306 32       		.uleb128 0x32
 34021 0307 2E       		.uleb128 0x2e
 34022 0308 00       		.byte	0
 34023 0309 3F       		.uleb128 0x3f
 34024 030a 19       		.uleb128 0x19
 34025 030b 03       		.uleb128 0x3
 34026 030c 0E       		.uleb128 0xe
 34027 030d 3A       		.uleb128 0x3a
 34028 030e 0B       		.uleb128 0xb
 34029 030f 3B       		.uleb128 0x3b
 34030 0310 05       		.uleb128 0x5
 34031 0311 11       		.uleb128 0x11
 34032 0312 01       		.uleb128 0x1
 34033 0313 12       		.uleb128 0x12
 34034 0314 06       		.uleb128 0x6
 34035 0315 40       		.uleb128 0x40
 34036 0316 18       		.uleb128 0x18
 34037 0317 9742     		.uleb128 0x2117
 34038 0319 19       		.uleb128 0x19
 34039 031a 00       		.byte	0
 34040 031b 00       		.byte	0
 34041 031c 33       		.uleb128 0x33
 34042 031d 34       		.uleb128 0x34
 34043 031e 00       		.byte	0
 34044 031f 03       		.uleb128 0x3
 34045 0320 0E       		.uleb128 0xe
 34046 0321 3A       		.uleb128 0x3a
 34047 0322 0B       		.uleb128 0xb
 34048 0323 3B       		.uleb128 0x3b
 34049 0324 05       		.uleb128 0x5
 34050 0325 49       		.uleb128 0x49
 34051 0326 13       		.uleb128 0x13
 34052 0327 3F       		.uleb128 0x3f
 34053 0328 19       		.uleb128 0x19
 34054 0329 3C       		.uleb128 0x3c
 34055 032a 19       		.uleb128 0x19
 34056 032b 00       		.byte	0
 34057 032c 00       		.byte	0
 34058 032d 34       		.uleb128 0x34
 34059 032e 34       		.uleb128 0x34
 34060 032f 00       		.byte	0
 34061 0330 03       		.uleb128 0x3
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 725


 34062 0331 08       		.uleb128 0x8
 34063 0332 3A       		.uleb128 0x3a
 34064 0333 0B       		.uleb128 0xb
 34065 0334 3B       		.uleb128 0x3b
 34066 0335 05       		.uleb128 0x5
 34067 0336 49       		.uleb128 0x49
 34068 0337 13       		.uleb128 0x13
 34069 0338 3F       		.uleb128 0x3f
 34070 0339 19       		.uleb128 0x19
 34071 033a 3C       		.uleb128 0x3c
 34072 033b 19       		.uleb128 0x19
 34073 033c 00       		.byte	0
 34074 033d 00       		.byte	0
 34075 033e 35       		.uleb128 0x35
 34076 033f 34       		.uleb128 0x34
 34077 0340 00       		.byte	0
 34078 0341 03       		.uleb128 0x3
 34079 0342 0E       		.uleb128 0xe
 34080 0343 3A       		.uleb128 0x3a
 34081 0344 0B       		.uleb128 0xb
 34082 0345 3B       		.uleb128 0x3b
 34083 0346 0B       		.uleb128 0xb
 34084 0347 49       		.uleb128 0x49
 34085 0348 13       		.uleb128 0x13
 34086 0349 3F       		.uleb128 0x3f
 34087 034a 19       		.uleb128 0x19
 34088 034b 02       		.uleb128 0x2
 34089 034c 18       		.uleb128 0x18
 34090 034d 00       		.byte	0
 34091 034e 00       		.byte	0
 34092 034f 00       		.byte	0
 34093              		.section	.debug_aranges,"",%progbits
 34094 0000 EC010000 		.4byte	0x1ec
 34095 0004 0200     		.2byte	0x2
 34096 0006 00000000 		.4byte	.Ldebug_info0
 34097 000a 04       		.byte	0x4
 34098 000b 00       		.byte	0
 34099 000c 0000     		.2byte	0
 34100 000e 0000     		.2byte	0
 34101 0010 00000000 		.4byte	.LFB64
 34102 0014 7C050000 		.4byte	.LFE64-.LFB64
 34103 0018 00000000 		.4byte	.LFB65
 34104 001c 22000000 		.4byte	.LFE65-.LFB65
 34105 0020 00000000 		.4byte	.LFB66
 34106 0024 64010000 		.4byte	.LFE66-.LFB66
 34107 0028 00000000 		.4byte	.LFB67
 34108 002c A2320000 		.4byte	.LFE67-.LFB67
 34109 0030 00000000 		.4byte	.LFB68
 34110 0034 3C190000 		.4byte	.LFE68-.LFB68
 34111 0038 00000000 		.4byte	.LFB69
 34112 003c DC140000 		.4byte	.LFE69-.LFB69
 34113 0040 00000000 		.4byte	.LFB70
 34114 0044 F40D0000 		.4byte	.LFE70-.LFB70
 34115 0048 00000000 		.4byte	.LFB71
 34116 004c 90000000 		.4byte	.LFE71-.LFB71
 34117 0050 00000000 		.4byte	.LFB72
 34118 0054 A8220000 		.4byte	.LFE72-.LFB72
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 726


 34119 0058 00000000 		.4byte	.LFB73
 34120 005c 90040000 		.4byte	.LFE73-.LFB73
 34121 0060 00000000 		.4byte	.LFB74
 34122 0064 5C020000 		.4byte	.LFE74-.LFB74
 34123 0068 00000000 		.4byte	.LFB75
 34124 006c 80120000 		.4byte	.LFE75-.LFB75
 34125 0070 00000000 		.4byte	.LFB76
 34126 0074 DC000000 		.4byte	.LFE76-.LFB76
 34127 0078 00000000 		.4byte	.LFB77
 34128 007c 80010000 		.4byte	.LFE77-.LFB77
 34129 0080 00000000 		.4byte	.LFB78
 34130 0084 28000000 		.4byte	.LFE78-.LFB78
 34131 0088 00000000 		.4byte	.LFB79
 34132 008c F0000000 		.4byte	.LFE79-.LFB79
 34133 0090 00000000 		.4byte	.LFB80
 34134 0094 74030000 		.4byte	.LFE80-.LFB80
 34135 0098 00000000 		.4byte	.LFB81
 34136 009c 84000000 		.4byte	.LFE81-.LFB81
 34137 00a0 00000000 		.4byte	.LFB82
 34138 00a4 88000000 		.4byte	.LFE82-.LFB82
 34139 00a8 00000000 		.4byte	.LFB83
 34140 00ac A0000000 		.4byte	.LFE83-.LFB83
 34141 00b0 00000000 		.4byte	.LFB84
 34142 00b4 3E000000 		.4byte	.LFE84-.LFB84
 34143 00b8 00000000 		.4byte	.LFB85
 34144 00bc 2E000000 		.4byte	.LFE85-.LFB85
 34145 00c0 00000000 		.4byte	.LFB86
 34146 00c4 98000000 		.4byte	.LFE86-.LFB86
 34147 00c8 00000000 		.4byte	.LFB87
 34148 00cc 80000000 		.4byte	.LFE87-.LFB87
 34149 00d0 00000000 		.4byte	.LFB88
 34150 00d4 5C000000 		.4byte	.LFE88-.LFB88
 34151 00d8 00000000 		.4byte	.LFB89
 34152 00dc 24060000 		.4byte	.LFE89-.LFB89
 34153 00e0 00000000 		.4byte	.LFB90
 34154 00e4 40020000 		.4byte	.LFE90-.LFB90
 34155 00e8 00000000 		.4byte	.LFB91
 34156 00ec 28000000 		.4byte	.LFE91-.LFB91
 34157 00f0 00000000 		.4byte	.LFB92
 34158 00f4 78000000 		.4byte	.LFE92-.LFB92
 34159 00f8 00000000 		.4byte	.LFB93
 34160 00fc B0000000 		.4byte	.LFE93-.LFB93
 34161 0100 00000000 		.4byte	.LFB94
 34162 0104 28010000 		.4byte	.LFE94-.LFB94
 34163 0108 00000000 		.4byte	.LFB95
 34164 010c B8000000 		.4byte	.LFE95-.LFB95
 34165 0110 00000000 		.4byte	.LFB96
 34166 0114 B8000000 		.4byte	.LFE96-.LFB96
 34167 0118 00000000 		.4byte	.LFB97
 34168 011c 5C000000 		.4byte	.LFE97-.LFB97
 34169 0120 00000000 		.4byte	.LFB98
 34170 0124 44020000 		.4byte	.LFE98-.LFB98
 34171 0128 00000000 		.4byte	.LFB99
 34172 012c BC000000 		.4byte	.LFE99-.LFB99
 34173 0130 00000000 		.4byte	.LFB100
 34174 0134 5C000000 		.4byte	.LFE100-.LFB100
 34175 0138 00000000 		.4byte	.LFB101
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 727


 34176 013c 38010000 		.4byte	.LFE101-.LFB101
 34177 0140 00000000 		.4byte	.LFB102
 34178 0144 6C000000 		.4byte	.LFE102-.LFB102
 34179 0148 00000000 		.4byte	.LFB103
 34180 014c 64000000 		.4byte	.LFE103-.LFB103
 34181 0150 00000000 		.4byte	.LFB104
 34182 0154 A8000000 		.4byte	.LFE104-.LFB104
 34183 0158 00000000 		.4byte	.LFB105
 34184 015c 34000000 		.4byte	.LFE105-.LFB105
 34185 0160 00000000 		.4byte	.LFB106
 34186 0164 20000000 		.4byte	.LFE106-.LFB106
 34187 0168 00000000 		.4byte	.LFB107
 34188 016c A0000000 		.4byte	.LFE107-.LFB107
 34189 0170 00000000 		.4byte	.LFB108
 34190 0174 BC010000 		.4byte	.LFE108-.LFB108
 34191 0178 00000000 		.4byte	.LFB109
 34192 017c 60000000 		.4byte	.LFE109-.LFB109
 34193 0180 00000000 		.4byte	.LFB110
 34194 0184 98050000 		.4byte	.LFE110-.LFB110
 34195 0188 00000000 		.4byte	.LFB111
 34196 018c 8C000000 		.4byte	.LFE111-.LFB111
 34197 0190 00000000 		.4byte	.LFB112
 34198 0194 EC000000 		.4byte	.LFE112-.LFB112
 34199 0198 00000000 		.4byte	.LFB113
 34200 019c 5C000000 		.4byte	.LFE113-.LFB113
 34201 01a0 00000000 		.4byte	.LFB114
 34202 01a4 C0000000 		.4byte	.LFE114-.LFB114
 34203 01a8 00000000 		.4byte	.LFB115
 34204 01ac 54010000 		.4byte	.LFE115-.LFB115
 34205 01b0 00000000 		.4byte	.LFB116
 34206 01b4 B0000000 		.4byte	.LFE116-.LFB116
 34207 01b8 00000000 		.4byte	.LFB117
 34208 01bc 12000000 		.4byte	.LFE117-.LFB117
 34209 01c0 00000000 		.4byte	.LFB118
 34210 01c4 64010000 		.4byte	.LFE118-.LFB118
 34211 01c8 00000000 		.4byte	.LFB119
 34212 01cc 12000000 		.4byte	.LFE119-.LFB119
 34213 01d0 00000000 		.4byte	.LFB120
 34214 01d4 1A000000 		.4byte	.LFE120-.LFB120
 34215 01d8 00000000 		.4byte	.LFB121
 34216 01dc 0C000000 		.4byte	.LFE121-.LFB121
 34217 01e0 00000000 		.4byte	.LFB122
 34218 01e4 0C000000 		.4byte	.LFE122-.LFB122
 34219 01e8 00000000 		.4byte	0
 34220 01ec 00000000 		.4byte	0
 34221              		.section	.debug_ranges,"",%progbits
 34222              	.Ldebug_ranges0:
 34223 0000 00000000 		.4byte	.LFB64
 34224 0004 7C050000 		.4byte	.LFE64
 34225 0008 00000000 		.4byte	.LFB65
 34226 000c 22000000 		.4byte	.LFE65
 34227 0010 00000000 		.4byte	.LFB66
 34228 0014 64010000 		.4byte	.LFE66
 34229 0018 00000000 		.4byte	.LFB67
 34230 001c A2320000 		.4byte	.LFE67
 34231 0020 00000000 		.4byte	.LFB68
 34232 0024 3C190000 		.4byte	.LFE68
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 728


 34233 0028 00000000 		.4byte	.LFB69
 34234 002c DC140000 		.4byte	.LFE69
 34235 0030 00000000 		.4byte	.LFB70
 34236 0034 F40D0000 		.4byte	.LFE70
 34237 0038 00000000 		.4byte	.LFB71
 34238 003c 90000000 		.4byte	.LFE71
 34239 0040 00000000 		.4byte	.LFB72
 34240 0044 A8220000 		.4byte	.LFE72
 34241 0048 00000000 		.4byte	.LFB73
 34242 004c 90040000 		.4byte	.LFE73
 34243 0050 00000000 		.4byte	.LFB74
 34244 0054 5C020000 		.4byte	.LFE74
 34245 0058 00000000 		.4byte	.LFB75
 34246 005c 80120000 		.4byte	.LFE75
 34247 0060 00000000 		.4byte	.LFB76
 34248 0064 DC000000 		.4byte	.LFE76
 34249 0068 00000000 		.4byte	.LFB77
 34250 006c 80010000 		.4byte	.LFE77
 34251 0070 00000000 		.4byte	.LFB78
 34252 0074 28000000 		.4byte	.LFE78
 34253 0078 00000000 		.4byte	.LFB79
 34254 007c F0000000 		.4byte	.LFE79
 34255 0080 00000000 		.4byte	.LFB80
 34256 0084 74030000 		.4byte	.LFE80
 34257 0088 00000000 		.4byte	.LFB81
 34258 008c 84000000 		.4byte	.LFE81
 34259 0090 00000000 		.4byte	.LFB82
 34260 0094 88000000 		.4byte	.LFE82
 34261 0098 00000000 		.4byte	.LFB83
 34262 009c A0000000 		.4byte	.LFE83
 34263 00a0 00000000 		.4byte	.LFB84
 34264 00a4 3E000000 		.4byte	.LFE84
 34265 00a8 00000000 		.4byte	.LFB85
 34266 00ac 2E000000 		.4byte	.LFE85
 34267 00b0 00000000 		.4byte	.LFB86
 34268 00b4 98000000 		.4byte	.LFE86
 34269 00b8 00000000 		.4byte	.LFB87
 34270 00bc 80000000 		.4byte	.LFE87
 34271 00c0 00000000 		.4byte	.LFB88
 34272 00c4 5C000000 		.4byte	.LFE88
 34273 00c8 00000000 		.4byte	.LFB89
 34274 00cc 24060000 		.4byte	.LFE89
 34275 00d0 00000000 		.4byte	.LFB90
 34276 00d4 40020000 		.4byte	.LFE90
 34277 00d8 00000000 		.4byte	.LFB91
 34278 00dc 28000000 		.4byte	.LFE91
 34279 00e0 00000000 		.4byte	.LFB92
 34280 00e4 78000000 		.4byte	.LFE92
 34281 00e8 00000000 		.4byte	.LFB93
 34282 00ec B0000000 		.4byte	.LFE93
 34283 00f0 00000000 		.4byte	.LFB94
 34284 00f4 28010000 		.4byte	.LFE94
 34285 00f8 00000000 		.4byte	.LFB95
 34286 00fc B8000000 		.4byte	.LFE95
 34287 0100 00000000 		.4byte	.LFB96
 34288 0104 B8000000 		.4byte	.LFE96
 34289 0108 00000000 		.4byte	.LFB97
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 729


 34290 010c 5C000000 		.4byte	.LFE97
 34291 0110 00000000 		.4byte	.LFB98
 34292 0114 44020000 		.4byte	.LFE98
 34293 0118 00000000 		.4byte	.LFB99
 34294 011c BC000000 		.4byte	.LFE99
 34295 0120 00000000 		.4byte	.LFB100
 34296 0124 5C000000 		.4byte	.LFE100
 34297 0128 00000000 		.4byte	.LFB101
 34298 012c 38010000 		.4byte	.LFE101
 34299 0130 00000000 		.4byte	.LFB102
 34300 0134 6C000000 		.4byte	.LFE102
 34301 0138 00000000 		.4byte	.LFB103
 34302 013c 64000000 		.4byte	.LFE103
 34303 0140 00000000 		.4byte	.LFB104
 34304 0144 A8000000 		.4byte	.LFE104
 34305 0148 00000000 		.4byte	.LFB105
 34306 014c 34000000 		.4byte	.LFE105
 34307 0150 00000000 		.4byte	.LFB106
 34308 0154 20000000 		.4byte	.LFE106
 34309 0158 00000000 		.4byte	.LFB107
 34310 015c A0000000 		.4byte	.LFE107
 34311 0160 00000000 		.4byte	.LFB108
 34312 0164 BC010000 		.4byte	.LFE108
 34313 0168 00000000 		.4byte	.LFB109
 34314 016c 60000000 		.4byte	.LFE109
 34315 0170 00000000 		.4byte	.LFB110
 34316 0174 98050000 		.4byte	.LFE110
 34317 0178 00000000 		.4byte	.LFB111
 34318 017c 8C000000 		.4byte	.LFE111
 34319 0180 00000000 		.4byte	.LFB112
 34320 0184 EC000000 		.4byte	.LFE112
 34321 0188 00000000 		.4byte	.LFB113
 34322 018c 5C000000 		.4byte	.LFE113
 34323 0190 00000000 		.4byte	.LFB114
 34324 0194 C0000000 		.4byte	.LFE114
 34325 0198 00000000 		.4byte	.LFB115
 34326 019c 54010000 		.4byte	.LFE115
 34327 01a0 00000000 		.4byte	.LFB116
 34328 01a4 B0000000 		.4byte	.LFE116
 34329 01a8 00000000 		.4byte	.LFB117
 34330 01ac 12000000 		.4byte	.LFE117
 34331 01b0 00000000 		.4byte	.LFB118
 34332 01b4 64010000 		.4byte	.LFE118
 34333 01b8 00000000 		.4byte	.LFB119
 34334 01bc 12000000 		.4byte	.LFE119
 34335 01c0 00000000 		.4byte	.LFB120
 34336 01c4 1A000000 		.4byte	.LFE120
 34337 01c8 00000000 		.4byte	.LFB121
 34338 01cc 0C000000 		.4byte	.LFE121
 34339 01d0 00000000 		.4byte	.LFB122
 34340 01d4 0C000000 		.4byte	.LFE122
 34341 01d8 00000000 		.4byte	0
 34342 01dc 00000000 		.4byte	0
 34343              		.section	.debug_line,"",%progbits
 34344              	.Ldebug_line0:
 34345 0000 7A1F0000 		.section	.debug_str,"MS",%progbits,1
 34345      0200C001 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 730


 34345      00000201 
 34345      FB0E0D00 
 34345      01010101 
 34346              	.LASF216:
 34347 0000 696E666F 		.ascii	"infoSend\000"
 34347      53656E64 
 34347      00
 34348              	.LASF105:
 34349 0009 656D675F 		.ascii	"emg_act_counter\000"
 34349      6163745F 
 34349      636F756E 
 34349      74657200 
 34350              	.LASF268:
 34351 0019 69645F73 		.ascii	"id_str\000"
 34351      747200
 34352              	.LASF250:
 34353 0020 66736D5F 		.ascii	"fsm_activation_mode_menu\000"
 34353      61637469 
 34353      76617469 
 34353      6F6E5F6D 
 34353      6F64655F 
 34354              	.LASF25:
 34355 0039 73697A65 		.ascii	"sizetype\000"
 34355      74797065 
 34355      00
 34356              	.LASF112:
 34357 0042 706F7765 		.ascii	"power_cycles\000"
 34357      725F6379 
 34357      636C6573 
 34357      00
 34358              	.LASF33:
 34359 004f 434D445F 		.ascii	"CMD_INIT_MEM\000"
 34359      494E4954 
 34359      5F4D454D 
 34359      00
 34360              	.LASF342:
 34361 005c 676C5F63 		.ascii	"gl_c\000"
 34361      00
 34362              	.LASF196:
 34363 0061 77726973 		.ascii	"wrist_direction_association\000"
 34363      745F6469 
 34363      72656374 
 34363      696F6E5F 
 34363      6173736F 
 34364              	.LASF65:
 34365 007d 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS_ADV\000"
 34365      545F4D4F 
 34365      44455F45 
 34365      4D475F46 
 34365      4346535F 
 34366              	.LASF36:
 34367 0095 434D445F 		.ascii	"CMD_ACTIVATE\000"
 34367      41435449 
 34367      56415445 
 34367      00
 34368              	.LASF201:
 34369 00a2 75736572 		.ascii	"user\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 731


 34369      00
 34370              	.LASF358:
 34371 00a7 665F6572 		.ascii	"f_err_emg_1\000"
 34371      725F656D 
 34371      675F3100 
 34372              	.LASF359:
 34373 00b3 665F6572 		.ascii	"f_err_emg_2\000"
 34373      725F656D 
 34373      675F3200 
 34374              	.LASF379:
 34375 00bf 74696D65 		.ascii	"time_to_send_data_to_PC\000"
 34375      5F746F5F 
 34375      73656E64 
 34375      5F646174 
 34375      615F746F 
 34376              	.LASF364:
 34377 00d7 73746F70 		.ascii	"stop_master_device\000"
 34377      5F6D6173 
 34377      7465725F 
 34377      64657669 
 34377      636500
 34378              	.LASF11:
 34379 00ea 696E7433 		.ascii	"int32_t\000"
 34379      325F7400 
 34380              	.LASF374:
 34381 00f2 675F7278 		.ascii	"g_rx\000"
 34381      00
 34382              	.LASF100:
 34383 00f7 73745F64 		.ascii	"st_data\000"
 34383      61746100 
 34384              	.LASF293:
 34385 00ff 685F7469 		.ascii	"h_time\000"
 34385      6D6500
 34386              	.LASF307:
 34387 0106 77726974 		.ascii	"writeStatus\000"
 34387      65537461 
 34387      74757300 
 34388              	.LASF110:
 34389 0112 746F7461 		.ascii	"total_runtime\000"
 34389      6C5F7275 
 34389      6E74696D 
 34389      6500
 34390              	.LASF15:
 34391 0120 75696E74 		.ascii	"uint32\000"
 34391      333200
 34392              	.LASF363:
 34393 0127 636D645F 		.ascii	"cmd_set_baudrate\000"
 34393      7365745F 
 34393      62617564 
 34393      72617465 
 34393      00
 34394              	.LASF352:
 34395 0138 6169725F 		.ascii	"air_chambers_control\000"
 34395      6368616D 
 34395      62657273 
 34395      5F636F6E 
 34395      74726F6C 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 732


 34396              	.LASF276:
 34397 014d 7370695F 		.ascii	"spi_read_delay_str_len\000"
 34397      72656164 
 34397      5F64656C 
 34397      61795F73 
 34397      74725F6C 
 34398              	.LASF202:
 34399 0164 4A4F595F 		.ascii	"JOY_spec\000"
 34399      73706563 
 34399      00
 34400              	.LASF278:
 34401 016d 70726570 		.ascii	"prepare_generic_info\000"
 34401      6172655F 
 34401      67656E65 
 34401      7269635F 
 34401      696E666F 
 34402              	.LASF139:
 34403 0182 706F735F 		.ascii	"pos_lim_inf\000"
 34403      6C696D5F 
 34403      696E6600 
 34404              	.LASF242:
 34405 018e 5345434F 		.ascii	"SECOND_MOTOR_IDX\000"
 34405      4E445F4D 
 34405      4F544F52 
 34405      5F494458 
 34405      00
 34406              	.LASF335:
 34407 019f 636D645F 		.ascii	"cmd_get_inputs\000"
 34407      6765745F 
 34407      696E7075 
 34407      747300
 34408              	.LASF64:
 34409 01ae 494E5055 		.ascii	"INPUT_MODE_EMG_FCFS\000"
 34409      545F4D4F 
 34409      44455F45 
 34409      4D475F46 
 34409      43465300 
 34410              	.LASF143:
 34411 01c2 63757272 		.ascii	"curr_lookup\000"
 34411      5F6C6F6F 
 34411      6B757000 
 34412              	.LASF108:
 34413 01ce 72657374 		.ascii	"rest_counter\000"
 34413      5F636F75 
 34413      6E746572 
 34413      00
 34414              	.LASF340:
 34415 01db 636D645F 		.ascii	"cmd_get_imu_readings\000"
 34415      6765745F 
 34415      696D755F 
 34415      72656164 
 34415      696E6773 
 34416              	.LASF186:
 34417 01f0 73745F4D 		.ascii	"st_MASTER_spec\000"
 34417      41535445 
 34417      525F7370 
 34417      656300
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 733


 34418              	.LASF271:
 34419 01ff 69645F73 		.ascii	"id_str_len\000"
 34419      74725F6C 
 34419      656E00
 34420              	.LASF63:
 34421 020a 494E5055 		.ascii	"INPUT_MODE_EMG_INTEGRAL\000"
 34421      545F4D4F 
 34421      44455F45 
 34421      4D475F49 
 34421      4E544547 
 34422              	.LASF244:
 34423 0222 6D5F746D 		.ascii	"m_tmp\000"
 34423      7000
 34424              	.LASF292:
 34425 0228 765F6964 		.ascii	"v_idx\000"
 34425      7800
 34426              	.LASF16:
 34427 022e 696E7438 		.ascii	"int8\000"
 34427      00
 34428              	.LASF221:
 34429 0233 6765745F 		.ascii	"get_param_list\000"
 34429      70617261 
 34429      6D5F6C69 
 34429      737400
 34430              	.LASF320:
 34431 0242 636D645F 		.ascii	"cmd_get_accelerations\000"
 34431      6765745F 
 34431      61636365 
 34431      6C657261 
 34431      74696F6E 
 34432              	.LASF339:
 34433 0258 636D645F 		.ascii	"cmd_get_emg\000"
 34433      6765745F 
 34433      656D6700 
 34434              	.LASF158:
 34435 0264 73745F65 		.ascii	"st_emg\000"
 34435      6D6700
 34436              	.LASF106:
 34437 026b 706F7369 		.ascii	"position_hist\000"
 34437      74696F6E 
 34437      5F686973 
 34437      7400
 34438              	.LASF209:
 34439 0279 74656D70 		.ascii	"temp_value\000"
 34439      5F76616C 
 34439      756500
 34440              	.LASF291:
 34441 0284 7374725F 		.ascii	"str_data\000"
 34441      64617461 
 34441      00
 34442              	.LASF415:
 34443 028d 72657375 		.ascii	"result\000"
 34443      6C7400
 34444              	.LASF193:
 34445 0294 73745F57 		.ascii	"st_WR_spec\000"
 34445      525F7370 
 34445      656300
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 734


 34446              	.LASF103:
 34447 029f 72656164 		.ascii	"ready\000"
 34447      7900
 34448              	.LASF155:
 34449 02a5 456E635F 		.ascii	"Enc_idx_use_for_control\000"
 34449      6964785F 
 34449      7573655F 
 34449      666F725F 
 34449      636F6E74 
 34450              	.LASF49:
 34451 02bd 434D445F 		.ascii	"CMD_GET_JOYSTICK\000"
 34451      4745545F 
 34451      4A4F5953 
 34451      5449434B 
 34451      00
 34452              	.LASF62:
 34453 02ce 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL\000"
 34453      545F4D4F 
 34453      44455F45 
 34453      4D475F50 
 34453      524F504F 
 34454              	.LASF121:
 34455 02ea 7573655F 		.ascii	"use_2nd_motor_flag\000"
 34455      326E645F 
 34455      6D6F746F 
 34455      725F666C 
 34455      616700
 34456              	.LASF331:
 34457 02fd 745F7374 		.ascii	"t_start\000"
 34457      61727400 
 34458              	.LASF113:
 34459 0305 65786365 		.ascii	"excessive_signal_activity\000"
 34459      73736976 
 34459      655F7369 
 34459      676E616C 
 34459      5F616374 
 34460              	.LASF165:
 34461 031f 72656164 		.ascii	"read_imu_flag\000"
 34461      5F696D75 
 34461      5F666C61 
 34461      6700
 34462              	.LASF173:
 34463 032d 7265636F 		.ascii	"record_EMG_history_on_SD\000"
 34463      72645F45 
 34463      4D475F68 
 34463      6973746F 
 34463      72795F6F 
 34464              	.LASF378:
 34465 0346 74696D65 		.ascii	"timer_value\000"
 34465      725F7661 
 34465      6C756500 
 34466              	.LASF4:
 34467 0352 6C6F6E67 		.ascii	"long int\000"
 34467      20696E74 
 34467      00
 34468              	.LASF199:
 34469 035b 756E7573 		.ascii	"unused_bytes1\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 735


 34469      65645F62 
 34469      79746573 
 34469      3100
 34470              	.LASF362:
 34471 0369 6D6F746F 		.ascii	"motor_idx\000"
 34471      725F6964 
 34471      7800
 34472              	.LASF120:
 34473 0373 72657365 		.ascii	"reset_counters\000"
 34473      745F636F 
 34473      756E7465 
 34473      727300
 34474              	.LASF176:
 34475 0382 75736572 		.ascii	"user_emg\000"
 34475      5F656D67 
 34475      00
 34476              	.LASF348:
 34477 038b 636D645F 		.ascii	"cmd_get_SD_file\000"
 34477      6765745F 
 34477      53445F66 
 34477      696C6500 
 34478              	.LASF317:
 34479 039b 7365745A 		.ascii	"setZeros\000"
 34479      65726F73 
 34479      00
 34480              	.LASF115:
 34481 03a4 756E7573 		.ascii	"unused_bytes\000"
 34481      65645F62 
 34481      79746573 
 34481      00
 34482              	.LASF205:
 34483 03b1 61636365 		.ascii	"accel_value\000"
 34483      6C5F7661 
 34483      6C756500 
 34484              	.LASF225:
 34485 03bd 4E554D5F 		.ascii	"NUM_ITEMS\000"
 34485      4954454D 
 34485      5300
 34486              	.LASF104:
 34487 03c7 73745F63 		.ascii	"st_counters\000"
 34487      6F756E74 
 34487      65727300 
 34488              	.LASF248:
 34489 03d3 4D454D5F 		.ascii	"MEM_P\000"
 34489      5000
 34490              	.LASF19:
 34491 03d9 666C6F61 		.ascii	"float32\000"
 34491      74333200 
 34492              	.LASF346:
 34493 03e1 636D645F 		.ascii	"cmd_get_ADC_map\000"
 34493      6765745F 
 34493      4144435F 
 34493      6D617000 
 34494              	.LASF41:
 34495 03f1 434D445F 		.ascii	"CMD_GET_CURRENTS\000"
 34495      4745545F 
 34495      43555252 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 736


 34495      454E5453 
 34495      00
 34496              	.LASF290:
 34497 0402 70726570 		.ascii	"prepare_SD_EMG_history\000"
 34497      6172655F 
 34497      53445F45 
 34497      4D475F68 
 34497      6973746F 
 34498              	.LASF347:
 34499 0419 636D645F 		.ascii	"cmd_get_ADC_raw\000"
 34499      6765745F 
 34499      4144435F 
 34499      72617700 
 34500              	.LASF399:
 34501 0429 73645061 		.ascii	"sdParam\000"
 34501      72616D00 
 34502              	.LASF258:
 34503 0431 6175785F 		.ascii	"aux_float2\000"
 34503      666C6F61 
 34503      743200
 34504              	.LASF334:
 34505 043c 636D645F 		.ascii	"cmd_ping\000"
 34505      70696E67 
 34505      00
 34506              	.LASF277:
 34507 0445 7370695F 		.ascii	"spi_delay_menu_len\000"
 34507      64656C61 
 34507      795F6D65 
 34507      6E755F6C 
 34507      656E00
 34508              	.LASF256:
 34509 0458 7365745F 		.ascii	"set_custom_param\000"
 34509      63757374 
 34509      6F6D5F70 
 34509      6172616D 
 34509      00
 34510              	.LASF351:
 34511 0469 636D645F 		.ascii	"cmd_remove_SD_file\000"
 34511      72656D6F 
 34511      76655F53 
 34511      445F6669 
 34511      6C6500
 34512              	.LASF316:
 34513 047c 6D656D49 		.ascii	"memInit_OtbkActWristMs\000"
 34513      6E69745F 
 34513      4F74626B 
 34513      41637457 
 34513      72697374 
 34514              	.LASF0:
 34515 0493 7369676E 		.ascii	"signed char\000"
 34515      65642063 
 34515      68617200 
 34516              	.LASF175:
 34517 049f 75736572 		.ascii	"user_code_string\000"
 34517      5F636F64 
 34517      655F7374 
 34517      72696E67 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 737


 34517      00
 34518              	.LASF210:
 34519 04b0 73745F63 		.ascii	"st_calib\000"
 34519      616C6962 
 34519      00
 34520              	.LASF356:
 34521 04b9 6572725F 		.ascii	"err_emg_1\000"
 34521      656D675F 
 34521      3100
 34522              	.LASF305:
 34523 04c3 6D656D53 		.ascii	"memStore\000"
 34523      746F7265 
 34523      00
 34524              	.LASF350:
 34525 04cc 66696C65 		.ascii	"filename\000"
 34525      6E616D65 
 34525      00
 34526              	.LASF73:
 34527 04d5 6D6F746F 		.ascii	"motor_supply_type\000"
 34527      725F7375 
 34527      70706C79 
 34527      5F747970 
 34527      6500
 34528              	.LASF333:
 34529 04e7 72656164 		.ascii	"read_flag\000"
 34529      5F666C61 
 34529      6700
 34530              	.LASF391:
 34531 04f1 4144435F 		.ascii	"ADC_buf\000"
 34531      62756600 
 34532              	.LASF388:
 34533 04f9 696E7465 		.ascii	"interrupt_flag\000"
 34533      72727570 
 34533      745F666C 
 34533      616700
 34534              	.LASF283:
 34535 0508 73746570 		.ascii	"step\000"
 34535      00
 34536              	.LASF1:
 34537 050d 756E7369 		.ascii	"unsigned char\000"
 34537      676E6564 
 34537      20636861 
 34537      7200
 34538              	.LASF149:
 34539 051b 6E6F745F 		.ascii	"not_revers_motor_flag\000"
 34539      72657665 
 34539      72735F6D 
 34539      6F746F72 
 34539      5F666C61 
 34540              	.LASF368:
 34541 0531 675F7265 		.ascii	"g_refNew\000"
 34541      664E6577 
 34541      00
 34542              	.LASF119:
 34543 053a 72696768 		.ascii	"right_left\000"
 34543      745F6C65 
 34543      667400
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 738


 34544              	.LASF29:
 34545 0545 434D445F 		.ascii	"CMD_STORE_DEFAULT_PARAMS\000"
 34545      53544F52 
 34545      455F4445 
 34545      4641554C 
 34545      545F5041 
 34546              	.LASF147:
 34547 055e 656E636F 		.ascii	"encoder_line\000"
 34547      6465725F 
 34547      6C696E65 
 34547      00
 34548              	.LASF272:
 34549 056b 6E5F696D 		.ascii	"n_imu_str_len\000"
 34549      755F7374 
 34549      725F6C65 
 34549      6E00
 34550              	.LASF275:
 34551 0579 696D755F 		.ascii	"imu_table_str_len\000"
 34551      7461626C 
 34551      655F7374 
 34551      725F6C65 
 34551      6E00
 34552              	.LASF303:
 34553 058b 76616C75 		.ascii	"value\000"
 34553      6500
 34554              	.LASF204:
 34555 0591 666C6167 		.ascii	"flags\000"
 34555      7300
 34556              	.LASF270:
 34557 0597 7370695F 		.ascii	"spi_read_delay_str\000"
 34557      72656164 
 34557      5F64656C 
 34557      61795F73 
 34557      747200
 34558              	.LASF37:
 34559 05aa 434D445F 		.ascii	"CMD_GET_ACTIVATE\000"
 34559      4745545F 
 34559      41435449 
 34559      56415445 
 34559      00
 34560              	.LASF22:
 34561 05bb 63686172 		.ascii	"char\000"
 34561      00
 34562              	.LASF142:
 34563 05c0 6D61785F 		.ascii	"max_step_pos\000"
 34563      73746570 
 34563      5F706F73 
 34563      00
 34564              	.LASF405:
 34565 05cd 675F696D 		.ascii	"g_imu\000"
 34565      7500
 34566              	.LASF309:
 34567 05d3 7265745F 		.ascii	"ret_val\000"
 34567      76616C00 
 34568              	.LASF255:
 34569 05db 6D656E75 		.ascii	"menu_idx\000"
 34569      5F696478 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 739


 34569      00
 34570              	.LASF264:
 34571 05e4 73746172 		.ascii	"start_byte\000"
 34571      745F6279 
 34571      746500
 34572              	.LASF261:
 34573 05ef 6E756D5F 		.ascii	"num_mag_cal_params\000"
 34573      6D61675F 
 34573      63616C5F 
 34573      70617261 
 34573      6D7300
 34574              	.LASF148:
 34575 0602 70776D5F 		.ascii	"pwm_rate_limiter\000"
 34575      72617465 
 34575      5F6C696D 
 34575      69746572 
 34575      00
 34576              	.LASF128:
 34577 0613 6B5F645F 		.ascii	"k_d_c\000"
 34577      6300
 34578              	.LASF280:
 34579 0619 706C7573 		.ascii	"plus\000"
 34579      00
 34580              	.LASF218:
 34581 061e 7061636B 		.ascii	"packet_string\000"
 34581      65745F73 
 34581      7472696E 
 34581      6700
 34582              	.LASF153:
 34583 062c 6D5F6D75 		.ascii	"m_mult\000"
 34583      6C7400
 34584              	.LASF127:
 34585 0633 6B5F695F 		.ascii	"k_i_c\000"
 34585      6300
 34586              	.LASF306:
 34587 0639 64697370 		.ascii	"displacement\000"
 34587      6C616365 
 34587      6D656E74 
 34587      00
 34588              	.LASF300:
 34589 0646 64617461 		.ascii	"data_length\000"
 34589      5F6C656E 
 34589      67746800 
 34590              	.LASF140:
 34591 0652 706F735F 		.ascii	"pos_lim_sup\000"
 34591      6C696D5F 
 34591      73757000 
 34592              	.LASF284:
 34593 065e 5230315F 		.ascii	"R01_str\000"
 34593      73747200 
 34594              	.LASF161:
 34595 0666 656D675F 		.ascii	"emg_speed\000"
 34595      73706565 
 34595      6400
 34596              	.LASF180:
 34597 0670 72657374 		.ascii	"rest_vel\000"
 34597      5F76656C 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 740


 34597      00
 34598              	.LASF231:
 34599 0679 7061636B 		.ascii	"packet_data\000"
 34599      65745F64 
 34599      61746100 
 34600              	.LASF116:
 34601 0685 73745F64 		.ascii	"st_device\000"
 34601      65766963 
 34601      6500
 34602              	.LASF397:
 34603 068f 7046696C 		.ascii	"pFile\000"
 34603      6500
 34604              	.LASF172:
 34605 0695 4144435F 		.ascii	"ADC_conf\000"
 34605      636F6E66 
 34605      00
 34606              	.LASF297:
 34607 069e 636F6D6D 		.ascii	"commWrite\000"
 34607      57726974 
 34607      6500
 34608              	.LASF365:
 34609 06a8 64656163 		.ascii	"deactivate_slaves\000"
 34609      74697661 
 34609      74655F73 
 34609      6C617665 
 34609      7300
 34610              	.LASF308:
 34611 06ba 70616765 		.ascii	"pages\000"
 34611      7300
 34612              	.LASF312:
 34613 06c0 6D656D49 		.ascii	"memInit\000"
 34613      6E697400 
 34614              	.LASF130:
 34615 06c8 6B5F695F 		.ascii	"k_i_dl\000"
 34615      646C00
 34616              	.LASF38:
 34617 06cf 434D445F 		.ascii	"CMD_SET_INPUTS\000"
 34617      5345545F 
 34617      494E5055 
 34617      545300
 34618              	.LASF101:
 34619 06de 62756666 		.ascii	"buffer\000"
 34619      657200
 34620              	.LASF132:
 34621 06e5 6B5F705F 		.ascii	"k_p_c_dl\000"
 34621      635F646C 
 34621      00
 34622              	.LASF318:
 34623 06ee 636D645F 		.ascii	"cmd_get_measurements\000"
 34623      6765745F 
 34623      6D656173 
 34623      7572656D 
 34623      656E7473 
 34624              	.LASF213:
 34625 0703 73706565 		.ascii	"speed\000"
 34625      6400
 34626              	.LASF217:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 741


 34627 0709 72785F63 		.ascii	"rx_cmd\000"
 34627      6D6400
 34628              	.LASF88:
 34629 0710 54595045 		.ascii	"TYPE_DOUBLE\000"
 34629      5F444F55 
 34629      424C4500 
 34630              	.LASF353:
 34631 071c 736C6176 		.ascii	"slave_motor_idx\000"
 34631      655F6D6F 
 34631      746F725F 
 34631      69647800 
 34632              	.LASF370:
 34633 072c 675F6D65 		.ascii	"g_meas\000"
 34633      617300
 34634              	.LASF396:
 34635 0733 456E636F 		.ascii	"Encoder_Check\000"
 34635      6465725F 
 34635      43686563 
 34635      6B00
 34636              	.LASF323:
 34637 0741 6C617374 		.ascii	"last_aux_int16\000"
 34637      5F617578 
 34637      5F696E74 
 34637      313600
 34638              	.LASF77:
 34639 0750 41434B5F 		.ascii	"ACK_ERROR\000"
 34639      4552524F 
 34639      5200
 34640              	.LASF393:
 34641 075a 64617461 		.ascii	"data_encoder_raw\000"
 34641      5F656E63 
 34641      6F646572 
 34641      5F726177 
 34641      00
 34642              	.LASF60:
 34643 076b 494E5055 		.ascii	"INPUT_MODE_EXTERNAL\000"
 34643      545F4D4F 
 34643      44455F45 
 34643      58544552 
 34643      4E414C00 
 34644              	.LASF246:
 34645 077f 696E6465 		.ascii	"index\000"
 34645      7800
 34646              	.LASF191:
 34647 0785 6D617869 		.ascii	"maximum_pressure_kPa\000"
 34647      6D756D5F 
 34647      70726573 
 34647      73757265 
 34647      5F6B5061 
 34648              	.LASF181:
 34649 079a 72657374 		.ascii	"rest_position_flag\000"
 34649      5F706F73 
 34649      6974696F 
 34649      6E5F666C 
 34649      616700
 34650              	.LASF183:
 34651 07ad 6A6F7973 		.ascii	"joystick_closure_speed\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 742


 34651      7469636B 
 34651      5F636C6F 
 34651      73757265 
 34651      5F737065 
 34652              	.LASF349:
 34653 07c4 66696C65 		.ascii	"filename_length\000"
 34653      6E616D65 
 34653      5F6C656E 
 34653      67746800 
 34654              	.LASF133:
 34655 07d4 6B5F695F 		.ascii	"k_i_c_dl\000"
 34655      635F646C 
 34655      00
 34656              	.LASF329:
 34657 07dd 636F6D6D 		.ascii	"commReadResCurrFromSH\000"
 34657      52656164 
 34657      52657343 
 34657      75727246 
 34657      726F6D53 
 34658              	.LASF328:
 34659 07f3 636D645F 		.ascii	"cmd_get_currents_for_cuff\000"
 34659      6765745F 
 34659      63757272 
 34659      656E7473 
 34659      5F666F72 
 34660              	.LASF267:
 34661 080d 6D61675F 		.ascii	"mag_param_str\000"
 34661      70617261 
 34661      6D5F7374 
 34661      7200
 34662              	.LASF390:
 34663 081b 72657365 		.ascii	"reset_PSoC_flag\000"
 34663      745F5053 
 34663      6F435F66 
 34663      6C616700 
 34664              	.LASF360:
 34665 082b 6F74626B 		.ascii	"otbk_act_wrist_control\000"
 34665      5F616374 
 34665      5F777269 
 34665      73745F63 
 34665      6F6E7472 
 34666              	.LASF89:
 34667 0842 54595045 		.ascii	"TYPE_STRING\000"
 34667      5F535452 
 34667      494E4700 
 34668              	.LASF72:
 34669 084e 43555252 		.ascii	"CURR_AND_POS_CONTROL\000"
 34669      5F414E44 
 34669      5F504F53 
 34669      5F434F4E 
 34669      54524F4C 
 34670              	.LASF28:
 34671 0863 434D445F 		.ascii	"CMD_STORE_PARAMS\000"
 34671      53544F52 
 34671      455F5041 
 34671      52414D53 
 34671      00
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 743


 34672              	.LASF228:
 34673 0874 50415241 		.ascii	"PARAMS_STR\000"
 34673      4D535F53 
 34673      545200
 34674              	.LASF211:
 34675 087f 656E6162 		.ascii	"enabled\000"
 34675      6C656400 
 34676              	.LASF7:
 34677 0887 6C6F6E67 		.ascii	"long unsigned int\000"
 34677      20756E73 
 34677      69676E65 
 34677      6420696E 
 34677      7400
 34678              	.LASF32:
 34679 0899 434D445F 		.ascii	"CMD_BOOTLOADER\000"
 34679      424F4F54 
 34679      4C4F4144 
 34679      455200
 34680              	.LASF185:
 34681 08a8 6A6F7973 		.ascii	"joystick_gains\000"
 34681      7469636B 
 34681      5F676169 
 34681      6E7300
 34682              	.LASF96:
 34683 08b7 686F6C64 		.ascii	"hold_curr\000"
 34683      5F637572 
 34683      7200
 34684              	.LASF66:
 34685 08c1 494E5055 		.ascii	"INPUT_MODE_JOYSTICK\000"
 34685      545F4D4F 
 34685      44455F4A 
 34685      4F595354 
 34685      49434B00 
 34686              	.LASF111:
 34687 08d5 746F7461 		.ascii	"total_time_rest\000"
 34687      6C5F7469 
 34687      6D655F72 
 34687      65737400 
 34688              	.LASF220:
 34689 08e5 7374725F 		.ascii	"str_sd_data\000"
 34689      73645F64 
 34689      61746100 
 34690              	.LASF135:
 34691 08f1 61637469 		.ascii	"activ\000"
 34691      7600
 34692              	.LASF230:
 34693 08f7 4D454E55 		.ascii	"MENU_STR\000"
 34693      5F535452 
 34693      00
 34694              	.LASF152:
 34695 0900 6D5F6F66 		.ascii	"m_off\000"
 34695      6600
 34696              	.LASF78:
 34697 0906 41434B5F 		.ascii	"ACK_OK\000"
 34697      4F4B00
 34698              	.LASF80:
 34699 090d 54595045 		.ascii	"TYPE_FLAG\000"
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 744


 34699      5F464C41 
 34699      4700
 34700              	.LASF208:
 34701 0917 71756174 		.ascii	"quat_value\000"
 34701      5F76616C 
 34701      756500
 34702              	.LASF263:
 34703 0922 7061636B 		.ascii	"packet_length\000"
 34703      65745F6C 
 34703      656E6774 
 34703      6800
 34704              	.LASF178:
 34705 0930 72657374 		.ascii	"rest_pos\000"
 34705      5F706F73 
 34705      00
 34706              	.LASF91:
 34707 0939 63757272 		.ascii	"curr\000"
 34707      00
 34708              	.LASF145:
 34709 093e 696E7075 		.ascii	"input_mode\000"
 34709      745F6D6F 
 34709      646500
 34710              	.LASF70:
 34711 0949 434F4E54 		.ascii	"CONTROL_PWM\000"
 34711      524F4C5F 
 34711      50574D00 
 34712              	.LASF43:
 34713 0955 434D445F 		.ascii	"CMD_GET_EMG\000"
 34713      4745545F 
 34713      454D4700 
 34714              	.LASF313:
 34715 0961 6D656D49 		.ascii	"memInit_SoftHandPro\000"
 34715      6E69745F 
 34715      536F6674 
 34715      48616E64 
 34715      50726F00 
 34716              	.LASF31:
 34717 0975 434D445F 		.ascii	"CMD_GET_INFO\000"
 34717      4745545F 
 34717      494E464F 
 34717      00
 34718              	.LASF259:
 34719 0982 6765745F 		.ascii	"get_IMU_param_list\000"
 34719      494D555F 
 34719      70617261 
 34719      6D5F6C69 
 34719      737400
 34720              	.LASF343:
 34721 0995 73696E67 		.ascii	"single_packet\000"
 34721      6C655F70 
 34721      61636B65 
 34721      7400
 34722              	.LASF262:
 34723 09a3 66697273 		.ascii	"first_imu_parameter\000"
 34723      745F696D 
 34723      755F7061 
 34723      72616D65 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 745


 34723      74657200 
 34724              	.LASF42:
 34725 09b7 434D445F 		.ascii	"CMD_GET_CURR_AND_MEAS\000"
 34725      4745545F 
 34725      43555252 
 34725      5F414E44 
 34725      5F4D4541 
 34726              	.LASF411:
 34727 09cd 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 34727      43313120 
 34727      352E342E 
 34727      31203230 
 34727      31363036 
 34728 0a00 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 34728      20726576 
 34728      6973696F 
 34728      6E203233 
 34728      37373135 
 34729 0a33 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 34729      66756E63 
 34729      74696F6E 
 34729      2D736563 
 34729      74696F6E 
 34730              	.LASF93:
 34731 0a5b 73745F72 		.ascii	"st_ref\000"
 34731      656600
 34732              	.LASF321:
 34733 0a62 636D645F 		.ascii	"cmd_get_joystick\000"
 34733      6765745F 
 34733      6A6F7973 
 34733      7469636B 
 34733      00
 34734              	.LASF47:
 34735 0a73 434D445F 		.ascii	"CMD_SET_CUFF_INPUTS\000"
 34735      5345545F 
 34735      43554646 
 34735      5F494E50 
 34735      55545300 
 34736              	.LASF177:
 34737 0a87 73745F53 		.ascii	"st_SH_spec\000"
 34737      485F7370 
 34737      656300
 34738              	.LASF377:
 34739 0a92 63616C69 		.ascii	"calib\000"
 34739      6200
 34740              	.LASF6:
 34741 0a98 5F5F7569 		.ascii	"__uint32_t\000"
 34741      6E743332 
 34741      5F7400
 34742              	.LASF8:
 34743 0aa3 6C6F6E67 		.ascii	"long long int\000"
 34743      206C6F6E 
 34743      6720696E 
 34743      7400
 34744              	.LASF68:
 34745 0ab1 53485F63 		.ascii	"SH_control_mode\000"
 34745      6F6E7472 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 746


 34745      6F6C5F6D 
 34745      6F646500 
 34746              	.LASF82:
 34747 0ac1 54595045 		.ascii	"TYPE_UINT8\000"
 34747      5F55494E 
 34747      543800
 34748              	.LASF327:
 34749 0acc 636D645F 		.ascii	"cmd_get_currents\000"
 34749      6765745F 
 34749      63757272 
 34749      656E7473 
 34749      00
 34750              	.LASF75:
 34751 0add 4D41584F 		.ascii	"MAXON_12V\000"
 34751      4E5F3132 
 34751      5600
 34752              	.LASF389:
 34753 0ae7 6368616E 		.ascii	"change_ext_ref_flag\000"
 34753      67655F65 
 34753      78745F72 
 34753      65665F66 
 34753      6C616700 
 34754              	.LASF21:
 34755 0afb 646F7562 		.ascii	"double\000"
 34755      6C6500
 34756              	.LASF56:
 34757 0b02 434D445F 		.ascii	"CMD_GET_SD_SINGLE_FILE\000"
 34757      4745545F 
 34757      53445F53 
 34757      494E474C 
 34757      455F4649 
 34758              	.LASF151:
 34759 0b19 456E635F 		.ascii	"Enc_raw_read_conf\000"
 34759      7261775F 
 34759      72656164 
 34759      5F636F6E 
 34759      6600
 34760              	.LASF214:
 34761 0b2b 72657065 		.ascii	"repetitions\000"
 34761      74697469 
 34761      6F6E7300 
 34762              	.LASF141:
 34763 0b37 6D61785F 		.ascii	"max_step_neg\000"
 34763      73746570 
 34763      5F6E6567 
 34763      00
 34764              	.LASF409:
 34765 0b44 656D675F 		.ascii	"emg_history_next_idx\000"
 34765      68697374 
 34765      6F72795F 
 34765      6E657874 
 34765      5F696478 
 34766              	.LASF188:
 34767 0b59 736C6176 		.ascii	"slave_ID\000"
 34767      655F4944 
 34767      00
 34768              	.LASF387:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 747


 34769 0b62 72657365 		.ascii	"reset_last_value_flag\000"
 34769      745F6C61 
 34769      73745F76 
 34769      616C7565 
 34769      5F666C61 
 34770              	.LASF229:
 34771 0b78 43555354 		.ascii	"CUSTOM_PARAM_GET\000"
 34771      4F4D5F50 
 34771      4152414D 
 34771      5F474554 
 34771      00
 34772              	.LASF20:
 34773 0b89 666C6F61 		.ascii	"float\000"
 34773      7400
 34774              	.LASF167:
 34775 0b8f 494D555F 		.ascii	"IMU_conf\000"
 34775      636F6E66 
 34775      00
 34776              	.LASF57:
 34777 0b98 434D445F 		.ascii	"CMD_REMOVE_SD_SINGLE_FILE\000"
 34777      52454D4F 
 34777      56455F53 
 34777      445F5349 
 34777      4E474C45 
 34778              	.LASF247:
 34779 0bb2 50415241 		.ascii	"PARAM_IDX\000"
 34779      4D5F4944 
 34779      5800
 34780              	.LASF97:
 34781 0bbc 73745F61 		.ascii	"st_adc_meas\000"
 34781      64635F6D 
 34781      65617300 
 34782              	.LASF243:
 34783 0bc8 6D5F6164 		.ascii	"m_addr\000"
 34783      647200
 34784              	.LASF376:
 34785 0bcf 635F6D65 		.ascii	"c_mem\000"
 34785      6D00
 34786              	.LASF299:
 34787 0bd5 64617461 		.ascii	"data_array\000"
 34787      5F617272 
 34787      617900
 34788              	.LASF10:
 34789 0be0 756E7369 		.ascii	"unsigned int\000"
 34789      676E6564 
 34789      20696E74 
 34789      00
 34790              	.LASF357:
 34791 0bed 6572725F 		.ascii	"err_emg_2\000"
 34791      656D675F 
 34791      3200
 34792              	.LASF314:
 34793 0bf7 6D656D49 		.ascii	"memInit_Master\000"
 34793      6E69745F 
 34793      4D617374 
 34793      657200
 34794              	.LASF232:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 748


 34795 0c06 7061636B 		.ascii	"packet_lenght\000"
 34795      65745F6C 
 34795      656E6768 
 34795      7400
 34796              	.LASF302:
 34797 0c14 73656E64 		.ascii	"sendAcknowledgment\000"
 34797      41636B6E 
 34797      6F776C65 
 34797      64676D65 
 34797      6E7400
 34798              	.LASF287:
 34799 0c27 70726570 		.ascii	"prepare_SD_legend\000"
 34799      6172655F 
 34799      53445F6C 
 34799      6567656E 
 34799      6400
 34800              	.LASF406:
 34801 0c39 4D616743 		.ascii	"MagCal\000"
 34801      616C00
 34802              	.LASF58:
 34803 0c40 53485F63 		.ascii	"SH_command\000"
 34803      6F6D6D61 
 34803      6E6400
 34804              	.LASF84:
 34805 0c4b 54595045 		.ascii	"TYPE_UINT16\000"
 34805      5F55494E 
 34805      54313600 
 34806              	.LASF198:
 34807 0c57 666C6167 		.ascii	"flag\000"
 34807      00
 34808              	.LASF322:
 34809 0c5c 636D645F 		.ascii	"cmd_set_inputs\000"
 34809      7365745F 
 34809      696E7075 
 34809      747300
 34810              	.LASF146:
 34811 0c6b 636F6E74 		.ascii	"control_mode\000"
 34811      726F6C5F 
 34811      6D6F6465 
 34811      00
 34812              	.LASF337:
 34813 0c78 6F66665F 		.ascii	"off_1\000"
 34813      3100
 34814              	.LASF61:
 34815 0c7e 494E5055 		.ascii	"INPUT_MODE_ENCODER3\000"
 34815      545F4D4F 
 34815      44455F45 
 34815      4E434F44 
 34815      45523300 
 34816              	.LASF298:
 34817 0c92 636F6D6D 		.ascii	"commWriteID\000"
 34817      57726974 
 34817      65494400 
 34818              	.LASF52:
 34819 0c9e 434D445F 		.ascii	"CMD_GET_ENCODER_CONF\000"
 34819      4745545F 
 34819      454E434F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 749


 34819      4445525F 
 34819      434F4E46 
 34820              	.LASF164:
 34821 0cb3 73745F69 		.ascii	"st_imu\000"
 34821      6D7500
 34822              	.LASF380:
 34823 0cba 745F6265 		.ascii	"t_before_data_send_to_PC\000"
 34823      666F7265 
 34823      5F646174 
 34823      615F7365 
 34823      6E645F74 
 34824              	.LASF325:
 34825 0cd3 636D645F 		.ascii	"cmd_get_activate\000"
 34825      6765745F 
 34825      61637469 
 34825      76617465 
 34825      00
 34826              	.LASF354:
 34827 0ce4 656D675F 		.ascii	"emg_activation_velocity_fsm\000"
 34827      61637469 
 34827      76617469 
 34827      6F6E5F76 
 34827      656C6F63 
 34828              	.LASF234:
 34829 0d00 73747269 		.ascii	"string_lenght\000"
 34829      6E675F6C 
 34829      656E6768 
 34829      7400
 34830              	.LASF87:
 34831 0d0e 54595045 		.ascii	"TYPE_FLOAT\000"
 34831      5F464C4F 
 34831      415400
 34832              	.LASF252:
 34833 0d19 43555354 		.ascii	"CUSTOM_PARAM_SET_LIST\000"
 34833      4F4D5F50 
 34833      4152414D 
 34833      5F534554 
 34833      5F4C4953 
 34834              	.LASF226:
 34835 0d2f 4E554D5F 		.ascii	"NUM_STRUCT\000"
 34835      53545255 
 34835      435400
 34836              	.LASF404:
 34837 0d3a 73696E67 		.ascii	"single_imu_size\000"
 34837      6C655F69 
 34837      6D755F73 
 34837      697A6500 
 34838              	.LASF257:
 34839 0d4a 6175785F 		.ascii	"aux_uchar\000"
 34839      75636861 
 34839      7200
 34840              	.LASF285:
 34841 0d54 70726570 		.ascii	"prepare_R01_info\000"
 34841      6172655F 
 34841      5230315F 
 34841      696E666F 
 34841      00
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 750


 34842              	.LASF98:
 34843 0d65 6164645F 		.ascii	"add_emg\000"
 34843      656D6700 
 34844              	.LASF83:
 34845 0d6d 54595045 		.ascii	"TYPE_INT16\000"
 34845      5F494E54 
 34845      313600
 34846              	.LASF238:
 34847 0d78 6175785F 		.ascii	"aux_uint16\000"
 34847      75696E74 
 34847      313600
 34848              	.LASF159:
 34849 0d83 656D675F 		.ascii	"emg_threshold\000"
 34849      74687265 
 34849      73686F6C 
 34849      6400
 34850              	.LASF46:
 34851 0d91 434D445F 		.ascii	"CMD_GET_CURR_DIFF\000"
 34851      4745545F 
 34851      43555252 
 34851      5F444946 
 34851      4600
 34852              	.LASF156:
 34853 0da3 6D6F746F 		.ascii	"motor_handle_ratio\000"
 34853      725F6861 
 34853      6E646C65 
 34853      5F726174 
 34853      696F00
 34854              	.LASF107:
 34855 0db6 63757272 		.ascii	"current_hist\000"
 34855      656E745F 
 34855      68697374 
 34855      00
 34856              	.LASF71:
 34857 0dc3 434F4E54 		.ascii	"CONTROL_CURRENT\000"
 34857      524F4C5F 
 34857      43555252 
 34857      454E5400 
 34858              	.LASF24:
 34859 0dd3 6C6F6E67 		.ascii	"long double\000"
 34859      20646F75 
 34859      626C6500 
 34860              	.LASF86:
 34861 0ddf 54595045 		.ascii	"TYPE_UINT32\000"
 34861      5F55494E 
 34861      54333200 
 34862              	.LASF189:
 34863 0deb 73745F46 		.ascii	"st_FB_spec\000"
 34863      425F7370 
 34863      656300
 34864              	.LASF223:
 34865 0df6 5641525F 		.ascii	"VAR_P\000"
 34865      5000
 34866              	.LASF251:
 34867 0dfc 43555354 		.ascii	"CUSTOM_PARAM_GET_LIST\000"
 34867      4F4D5F50 
 34867      4152414D 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 751


 34867      5F474554 
 34867      5F4C4953 
 34868              	.LASF114:
 34869 0e12 6D6F7469 		.ascii	"motion_counter\000"
 34869      6F6E5F63 
 34869      6F756E74 
 34869      657200
 34870              	.LASF301:
 34871 0e21 63686563 		.ascii	"checksum\000"
 34871      6B73756D 
 34871      00
 34872              	.LASF369:
 34873 0e2a 675F7265 		.ascii	"g_refOld\000"
 34873      664F6C64 
 34873      00
 34874              	.LASF35:
 34875 0e33 434D445F 		.ascii	"CMD_HAND_CALIBRATE\000"
 34875      48414E44 
 34875      5F43414C 
 34875      49425241 
 34875      544500
 34876              	.LASF206:
 34877 0e46 6779726F 		.ascii	"gyro_value\000"
 34877      5F76616C 
 34877      756500
 34878              	.LASF169:
 34879 0e51 63757272 		.ascii	"curr_time\000"
 34879      5F74696D 
 34879      6500
 34880              	.LASF154:
 34881 0e5b 646F7562 		.ascii	"double_encoder_on_off\000"
 34881      6C655F65 
 34881      6E636F64 
 34881      65725F6F 
 34881      6E5F6F66 
 34882              	.LASF361:
 34883 0e71 64726976 		.ascii	"drive_slave\000"
 34883      655F736C 
 34883      61766500 
 34884              	.LASF166:
 34885 0e7d 5350495F 		.ascii	"SPI_read_delay\000"
 34885      72656164 
 34885      5F64656C 
 34885      617900
 34886              	.LASF76:
 34887 0e8c 61636B6E 		.ascii	"acknowledgment_values\000"
 34887      6F776C65 
 34887      64676D65 
 34887      6E745F76 
 34887      616C7565 
 34888              	.LASF241:
 34889 0ea2 4D4F544F 		.ascii	"MOTOR_IDX\000"
 34889      525F4944 
 34889      5800
 34890              	.LASF311:
 34891 0eac 6D656D52 		.ascii	"memRestore\000"
 34891      6573746F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 752


 34891      726500
 34892              	.LASF265:
 34893 0eb7 6E5F696D 		.ascii	"n_imu_str\000"
 34893      755F7374 
 34893      7200
 34894              	.LASF279:
 34895 0ec1 696E666F 		.ascii	"info_string\000"
 34895      5F737472 
 34895      696E6700 
 34896              	.LASF288:
 34897 0ecd 70726570 		.ascii	"prepare_SD_info\000"
 34897      6172655F 
 34897      53445F69 
 34897      6E666F00 
 34898              	.LASF355:
 34899 0edd 66736D5F 		.ascii	"fsm_state\000"
 34899      73746174 
 34899      6500
 34900              	.LASF9:
 34901 0ee7 6C6F6E67 		.ascii	"long long unsigned int\000"
 34901      206C6F6E 
 34901      6720756E 
 34901      7369676E 
 34901      65642069 
 34902              	.LASF85:
 34903 0efe 54595045 		.ascii	"TYPE_INT32\000"
 34903      5F494E54 
 34903      333200
 34904              	.LASF240:
 34905 0f09 6175785F 		.ascii	"aux_uint32\000"
 34905      75696E74 
 34905      333200
 34906              	.LASF102:
 34907 0f14 6C656E67 		.ascii	"length\000"
 34907      746800
 34908              	.LASF253:
 34909 0f1b 55534552 		.ascii	"USER_ID_PARAM\000"
 34909      5F49445F 
 34909      50415241 
 34909      4D00
 34910              	.LASF203:
 34911 0f29 73745F69 		.ascii	"st_imu_data\000"
 34911      6D755F64 
 34911      61746100 
 34912              	.LASF207:
 34913 0f35 6D61675F 		.ascii	"mag_value\000"
 34913      76616C75 
 34913      6500
 34914              	.LASF92:
 34915 0f3f 6F6E6F66 		.ascii	"onoff\000"
 34915      6600
 34916              	.LASF45:
 34917 0f45 434D445F 		.ascii	"CMD_GET_ACCEL\000"
 34917      4745545F 
 34917      41434345 
 34917      4C00
 34918              	.LASF319:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 753


 34919 0f53 636D645F 		.ascii	"cmd_get_velocities\000"
 34919      6765745F 
 34919      76656C6F 
 34919      63697469 
 34919      657300
 34920              	.LASF310:
 34921 0f66 6D656D52 		.ascii	"memRecall\000"
 34921      6563616C 
 34921      6C00
 34922              	.LASF382:
 34923 0f70 74696D65 		.ascii	"timer_value0\000"
 34923      725F7661 
 34923      6C756530 
 34923      00
 34924              	.LASF48:
 34925 0f7d 434D445F 		.ascii	"CMD_SET_BAUDRATE\000"
 34925      5345545F 
 34925      42415544 
 34925      52415445 
 34925      00
 34926              	.LASF126:
 34927 0f8e 6B5F705F 		.ascii	"k_p_c\000"
 34927      6300
 34928              	.LASF269:
 34929 0f94 696D755F 		.ascii	"imu_table_str\000"
 34929      7461626C 
 34929      655F7374 
 34929      7200
 34930              	.LASF384:
 34931 0fa2 6465765F 		.ascii	"dev_tension\000"
 34931      74656E73 
 34931      696F6E00 
 34932              	.LASF137:
 34933 0fae 6D6F746F 		.ascii	"motor_driver_type\000"
 34933      725F6472 
 34933      69766572 
 34933      5F747970 
 34933      6500
 34934              	.LASF338:
 34935 0fc0 6D756C74 		.ascii	"mult_1\000"
 34935      5F3100
 34936              	.LASF282:
 34937 0fc7 70726570 		.ascii	"prepare_counter_info\000"
 34937      6172655F 
 34937      636F756E 
 34937      7465725F 
 34937      696E666F 
 34938              	.LASF23:
 34939 0fdc 72656738 		.ascii	"reg8\000"
 34939      00
 34940              	.LASF192:
 34941 0fe1 70726F70 		.ascii	"prop_err_fb_gain\000"
 34941      5F657272 
 34941      5F66625F 
 34941      6761696E 
 34941      00
 34942              	.LASF295:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 754


 34943 0ff2 636F6D6D 		.ascii	"commWrite_old_id\000"
 34943      57726974 
 34943      655F6F6C 
 34943      645F6964 
 34943      00
 34944              	.LASF245:
 34945 1003 6D616E61 		.ascii	"manage_param_list\000"
 34945      67655F70 
 34945      6172616D 
 34945      5F6C6973 
 34945      7400
 34946              	.LASF30:
 34947 1015 434D445F 		.ascii	"CMD_RESTORE_PARAMS\000"
 34947      52455354 
 34947      4F52455F 
 34947      50415241 
 34947      4D5300
 34948              	.LASF398:
 34949 1028 73644669 		.ascii	"sdFile\000"
 34949      6C6500
 34950              	.LASF383:
 34951 102f 6379636C 		.ascii	"cycle_time\000"
 34951      655F7469 
 34951      6D6500
 34952              	.LASF286:
 34953 103a 70726570 		.ascii	"prepare_SD_param_info\000"
 34953      6172655F 
 34953      53445F70 
 34953      6172616D 
 34953      5F696E66 
 34954              	.LASF330:
 34955 1050 63757272 		.ascii	"curr_diff\000"
 34955      5F646966 
 34955      6600
 34956              	.LASF187:
 34957 105a 736C6176 		.ascii	"slave_comm_active\000"
 34957      655F636F 
 34957      6D6D5F61 
 34957      63746976 
 34957      6500
 34958              	.LASF289:
 34959 106c 70726570 		.ascii	"prepare_SD_EMG_History_legend\000"
 34959      6172655F 
 34959      53445F45 
 34959      4D475F48 
 34959      6973746F 
 34960              	.LASF296:
 34961 108a 6F6C645F 		.ascii	"old_id\000"
 34961      696400
 34962              	.LASF414:
 34963 1091 5F5F5245 		.ascii	"__REV16\000"
 34963      56313600 
 34964              	.LASF394:
 34965 1099 4E5F456E 		.ascii	"N_Encoder_Line_Connected\000"
 34965      636F6465 
 34965      725F4C69 
 34965      6E655F43 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 755


 34965      6F6E6E65 
 34966              	.LASF124:
 34967 10b2 6465765F 		.ascii	"dev_type\000"
 34967      74797065 
 34967      00
 34968              	.LASF174:
 34969 10bb 73745F75 		.ascii	"st_user\000"
 34969      73657200 
 34970              	.LASF326:
 34971 10c3 636D645F 		.ascii	"cmd_get_curr_and_meas\000"
 34971      6765745F 
 34971      63757272 
 34971      5F616E64 
 34971      5F6D6561 
 34972              	.LASF157:
 34973 10d9 67656172 		.ascii	"gears_params\000"
 34973      735F7061 
 34973      72616D73 
 34973      00
 34974              	.LASF168:
 34975 10e6 73745F65 		.ascii	"st_expansion\000"
 34975      7870616E 
 34975      73696F6E 
 34975      00
 34976              	.LASF162:
 34977 10f3 656D675F 		.ascii	"emg_calibration_flag\000"
 34977      63616C69 
 34977      62726174 
 34977      696F6E5F 
 34977      666C6167 
 34978              	.LASF94:
 34979 1108 73745F6D 		.ascii	"st_meas\000"
 34979      65617300 
 34980              	.LASF55:
 34981 1110 434D445F 		.ascii	"CMD_GET_ADC_RAW\000"
 34981      4745545F 
 34981      4144435F 
 34981      52415700 
 34982              	.LASF184:
 34983 1120 6A6F7973 		.ascii	"joystick_threshold\000"
 34983      7469636B 
 34983      5F746872 
 34983      6573686F 
 34983      6C6400
 34984              	.LASF74:
 34985 1133 4D41584F 		.ascii	"MAXON_24V\000"
 34985      4E5F3234 
 34985      5600
 34986              	.LASF67:
 34987 113d 494E5055 		.ascii	"INPUT_MODE_EMG_PROPORTIONAL_NC\000"
 34987      545F4D4F 
 34987      44455F45 
 34987      4D475F50 
 34987      524F504F 
 34988              	.LASF51:
 34989 115c 434D445F 		.ascii	"CMD_GET_IMU_PARAM\000"
 34989      4745545F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 756


 34989      494D555F 
 34989      50415241 
 34989      4D00
 34990              	.LASF53:
 34991 116e 434D445F 		.ascii	"CMD_GET_ENCODER_RAW\000"
 34991      4745545F 
 34991      454E434F 
 34991      4445525F 
 34991      52415700 
 34992              	.LASF336:
 34993 1182 636D645F 		.ascii	"cmd_store_params\000"
 34993      73746F72 
 34993      655F7061 
 34993      72616D73 
 34993      00
 34994              	.LASF375:
 34995 1193 675F6D65 		.ascii	"g_mem\000"
 34995      6D00
 34996              	.LASF413:
 34997 1199 433A5C55 		.ascii	"C:\\Users\\mgnocco\\OneDrive - Fondazione Istituto "
 34997      73657273 
 34997      5C6D676E 
 34997      6F63636F 
 34997      5C4F6E65 
 34998 11c9 4974616C 		.ascii	"Italiano Tecnologia\\Firmware\\Psoc5\\IMU\\start - "
 34998      69616E6F 
 34998      20546563 
 34998      6E6F6C6F 
 34998      6769615C 
 34999 11f8 436F7069 		.ascii	"Copia\\SoftHandPRO-and-Generic-FW-PSoC5 - IMU\\Gene"
 34999      615C536F 
 34999      66744861 
 34999      6E645052 
 34999      4F2D616E 
 35000 1229 7269632E 		.ascii	"ric.cydsn\000"
 35000      63796473 
 35000      6E00
 35001              	.LASF40:
 35002 1233 434D445F 		.ascii	"CMD_GET_MEASUREMENTS\000"
 35002      4745545F 
 35002      4D454153 
 35002      5552454D 
 35002      454E5453 
 35003              	.LASF373:
 35004 1248 675F6164 		.ascii	"g_adc_measOld\000"
 35004      635F6D65 
 35004      61734F6C 
 35004      6400
 35005              	.LASF345:
 35006 1256 636D645F 		.ascii	"cmd_get_encoder_raw\000"
 35006      6765745F 
 35006      656E636F 
 35006      6465725F 
 35006      72617700 
 35007              	.LASF13:
 35008 126a 75696E74 		.ascii	"uint8\000"
 35008      3800
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 757


 35009              	.LASF215:
 35010 1270 636F6D6D 		.ascii	"commProcess\000"
 35010      50726F63 
 35010      65737300 
 35011              	.LASF182:
 35012 127c 73745F4A 		.ascii	"st_JOY_spec\000"
 35012      4F595F73 
 35012      70656300 
 35013              	.LASF2:
 35014 1288 73686F72 		.ascii	"short int\000"
 35014      7420696E 
 35014      7400
 35015              	.LASF315:
 35016 1292 6D656D49 		.ascii	"memInit_AirChambersFb\000"
 35016      6E69745F 
 35016      41697243 
 35016      68616D62 
 35016      65727346 
 35017              	.LASF273:
 35018 12a8 6964735F 		.ascii	"ids_str_len\000"
 35018      7374725F 
 35018      6C656E00 
 35019              	.LASF131:
 35020 12b4 6B5F645F 		.ascii	"k_d_dl\000"
 35020      646C00
 35021              	.LASF233:
 35022 12bb 6964785F 		.ascii	"idx_menu\000"
 35022      6D656E75 
 35022      00
 35023              	.LASF99:
 35024 12c4 6A6F7973 		.ascii	"joystick\000"
 35024      7469636B 
 35024      00
 35025              	.LASF200:
 35026 12cd 6D6F746F 		.ascii	"motor\000"
 35026      7200
 35027              	.LASF401:
 35028 12d3 4E5F494D 		.ascii	"N_IMU_Connected\000"
 35028      555F436F 
 35028      6E6E6563 
 35028      74656400 
 35029              	.LASF39:
 35030 12e3 434D445F 		.ascii	"CMD_GET_INPUTS\000"
 35030      4745545F 
 35030      494E5055 
 35030      545300
 35031              	.LASF117:
 35032 12f2 68775F6D 		.ascii	"hw_maint_date\000"
 35032      61696E74 
 35032      5F646174 
 35032      6500
 35033              	.LASF266:
 35034 1300 6964735F 		.ascii	"ids_str\000"
 35034      73747200 
 35035              	.LASF54:
 35036 1308 434D445F 		.ascii	"CMD_GET_ADC_CONF\000"
 35036      4745545F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 758


 35036      4144435F 
 35036      434F4E46 
 35036      00
 35037              	.LASF27:
 35038 1319 434D445F 		.ascii	"CMD_SET_ZEROS\000"
 35038      5345545F 
 35038      5A45524F 
 35038      5300
 35039              	.LASF274:
 35040 1327 6D61675F 		.ascii	"mag_param_str_len\000"
 35040      70617261 
 35040      6D5F7374 
 35040      725F6C65 
 35040      6E00
 35041              	.LASF260:
 35042 1339 6E756D5F 		.ascii	"num_imus_id_params\000"
 35042      696D7573 
 35042      5F69645F 
 35042      70617261 
 35042      6D7300
 35043              	.LASF237:
 35044 134c 6175785F 		.ascii	"aux_int16\000"
 35044      696E7431 
 35044      3600
 35045              	.LASF408:
 35046 1356 656D675F 		.ascii	"emg_history\000"
 35046      68697374 
 35046      6F727900 
 35047              	.LASF410:
 35048 1362 45455052 		.ascii	"EEPROM_ADDR\000"
 35048      4F4D5F41 
 35048      44445200 
 35049              	.LASF118:
 35050 136e 73746174 		.ascii	"stats_period_begin_date\000"
 35050      735F7065 
 35050      72696F64 
 35050      5F626567 
 35050      696E5F64 
 35051              	.LASF403:
 35052 1386 696D7573 		.ascii	"imus_data_size\000"
 35052      5F646174 
 35052      615F7369 
 35052      7A6500
 35053              	.LASF366:
 35054 1395 49544D5F 		.ascii	"ITM_RxBuffer\000"
 35054      52784275 
 35054      66666572 
 35054      00
 35055              	.LASF44:
 35056 13a2 434D445F 		.ascii	"CMD_GET_VELOCITIES\000"
 35056      4745545F 
 35056      56454C4F 
 35056      43495449 
 35056      455300
 35057              	.LASF386:
 35058 13b5 706F775F 		.ascii	"pow_tension\000"
 35058      74656E73 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 759


 35058      696F6E00 
 35059              	.LASF34:
 35060 13c1 434D445F 		.ascii	"CMD_GET_PARAM_LIST\000"
 35060      4745545F 
 35060      50415241 
 35060      4D5F4C49 
 35060      535400
 35061              	.LASF79:
 35062 13d4 64617461 		.ascii	"data_types\000"
 35062      5F747970 
 35062      657300
 35063              	.LASF17:
 35064 13df 696E7431 		.ascii	"int16\000"
 35064      3600
 35065              	.LASF170:
 35066 13e5 72656164 		.ascii	"read_exp_port_flag\000"
 35066      5F657870 
 35066      5F706F72 
 35066      745F666C 
 35066      616700
 35067              	.LASF163:
 35068 13f8 73776974 		.ascii	"switch_emg\000"
 35068      63685F65 
 35068      6D6700
 35069              	.LASF136:
 35070 1403 61637469 		.ascii	"activate_pwm_rescaling\000"
 35070      76617465 
 35070      5F70776D 
 35070      5F726573 
 35070      63616C69 
 35071              	.LASF129:
 35072 141a 6B5F705F 		.ascii	"k_p_dl\000"
 35072      646C00
 35073              	.LASF95:
 35074 1421 65737469 		.ascii	"estim_curr\000"
 35074      6D5F6375 
 35074      727200
 35075              	.LASF385:
 35076 142c 6465765F 		.ascii	"dev_pwm_limit\000"
 35076      70776D5F 
 35076      6C696D69 
 35076      7400
 35077              	.LASF171:
 35078 143a 72656164 		.ascii	"read_ADC_sensors_port_flag\000"
 35078      5F414443 
 35078      5F73656E 
 35078      736F7273 
 35078      5F706F72 
 35079              	.LASF395:
 35080 1455 456E636F 		.ascii	"Encoder_Value\000"
 35080      6465725F 
 35080      56616C75 
 35080      6500
 35081              	.LASF344:
 35082 1463 636D645F 		.ascii	"cmd_get_encoder_map\000"
 35082      6765745F 
 35082      656E636F 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 760


 35082      6465725F 
 35082      6D617000 
 35083              	.LASF123:
 35084 1477 75736572 		.ascii	"user_id\000"
 35084      5F696400 
 35085              	.LASF12:
 35086 147f 75696E74 		.ascii	"uint32_t\000"
 35086      33325F74 
 35086      00
 35087              	.LASF236:
 35088 1488 6175785F 		.ascii	"aux_float\000"
 35088      666C6F61 
 35088      7400
 35089              	.LASF402:
 35090 1492 494D555F 		.ascii	"IMU_connected\000"
 35090      636F6E6E 
 35090      65637465 
 35090      6400
 35091              	.LASF227:
 35092 14a0 4E554D5F 		.ascii	"NUM_MENU\000"
 35092      4D454E55 
 35092      00
 35093              	.LASF239:
 35094 14a9 6175785F 		.ascii	"aux_int32\000"
 35094      696E7433 
 35094      3200
 35095              	.LASF122:
 35096 14b3 62617564 		.ascii	"baud_rate\000"
 35096      5F726174 
 35096      6500
 35097              	.LASF332:
 35098 14bd 745F656E 		.ascii	"t_end\000"
 35098      6400
 35099              	.LASF195:
 35100 14c3 66617374 		.ascii	"fast_act_threshold\000"
 35100      5F616374 
 35100      5F746872 
 35100      6573686F 
 35100      6C6400
 35101              	.LASF222:
 35102 14d6 696E666F 		.ascii	"info_type\000"
 35102      5F747970 
 35102      6500
 35103              	.LASF50:
 35104 14e0 434D445F 		.ascii	"CMD_GET_IMU_READINGS\000"
 35104      4745545F 
 35104      494D555F 
 35104      52454144 
 35104      494E4753 
 35105              	.LASF400:
 35106 14f5 73645230 		.ascii	"sdR01File\000"
 35106      3146696C 
 35106      6500
 35107              	.LASF304:
 35108 14ff 4C435243 		.ascii	"LCRChecksum\000"
 35108      6865636B 
 35108      73756D00 
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 761


 35109              	.LASF341:
 35110 150b 6B5F696D 		.ascii	"k_imu\000"
 35110      7500
 35111              	.LASF3:
 35112 1511 73686F72 		.ascii	"short unsigned int\000"
 35112      7420756E 
 35112      7369676E 
 35112      65642069 
 35112      6E7400
 35113              	.LASF150:
 35114 1524 73745F65 		.ascii	"st_encoder\000"
 35114      6E636F64 
 35114      657200
 35115              	.LASF372:
 35116 152f 675F6164 		.ascii	"g_adc_meas\000"
 35116      635F6D65 
 35116      617300
 35117              	.LASF190:
 35118 153a 6D61785F 		.ascii	"max_residual_current\000"
 35118      72657369 
 35118      6475616C 
 35118      5F637572 
 35118      72656E74 
 35119              	.LASF281:
 35120 154f 454E435F 		.ascii	"ENC_L\000"
 35120      4C00
 35121              	.LASF197:
 35122 1555 73745F65 		.ascii	"st_eeprom\000"
 35122      6570726F 
 35122      6D00
 35123              	.LASF224:
 35124 155f 54595045 		.ascii	"TYPES\000"
 35124      5300
 35125              	.LASF367:
 35126 1565 675F7265 		.ascii	"g_ref\000"
 35126      6600
 35127              	.LASF18:
 35128 156b 696E7433 		.ascii	"int32\000"
 35128      3200
 35129              	.LASF392:
 35130 1571 4E554D5F 		.ascii	"NUM_OF_ANALOG_INPUTS\000"
 35130      4F465F41 
 35130      4E414C4F 
 35130      475F494E 
 35130      50555453 
 35131              	.LASF219:
 35132 1586 696E666F 		.ascii	"infoGet\000"
 35132      47657400 
 35133              	.LASF125:
 35134 158e 73745F6D 		.ascii	"st_motor\000"
 35134      6F746F72 
 35134      00
 35135              	.LASF407:
 35136 1597 6D617374 		.ascii	"master_mode\000"
 35136      65725F6D 
 35136      6F646500 
 35137              	.LASF90:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 762


 35138 15a3 46535F46 		.ascii	"FS_FILE\000"
 35138      494C4500 
 35139              	.LASF138:
 35140 15ab 706F735F 		.ascii	"pos_lim_flag\000"
 35140      6C696D5F 
 35140      666C6167 
 35140      00
 35141              	.LASF371:
 35142 15b8 675F6D65 		.ascii	"g_measOld\000"
 35142      61734F6C 
 35142      6400
 35143              	.LASF69:
 35144 15c2 434F4E54 		.ascii	"CONTROL_ANGLE\000"
 35144      524F4C5F 
 35144      414E474C 
 35144      4500
 35145              	.LASF324:
 35146 15d0 636D645F 		.ascii	"cmd_activate\000"
 35146      61637469 
 35146      76617465 
 35146      00
 35147              	.LASF5:
 35148 15dd 5F5F696E 		.ascii	"__int32_t\000"
 35148      7433325F 
 35148      7400
 35149              	.LASF249:
 35150 15e7 7370695F 		.ascii	"spi_delay_menu\000"
 35150      64656C61 
 35150      795F6D65 
 35150      6E7500
 35151              	.LASF109:
 35152 15f6 77697265 		.ascii	"wire_disp\000"
 35152      5F646973 
 35152      7000
 35153              	.LASF160:
 35154 1600 656D675F 		.ascii	"emg_max_value\000"
 35154      6D61785F 
 35154      76616C75 
 35154      6500
 35155              	.LASF254:
 35156 160e 43555354 		.ascii	"CUSTOM_PARAM_SET\000"
 35156      4F4D5F50 
 35156      4152414D 
 35156      5F534554 
 35156      00
 35157              	.LASF412:
 35158 161f 2E2E5C73 		.ascii	"..\\src\\command_processing.c\000"
 35158      72635C63 
 35158      6F6D6D61 
 35158      6E645F70 
 35158      726F6365 
 35159              	.LASF144:
 35160 163b 63757272 		.ascii	"current_limit\000"
 35160      656E745F 
 35160      6C696D69 
 35160      7400
 35161              	.LASF381:
ARM GAS  C:\Users\mgnocco\AppData\Local\Temp\ccPL80mc.s 			page 763


 35162 1649 745F6166 		.ascii	"t_after_data_send_to_PC\000"
 35162      7465725F 
 35162      64617461 
 35162      5F73656E 
 35162      645F746F 
 35163              	.LASF59:
 35164 1661 53485F69 		.ascii	"SH_input_mode\000"
 35164      6E707574 
 35164      5F6D6F64 
 35164      6500
 35165              	.LASF81:
 35166 166f 54595045 		.ascii	"TYPE_INT8\000"
 35166      5F494E54 
 35166      3800
 35167              	.LASF194:
 35168 1679 61637469 		.ascii	"activation_mode\000"
 35168      76617469 
 35168      6F6E5F6D 
 35168      6F646500 
 35169              	.LASF294:
 35170 1689 494D555F 		.ascii	"IMU_reading_info\000"
 35170      72656164 
 35170      696E675F 
 35170      696E666F 
 35170      00
 35171              	.LASF14:
 35172 169a 75696E74 		.ascii	"uint16\000"
 35172      313600
 35173              	.LASF179:
 35174 16a1 72657374 		.ascii	"rest_delay\000"
 35174      5F64656C 
 35174      617900
 35175              	.LASF235:
 35176 16ac 6175785F 		.ascii	"aux_str\000"
 35176      73747200 
 35177              	.LASF26:
 35178 16b4 434D445F 		.ascii	"CMD_PING\000"
 35178      50494E47 
 35178      00
 35179              	.LASF134:
 35180 16bd 6B5F645F 		.ascii	"k_d_c_dl\000"
 35180      635F646C 
 35180      00
 35181              	.LASF212:
 35182 16c6 64697265 		.ascii	"direction\000"
 35182      6374696F 
 35182      6E00
 35183              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
